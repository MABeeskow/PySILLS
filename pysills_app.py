#!/usr/bin/env python
# -*-coding: utf-8 -*-

#-----------------------------------------------------------------------------------------------------------------------

# Name:		pysills_app.py
# Author:	Maximilian A. Beeskow
# Version:	pre-release
# Date:		24.01.2023

#-----------------------------------------------------------------------------------------------------------------------

## MODULES
# external
import os, pathlib, sys, re, datetime, csv, string, math, webbrowser
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
from matplotlib.figure import Figure
import tkinter as tk
from tkinter import filedialog, ttk, font
# internal
from pypitzer.Pitzer.models import FluidPitzer
from modules.chemistry import PeriodicSystem
from modules.chemistry import PeriodicSystemOfElements as PSE
from modules.data import Data
from modules.data_reduction import DataExtraction as DE
from modules.data_reduction import IntensityQuantification as IQ
from modules.data_reduction import SensitivityQuantification as SQ
from modules.data_reduction import CompositionQuantification as CQ
from modules.essential_functions import Essentials as ES
from modules.essential_functions import EssentialsSRM as ESRM
from modules.fluid_inclusions import FluidInclusions
from modules.gui_elements import SimpleElements as SE
from modules.mineral_analysis import MineralAnalysis
from modules.spike_elimination import GrubbsTestSILLS

###############
### PySILLS ###
###############
class PySILLS(tk.Frame):
    #
    def __init__(self, parent, var_screen_width, var_screen_height):
        tk.Frame.__init__(self, parent)
        var_screen_width = var_screen_width
        var_screen_height = var_screen_height
        var_scaling_horizontal = round(1920/var_screen_width, 2)
        var_scaling_vertical = round(1080/var_screen_height, 2)
        if var_scaling_horizontal == 1.0 and var_scaling_vertical == 1.0:
            var_scaling = 1.3
        #
        ## Colors
        self.green_dark = "#282D28"
        self.green_medium = "#616D61"
        self.green_light = "#CFD3CF"
        green_dict = {"Dark": self.green_dark, "Medium": self.green_medium, "Light": self.green_light}
        self.red_dark = "#E76F51"
        self.red_medium = "#F1A896"
        self.red_light = "#FDF0ED"
        red_dict = {"Dark": self.red_dark, "Medium": self.red_medium, "Light": self.red_light}
        self.yellow_dark = "#E9C46A"
        self.yellow_medium = "#F3DFAE"
        self.yellow_light = "#FDFAF2"
        yellow_dict = {"Dark": self.yellow_dark, "Medium": self.yellow_medium, "Light": self.yellow_light}
        self.blue_dark = "#5B828E"
        self.blue_medium = "#8CA7AF"
        self.blue_light = "#CDD9DD"
        blue_dict = {"Dark": self.blue_dark, "Medium": self.blue_medium, "Light": self.blue_light}
        self.brown_dark = "#AC7E62"
        self.brown_medium = "#C4A491"
        self.brown_light = "#EEE5DF"
        brown_dict = {"Dark": self.brown_dark, "Medium": self.brown_medium, "Light": self.brown_light}
        self.slate_grey_dark = "#6E7894"
        self.slate_grey_medium = "#9AA1B4"
        self.slate_grey_light = "#E2E4EA"
        slategrey_dict = {"Dark": self.slate_grey_dark, "Medium": self.slate_grey_medium, "Light": self.slate_grey_light}
        #
        self.bg_colors = {"Super Dark": "#2C2C2C", "Very Dark": "#3C3C3C", "Dark": "#676767", "Medium": "#909090",
                          "Light": "#BABABA", "Very Light": "#E3E3E3", "Dark Font": "#292929", "Light Font": "#F7F7F7",
                          "White": "#FFFFFF", "Black": "#000000"}
        self.accent_color = "#E76F51"
        self.colors_ma = {"Very Dark": "#2F3E46", "Dark": "#354F52", "Medium": "#52796F", "Light": "#84A98C",
                          "Very Light": "#CAD2C5", "Dark Font": "#182320", "Light Font": "#F2F6F5"}
        self.colors_fi = {"Very Dark": "#722F1C", "Dark": "#A04228", "Medium": "#D36A4D", "Light": "#E4A694",
                          "Very Light": "#F6E1DB", "Dark Font": "#411B10", "Light Font": "#FCF4F2"}
        self.colors_mi = {"Very Dark": "#013a63", "Dark": "#014f86", "Medium": "#2c7da0", "Light": "#61a5c2",
                          "Very Light": "#a9d6e5", "Dark Font": "#0D242E", "Light Font": "#EEF7FA"}
        self.colors_intervals = {"BG": "#7F4F24", "SIG": "#414833", "MAT": "#414833", "INCL": "#F4D35E",
                                 "BG LB": "#D9A578", "SIG LB": "#A4AF8E", "MAT LB": "#A4AF8E", "INCL LB": "#F9E9AE"}
        #
        self.font_dark = "#000000"
        self.font_light = "#FFFFFF"
        self.sign_red = "#E84258"
        self.sign_yellow = "#FFDE00"
        self.sign_green = "#B0D8A4"
        sign_dict = {"Green": self.sign_green, "Red": self.sign_red, "Yellow": self.sign_yellow}

        style = ttk.Style()
        style.theme_use("default")
        style.configure(
            "Vertical.TScrollbar", bg=self.bg_colors["Very Light"], bordercolor=self.bg_colors["Very Dark"],
            arrowcolor=self.bg_colors["Dark"])
        style.configure(
            "Horizontal.TScrollbar", bg=self.bg_colors["Very Light"], bordercolor=self.bg_colors["Very Dark"],
            arrowcolor=self.bg_colors["Dark"])
        ## Constants
        self.list_std = []
        self.list_smpl = []
        self.chemistry_data = {
            "O": 15.999, "Na": 22.990, "Mg": 24.305, "Al": 26.982, "Si": 28.085, "P": 30.974, "K": 39.098, "Ca": 40.078,
            "Ti": 47.867, "Cr": 51.996, "Mn": 54.938, "Fe": 55.845, "Ga": 69.723, "Ge": 72.630, "Zr": 91.224,
            "Ba": 137.33, "B": 10.81, "Ag": 107.87, "As": 74.922, "Li": 6.94, "Rb": 85.468, "Cs": 132.91, "Sr": 87.62,
            "Sc": 44.956, "Y": 88.906, "Hf": 178.49, "V": 50.942, "Nb": 92.906, "Ta": 180.95, "Mo": 95.962, "W": 183.84,
            "Tc": 98.906, "Re": 186.21, "Ru": 101.07, "Os": 190.23, "Co": 58.933, "Rh": 102.91, "Ir": 192.22,
            "Ni": 58.693, "Pd": 106.42, "Pt": 195.08, "Cu": 63.546, "Au": 196.97, "Zn": 65.38, "Cd": 112.41,
            "Hg": 200.59, "In": 114.82, "Tl": 204.38, "C": 12.011, "Sn": 118.71, "Pb": 207.2, "N": 14.007, "Sb": 121.76,
            "Bi": 208.98, "S": 32.06, "Se": 78.96, "Te": 127.60, "Po": 209.98, "Cl": 35.45, "Br": 79.904, "I": 126.90,
            "At": 210.99, "La": 138.91, "Ce": 140.12, "Pr": 140.91, "Nd": 144.24, "Pm": 146.92, "Sm": 150.36,
            "Eu": 151.96, "Gd": 157.25, "Tb": 158.93, "Dy": 162.50, "Ho": 164.93, "Er": 167.26, "Tm": 168.93,
            "Yb": 173.05, "Lu": 174.97, "Ac": 227.03, "Th": 232.04, "Pa": 231.04, "U": 238.05, "Be": 9.0122,
            "F": 18.998, "H": 1.008}
        self.chemistry_data_sills = {
            "O": 16.000, "Na": 22.990, "Mg": 24.300, "Al": 26.980, "Si": 28.090, "P": 30.970, "K": 39.100, "Ca": 40.080,
            "Ti": 47.870, "Cr": 52.000, "Mn": 54.940, "Fe": 55.850, "Ga": 69.720, "Ge": 72.610, "Zr": 91.220,
            "Ba": 137.300}
        #
        # General Settings
        self.parent = parent
        #self.parent.tk.call("tk", "scaling", var_scaling)
        self.parent.title("PySILLS - LA-ICP-MS data reduction")
        var_geometry = ""
        var_window_width = int(440)
        var_geometry += str(var_window_width)
        var_geometry += "x"
        var_window_height = int(950)
        var_geometry += str(var_window_height)
        var_geometry += "+0+0"
        self.parent.geometry(var_geometry)
        self.parent.resizable(True, True)
        self.parent["bg"] = self.bg_colors["Very Light"]
        #
        self.list_alphabet = list(string.ascii_uppercase)
        #
        var_os = sys.platform

        # ['GTK3Agg', 'GTK3Cairo', 'MacOSX', 'nbAgg', 'Qt4Agg', 'Qt4Cairo', 'Qt5Agg', 'Qt5Cairo', 'TkAgg', 'TkCairo',
        # 'WebAgg', 'WX', 'WXAgg', 'WXCairo', 'agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template']

        if var_os == "linux":
            self.defaultFont = font.nametofont("TkDefaultFont")
            default_font = font.nametofont("TkDefaultFont")
            default_font.configure(family="Ubuntu", size=10, weight=font.BOLD)
            self.parent.option_add("*Font", default_font)
            mpl.use("TkAgg")
        elif var_os == "darwin":
            self.defaultFont = font.nametofont("TkDefaultFont")
            default_font = font.nametofont("TkDefaultFont")
            self.parent.option_add("*Font", default_font)
            mpl.use("MacOSX")
        else:
            self.defaultFont = font.nametofont("TkDefaultFont")
            #default_font = font.nametofont("TkDefaultFont")
            #self.parent.option_add("*Font", default_font)
            mpl.use("TkAgg")
        #
        ## Data Container
        self.container_elements = {}
        self.gui_elements = {}
        self.container_gui = {}
        self.window_created = {}
        menu_list = ["main", "SRM", "ma_setting", "ma_datareduction", "ma_dataexploration", "ma_datareduction_files",
                     "fi_setting", "fi_datareduction_isotopes", "fi_datareduction_files", "fi_datareduction",
                     "fi_dataexploration", "mi_setting", "mi_datareduction",
                     "mi_dataexploration", "plotting", "PSE", "salt_correction", "fi_method_setting",
                     "mi_method_setting", "se_method_setting", "dwell_times", "general_settings"]
        gui_categories = ["Label", "Button", "Option Menu", "Entry", "Frame", "Radiobutton", "Checkbox", "Listbox",
                          "Canvas", "Treeview"]
        for menu in menu_list:
            self.container_elements[menu] = {}
            self.container_elements[menu]["Label"] = []
            self.container_elements[menu]["Button"] = []
            self.container_elements[menu]["Option Menu"] = []
            self.container_elements[menu]["Entry"] = []
            self.container_elements[menu]["Frame"] = []
            self.container_elements[menu]["Radiobutton"] = []
            self.container_elements[menu]["Checkbox"] = []
            self.container_elements[menu]["Listbox"] = []
            self.container_elements[menu]["Canvas"] = []
            self.container_elements[menu]["Treeview"] = []
            self.container_gui[menu] = {}
            self.window_created[menu] = False
            #
            self.gui_elements[menu] = {}
            for gui_category in gui_categories:
                self.gui_elements[menu][gui_category] = {}
                self.gui_elements[menu][gui_category]["General"] = []
                self.gui_elements[menu][gui_category]["Specific"] = []
                self.container_gui[menu][gui_category] = {}
                self.container_gui[menu][gui_category]["General"] = []
                self.container_gui[menu][gui_category]["Specific"] = []
        #
        ## SUBWINDOWS
        self.gui_subwindows = {}
        main_categories = ["Mineral Analysis", "Fluid Inclusions", "Melt Inclusions"]
        sub_categories = ["Check SRM", "Check IS", "Check Intervals", "Check Files"]
        gui_elements = ["Frame", "Label", "Button", "Entry", "Checkbox", "Radiobutton", "Option Menu", "Listbox",
                        "Treeview"]
        priorities = ["Permanent", "Temporary"]
        #
        for main_category in main_categories:
            self.gui_subwindows[main_category] = {}
            for sub_category in sub_categories:
                self.gui_subwindows[main_category][sub_category] = {}
                for gui_element in gui_elements:
                    self.gui_subwindows[main_category][sub_category][gui_element] = {}
                    for priority in priorities:
                        self.gui_subwindows[main_category][sub_category][gui_element][priority] = []
        #
        ## Container (Variables)
        categories = ["main"]
        subcategories = ["Label", "Entry", "Radiobutton", "Checkbox"]
        #
        self.container_var = {}
        for category in categories:
            self.container_var[category] = {}
            for subcategory in subcategories:
                self.container_var[category][subcategory] = []
        self.container_var["SRM"] = {}
        self.container_var["SRM"]["default"] = [tk.StringVar(), tk.StringVar()]
        for variable in self.container_var["SRM"]["default"]:
            variable.set("Select SRM")
        self.container_var["isotopes"] = {}
        self.container_var["isotopes"]["default"] = tk.StringVar()
        self.container_var["acquisition times"] = {"STD": {}, "SMPL": {}}
        self.container_var["mineral"] = tk.StringVar()
        self.container_var["mineral"].set("Select Mineral")
        self.container_var["srm_window"] = {}
        self.container_var["srm_window"]["Option Menu"] = {"SRM": tk.StringVar(), "Mineral": tk.StringVar()}
        self.container_var["srm_window"]["Entry"] = {}
        self.container_var["ma_setting"] = {}
        self.container_var["ma_datareduction_isotopes"] = {}
        self.container_var["ma_datareduction_files"] = {}
        self.container_var["fi_setting"] = []
        self.container_var["mi_setting"] = []
        self.container_var["settings"] = {}
        self.container_var["fi_setting"] = {}
        self.container_var["fi_datareduction_isotopes"] = {}
        self.container_var["fi_datareduction_files"] = {}
        self.container_var["mi_setting"] = {}
        self.container_var["salt_correction"] = {}
        self.container_var["salt_correction"]["Checkboxes"] = {}
        self.container_var["salt_correction"]["Salinity"] = tk.StringVar()
        self.container_var["salt_correction"]["Salinity"].set("Set salinity")
        self.container_var["salt_correction"]["Concentration"] = {}
        self.container_var["dwell_times"] = {}
        self.container_var["dwell_times"]["Entry"] = {}
        self.container_var["dwell_times"]["Entry"]["Default"] = tk.StringVar()
        self.container_var["dwell_times"]["Entry"]["Default"].set("0.01")
        self.container_var["IS STD Default"] = tk.StringVar()
        self.container_var["IS STD Default"].set("0.0")
        self.container_var["IS SMPL Default"] = tk.StringVar()
        self.container_var["IS SMPL Default"].set("0.0")

        # Quantification Method
        self.container_var["Quantification Mineral"] = {"Method": tk.StringVar()}
        self.container_var["Quantification Mineral"]["Method"].set("Internal Standard")

        # 100 wt.% Oxides
        self.container_var["Oxides Quantification"] = {"Major": {}, "Minor": {}, "Ratios": {}, "Total Amounts": {}}
        list_major_oxides = [
            "SiO2", "TiO2", "Al2O3", "FeO", "Fe2O3", "MnO", "MnO2", "MgO", "CaO", "Na2O", "K2O", "P2O5", "SO3"]
        list_industrial_metal_oxides = [
            "CrO", "Cr2O3", "NiO", "Ni2O3", "ZnO", "CuO", "PbO", "PbO2", "SnO", "WO3", "MoO2", "MoO3"]
        list_precious_metals = ["AgO", "PdO", "PtO", "Au2O", "OsO", "RuO", "IrO", "RhO"]
        list_rareearth_metals = [
            "Ce2O3", "Nd2O3", "La2O3", "Y2O3", "Sc2O3", "Pr2O3", "Pr6O11", "Sm2O3", "Gd2O3", "Dy2O3", "Er2O3", "Yb2O3",
            "Eu2O3", "Ho2O3", "Tb2O3", "Tb4O7", "Lu2O3", "Tm2O3"]
        list_other_elements = [
            "Li2O", "Ga2O3", "B2O3", "BeO", "GeO2", "As2O3", "Sb2O3", "BaO", "SrO", "Cl2O", "Br2O", "I2O"]
        list_oxideratios = ["Fe-Ratio", "Mn-Ratio", "Pb-Ratio", "Pr-Ratio", "Tb-Ratio"]
        for oxide in list_major_oxides:
            self.container_var["Oxides Quantification"]["Major"][oxide] = tk.IntVar()
            self.container_var["Oxides Quantification"]["Major"][oxide].set(0)
        for oxide in list_industrial_metal_oxides:
            self.container_var["Oxides Quantification"]["Minor"][oxide] = tk.IntVar()
            self.container_var["Oxides Quantification"]["Minor"][oxide].set(0)
        for oxide in list_precious_metals:
            self.container_var["Oxides Quantification"]["Minor"][oxide] = tk.IntVar()
            self.container_var["Oxides Quantification"]["Minor"][oxide].set(0)
        for oxide in list_rareearth_metals:
            self.container_var["Oxides Quantification"]["Minor"][oxide] = tk.IntVar()
            self.container_var["Oxides Quantification"]["Minor"][oxide].set(0)
        for oxide in list_other_elements:
            self.container_var["Oxides Quantification"]["Minor"][oxide] = tk.IntVar()
            self.container_var["Oxides Quantification"]["Minor"][oxide].set(0)
        for ratio in list_oxideratios:
            self.container_var["Oxides Quantification"]["Ratios"][ratio] = tk.StringVar()
            self.container_var["Oxides Quantification"]["Ratios"][ratio].set("0.0")

        # Detailed Data Analysis
        self.container_var["Detailed Data Analysis"] = {
            "Filename STD": tk.StringVar(), "Filename SMPL": tk.StringVar(), "Datatype": tk.IntVar(),
            "Focus": tk.IntVar(), "Intensity Results": tk.StringVar(), "Sensitivity Results": tk.StringVar(),
            "Concentration Results": tk.StringVar()}
        self.container_var["Detailed Data Analysis"]["Filename STD"].set("Select Standard File")
        self.container_var["Detailed Data Analysis"]["Filename SMPL"].set("Select Sample File")
        self.container_var["Detailed Data Analysis"]["Datatype"].set(0)
        self.container_var["Detailed Data Analysis"]["Focus"].set(1)
        self.container_var["Detailed Data Analysis"]["Intensity Results"].set("Select Parameter")
        self.container_var["Detailed Data Analysis"]["Sensitivity Results"].set("Select Parameter")
        self.container_var["Detailed Data Analysis"]["Concentration Results"].set("Select Parameter")

        self.container_var["General Settings"] = {}                                 # General Settings
        self.container_var["General Settings"]["Language"] = tk.StringVar()
        self.container_var["General Settings"]["Language"].set("English")
        self.container_var["General Settings"]["Default Author"] = tk.StringVar()
        self.container_var["General Settings"]["Default Author"].set("J. Doe")
        self.container_var["General Settings"]["Default SRM"] = tk.StringVar()
        self.container_var["General Settings"]["Default SRM"].set("Select SRM")
        self.container_var["General Settings"]["Colormap"] = tk.StringVar()
        self.container_var["General Settings"]["Colormap"].set("turbo")
        self.container_var["General Settings"]["Line width"] = tk.StringVar()
        self.container_var["General Settings"]["Line width"].set("1.0")
        self.container_var["General Settings"]["File type"] = tk.StringVar()
        self.container_var["General Settings"]["File type"].set("*.csv")
        self.container_var["General Settings"]["Delimiter"] = tk.StringVar()
        self.container_var["General Settings"]["Delimiter"].set("semicolon")
        self.container_var["General Settings"]["Default IS MA"] = tk.StringVar()
        self.container_var["General Settings"]["Default IS MA"].set("Select IS")
        self.container_var["General Settings"]["Default IS FI"] = tk.StringVar()
        self.container_var["General Settings"]["Default IS FI"].set("Select IS")
        self.container_var["General Settings"]["Default IS MI"] = tk.StringVar()
        self.container_var["General Settings"]["Default IS MI"].set("Select IS")
        self.container_var["General Settings"]["Accuracy Intensity"] = tk.IntVar()
        self.container_var["General Settings"]["Accuracy Intensity"].set(6)
        self.container_var["General Settings"]["Accuracy Sensitivity"] = tk.IntVar()
        self.container_var["General Settings"]["Accuracy Sensitivity"].set(4)
        self.container_var["General Settings"]["Accuracy Concentration"] = tk.IntVar()
        self.container_var["General Settings"]["Accuracy Concentration"].set(4)
        self.container_var["General Settings"]["Sensitivity Drift"] = tk.IntVar()
        self.container_var["General Settings"]["Sensitivity Drift"].set(0)
        self.container_var["General Settings"]["LOD Selection"] = tk.IntVar()
        self.container_var["General Settings"]["LOD Selection"].set(0)
        self.container_var["General Settings"]["Desired Average"] = tk.IntVar()
        self.container_var["General Settings"]["Desired Average"].set(1)
        self.container_var["General Settings"]["Interval Processing"] = tk.IntVar()
        self.container_var["General Settings"]["Interval Processing"].set(1)
        self.container_var["General Settings"]["BG Offset Start"] = tk.IntVar()
        self.container_var["General Settings"]["BG Offset Start"].set(15)
        self.container_var["General Settings"]["BG Offset End"] = tk.IntVar()
        self.container_var["General Settings"]["BG Offset End"].set(15)
        self.container_var["General Settings"]["MAT Offset Start"] = tk.IntVar()
        self.container_var["General Settings"]["MAT Offset Start"].set(15)
        self.container_var["General Settings"]["MAT Offset End"] = tk.IntVar()
        self.container_var["General Settings"]["MAT Offset End"].set(15)
        self.container_var["General Settings"]["Calculation Accuracy"] = tk.IntVar()
        self.container_var["General Settings"]["Calculation Accuracy"].set(1)
        self.container_var["Plotting"] = {"MA": {"Quickview": {}, "Time-Signal": {}, "Time-Ratio": {}},
                                          "FI": {"Quickview": {}, "Time-Signal": {}, "Time-Ratio": {}},
                                          "MI": {"Quickview": {}, "Time-Signal": {}, "Time-Ratio": {}}}
        self.container_var["Subwindows"] = {"MA": {}, "FI": {}, "MI": {}}
        self.container_var["Spike Elimination Check"] = {}
        self.container_var["Spike Elimination Check"]["RB Value STD"] = tk.IntVar()
        self.container_var["Spike Elimination Check"]["RB Value STD"].set(1)
        self.container_var["Spike Elimination Check"]["RB Value SMPL"] = tk.IntVar()
        self.container_var["Spike Elimination Check"]["RB Value SMPL"].set(1)
        self.container_var["Geothermometry"] = {}
        self.container_var["Geothermometry"]["Titanium in Quartz"] = tk.IntVar()
        self.container_var["Geothermometry"]["Titanium in Quartz"].set(0)
        #
        self.container_var["Spike Elimination"] = {"STD": {"State": False}, "SMPL": {"State": False}}
        #
        self.container_var["Initialization"] = {"STD": False, "SMPL": False, "ISOTOPES": False}

        self.container_icpms = {"name": None, "skipheader": 1, "skipfooter": 0, "timestamp": 0}
        self.container_var["ICP-MS Info"] = {"name": tk.StringVar(), "skipheader": tk.IntVar(),
                                             "skipfooter": tk.IntVar(), "timestamp": tk.IntVar()}
        self.container_var["ICP-MS Info"]["name"].set("Unknown ICP-MS")
        self.container_var["ICP-MS Info"]["skipheader"].set(1)
        self.container_var["ICP-MS Info"]["skipfooter"].set(0)
        self.container_var["ICP-MS Info"]["timestamp"].set(0)

        self.container_var["Halter2002"] = {
            "Dimension a": tk.StringVar(), "Dimension b": tk.StringVar(), "Rho(Host)": tk.StringVar(),
            "Rho(Incl)": tk.StringVar(), "Laser Radius": tk.StringVar(), "Name": tk.StringVar()}
        self.container_var["Halter2002"]["Dimension a"].set("50.0")
        self.container_var["Halter2002"]["Dimension b"].set("50.0")
        self.container_var["Halter2002"]["Rho(Host)"].set("2700.0")
        self.container_var["Halter2002"]["Rho(Incl)"].set("1200.0")
        self.container_var["Halter2002"]["Laser Radius"].set("75.0")
        self.container_var["Halter2002"]["Name"].set("Select isotope")

        self.container_var["Borisova2021"] = {
            "Radius Inclusion": tk.StringVar(), "Radius Host": tk.StringVar(), "Rho(Host)": tk.StringVar(),
            "Rho(Incl)": tk.StringVar(), "Name": tk.StringVar()}
        self.container_var["Borisova2021"]["Radius Inclusion"].set("50.0")
        self.container_var["Borisova2021"]["Radius Host"].set("75.0")
        self.container_var["Borisova2021"]["Rho(Host)"].set("2700.0")
        self.container_var["Borisova2021"]["Rho(Incl)"].set("1200.0")
        self.container_var["Borisova2021"]["Name"].set("Select isotope")

        self.file_system_need_update = True
        self.pypitzer_performed = False

        self.bool_incl_is_massbalance = False
        self.bool_incl_is_chargebalance = False
        self.bool_incl_is_pypitzer = False
        self.bool_incl_is_custom = False
        self.bool_incl_is_external = False
        self.str_incl_is_custom_external = "Unknown"

        self.bool_matrixonlytracer = False
        self.bool_secondinternalstandard = False
        self.bool_halter2002 = False
        self.bool_borisova2021 = False

        self.container_flags = {"STD": {"Initialization": False}, "SMPL": {"Initialization": False}}

        self.list_std_changed = False
        self.list_smpl_changed = False
        self.list_std_previous = []
        self.list_smpl_previous = []

        self.container_spike_values = {}

        self.old_file = False
        self.without_pypitzer = False
        #
        self.counter_fast_track_std = 0
        self.counter_fast_track_smpl = 0
        #
        self.container_spikes = {}
        #
        self.autodetection_bg = False
        self.autodetection_sig = False
        #
        self.init_fi_massbalance = False
        self.init_fi_chargebalance = False
        #
        self.container_checkup = {"STD": [], "SMPL": [], "Counter STD": 0, "Counter SMPL": 0}
        #
        ## ALL
        self.container_intensity = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_intensity_mix = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_intensity_corrected = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_intensity_ratio = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_normalized_sensitivity = {"STD": {"RAW": {}, "SMOOTHED": {}},
                                                 "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_analytical_sensitivity = {"STD": {"RAW": {}, "SMOOTHED": {}},
                                                 "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_rsf = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_concentration = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_mixed_concentration = {"SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_concentration_ratio = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_lod = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_mixed_concentration_ratio = {"SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_mixing_ratio = {"SMPL": {"RAW": {}, "SMOOTHED": {}}}
        #
        self.container_signs = {"STD": {}, "SMPL": {}}
        self.rb_report = tk.IntVar()
        self.rb_report.set(0)

        ## MINERAL ANALYSIS
        self.container_var["settings"]["Time BG Start"] = tk.StringVar()
        self.container_var["settings"]["Time BG Start"].set("Set start time")
        self.container_var["settings"]["Time BG End"] = tk.StringVar()
        self.container_var["settings"]["Time BG End"].set("Set end time")
        self.container_var["settings"]["Time SIG Start"] = tk.StringVar()
        self.container_var["settings"]["Time SIG Start"].set("Set start time")
        self.container_var["settings"]["Time SIG End"] = tk.StringVar()
        self.container_var["settings"]["Time SIG End"].set("Set end time")
        self.container_var["settings"]["Author"] = tk.StringVar()
        self.container_var["settings"]["Source ID"] = tk.StringVar()
        self.container_var["settings"]["Source ID"].set("RUR01")
        self.container_var["settings"]["IS Concentration"] = tk.StringVar()
        self.container_var["settings"]["IS Concentration"].set("0.0")
        self.container_var["settings"]["SE Alpha"] = tk.StringVar()
        self.container_var["settings"]["SE Alpha"].set("0.05")
        #
        self.container_var["ma_setting"]["Data Type Plot"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Analyse Mode Plot"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Display RAW"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Display SMOOTHED"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Time-Signal Lines"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Time-Ratio Lines"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Checkboxes Isotope Diagram"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Calculation Interval"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Calculation Interval Visibility"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Default IS STD"] = tk.StringVar()
        self.container_var["ma_setting"]["Default IS STD"].set("Select IS")
        self.container_var["ma_setting"]["Default IS SMPL"] = tk.StringVar()
        self.container_var["ma_setting"]["Default IS SMPL"].set("Select IS")
        self.container_var["ma_setting"]["Time BG Start"] = tk.StringVar()
        self.container_var["ma_setting"]["Time BG Start"].set("Set start time")
        self.container_var["ma_setting"]["Time BG End"] = tk.StringVar()
        self.container_var["ma_setting"]["Time BG End"].set("Set end time")
        self.container_var["ma_setting"]["Time MAT Start"] = tk.StringVar()
        self.container_var["ma_setting"]["Time MAT Start"].set("Set start time")
        self.container_var["ma_setting"]["Time MAT End"] = tk.StringVar()
        self.container_var["ma_setting"]["Time MAT End"].set("Set end time")
        self.container_var["ma_setting"]["Author"] = tk.StringVar()
        self.container_var["ma_setting"]["Source ID"] = tk.StringVar()
        self.container_var["ma_setting"]["Source ID"].set("RUR01")
        self.container_var["ma_setting"]["Oxide"] = tk.StringVar()
        self.container_var["ma_setting"]["Oxide"].set("Select Oxide")
        self.container_var["ma_setting"]["Oxide Concentration"] = tk.StringVar()
        self.container_var["ma_setting"]["Oxide Concentration"].set("100")
        self.container_var["ma_setting"]["Element"] = tk.StringVar()
        self.container_var["ma_setting"]["Element"].set("Select Element")
        self.container_var["ma_setting"]["Element Concentration"] = tk.StringVar()
        self.container_var["ma_setting"]["Element Concentration"].set("1000000")
        self.container_var["ma_setting"]["SE Alpha"] = tk.StringVar()
        self.container_var["ma_setting"]["SE Alpha"].set("0.05")
        self.container_var["ma_setting"]["SE Threshold"] = tk.StringVar()
        self.container_var["ma_setting"]["SE Threshold"].set("1000")
        self.container_var["ma_setting"]["Host Setup Selection"] = tk.IntVar()
        self.container_var["ma_setting"]["Host Setup Selection"].set(1)
        self.container_var["ma_setting"]["Quantification Method"] = tk.IntVar()
        self.container_var["ma_setting"]["Quantification Method"].set(1)
        self.container_var["ma_setting"]["Time-Signal Checker"] = tk.IntVar()
        self.container_var["ma_setting"]["Time-Signal Checker"].set(1)
        #
        self.container_var["ma_datareduction_isotopes"]["File Type"] = tk.IntVar()  # e.g. Sample files
        self.container_var["ma_datareduction_isotopes"]["File Type"].set(1)
        self.container_var["ma_datareduction_isotopes"]["Data Type"] = tk.IntVar()  # e.g. RAW data
        self.container_var["ma_datareduction_isotopes"]["Data Type"].set(0)
        self.container_var["ma_datareduction_isotopes"]["Focus"] = tk.IntVar()  # e.g. Matrix
        self.container_var["ma_datareduction_isotopes"]["Focus"].set(0)
        self.container_var["ma_datareduction_isotopes"]["Result Category"] = tk.IntVar()  # e.g. Concentration
        self.container_var["ma_datareduction_isotopes"]["Result Category"].set(0)
        self.container_var["ma_datareduction_isotopes"]["Display Option"] = tk.IntVar()  # e.g. Table mode
        self.container_var["ma_datareduction_isotopes"]["Display Option"].set(0)
        #
        self.container_var["ma_datareduction_files"]["File Type"] = tk.IntVar()  # e.g. Sample files
        self.container_var["ma_datareduction_files"]["File Type"].set(1)
        self.container_var["ma_datareduction_files"]["Data Type"] = tk.IntVar()  # e.g. RAW data
        self.container_var["ma_datareduction_files"]["Data Type"].set(0)
        self.container_var["ma_datareduction_files"]["Focus"] = tk.IntVar()  # e.g. Matrix
        self.container_var["ma_datareduction_files"]["Focus"].set(0)
        self.container_var["ma_datareduction_files"]["Result Category"] = tk.IntVar()  # e.g. Concentration
        self.container_var["ma_datareduction_files"]["Result Category"].set(0)
        self.container_var["ma_datareduction_files"]["Display Option"] = tk.IntVar()  # e.g. Table mode
        self.container_var["ma_datareduction_files"]["Display Option"].set(0)
        #
        self.container_var["ma_datareduction"] = {}
        self.container_var["ma_dataexploration"] = {}
        self.container_var["ma_datareduction"]["Option ID"] = tk.StringVar()
        self.container_var["ma_datareduction"]["Option ID"].set("Select Assemblage")
        self.container_var["ma_datareduction"]["Option IS"] = tk.StringVar()
        self.container_var["ma_datareduction"]["Option Drift"] = tk.StringVar()
        #
        self.container_var["ma_dataexploration"]["Exploration Mode"] = tk.IntVar()
        self.container_var["ma_dataexploration"]["Exploration Mode"].set(0)
        self.container_var["ma_dataexploration"]["STD File"] = tk.StringVar()
        self.container_var["ma_dataexploration"]["STD File"].set("Select File")
        self.container_var["ma_dataexploration"]["SMPL File"] = tk.StringVar()
        self.container_var["ma_dataexploration"]["SMPL File"].set("Select File")
        self.container_var["ma_dataexploration"]["Isotope"] = tk.StringVar()
        self.container_var["ma_dataexploration"]["Isotope"].set("Select Isotope")
        #
        self.var_mode_ma = False
        self.var_init_ma_setting = False
        self.var_init_ma_datareduction = False
        self.var_init_ma_dataexploration = False
        #
        ## FLUID/MELT INCLUSION ANALYSIS
        keys = ["fi_setting", "mi_setting"]
        for key_setting in keys:
            self.container_var[key_setting]["Time BG Start"] = tk.StringVar()
            self.container_var[key_setting]["Time BG Start"].set("Set start time")
            self.container_var[key_setting]["Time BG End"] = tk.StringVar()
            self.container_var[key_setting]["Time BG End"].set("Set end time")
            self.container_var[key_setting]["Time MAT Start"] = tk.StringVar()
            self.container_var[key_setting]["Time MAT Start"].set("Set start time")
            self.container_var[key_setting]["Time MAT End"] = tk.StringVar()
            self.container_var[key_setting]["Time MAT End"].set("Set end time")
            self.container_var[key_setting]["Time INCL Start"] = tk.StringVar()
            self.container_var[key_setting]["Time INCL Start"].set("Set start time")
            self.container_var[key_setting]["Time INCL End"] = tk.StringVar()
            self.container_var[key_setting]["Time INCL End"].set("Set end time")
            self.container_var[key_setting]["Author"] = tk.StringVar()
            self.container_var[key_setting]["Source ID"] = tk.StringVar()
            self.container_var[key_setting]["Source ID"].set("RUR01")
            self.container_var[key_setting]["Method"] = tk.StringVar()
            self.container_var[key_setting]["Method"].set("Select Method")
            self.container_var[key_setting]["Host Setup Selection"] = tk.IntVar()
            self.container_var[key_setting]["Host Setup Selection"].set(1)
            self.container_var[key_setting]["Inclusion Setup Selection"] = tk.IntVar()
            self.container_var[key_setting]["Inclusion Setup Selection"].set(1)
            self.container_var[key_setting]["Inclusion Setup Option"] = tk.StringVar()
            self.container_var[key_setting]["Inclusion Setup Option"].set("Mass Balance")
            self.container_var[key_setting]["Last solid"] = tk.StringVar()
            self.container_var[key_setting]["Last solid"].set("Select last solid")

            if key_setting == "mi_setting":
                self.container_var[key_setting]["Inclusion Setup Option"].set("100 wt.% Oxides")
            else:
                self.container_var[key_setting]["Inclusion Setup Option"].set("Mass Balance")

            self.container_var[key_setting]["Quantification Method"] = tk.IntVar()
            self.container_var[key_setting]["Quantification Method"].set(1)
            self.container_var[key_setting]["Quantification Method Option"] = tk.StringVar()
            self.container_var[key_setting]["Quantification Method Option"].set("Matrix-only Tracer (SILLS)")
            self.container_var[key_setting]["IS MAT Default"] = tk.StringVar()
            self.container_var[key_setting]["IS MAT Default"].set("Select IS")
            self.container_var[key_setting]["IS MAT Default Concentration"] = tk.StringVar()
            self.container_var[key_setting]["IS MAT Default Concentration"].set("1000000")
            self.container_var[key_setting]["IS INCL Default"] = tk.StringVar()
            self.container_var[key_setting]["IS INCL Default"].set("Select IS")
            self.container_var[key_setting]["IS INCL Default Concentration"] = tk.StringVar()
            self.container_var[key_setting]["IS INCL Default Concentration"].set("1000000")
            self.container_var[key_setting]["Oxide"] = tk.StringVar()
            self.container_var[key_setting]["Oxide"].set("Select Oxide")
            self.container_var[key_setting]["Oxide Concentration"] = tk.StringVar()
            self.container_var[key_setting]["Oxide Concentration"].set("100")
            self.container_var[key_setting]["Element"] = tk.StringVar()
            self.container_var[key_setting]["Element"].set("Select Element")
            self.container_var[key_setting]["Element Concentration"] = tk.StringVar()
            self.container_var[key_setting]["Element Concentration"].set("1000000")
            self.container_var[key_setting]["Sulfide"] = tk.StringVar()
            self.container_var[key_setting]["Sulfide"].set("Select Sulfide")
            self.container_var[key_setting]["Sulfide Concentration"] = tk.StringVar()
            self.container_var[key_setting]["Sulfide Concentration"].set("1000000")
            self.container_var[key_setting]["Halide"] = tk.StringVar()
            self.container_var[key_setting]["Halide"].set("Select Halide")
            self.container_var[key_setting]["Halide Concentration"] = tk.StringVar()
            self.container_var[key_setting]["Halide Concentration"].set("100")
            self.container_var[key_setting]["Mineral Concentration"] = tk.StringVar()
            self.container_var[key_setting]["Mineral Concentration"].set("100")
            self.container_var[key_setting]["Host Only"] = tk.StringVar()
            self.container_var[key_setting]["Host Only"].set("Select Isotope")
            self.container_var[key_setting]["2nd Internal"] = tk.StringVar()
            self.container_var[key_setting]["2nd Internal"].set("Select Isotope")
            self.container_var[key_setting]["2nd Internal Concentration Default"] = tk.StringVar()
            self.container_var[key_setting]["2nd Internal Concentration Default"].set("0")
            self.container_var[key_setting]["Matrix-Only Concentration Default"] = tk.StringVar()
            self.container_var[key_setting]["Matrix-Only Concentration Default"].set("0")
            self.container_var[key_setting]["Matrix Amount Default"] = tk.StringVar()
            self.container_var[key_setting]["Matrix Amount Default"].set("100")
            self.container_var[key_setting]["IS Selection"] = tk.IntVar()
            self.container_var[key_setting]["IS Selection"].set(1)
            self.container_var[key_setting]["Spike Elimination Inclusion"] = tk.IntVar()
            self.container_var[key_setting]["Spike Elimination Inclusion"].set(2)
            self.container_var[key_setting]["SE Alpha"] = tk.StringVar()
            self.container_var[key_setting]["SE Alpha"].set("0.05")
            self.container_var[key_setting]["SE Threshold"] = tk.StringVar()
            self.container_var[key_setting]["SE Threshold"].set("1000")
            self.container_var[key_setting]["Inclusion Plugin"] = {
                "Intensity BG": tk.IntVar(), "Intensity MAT": tk.IntVar(), "Intensity MIX": tk.IntVar(),
                "Intensity INCL": tk.IntVar(), "Analytical Sensitivity": tk.IntVar(), "Concentration SRM": tk.IntVar()}
            self.container_var[key_setting]["Time-Signal Checker"] = tk.IntVar()
            self.container_var[key_setting]["Time-Signal Checker"].set(1)
            self.container_var[key_setting]["Inclusion Intensity Calculation"] = tk.IntVar()
            self.container_var[key_setting]["Inclusion Intensity Calculation"].set("0")
            self.container_var[key_setting]["Inclusion Concentration Calculation"] = tk.IntVar()
            self.container_var[key_setting]["Inclusion Concentration Calculation"].set("0")
            #
            for key, item in self.container_var[key_setting]["Inclusion Plugin"].items():
                item.set(1)
            #
            self.molar_masses_compounds = {}
            self.container_var[key_setting]["Salt Correction"] = {
                "Chlorides": {}, "Carbonates": {}, "Sulfates": {}, "Salinity": tk.StringVar(),
                "Default Salinity": tk.StringVar(), "Default Concentration": tk.StringVar(),
                "Default IS": tk.StringVar(), "Salinity SMPL": {}}
            self.container_var[key_setting]["Salt Correction"]["Salinity"].set("0.0")
            self.container_var[key_setting]["Salt Correction"]["Default Salinity"].set("Set Salinity (in %)")
            self.container_var[key_setting]["Salt Correction"]["Default Concentration"].set("0.0")
            self.container_var[key_setting]["Salt Correction"]["Default IS"].set("Select IS")
            salt_chlorides = ["NaCl", "KCl", "CaCl2", "MgCl2", "LiCl", "FeCl2"]
            salt_carbonates = ["Na2CO3", "K2CO3", "NaHCO3"]
            salt_sulfates = ["Na2SO4"]
            for salt in salt_chlorides:
                self.container_var[key_setting]["Salt Correction"]["Chlorides"][salt] = {
                    "State": tk.IntVar(), "Weight": tk.StringVar()}
                if salt == "NaCl":
                    self.container_var[key_setting]["Salt Correction"]["Chlorides"][salt]["State"].set(1)
                    self.container_var[key_setting]["Salt Correction"]["Chlorides"][salt]["Weight"].set("1.0")
                else:
                    self.container_var[key_setting]["Salt Correction"]["Chlorides"][salt]["State"].set(0)
                    self.container_var[key_setting]["Salt Correction"]["Chlorides"][salt]["Weight"].set("1.0")
            for salt in salt_carbonates:
                self.container_var[key_setting]["Salt Correction"]["Carbonates"][salt] = {
                    "State": tk.IntVar(), "Weight": tk.StringVar()}
                self.container_var[key_setting]["Salt Correction"]["Carbonates"][salt]["State"].set(0)
                self.container_var[key_setting]["Salt Correction"]["Carbonates"][salt]["Weight"].set("1.0")
            for salt in salt_sulfates:
                self.container_var[key_setting]["Salt Correction"]["Sulfates"][salt] = {
                    "State": tk.IntVar(), "Weight": tk.StringVar()}
                self.container_var[key_setting]["Salt Correction"]["Sulfates"][salt]["State"].set(0)
                self.container_var[key_setting]["Salt Correction"]["Sulfates"][salt]["Weight"].set("1.0")
            self.container_var[key_setting]["Data Type Plot"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Analyse Mode Plot"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Display RAW"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Display SMOOTHED"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Time-Signal Lines"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Time-Ratio Lines"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Checkboxes Isotope Diagram"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Calculation Interval"] = {"STD": {}, "SMPL": {}}
            self.container_var[key_setting]["Calculation Interval Visibility"] = {"STD": {}, "SMPL": {}}
        #
        self.container_var["fi_datareduction_isotopes"]["File Type"] = tk.IntVar()          # e.g. Sample files
        self.container_var["fi_datareduction_isotopes"]["File Type"].set(1)
        self.container_var["fi_datareduction_isotopes"]["Data Type"] = tk.IntVar()          # e.g. RAW data
        self.container_var["fi_datareduction_isotopes"]["Data Type"].set(0)
        self.container_var["fi_datareduction_isotopes"]["Focus"] = tk.IntVar()              # e.g. Inclusion
        self.container_var["fi_datareduction_isotopes"]["Focus"].set(1)
        self.container_var["fi_datareduction_isotopes"]["Result Category"] = tk.IntVar()    # e.g. Concentration
        self.container_var["fi_datareduction_isotopes"]["Result Category"].set(0)
        self.container_var["fi_datareduction_isotopes"]["Display Option"] = tk.IntVar()     # e.g. Table mode
        self.container_var["fi_datareduction_isotopes"]["Display Option"].set(0)
        self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"] = {
            "Left": {"FIG": None, "CANVAS": None, "AX": None}, "Right": {"FIG": None, "CANVAS": None, "AX": None}}
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"] = {
            "Sensitivity Drift": {"FIG": None, "CANVAS": None, "AX": None},
            "Sensitivity Drift Change": {"FIG": None, "CANVAS": None, "AX": None},
            "Histograms": {"FIG": None, "CANVAS": None, "AX": None},
            "Box Plots": {"FIG": None, "CANVAS": None, "AX": None}}
        #
        self.container_var["fi_datareduction_files"]["File Type"] = tk.IntVar()         # e.g. Sample files
        self.container_var["fi_datareduction_files"]["File Type"].set(1)
        self.container_var["fi_datareduction_files"]["Data Type"] = tk.IntVar()         # e.g. RAW data
        self.container_var["fi_datareduction_files"]["Data Type"].set(0)
        self.container_var["fi_datareduction_files"]["Focus"] = tk.IntVar()             # e.g. Inclusion
        self.container_var["fi_datareduction_files"]["Focus"].set(1)
        self.container_var["fi_datareduction_files"]["Result Category"] = tk.IntVar()   # e.g. Concentration
        self.container_var["fi_datareduction_files"]["Result Category"].set(0)
        self.container_var["fi_datareduction_files"]["Display Option"] = tk.IntVar()    # e.g. Table mode
        self.container_var["fi_datareduction_files"]["Display Option"].set(0)
        self.container_var["fi_datareduction_files"]["Isotope Left Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_files"]["Isotope Left Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_files"]["Isotope 1 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_files"]["Isotope 1 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_files"]["Isotope 2 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_files"]["Isotope 2 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_files"]["Sensitivity Diagrams"] = {
            "Left": {"FIG": None, "CANVAS": None, "AX": None}, "Right": {"FIG": None, "CANVAS": None, "AX": None}}
        #
        self.container_var["fi_datareduction"] = {}
        self.container_var["fi_dataexploration"] = {}
        self.var_mode_fi = False
        #
        self.container_var["mi_setting"]["Time BG Start"] = tk.StringVar()
        self.container_var["mi_setting"]["Time BG Start"].set("Set start time")
        self.container_var["mi_setting"]["Time BG End"] = tk.StringVar()
        self.container_var["mi_setting"]["Time BG End"].set("Set end time")
        self.container_var["mi_setting"]["Time MAT Start"] = tk.StringVar()
        self.container_var["mi_setting"]["Time MAT Start"].set("Set start time")
        self.container_var["mi_setting"]["Time MAT End"] = tk.StringVar()
        self.container_var["mi_setting"]["Time MAT End"].set("Set end time")
        self.container_var["mi_setting"]["Time INCL Start"] = tk.StringVar()
        self.container_var["mi_setting"]["Time INCL Start"].set("Set start time")
        self.container_var["mi_setting"]["Time INCL End"] = tk.StringVar()
        self.container_var["mi_setting"]["Time INCL End"].set("Set end time")
        self.container_var["mi_setting"]["Author"] = tk.StringVar()
        self.container_var["mi_setting"]["Source ID"] = tk.StringVar()
        self.container_var["mi_setting"]["Source ID"].set("RUR01")
        self.container_var["mi_datareduction"] = {}
        self.container_var["mi_dataexploration"] = {}
        self.container_var["ma_datareduction"]["Radiobutton"] = [
            tk.IntVar(), tk.IntVar(), tk.IntVar(), tk.IntVar(), tk.IntVar()]
        for var_rb in self.container_var["ma_datareduction"]["Radiobutton"]:
            var_rb.set(0)
        self.var_mode_mi = False
        #
        self.container_var["mineralchemistry"] = []
        self.container_var["plotting"] = {}
        self.container_var["IS"] = {}
        self.container_var["IS"]["Default STD"] = tk.StringVar()
        self.container_var["IS"]["Default STD"].set("Select IS")
        self.container_var["IS"]["Default SMPL"] = tk.StringVar()
        self.container_var["IS"]["Default SMPL"].set("Select IS")
        self.container_var["IS"]["Default SMPL Concentration"] = tk.StringVar()
        self.container_var["IS"]["Default SMPL Concentration"].set("1000000")
        self.container_var["ID"] = {}
        # self.container_var["ID"]["Default STD"] = tk.StringVar()
        # self.container_var["ID"]["Default STD"].set("A")
        self.container_var["ID"]["Default SMPL"] = tk.StringVar()
        self.container_var["ID"]["Default SMPL"].set("A")
        self.container_var["ID"]["Results Isotopes"] = tk.StringVar()
        self.container_var["ID"]["Results Isotopes"].set("A")
        self.container_var["ID"]["Results Files"] = tk.StringVar()
        self.container_var["ID"]["Results Files"].set("A")
        self.container_var["STD"] = {}
        self.container_var["SMPL"] = {}
        self.container_var["LASER"] = tk.StringVar()
        self.container_var["LASER"].set("Argon")
        self.container_var["charge"] = {}
        self.container_var["Gas Energy"] = tk.StringVar()
        self.container_var["Gas Energy"].set("15.760")
        self.container_var["Spike Elimination Method"] = tk.StringVar()
        self.container_var["Spike Elimination Method"].set("Grubbs-Test")
        self.list_se_methods = ["Grubbs-Test", "Grubbs-Test (SILLS)"]
        self.list_isotopes = []
        self.srm_actual = {}
        self.container_files = {}
        self.container_files["STD"] = {}
        self.container_files["SRM"] = {}
        self.container_files["SMPL"] = {}
        self.container_optionmenu = {}
        self.container_optionmenu["STD"] = {}
        self.container_optionmenu["SMPL"] = {}
        self.container_optionmenu["ISOTOPES"] = {}
        self.container_measurements = {}
        categories_01 = ["RAW", "SELECTED", "EDITED"]
        for category_01 in categories_01:
            self.container_measurements[category_01] = {}
        #
        self.mineral_chem = {}
        self.time_ratio_data = {}
        #
        self.last_rb_setup = {}
        #
        self.container_helper = {}
        self.container_helper["STD"] = {}
        self.container_helper["SMPL"] = {}
        self.container_helper["positions"] = {}
        self.container_helper["positions"]["BG STD"] = {}
        self.container_helper["positions"]["SIG STD"] = {}
        self.container_helper["positions"]["MAT STD"] = {}
        self.container_helper["positions"]["INCL STD"] = {}
        self.container_helper["positions"]["SPK STD"] = {}
        self.container_helper["positions"]["BG SMPL"] = {}
        self.container_helper["positions"]["SIG SMPL"] = {}
        self.container_helper["positions"]["MAT SMPL"] = {}
        self.container_helper["positions"]["INCL SMPL"] = {}
        self.container_helper["positions"]["SPK SMPL"] = {}
        self.container_helper["positions"]["BG"] = {}
        self.container_helper["positions"]["SIG"] = {}
        self.container_helper["positions"]["SPK"] = {}
        self.container_helper["positions"]["MAT"] = {}
        self.container_helper["positions"]["INCL"] = {}
        self.container_helper["indices"] = {}
        self.container_helper["limits BG"] = {}
        self.container_helper["limits SIG"] = {}
        self.container_helper["limits MAT"] = {}
        self.container_helper["limits INCL"] = {}
        self.container_helper["limits SPK"] = {}
        self.container_helper["limits BG Ratio"] = {}
        self.container_helper["limits SIG Ratio"] = {}
        self.container_helper["limits MAT Ratio"] = {}
        self.container_helper["limits INCL Ratio"] = {}
        self.container_helper["limits SPK Ratio"] = {}
        self.container_helper["Default BG"] = {}
        self.container_helper["Default BG"]["Times"] = [0, 0]
        self.container_helper["Default BG"]["Positions"] = [0, 0]
        self.container_helper["Default SIG"] = {}
        self.container_helper["Default SIG"]["Times"] = [0, 0]
        self.container_helper["Default SIG"]["Positions"] = [0, 0]
        #
        self.container_lists = {}
        #
        self.container_lists["Colors PySILLS"] = {}
        categories = ["Dark", "Medium", "Light", "Sign"]
        subcategories = ["Green", "Red", "Blue", "Yellow", "Brown", "Slate Grey"]
        for category in categories:
            self.container_lists["Colors PySILLS"][category] = {}
            for subcategory in subcategories:
                if category != "Sign":
                    if subcategory == "Green":
                        self.container_lists["Colors PySILLS"][category][subcategory] = green_dict[category]
                    elif subcategory == "Red":
                        self.container_lists["Colors PySILLS"][category][subcategory] = red_dict[category]
                    elif subcategory == "Blue":
                        self.container_lists["Colors PySILLS"][category][subcategory] = blue_dict[category]
                    elif subcategory == "Yellow":
                        self.container_lists["Colors PySILLS"][category][subcategory] = yellow_dict[category]
                    elif subcategory == "Brown":
                        self.container_lists["Colors PySILLS"][category][subcategory] = brown_dict[category]
                    elif subcategory == "Slate Grey":
                        self.container_lists["Colors PySILLS"][category][subcategory] = slategrey_dict[category]
                else:
                    if subcategory in ["Red", "Yellow", "Green"]:
                        self.container_lists["Colors PySILLS"][category][subcategory] = sign_dict[subcategory]
        #
        self.container_lists["Selected Cations"] = []
        self.container_lists["Selected Anions"] = []
        self.container_lists["Possible Cations"] = []
        self.container_lists["Possible Anions"] = []
        self.container_lists["Salt Chemistry"] = {}
        self.container_lists["Selected Salts"] = []
        self.container_lists["SRM Data"] = {}
        self.container_lists["SRM"] = []
        self.container_lists["SRM Library"] = []
        self.container_lists["ICPMS Library"] = []
        self.container_lists["SRM Files"] = {}
        self.container_lists["SRM Isotopes"] = {}
        self.container_lists["IS"] = []
        self.container_lists["ID"] = []
        self.container_lists["Possible IS"] = []
        self.container_lists["ID Files"] = {}
        self.container_lists["STD"] = {}
        self.container_lists["STD"]["Long"] = []
        self.container_lists["STD"]["Short"] = []
        self.container_lists["STD"]["Old"] = []
        self.container_lists["STD"]["SRM"] = {}
        self.container_lists["SMPL"] = {}
        self.container_lists["SMPL"]["Long"] = []
        self.container_lists["SMPL"]["Short"] = []
        self.container_lists["SMPL"]["Old"] = []
        self.container_lists["ISOTOPES"] = []
        self.container_lists["Measured Isotopes"] = {}
        self.container_lists["Measured Isotopes"]["All"] = []
        self.container_lists["Measured Elements"] = {}
        self.container_lists["Measured Elements"]["All"] = []
        self.container_lists["Acquisition Times Delta"] = {}
        self.container_lists["Analytical Sensitivity Regression"] = {}
        self.container_lists["Analytical Sensitivity Regression RAW"] = {}
        self.container_lists["Analytical Sensitivity Regression SMOOTHED"] = {}
        self.container_lists["Possible IS STD"] = []
        self.container_lists["Possible IS SMPL"] = []
        self.container_lists["Plugins FI"] = {} # FI = Fluid Inclusion
        self.container_lists["Plugins FI"]["Names"] = []
        self.container_lists["Plugins FI"]["Files"] = []
        self.container_lists["Plugins MI"] = {} # MI = Melt Inclusion
        self.container_lists["Plugins MI"]["Names"] = []
        self.container_lists["Plugins MI"]["Files"] = []
        self.container_lists["Plugins SE"] = {} # SE = Spike Elimination
        self.container_lists["Plugins SE"]["Names"] = []
        self.container_lists["Plugins SE"]["Files"] = []

        self.helper_checkbuttons = {"Isotopes": {}, "On": [], "Off": []}
        self.temp_checkbuttons_pypitzer = {}

        self.container_lists["Oxides"] = [
            "SiO2", "TiO2", "Al2O3", "Fe2O3", "Fe3O4", "FeO", "MgO", "MnO", "CaO", "BaO", "Na2O", "K2O", "P2O5",
            "Cr2O3", "ZrO2"]
        self.container_lists["Sulfides"] = [
            "FeS2", "ZnS" "PbS", "Ag2S", "Na2S", "MoS2", "CdS", "SeS2", "BaS", "BeS", "CoS", "Cu2S", "CuS", "FeS",
            "Fe2S3", "Hg2S", "HgS", "MnS", "NiS", "Tl2S", "SnS", "SnS2"]
        self.container_lists["Halides"] = [
            "NaCl", "KCl", "KI", "LiCl", "CuCl2", "AgCl", "CaCl2", "ClF", "CH3Br", "CHI3", "HCl", "HBr"]
        self.container_lists["Elements"] = []
        self.container_lists["Selected Oxides"] = {"All": [], "Conversion Factor": {"SiO2", 2.1392}}

        self.conversion_factors = {
            "Ag2O": 1.0741, "Al2O3": 1.8895, "As2O3": 1.3203, "Au2O": 1.0406, "B2O3": 3.2202, "BaO": 1.1165,
            "BeO": 2.7758, "CO2": 3.6644, "CaO": 1.3992, "CdO": 1.1423, "Ce2O3": 1.1713, "CeO2": 1.2284, "CoO": 1.2715,
            "Cr2O3": 1.4615, "Cs2O": 1.0602, "CuO": 1.2518, "Dy2O3": 1.1477, "Er2O3": 1.1435, "Eu2O3": 1.1579,
            "FeO": 1.2865, "Fe2O3": 1.4297, "Ga2O3": 1.3442, "Gd2O3": 1.1526, "GeO2": 1.4408, "HfO2": 1.1793,
            "HgO": 1.0798, "Ho2O3": 1.1455, "In2O3": 1.2091, "IrO": 1.0832, "K2O": 1.2046, "La2O3": 1.1728,
            "Li2O": 2.1527, "Lu2O3": 1.1371, "MgO": 1.6582, "MnO": 1.2912, "MnO2": 1.5825, "MoO3": 1.5003,
            "N2O5": 3.8551, "Na2O": 1.3480, "Nb2O5": 1.4305, "Nd2O3": 1.1664, "NiO": 1.2725, "OsO": 1.0841,
            "P2O5": 2.2916, "PbO": 1.0772, "PbO2": 1.1544, "PdO": 1.1504, "Pr2O3": 1.1703, "Pr6O11": 1.2082,
            "PtO": 1.0820, "Rb2O": 1.0936, "ReO": 1.0859, "RhO": 1.5555, "RuO": 1.1583, "SO3": 2.4972, "Sb2O5": 1.3284,
            "Sc2O3": 1.5338, "SeO3": 1.6079, "SiO2": 2.1392, "Sm2O3": 1.1596, "SnO2": 1.2696, "SrO": 1.1826,
            "Ta2O5": 1.2211, "Tb2O3": 1.1510, "Tb4O7": 1.1762, "TeO3": 1.3762, "ThO2": 1.1379, "TiO2": 1.6681,
            "Tl2O3": 1.1174, "Tm2O3": 1.1421, "UO2": 1.1344, "UO3": 1.2017, "U3O8": 1.1792, "V2O5": 1.7852,
            "WO3": 1.2610, "Y2O3": 1.2699, "Yb2O3": 1.1387, "ZnO": 1.2448, "ZrO2": 1.3508, "Cl2O": 1.2257,
            "Br2O": 1.1001, "I2O": 1.0630, "At2O": 1.0379}

        self.maximum_amounts = {}

        for oxide in self.conversion_factors.keys():
            key = re.search("(\D+)(\d*)(\D+)(\d*)", oxide)
            element_cation = key.group(1)

            if key.group(2) != "":
                index_cation = int(key.group(2))
            else:
                index_cation = 1

            if key.group(4) != "":
                index_anion = int(key.group(4))
            else:
                index_anion = 1

            molar_mass_cation = self.chemistry_data[element_cation]
            molar_mass_anion = 15.999
            molar_mass_oxide = index_cation*molar_mass_cation + index_anion*molar_mass_anion
            amount_cation_ppm = round((index_cation*molar_mass_cation)/molar_mass_oxide*10**6, 4)

            if element_cation in self.maximum_amounts:
                if amount_cation_ppm > self.maximum_amounts[element_cation]:
                    self.maximum_amounts[element_cation] = amount_cation_ppm
            else:
                self.maximum_amounts[element_cation] = amount_cation_ppm

        self.mineral_chemistry = {}
        list_minerals = ["Quartz", "Chloro-Apatite", "Fluor-Apatite", "Hydroxy-Apatite"]
        for mineral in list_minerals:
            self.mineral_chemistry[mineral] = {}
            if mineral == "Quartz": # SiO2
                mass_si = self.chemistry_data["Si"]
                mass_o = self.chemistry_data["O"]
                mass_total = 1*mass_si + 2*mass_o
                w_si = 1*mass_si/mass_total
                self.mineral_chemistry[mineral]["Si"] = round(w_si, 10)
            elif mineral == "Chloro-Apatite": # Ca5 (PO4)3 Cl
                mass_ca = self.chemistry_data["Ca"]
                mass_p = self.chemistry_data["P"]
                mass_cl = self.chemistry_data["Cl"]
                mass_o = self.chemistry_data["O"]
                mass_total = 5*mass_ca + 3*(1*mass_p + 4*mass_o) + 1*mass_cl
                w_ca = 5*mass_ca/mass_total
                w_p = 3*mass_p/mass_total
                w_cl = 1*mass_cl/mass_total
                self.mineral_chemistry[mineral]["Ca"] = round(w_ca, 10)
                self.mineral_chemistry[mineral]["P"] = round(w_p, 10)
                self.mineral_chemistry[mineral]["Cl"] = round(w_cl, 10)
            elif mineral == "Fluor-Apatite": # Ca5 (PO4)3 F
                mass_ca = self.chemistry_data["Ca"]
                mass_p = self.chemistry_data["P"]
                mass_f = self.chemistry_data["F"]
                mass_o = self.chemistry_data["O"]
                mass_total = 5*mass_ca + 3*(1*mass_p + 4*mass_o) + 1*mass_f
                w_ca = 5*mass_ca/mass_total
                w_p = 3*mass_p/mass_total
                self.mineral_chemistry[mineral]["Ca"] = round(w_ca, 10)
                self.mineral_chemistry[mineral]["P"] = round(w_p, 10)
            elif mineral == "Hydroxy-Apatite": # Ca5 (PO4)3 (OH)
                mass_ca = self.chemistry_data["Ca"]
                mass_p = self.chemistry_data["P"]
                mass_h = self.chemistry_data["H"]
                mass_o = self.chemistry_data["O"]
                mass_total = 5*mass_ca + 3*(1*mass_p + 4*mass_o) + 1*(mass_h + mass_o)
                w_ca = 5*mass_ca/mass_total
                w_p = 3*mass_p/mass_total
                self.mineral_chemistry[mineral]["Ca"] = round(w_ca, 10)
                self.mineral_chemistry[mineral]["P"] = round(w_p, 10)

        self.container_results = {}
        self.container_results["STD"] = {}
        self.container_results["STD"]["RAW"] = {}
        self.container_results["STD"]["SMOOTHED"] = {}
        self.container_results["SMPL"] = {}
        self.container_results["SMPL"]["RAW"] = {}
        self.container_results["SMPL"]["SMOOTHED"] = {}
        self.xi_std_time = {}
        self.xi_regr = None
        #
        self.demo_view = False
        #
        self.fast_track_std = False
        self.fast_track_smpl = False
        #
        self.file_loaded = False
        #
        self.spikes_isotopes = {}
        #
        self.diagrams_setup = {}
        categories_01 = ["STD", "SMPL"]
        for category_01 in categories_01:
            self.diagrams_setup[category_01] = {}
        #
        self.container_diagrams = {}
        self.container_listboxes = {}
        categories_01 = ["STD", "SMPL"]
        for category_01 in categories_01:
            self.container_diagrams[category_01] = {}
            self.container_listboxes[category_01] = {}
            self.spikes_isotopes[category_01] = {}
        #
        # Calculation Report
        self.container_report = {}
        categories_01 = ["Total STD", "Total SMPL"]
        categories_02 = ["intensity bg", "intensity sig corr", "intensity ratio", "sensitivity", "concentration", "RSF",
                         "LOD"]
        for category_01 in categories_01:
            self.container_report[category_01] = {}
            self.container_report[category_01]["Mean"] = {}
            self.container_report[category_01]["Error"] = {}
            for category_02 in categories_02:
                self.container_report[category_01]["Mean"][category_02] = {}
                self.container_report[category_01]["Error"][category_02] = {}
                self.container_report[category_01]["Mean"][category_02]["filename"] = category_01
                self.container_report[category_01]["Error"][category_02]["filename"] = category_01
        #
        self.list_srm = np.array(
            [["NIST 606"], ["NIST 610"], ["NIST 610 (GeoReM)"], ["NIST 610 (Spandler)"], ["NIST 611"],
             ["NIST 611 (GeoReM)"], ["NIST 612"], ["NIST 612 (GeoReM)"], ["NIST 613"], ["NIST 613 (GeoReM)"],
             ["NIST 614"], ["NIST 614 (GeoReM)"], ["NIST 615"], ["NIST 615 (GeoReM)"], ["NIST 616"],
             ["NIST 616 (GeoReM)"], ["NIST 617"], ["NIST 617 (GeoReM)"], ["USGS BCR-2G (GeoReM)"],
             ["USGS GSD-1G (GeoReM)"], ["USGS GSE-1G (GeoReM)"], ["B6"], ["Durango Apatite"], ["Scapolite 17"],
             ["BAM-376"], ["BCR-2G"], ["BL-Q"], ["Br-Glass"], ["GSD-1G (GeoReM)"], ["GSE-1G (GeoReM)"], ["GSE-2G"],
             ["HAL-O"], ["K-Br"], ["MACS-3"], ["Po 724"], ["STDGL-2B2"]])[:, 0]
        self.path_pysills = os.getcwd()
        helper_srm_library = []
        helper_srm_library = os.listdir(self.path_pysills+str("/lib/srm/"))
        helper_srm_library.remove("__init__.py")
        try:
            helper_srm_library.remove(".DS_Store")
        except:
            pass
        helper_srm_library.sort()
        for var_srm in helper_srm_library:
            var_srm_new = var_srm.replace("_", " ")
            var_srm_new = var_srm_new.replace(".csv", "")
            if "GeoReM" in var_srm_new:
                var_srm_new = var_srm_new.replace("GeoReM", "(GeoReM)")
            if "Spandler" in var_srm_new:
                var_srm_new = var_srm_new.replace("Spandler", "(Spandler)")
            if "BAM 376" in var_srm_new:
                var_srm_new = var_srm_new.replace("BAM 376", "BAM-376")
            if "BCR 2G" in var_srm_new:
                var_srm_new = var_srm_new.replace("BCR 2G", "BCR-2G")
            if "BL Q" in var_srm_new:
                var_srm_new = var_srm_new.replace("BL Q", "BL-Q")
            if "Br Glass" in var_srm_new:
                var_srm_new = var_srm_new.replace("Br Glass", "Br-Glass")
            if " 1G" in var_srm_new:
                var_srm_new = var_srm_new.replace(" 1G", "-1G")
            if " 2G" in var_srm_new:
                var_srm_new = var_srm_new.replace(" 2G", "-2G")
            if " 2B2" in var_srm_new:
                var_srm_new = var_srm_new.replace(" 2B2", "-2B2")
            if "HAL O" in var_srm_new:
                var_srm_new = var_srm_new.replace("HAL O", "HAL-O")
            if "K Br" in var_srm_new:
                var_srm_new = var_srm_new.replace("K Br", "K-Br")
            if "MACS 3" in var_srm_new:
                var_srm_new = var_srm_new.replace("MACS 3", "MACS-3")
            if "BCR2G" in var_srm_new:
                var_srm_new = var_srm_new.replace("BCR2G", "BCR-2G")
            if "GSD1G" in var_srm_new:
                var_srm_new = var_srm_new.replace("GSD1G", "GSD-1G")
            if "GSE1G" in var_srm_new:
                var_srm_new = var_srm_new.replace("GSE1G", "GSE-1G")

            self.container_lists["SRM Library"].append(var_srm_new)

        helper_icpms_library = []
        helper_icpms_library = os.listdir(self.path_pysills + str("/lib/icpms/"))
        helper_icpms_library.remove("__init__.py")
        try:
            helper_icpms_library.remove(".DS_Store")
        except:
            pass
        helper_icpms_library.sort()
        for var_icpms in helper_icpms_library:
            var_icpms_new = var_icpms.replace("_", " ")
            var_icpms_new = var_icpms_new.replace(".csv", "")
            self.container_lists["ICPMS Library"].append(var_icpms_new)

        self.srm_window_checker = tk.IntVar()
        self.srm_window_checker.set(0)
        self.previous_std_list = []
        self.list_pse = PSE().get_element_names()
        self.ionization_energies = {}
        self.ionization_energies["First"] = {}
        self.ionization_energies["Second"] = {}
        for element in self.list_pse:
            data_element = PeriodicSystem(name=element).get_data()
            if len(data_element) == 13:
                self.ionization_energies["First"][element] = data_element[-2]
                self.ionization_energies["Second"][element] = data_element[-1]
            elif len(data_element) == 12:
                self.ionization_energies["First"][element] = data_element[-1]
                self.ionization_energies["Second"][element] = 0.0
        #
        self.container_settings = {}
        categories_01 = ["MA", "FI", "MI"] # MA=Mineral Analysis, FI=Fluid Inclusions, MI=Melt Inclusions
        categories_02 = ["Start BG", "End BG", "Start SIG", "End SIG", "Start MAT", "End MAT", "Start INCL", "End INCL"]
        categories_03 = ["Deviation", "Threshold", "Author", "Source ID"]
        for category_01 in categories_01:
            self.container_settings[category_01] = {}
            for category_02 in categories_02:
                if category_01 == "MA" and category_02 in ["Start MAT", "End MAT", "Start INCL", "End INCL"]:
                    pass
                elif category_01 in ["FI", "MI"] and category_02 in ["Start SIG", "End SIG"]:
                    pass
                else:
                    self.container_settings[category_01][category_02] = tk.StringVar()
            for category_03 in categories_03:
                self.container_settings[category_01][category_03] = tk.StringVar()
        #
        self.mineral_list = ["Quartz", "Calcite", "Fluorite", "Apatite-Cl", "Apatite-F", "Apatite-OH", "Forsterite",
                             "Fayalite", "Tephroite", "Albite", "Anorthite", "Orthoclase", "Microcline", "Zircon",
                             "Enargite", "Pyrite", "Chalcopyrite", "Bornite", "Arsenopyrite", "Sphalerite", "Galena",
                             "Molybdenite", "Hematite", "Magnetite", "Chromite", "Gahnite", "Meionite", "Marialite",
                             "Strontianite", "Titanite", "Aegirine", "Diopside", "Hedenbergite", "Ferrosilite",
                             "Enstatite", "Monazite-La", "Monazite-Ce", "Monazite-Pr", "Monazite-Nd", "Monazite-Sm",
                             "Monazite-Eu", "Monazite-Gd", "Monazite-Th", "Barite", "Ilvaite"]
        self.mineral_list.sort()
        self.container_lists["Minerals"] = self.mineral_list
        #
        self.calculate_mineral_chemistry()
        self.create_srm_data_list()
        #
        window_width = var_window_width
        window_heigth = var_window_height
        row_min = 25
        row_min = int(var_window_height/40)
        n_rows = int(window_heigth/row_min)
        column_min = 20
        column_min = int(var_window_width/90)
        n_columns = int(window_width/column_min)
        row_min = 25
        self.n_rows = 38
        window_heigth = int(row_min*self.n_rows)
        column_min = 20
        self.n_columns = 22
        window_width = int(column_min*self.n_columns)
        var_geometry = str(window_width)+"x"+str(window_heigth)+"+0+0"
        self.parent.geometry(var_geometry)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.parent, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.parent, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.parent.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.parent.grid_columnconfigure(i, minsize=column_min)

        ## LANGUAGE SUPPORT
        self.language_dict = {
            "Select Mode": {
                "English": "Select Mode", "German": "Modusauswahl", "Chinese": "选择模式", "Greek": "Επιλέξτε Λειτουργία",
                "Russian": "Выбор режима", "Spanish": "Seleccionar modo", "Italian": "Selezionare la modalità"},
            "Standard Files": {"English": "Standard Files", "German": "Standardmessungen", "Chinese": "标准文件"},
            "Sample Files": {"English": "Sample Files", "German": "Probenmessungen", "Chinese": "样本文件"},
            "ICP-MS File Setup": {"English": "ICP-MS File Setup", "German": "ICP-MS Dateikonfiguration"},
            "Select ICP-MS": {"English": "Select ICP-MS", "German": "ICP-MS Auswahl"},
            "Define ICP-MS": {"English": "Define ICP-MS", "German": "ICP-MS einstellen"},
            "Add": {"English": "Add", "German": "Hinzufügen"},
            "Copy": {"English": "Copy", "German": "Kopieren"},
            "Delete": {"English": "Delete", "German": "Löschen"},
            "New Project": {"English": "New Project", "German": "Neues Projekt"},
            "Load Project": {"English": "Open Project", "German": "Projekt laden"},
            "Save Project": {"English": "Save Project", "German": "Projekt speichern"},
            "General Settings": {"English": "Main Settings", "German": "Haupteinstellungen"},
            "About": {"English": "About PySILLS", "German": "Über PySILLS"},
            "Quit": {"English": "Quit", "German": "Beenden"},
            "Setup": {"English": "Setup", "German": "Einstellungen"},
            "Select ICP-MS": {"English": "Select ICP-MS", "German": "ICP-MS Auswahl"},
            "Mineral Analysis": {"English": "Mineral Analysis", "German": "Minerale"},
            "Settings": {"English": "Settings", "German": "Einstellungen"},
            "Results": {"English": "Results", "German": "Ergebnisse"},
            "Extras": {"English": "Extras", "German": "Extras"},
            "Fluid Inclusions": {"English": "Fluid Inclusions", "German": "Flüssigkeitseinschlüsse"},
            "Melt Inclusions": {"English": "Melt Inclusions", "German": "Schmelzeinschlüsse"},
            "Development": {"English": "Development", "German": "Entwicklung"},
            "Additional Information": {"English": "Additional Information", "German": "Weitere Informationen"},
            "Citation": {"English": "Citing PySILLS", "German": "PySILLS zitieren"},
            "References": {"English": "References", "German": "Quellen"},
            "Project Information": {"English": "Project Information", "German": "Projektinformationen"},
            "Calculation Accuracy": {"English": "Calculation Accuracy", "German": "Numerische Genauigkeit"},
            "Sensitivity Drift": {"English": "Sensitivity Drift", "German": "Sensitivitätsverschiebung"},
            "Limit of Detection": {"English": "Limit of Detection", "German": "Nachweisgrenze"},
            "Offset Automatic Interval Detection": {
                "English": "Offset Automatic Interval Detection",
                "German": "Versatz der automatischen Intervalerkennung"},
            "Colormap": {"English": "Colormap", "German": "Farbpalette"},
            "Report File": {"English": "Report File", "German": "Ausgabedatei"},
            "Plotting Setup": {"English": "Plotting Setup", "German": "Diagrammeinstellungen"},
            "Language Selection": {"English": "Language Selection", "German": "Sprachauswahl"},
            "Data Processing": {"English": "Data Processing", "German": "Datenverarbeitung"},
            "MINERAL ANALYSIS - Setup": {
                "English": "MINERAL ANALYSIS - Setup", "German": "MINERALANALYSE - Einstellungen"},
            "Author": {"English": "Author", "German": "Autor"},
            "Source ID": {"English": "Source ID", "German": "Proben ID"},
            "Standard Reference Material (SRM)": {
                "English": "Standard Reference Material (SRM)", "German": "Standard/Referenzmaterial (SRM)"},
            "Isotopes": {"English": "Isotopes", "German": "Isotope"},
            "Sample Settings": {"English": "Sample Settings", "German": "Probeneinstellungen"},
            "Matrix Settings": {"English": "Matrix Settings", "German": "Matrixeinstellungen"},
            "Internal Standard Setup": {
                "English": "Internal Standard Setup", "German": "Einstellungen interner Standard"},
            "Oxide Calculation": {"English": "Oxide Calculation", "German": "Oxidberechnung"},
            "Element Calculation": {"English": "Element Calculation", "German": "Elementberechnung"},
            "Experimental Data": {"English": "Experimental Data", "German": "Experimentelle Daten"},
            "Custom Data": {"English": "Custom Data", "German": "Manuelle Dateneingabe"},
            "Oxide Setup": {"English": "Oxide Setup", "German": "Oxideinstellungen"},
            "Composition Setup": {"English": "Composition Setup", "German": "Zusammensetzung\n definieren"},
            "Mineral Calculation": {"English": "Mineral Calculation", "German": "Mineralberechnung"},
            "File-specific Setup": {"English": "File-specific Setup", "German": "Datei-spezifische\n Einstellungen"}}

        ################################################################################################################
        #
        ## FRAMES
        #
        frame_01 = tk.Frame(self.parent, bg=self.bg_colors["Super Dark"], borderwidth=0, highlightthickness=0)
        frame_01.grid(row=0, column=0, rowspan=42, columnspan=22, sticky="nesw")
        frame_02 = tk.Frame(self.parent, bg=self.red_dark, borderwidth=0, highlightthickness=0)
        frame_02.grid(row=2, column=0, rowspan=1, columnspan=22, sticky="nesw")
        #
        ## USER SETTINGS
        try:
            file_usersettings = open("user_settings.txt", "r")
            for index, file_data in enumerate(file_usersettings):
                file_data_splitted = file_data.split(";")
                try:
                    self.container_var["General Settings"][file_data_splitted[0]].set(file_data_splitted[1])
                except:
                    pass
        except:
            print("There is no user_settings file!")

        ## GUI
        self.pysills_mode = None
        self.demo_mode = True

        self.place_main_window_static_elements()

        ## Initialization
        self.quick_plot_figure_std = Figure(
            figsize=(10, 5), dpi=150, tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.quick_plot_figure_smpl = Figure(
            figsize=(10, 5), dpi=150, tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.lb_std.bind("<Double-1>", lambda event, var_filetype="STD": self.quick_plot_file(var_filetype, event))
        self.lb_smpl.bind("<Double-1>", lambda event, var_filetype="SMPL": self.quick_plot_file(var_filetype, event))
        self.select_experiment(var_rb=self.var_rb_mode)


    def place_main_window_static_elements(self):
        # Initial constants
        start_row = 3
        start_column = 0
        n_rows_header = 2
        common_n_rows = 1
        common_n_columns = 10
        n_columns_button = 3
        font_color_dark = self.bg_colors["Dark Font"]
        font_color_light = self.bg_colors["Light Font"]
        background_color_header = self.bg_colors["Super Dark"]
        background_color_elements = self.bg_colors["Light"]
        background_color_listbox = self.bg_colors["Very Light"]
        accent_color = self.accent_color
        font_header = "sans 14 bold"
        font_elements = "sans 10 bold"
        self.var_language = self.container_var["General Settings"]["Language"].get()

        ## Logo
        try:
            self.path_pysills = os.getcwd()
            pysills_logo = tk.PhotoImage(file=self.path_pysills + str("/documentation/images/PySILLS_Logo.png"))
            pysills_logo = pysills_logo.subsample(1, 1)
            img = tk.Label(self.parent, image=pysills_logo, bg=background_color_header)
            img.image = pysills_logo
            img.grid(
                row=start_row - 3, column=start_column, rowspan=n_rows_header, columnspan=common_n_columns + 10,
                sticky="nesw")

            ## Icon
            pysills_icon = tk.PhotoImage(file=self.path_pysills + str("/documentation/images/PySILLS_Icon.png"))
            self.parent.iconphoto(False, pysills_icon)
        except:
            pass

        # LABELS
        var_lbl_01 = self.language_dict["Select Mode"][self.var_language]
        var_lbl_02 = self.language_dict["Standard Files"][self.var_language]
        var_lbl_03 = self.language_dict["Sample Files"][self.var_language]
        var_lbl_04 = self.language_dict["ICP-MS File Setup"][self.var_language]
        var_lbl_04b = self.language_dict["Select ICP-MS"][self.var_language]
        var_lbl_04c = self.language_dict["Define ICP-MS"][self.var_language]

        lbl_01 = SE(
            parent=self.parent, row_id=start_row, column_id=start_column, n_rows=n_rows_header,
            n_columns=common_n_columns, fg=font_color_light, bg=background_color_header).create_simple_label(
            text="PySILLS", relief=tk.FLAT, fontsize=font_header)
        lbl_01 = SE(
            parent=self.parent, row_id=start_row, column_id=start_column + 11, n_rows=n_rows_header,
            n_columns=common_n_columns, fg=font_color_light, bg=background_color_header).create_simple_label(
            text=var_lbl_01, relief=tk.FLAT, fontsize=font_header)
        lbl_02 = SE(
            parent=self.parent, row_id=start_row + 18, column_id=start_column, n_rows=n_rows_header,
            n_columns=common_n_columns, fg=font_color_light, bg=background_color_header).create_simple_label(
            text=var_lbl_02, relief=tk.FLAT, fontsize=font_header)
        lbl_03 = SE(
            parent=self.parent, row_id=start_row + 18, column_id=start_column + 11, n_rows=n_rows_header,
            n_columns=common_n_columns, fg=font_color_light, bg=background_color_header).create_simple_label(
            text=var_lbl_03, relief=tk.FLAT, fontsize=font_header)
        lbl_04 = SE(
            parent=self.parent, row_id=start_row + 14, column_id=start_column, n_rows=n_rows_header,
            n_columns=common_n_columns + 11, fg=font_color_light, bg=background_color_header).create_simple_label(
            text=var_lbl_04, relief=tk.FLAT, fontsize=font_header)
        lbl_04b = SE(
            parent=self.parent, row_id=start_row + 16, column_id=start_column, n_rows=common_n_rows,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_label(
            text=var_lbl_04b, relief=tk.FLAT, fontsize=font_elements)
        lbl_04c = SE(
            parent=self.parent, row_id=start_row + 16, column_id=start_column + common_n_columns + 1, n_rows=common_n_rows,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_label(
            text=var_lbl_04c, relief=tk.FLAT, fontsize=font_elements)
        now = datetime.datetime.now()
        now = now.strftime("%Y/%m/%d-%H%M")
        lbl_version = SE(
            parent=self.parent, row_id=self.n_rows - 1, column_id=start_column, n_rows=common_n_rows,
            n_columns=common_n_columns + 11, fg=font_color_light, bg=background_color_header).create_simple_label(
            text="Version: pre-release " + now, relief=tk.FLAT, fontsize="sans 8")
        lbl_dev = SE(
            parent=self.parent, row_id=start_row - 1, column_id=start_column, n_rows=common_n_rows,
            n_columns=common_n_columns + 11, fg=font_color_light, bg=accent_color).create_simple_label(
            text="developed by: Maximilian Alexander Beeskow", relief=tk.FLAT, fontsize="sans 8", sticky="news")

        # LISTBOXES
        self.lb_std = SE(
            parent=self.parent, row_id=start_row + 22, column_id=start_column, n_rows=self.n_rows - 26,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_listbox).create_simple_listbox()
        self.lb_smpl = SE(
            parent=self.parent, row_id=start_row + 22, column_id=start_column + 11, n_rows=self.n_rows - 26,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_listbox).create_simple_listbox()

        # RADIOBUTTONS
        if self.var_language == "English":
            list_mode = ["Mineral Analysis", "Fluid Inclusions", "Melt Inclusions (not ready)",
                         "Output Analysis (not ready)"]
        elif self.var_language == "German":
            list_mode = ["Minerale", "Flüssigkeitseinschlüsse", "Schmelzeinschlüsse",
                         "Output Analysis (not ready)"]

        self.var_rb_mode = tk.IntVar()
        for index, mode in enumerate(list_mode):
            rb_mode = SE(
                parent=self.parent, row_id=start_row + 2 + index, column_id=start_column + 11, n_rows=common_n_rows,
                n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_radiobutton(
                var_rb=self.var_rb_mode, value_rb=index, color_bg=background_color_elements, fg=font_color_dark,
                text=mode, sticky="NESW", relief=tk.FLAT, font=font_elements, command=lambda var_rb=self.var_rb_mode:
                self.select_experiment(var_rb))
            if mode in ["Output Analysis (not ready)"]:
                rb_mode.configure(state="disabled")

            self.gui_elements["main"]["Radiobutton"]["General"].append(rb_mode)

        # BUTTONS
        var_btn_01 = self.language_dict["Add"][self.var_language]
        var_btn_02 = self.language_dict["Copy"][self.var_language]
        var_btn_03 = self.language_dict["Delete"][self.var_language]
        var_btn_04 = self.language_dict["New Project"][self.var_language]
        var_btn_05 = self.language_dict["Load Project"][self.var_language]
        var_btn_06 = self.language_dict["Save Project"][self.var_language]
        var_btn_07 = self.language_dict["General Settings"][self.var_language]
        var_btn_08 = self.language_dict["About"][self.var_language]
        var_btn_09 = self.language_dict["Quit"][self.var_language]
        var_btn_10 = self.language_dict["Setup"][self.var_language]

        SE(
            parent=self.parent, row_id=start_row + 20, column_id=start_column, n_rows=common_n_rows,
            n_columns=2*n_columns_button, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_01, bg_active=accent_color, fg_active=font_color_dark, command=lambda datatype="STD":
            self.open_csv(datatype))
        SE(
            parent=self.parent, row_id=start_row + 21, column_id=start_column, n_rows=common_n_rows,
            n_columns=2*n_columns_button, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_02, bg_active=accent_color, fg_active=font_color_dark, command=lambda filetype="STD":
            self.copy_file(filetype))
        SE(
            parent=self.parent, row_id=start_row + 20, column_id=6, n_rows=common_n_rows + 1,
            n_columns=n_columns_button + 1, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_03, bg_active=accent_color, fg_active=font_color_dark,
            command=lambda var_lb=self.lb_std, var_list=self.list_std: self.delete_csv(var_lb, var_list))
        SE(
            parent=self.parent, row_id=start_row + 20, column_id=11, n_rows=common_n_rows,
            n_columns=2*n_columns_button, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_01, bg_active=accent_color, fg_active=font_color_dark, command=lambda datatype="SMPL":
            self.open_csv(datatype))
        SE(
            parent=self.parent, row_id=start_row + 21, column_id=11, n_rows=common_n_rows,
            n_columns=2*n_columns_button, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_02, bg_active=accent_color, fg_active=font_color_dark, command=lambda filetype="SMPL":
            self.copy_file(filetype))
        SE(
            parent=self.parent, row_id=start_row + 20, column_id=17, n_rows=common_n_rows + 1,
            n_columns=n_columns_button + 1, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_03, bg_active=accent_color, fg_active=font_color_dark,
            command=lambda var_lb=self.lb_smpl, var_list=self.list_smpl: self.delete_csv(var_lb, var_list))

        SE(
            parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=common_n_rows + 1,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_button(
            text=var_btn_04, bg_active=accent_color, fg_active=font_color_dark, command=self.restart_pysills)
        SE(
            parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=common_n_rows + 1,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_button(
            text=var_btn_05, bg_active=accent_color, fg_active=font_color_dark, command=self.open_project)
        SE(
            parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=common_n_rows + 1,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_button(
            text=var_btn_06, bg_active=accent_color, fg_active=font_color_dark, command=self.save_project)
        SE(
            parent=self.parent, row_id=start_row + 8, column_id=start_column, n_rows=common_n_rows + 1,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_button(
            text=var_btn_07, bg_active=accent_color, fg_active=font_color_dark,
            command=self.subwindow_general_settings)
        btn_about = SE(
            parent=self.parent, row_id=start_row + 10, column_id=start_column, n_rows=common_n_rows + 1,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_button(
            text=var_btn_08, bg_active=accent_color, fg_active=font_color_dark, command=self.about_pysills)
        SE(
            parent=self.parent, row_id=start_row + 12, column_id=start_column, n_rows=common_n_rows + 1,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_button(
            text=var_btn_09, bg_active=accent_color, fg_active=font_color_dark, command=self.parent.quit)
        btn_icp = SE(
            parent=self.parent, row_id=start_row + 17, column_id=start_column + common_n_columns + 1,
            n_rows=common_n_rows, n_columns=common_n_columns, fg=font_color_dark,
            bg=background_color_elements).create_simple_button(
            text=var_btn_10, bg_active=accent_color, fg_active=font_color_dark, command=self.define_icp_ms_import_setup)

        # OPTION MENUS
        self.var_opt_icp = tk.StringVar()
        str_opt_icpms = self.language_dict["Select ICP-MS"][self.var_language]
        self.var_opt_icp.set(str_opt_icpms)
        opt_icp = SE(
            parent=self.parent, row_id=start_row + 17, column_id=start_column, n_rows=common_n_rows,
            n_columns=common_n_columns, fg=font_color_dark, bg=background_color_elements).create_simple_optionmenu(
            var_opt=self.var_opt_icp, var_default=self.var_opt_icp.get(),
            var_list=self.container_lists["ICPMS Library"], fg_active=font_color_dark, bg_active=accent_color,
            command=lambda var_opt=self.var_opt_icp: self.select_icp_ms(var_opt))

    def define_icp_ms_import_setup(self):
        """Window for the ICP-MS file setup."""
        ## Window Settings
        window_width = 340
        window_heigth = 200
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_icpms_setup = tk.Toplevel(self.parent)
        self.subwindow_icpms_setup.title("ICP-MS File Setup")
        self.subwindow_icpms_setup.geometry(var_geometry)
        self.subwindow_icpms_setup.resizable(False, False)
        self.subwindow_icpms_setup["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_icpms_setup, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_icpms_setup, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_icpms_setup.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_icpms_setup.grid_columnconfigure(i, minsize=column_min)

        var_row_start = 0
        var_columm_start = 0
        var_header_n = 16
        int_category_n = 8

        # LABELS
        lbl_01 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start, column_id=var_columm_start, n_rows=1,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="ICP-MS File Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=1,
            n_columns=int_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Name", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 2, column_id=var_columm_start, n_rows=1,
            n_columns=int_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Line of Timestamp", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 3, column_id=var_columm_start, n_rows=1,
            n_columns=int_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Skip Header", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 4, column_id=var_columm_start, n_rows=1,
            n_columns=int_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Skip Footer", relief=tk.FLAT, fontsize="sans 10 bold")

        # ENTRIES
        current_val_name = self.container_var["ICP-MS Info"]["name"].get()
        current_val_timestamp = self.container_var["ICP-MS Info"]["timestamp"].get()
        current_val_skipheader = self.container_var["ICP-MS Info"]["skipheader"].get()
        current_val_skipfooter = self.container_var["ICP-MS Info"]["skipfooter"].get()

        entr_002 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 1, column_id=var_columm_start + int_category_n,
            n_rows=1, n_columns=(var_header_n - int_category_n), fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["ICP-MS Info"]["name"], text_default=current_val_name)
        entr_002 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 2, column_id=var_columm_start + int_category_n,
            n_rows=1, n_columns=(var_header_n - int_category_n), fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["ICP-MS Info"]["timestamp"], text_default=current_val_timestamp)
        entr_002 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 3, column_id=var_columm_start + int_category_n,
            n_rows=1, n_columns=(var_header_n - int_category_n), fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["ICP-MS Info"]["skipheader"], text_default=current_val_skipheader)
        entr_002 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 4, column_id=var_columm_start + int_category_n,
            n_rows=1, n_columns=(var_header_n - int_category_n), fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["ICP-MS Info"]["skipfooter"], text_default=current_val_skipfooter)

        # BUTTONS
        btn_02 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 6,
            column_id=var_columm_start + (var_header_n - int_category_n), n_rows=1,
            n_columns=(var_header_n - int_category_n), fg=self.bg_colors["Dark Font"],
            bg=self.accent_color).create_simple_button(
            text="Confirm Settings", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.confirm_icpms_settings)
        btn_002 = SE(
            parent=self.subwindow_icpms_setup, row_id=var_row_start + 6,
            column_id=var_columm_start, n_rows=1,
            n_columns=(var_header_n - int_category_n), fg=self.bg_colors["Dark Font"],
            bg=self.accent_color).create_simple_button(
            text="Save ICP-MS Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.save_icpms_settings)

    def confirm_icpms_settings(self):
        self.var_opt_icp.set(self.container_var["ICP-MS Info"]["name"].get())
        self.container_icpms["timestamp"] = self.container_var["ICP-MS Info"]["timestamp"].get()
        self.container_icpms["skipheader"] = self.container_var["ICP-MS Info"]["skipheader"].get()
        self.container_icpms["skipfooter"] = self.container_var["ICP-MS Info"]["skipfooter"].get()

    def save_icpms_settings(self):
        str_icpms_name = self.container_var["ICP-MS Info"]["name"].get()
        int_icpms_skipheader = self.container_var["ICP-MS Info"]["skipheader"].get()
        int_icpms_skipfooter = self.container_var["ICP-MS Info"]["skipfooter"].get()
        int_icpms_timestamp = self.container_var["ICP-MS Info"]["timestamp"].get()

        filename_export = filedialog.asksaveasfile(
            mode="w", initialfile=str_icpms_name, defaultextension=".csv", filetypes=[("csv", "*.csv")])
        filename_export = filename_export.name

        with open(filename_export, "w") as file_content:
            file_content.write("name" + "," + str(str_icpms_name) + "\n")
            file_content.write("skipheader" + "," + str(int_icpms_skipheader) + "\n")
            file_content.write("skipfooter" + "," + str(int_icpms_skipfooter) + "\n")
            file_content.write("timestamp" + "," + str(int_icpms_timestamp) + "\n")

    def select_icp_ms(self, var_opt):
        path = os.getcwd()

        if self.file_loaded == False:
            if self.demo_mode == True:
                try:
                    var_instrument_raw = var_opt.get()
                except:
                    var_instrument_raw = var_opt
                var_instrument = var_instrument_raw.replace(" ", "_")
            else:
                var_instrument = var_opt.replace(" ", "_")
        else:
            var_instrument_raw = var_opt.get()
            var_instrument = var_instrument_raw.replace(" ", "_")

        file_long = path + str("/lib/icpms/" + var_instrument + ".csv")
        file_content = open(file_long)

        for index, line in enumerate(file_content):
            line_parts = line.split(",")
            if "\n" in line_parts[-1]:
                line_parts[-1] = line_parts[-1].replace("\n", "")
            try:
                self.container_icpms[line_parts[0]] = int(line_parts[-1])
            except:
                self.container_icpms[line_parts[0]] = line_parts[-1]

    def copy_file(self, filetype):
        if self.pysills_mode == "MA":
            info_key = "ma_setting"
        elif self.pysills_mode == "FI":
            info_key = "fi_setting"
        elif self.pysills_mode == "MI":
            info_key = "mi_setting"

        if filetype == "STD":
            var_lb = self.lb_std
            var_list = self.list_std
        elif filetype == "SMPL":
            var_lb = self.lb_smpl
            var_list = self.list_smpl

        item = var_lb.curselection()
        var_file_long = var_list[item[0]]
        var_file_long_parts = var_file_long.split(".")
        var_file_extension = var_file_long_parts[-1]
        var_file_long_copy = var_file_long_parts[0] + "_copy" + "." + var_file_extension

        file_parts = var_file_long.split("/")
        file_short_original = file_parts[-1]
        file_isotopes_original = self.container_lists["Measured Isotopes"][file_short_original]

        with open(var_file_long, "r") as file:
            content = file.read()

        with open(var_file_long_copy, "w") as copied_file:
            copied_file.write(content)

        if var_file_long_copy not in var_list:
            var_list.append(var_file_long_copy)
            file_parts_copy = var_file_long_copy.split("/")
            var_file_short_copy = file_parts_copy[-1]
            var_lb.insert(tk.END, var_file_short_copy)

            self.container_lists["Measured Isotopes"][var_file_short_copy] = file_isotopes_original
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short_copy]

            self.add_needed_variables_for_later_added_files(
                filename_long=var_file_long_copy, filename_short=var_file_short_copy, filetype=filetype,
                file_isotopes=file_isotopes)

            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]

            dates, times = Data(filename=var_file_long_copy).import_as_list(
                skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)

            t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))

            if var_file_short_copy not in self.container_var["acquisition times"][filetype]:
                self.container_var["acquisition times"][filetype][var_file_short_copy] = tk.StringVar()
                self.container_var["acquisition times"][filetype][var_file_short_copy].set(
                    times[0][0] + ":" + times[0][1] + ":" + times[0][2])

            if self.pysills_mode == "MA":
                self.subwindow_ma_settings.destroy()
                self.ma_settings()
            elif self.pysills_mode == "FI":
                self.subwindow_fi_settings.destroy()
                self.fi_settings()
            elif self.pysills_mode == "MI":
                self.subwindow_mi_settings.destroy()
                self.mi_settings()

    def add_needed_variables_for_later_added_files(self, filename_long, filename_short, filetype, file_isotopes):
        if self.pysills_mode == "MA":
            info_key = "ma_setting"
        elif self.pysills_mode == "FI":
            info_key = "fi_setting"
        elif self.pysills_mode == "MI":
            info_key = "mi_setting"

        if filename_long not in self.container_lists[filetype]["Long"]:
            self.container_lists[filetype]["Long"].append(filename_long)
            self.container_lists[filetype]["Short"].append(filename_short)

        self.container_var[info_key]["Data Type Plot"][filetype][filename_short] = tk.IntVar()
        self.container_var[info_key]["Data Type Plot"][filetype][filename_short].set(0)
        self.container_var[info_key]["Analyse Mode Plot"][filetype][filename_short] = tk.IntVar()
        self.container_var[info_key]["Analyse Mode Plot"][filetype][filename_short].set(0)
        self.container_var[info_key]["Display RAW"][filetype][filename_short] = {}
        self.container_var[info_key]["Display SMOOTHED"][filetype][filename_short] = {}

        if filename_short not in self.container_var["ma_setting"]["Time-Signal Lines"][filetype]:
            self.container_var[info_key]["Time-Signal Lines"][filetype][filename_short] = {}
            self.container_var[info_key]["Time-Ratio Lines"][filetype][filename_short] = {}
            self.container_var[info_key]["Checkboxes Isotope Diagram"][filetype][filename_short] = {}
            self.container_var[info_key]["Calculation Interval"][filetype][
                filename_short] = tk.IntVar()
            self.container_var[info_key]["Calculation Interval"][filetype][filename_short].set(3)
            self.container_var[info_key]["Calculation Interval Visibility"][filetype][
                filename_short] = {}

        for isotope in file_isotopes:
            self.build_checkbutton_isotope_visibility(
                var_mode=info_key, var_filetype=filetype, var_filename_short=filename_short,
                var_isotope=isotope)

            self.container_var[info_key]["Time-Signal Lines"][filetype][filename_short][isotope] = {
                "RAW": None, "SMOOTHED": None}
            self.container_var[info_key]["Time-Ratio Lines"][filetype][filename_short][isotope] = {
                "RAW": None, "SMOOTHED": None}
            self.container_var[info_key]["Checkboxes Isotope Diagram"][filetype][filename_short][
                isotope] = {"RAW": None, "SMOOTHED": None}

        self.container_var["Plotting"][self.pysills_mode]["Quickview"] = {"Canvas": None, "Toolbar": None}
        self.container_var["Plotting"][self.pysills_mode]["Time-Signal"] = {"Canvas": None, "Toolbar": None}
        self.container_var["Plotting"][self.pysills_mode]["Time-Ratio"] = {"Canvas": None, "Toolbar": None}

    def select_experiment(self, var_rb):
        start_row = 9
        start_column = 11

        str_btn_01 = self.language_dict["Settings"][self.var_language]
        str_btn_02 = self.language_dict["Results"][self.var_language]
        str_btn_03 = self.language_dict["Extras"][self.var_language]

        if var_rb.get() == 0:   # Mineral Analysis
            self.pysills_mode = "MA"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            str_lbl_01 = self.language_dict["Mineral Analysis"][self.var_language]
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text=str_lbl_01, relief=tk.FLAT, fontsize="sans 14 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.ma_settings)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_02, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.ma_datareduction_files)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_03, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.ma_extras)

            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])

        elif var_rb.get() == 1:   # Fluid Inclusions
            self.pysills_mode = "FI"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            str_lbl_01 = self.language_dict["Fluid Inclusions"][self.var_language]
            if self.var_language == "German":
                str_lbl_01 = "Flüssigkeits-\neinschlüsse"
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text=str_lbl_01, relief=tk.FLAT, fontsize="sans 14 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.fi_settings)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_02, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.fi_datareduction_files)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_03, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])
        #
        elif var_rb.get() == 2:   # Melt Inclusions
            self.pysills_mode = "MI"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            str_lbl_01 = self.language_dict["Melt Inclusions"][self.var_language]
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text=str_lbl_01, relief=tk.FLAT, fontsize="sans 14 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.mi_settings)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_02, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.fi_datareduction_files)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_03, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])
        #
        elif var_rb.get() == 3:  # Output Analysis
            self.pysills_mode = "OA"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Output Analysis", relief=tk.FLAT, fontsize="sans 14 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_02, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_03, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.ma_datareduction_files)
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])

    def build_srm_database(self):
        for key, item in self.container_var["SRM"].items():
            if key != "default":
                if key in self.container_lists["Measured Isotopes"]["All"]:
                    self.container_lists["SRM Isotopes"][key] = item.get()
                else:
                    key_short = key.split("/")[-1]
                    var_srm_file = self.container_var["STD"][key]["SRM"].get()
                    self.container_lists["SRM Files"][key_short] = var_srm_file

        self.collect_srm_data()

    def collect_srm_data(self):
        helper_list = []
        for var_srm in self.container_lists["SRM Files"].values():
            if var_srm not in helper_list and var_srm != "Select SRM":
                helper_list.append(var_srm)

        if len(helper_list) > 0:
            for var_srm in helper_list:
                self.fill_srm_values(var_srm=var_srm)

    def spike_elimination_all(self, filetype, algorithm, mode="MA"):
        if algorithm == "Grubbs":
            if filetype == "STD":
                for filename_long in self.list_std:
                    parts = filename_long.split("/")
                    filename_short = parts[-1]
                    #
                    self.container_measurements["RAW"][filename_short] = {}
                    self.container_measurements["EDITED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX"] = \
                        self.diagrams_setup[filetype][filename_short][
                            "FIG"].add_subplot()
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX_RATIO"] = \
                            self.diagrams_setup[filetype][filename_short][
                                "FIG_RATIO"].add_subplot()

                    if self.file_loaded == False:
                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            df_data = DE(filename_long=filename_long).get_measurements(
                                delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                        else:
                            df_data = DE(filename_long=filename_long).get_measurements(
                                delimiter=",", skip_header=3, skip_footer=1)
                    else:
                        df_data = self.container_measurements["Dataframe"][filename_short]

                    times = DE().get_times(dataframe=df_data)
                    start_time = times.iloc[0]
                    end_time = times.iloc[-1]
                    start_index = times[times == start_time].index[0]
                    end_index = times[times == end_time].index[0]
                    spk_id = 1
                    #
                    box_spk = self.diagrams_setup[filetype][filename_short]["AX"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    box_spk_ratio = self.diagrams_setup[filetype][filename_short]["AX_RATIO"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    #
                    isotope = "".join(self.container_lists["ISOTOPES"])
                    #
                    self.container_measurements["RAW"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["EDITED"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["SELECTED"][filename_short]["Time"] = times.tolist()

                    df_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                    for isotope in df_isotopes:
                        self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                        self.container_measurements["EDITED"][filename_short][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                        #
                        self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                        if mode == "MA":
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            #
                            var_settings = "ma_setting"
                        elif mode in ["FI", "MI"]:
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                            if mode == "FI":
                                var_settings = "fi_setting"
                            elif mode == "MI":
                                var_settings = "mi_setting"

                        self.spikes_isotopes["STD"][filename_short][isotope] = []
                        self.spikes_isotopes["STD"][filename_short][isotope].append([start_index, end_index])

                self.do_spike_elimination_all_grubbs(filetype=filetype)
                self.fast_track_std = True
                self.counter_fast_track_std += 1
                self.container_var["Spike Elimination"]["STD"]["State"] = True
                #
                self.frm_spk_std.config(background=self.sign_green, bd=1)
                #
            elif filetype == "SMPL":
                for filename_long in self.list_smpl:
                    parts = filename_long.split("/")
                    filename_short = parts[-1]
                    #
                    self.container_measurements["RAW"][filename_short] = {}
                    self.container_measurements["EDITED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX"] = \
                            self.diagrams_setup[filetype][filename_short][
                                "FIG"].add_subplot()
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX_RATIO"] = \
                            self.diagrams_setup[filetype][filename_short][
                                "FIG_RATIO"].add_subplot()

                    if self.file_loaded == False:
                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            df_data = DE(filename_long=filename_long).get_measurements(
                                delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                        else:
                            df_data = DE(filename_long=filename_long).get_measurements(
                                delimiter=",", skip_header=3, skip_footer=1)
                    else:
                        df_data = self.container_measurements["Dataframe"][filename_short]

                    list_names = list(df_data.columns.values)
                    list_names.pop(0)
                    df_isotopes = list_names
                    times = DE().get_times(dataframe=df_data)
                    start_time = times.iloc[0]
                    end_time = times.iloc[-1]
                    start_index = times[times == start_time].index[0]
                    end_index = times[times == end_time].index[0]
                    spk_id = 1
                    #
                    box_spk = self.diagrams_setup[filetype][filename_short]["AX"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    box_spk_ratio = self.diagrams_setup[filetype][filename_short]["AX_RATIO"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    #
                    isotope = "".join(self.container_lists["ISOTOPES"])
                    #
                    self.container_measurements["RAW"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["EDITED"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["SELECTED"][filename_short]["Time"] = times.tolist()

                    #for isotope in self.container_lists["ISOTOPES"]:
                    for isotope in df_isotopes:
                        self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                        self.container_measurements["EDITED"][filename_short][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                        #
                        self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                        if mode == "MA":
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            #
                            var_settings = "ma_setting"
                        elif mode in ["FI", "MI"]:
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope][
                                "INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope][
                                "INCL"] = []
                            if mode == "FI":
                                var_settings = "fi_setting"
                            elif mode == "MI":
                                var_settings = "mi_setting"
                        #
                        self.spikes_isotopes["SMPL"][filename_short][isotope] = []
                        self.spikes_isotopes["SMPL"][filename_short][isotope].append([start_index, end_index])

                self.do_spike_elimination_all_grubbs(filetype=filetype)
                self.fast_track_smpl = True
                self.counter_fast_track_smpl += 1
                self.container_var["Spike Elimination"]["SMPL"]["State"] = True
                #
                if self.pysills_mode == "MA":
                    self.frm_spk_smpl.config(background=self.sign_green, bd=1)
                elif self.pysills_mode == "FI":
                    if self.container_var["fi_setting"]["Spike Elimination Inclusion"].get() == 1:
                        self.frm_spk_smpl.config(background=self.sign_green, bd=1)
                    elif self.container_var["fi_setting"]["Spike Elimination Inclusion"].get() == 2:
                        if len(self.container_helper["SMPL"][filename_short]["INCL"]["Content"]) == 0:
                            self.frm_spk_smpl.config(background=self.sign_yellow, bd=1)
                        else:
                            self.frm_spk_smpl.config(background=self.sign_green, bd=1)

    def change_carrier_gas(self, var_opt):
        if var_opt == "Helium":
            try:
                self.var_entr_10.set("24.587")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("24.587")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Dark Font"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
            #
        elif var_opt == "Neon":
            try:
                self.var_entr_10.set("21.565")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("21.565")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Argon":
            try:
                self.var_entr_10.set("15.760")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("15.760")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Krypton":
            try:
                self.var_entr_10.set("14.000")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("14.000")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Xenon":
            try:
                self.var_entr_10.set("12.130")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("12.130")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Radon":
            try:
                self.var_entr_10.set("10.749")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("10.749")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)

    def change_std_is(self, element, file):
        self.container_var["STD"][file]["IS"].set(element)
        parts = file.split("/")
        self.container_files["STD"][parts[-1]]["IS"].set(element)
    #
    def change_std_is_default(self, element, mineral=None):
        self.container_var["IS"]["Default STD"].set(element)
        for file in self.list_std:
            self.container_var["STD"][file]["IS"].set(element)
            parts = file.split("/")
            self.container_files["STD"][parts[-1]]["IS"].set(element)
        #
        if element in self.container_lists["ISOTOPES"]:
            key_is = re.search("(\D+)(\d+)", element)
            element_is = key_is.group(1)
        if mineral != None and mineral != "Select Mineral":
            if element in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element])
            elif element_is in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element_is])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element_is])
            else:
                #self.var_entr_09.set(0.0)
                self.container_var["settings"]["IS Concentration"].set(0.0)
            #
            if self.container_var["IS"]["Default SMPL"].get() == "Select IS":
                self.change_smpl_is_default(element=element, mineral=mineral)
            #
        else:
            warning_is = tk.Toplevel(self.parent)
            warning_is.title("Warning")
            warning_is.geometry("250x100+0+0")
            warning_is.resizable(False, False)
            warning_is["bg"] = self.green_light
            #
            window_width = 250
            window_heigth = 100
            row_min = 25
            n_rows = int(window_heigth / row_min)
            column_min = 20
            n_columns = int(window_width / column_min)
            #
            for x in range(n_columns):
                tk.Grid.columnconfigure(warning_is, x, weight=1)
            for y in range(n_rows):
                tk.Grid.rowconfigure(warning_is, y, weight=1)
            #
            # Rows
            for i in range(0, n_rows):
                warning_is.grid_rowconfigure(i, minsize=row_min)
            # Columns
            for i in range(0, n_columns):
                warning_is.grid_columnconfigure(i, minsize=column_min)
            #
            lbl_01 = SE(
                parent=warning_is, row_id=0, column_id=0, n_rows=n_rows, n_columns=n_columns, fg=self.green_dark,
                bg=self.red_dark).create_simple_label(
                text="Please load your internal\n standard concentration data\n or select a mineral", relief=tk.GROOVE,
                fontsize="sans 10 bold")
            #
            self.container_var["IS"]["Default STD"].set("Select IS")
    #
    def change_smpl_is(self, element, file, mineral=None):
        self.container_var["SMPL"][file]["IS"].set(element)
        if mineral != None:
            parts = file.split("/")
            key_i = re.search("(\D+)(\d+)", element)
            var_element = key_i.group(1)
            self.container_files["SMPL"][parts[-1]]["IS Concentration"].set(self.mineral_chem[mineral][var_element])
            #
            self.container_var["SMPL"][file]["IS Data"]["IS"].set(element)
            self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(
                self.mineral_chem[mineral][element])
            #
    #
    def change_smpl_is_default(self, element, mineral=None):
        self.container_var["IS"]["Default SMPL"].set(element)
        for file in self.list_smpl:
            self.container_var["SMPL"][file]["IS"].set(element)
        #
        if element in self.container_lists["ISOTOPES"]:
            key_is = re.search("(\D+)(\d+)", element)
            element_is = key_is.group(1)
        if mineral != None and mineral != "Select Mineral":
            if element in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element])
                for file in self.list_smpl:
                    parts = file.split("/")
                    self.container_files["SMPL"][parts[-1]]["IS"].set(element)
                    self.container_files["SMPL"][parts[-1]]["IS Concentration"].set(self.mineral_chem[mineral][element])
                    #
                    self.container_var["SMPL"][file]["IS Data"]["IS"].set(element)
                    self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(
                        self.mineral_chem[mineral][element])
                    #
            elif element_is in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element_is])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element_is])
                for file in self.list_smpl:
                    parts = file.split("/")
                    self.container_files["SMPL"][parts[-1]]["IS"].set(element)
                    self.container_files["SMPL"][parts[-1]]["IS Concentration"].set(
                        self.mineral_chem[mineral][element_is])
                    #
                    self.container_var["SMPL"][file]["IS Data"]["IS"].set(element)
                    self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(
                        self.mineral_chem[mineral][element_is])
                    #
            #
            if self.container_var["IS"]["Default SMPL"].get() == "Select IS":
                self.change_std_is_default(element=element, mineral=mineral)
        else:
            warning_is = tk.Toplevel(self.parent)
            warning_is.title("Warning")
            warning_is.geometry("250x100+0+0")
            warning_is.resizable(False, False)
            warning_is["bg"] = self.green_light
            #
            window_width = 250
            window_heigth = 100
            row_min = 25
            n_rows = int(window_heigth / row_min)
            column_min = 20
            n_columns = int(window_width / column_min)
            #
            for x in range(n_columns):
                tk.Grid.columnconfigure(warning_is, x, weight=1)
            for y in range(n_rows):
                tk.Grid.rowconfigure(warning_is, y, weight=1)
            #
            # Rows
            for i in range(0, n_rows):
                warning_is.grid_rowconfigure(i, minsize=row_min)
            # Columns
            for i in range(0, n_columns):
                warning_is.grid_columnconfigure(i, minsize=column_min)
            #
            lbl_01 = SE(
                parent=warning_is, row_id=0, column_id=0, n_rows=n_rows, n_columns=n_columns, fg=self.green_dark,
                bg=self.red_dark).create_simple_label(
                text="Please load your internal\n standard concentration data\n or select a mineral", relief=tk.GROOVE,
                fontsize="sans 10 bold")
            #
            self.container_var["IS"]["Default SMPL"].set("Select IS")

    def change_srm_default(self, var_srm, key="STD"):
        if key == "STD":
            for file in self.list_std:
                parts = file.split("/")
                self.container_var["STD"][file]["SRM"].set(var_srm)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
                try:
                    self.container_var["SRM"][file].set(var_srm)
                except:
                    print(file, self.container_var["SRM"][file])
            if self.container_var["SRM"]["default"][1].get() == "Select SRM":
                self.container_var["SRM"]["default"][1].set(var_srm)
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_files["SRM"][isotope].set(var_srm)
                    try:
                        self.container_var["SRM"][isotope].set(var_srm)
                    except:
                        print(isotope, self.container_var["SRM"][isotope])
        elif key == "isotope":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_files["SRM"][isotope].set(var_srm)
                try:
                    self.container_var["SRM"][isotope].set(var_srm)
                except:
                    print(isotope, self.container_var["SRM"][isotope])
            if self.container_var["SRM"]["default"][0].get() == "Select SRM":
                self.container_var["SRM"]["default"][0].set(var_srm)
                for file in self.list_std:
                    parts = file.split("/")
                    self.container_var["STD"][file]["SRM"].set(var_srm)
                    self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
                    try:
                        self.container_var["SRM"][file].set(var_srm)
                    except:
                        print(file, self.container_var["SRM"][file])

        self.fill_srm_values(var_srm=var_srm)

    def quick_plot_file(self, var_filetype, event):
        if var_filetype == "STD":
            click_id = self.lb_std.curselection()
            var_fig = self.quick_plot_figure_std
        elif var_filetype == "SMPL":
            click_id = self.lb_smpl.curselection()
            var_fig = self.quick_plot_figure_smpl

        click_id = click_id[0]
        file_long = self.container_lists[var_filetype]["Long"][click_id]
        file_short = self.container_lists[var_filetype]["Short"][click_id]
        file_isotopes = self.container_lists["Measured Isotopes"][file_short]

        ## Window Settings
        window_width = 1000
        window_heigth = 700
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        subwindow_quickplotter = tk.Toplevel(self.parent)
        subwindow_quickplotter.title("Quick Plotter")
        subwindow_quickplotter.geometry(var_geometry)
        subwindow_quickplotter.resizable(False, False)
        subwindow_quickplotter["bg"] = self.bg_colors["Very Light"]

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_quickplotter, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_quickplotter, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            subwindow_quickplotter.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_quickplotter.grid_columnconfigure(i, minsize=column_min)

        ###########################################################

        row_start = 0
        column_start = 0

        ## LABELS
        lbl_01 = SE(
            parent=subwindow_quickplotter, row_id=row_start, column_id=column_start, n_rows=1, n_columns=40,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Time-Signal Diagram", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_quickplotter, row_id=row_start, column_id=column_start + 40, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")

        if self.file_loaded == False:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=file_long).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=file_long).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
        else:
            df_data = self.container_measurements["Dataframe"][file_short]

        list_keys = list(df_data.columns.values)
        del list_keys[0]
        dataset_time = list(df_data.iloc[:, 0])
        x_max = max(dataset_time)

        if len(file_isotopes) == 0:
            self.container_lists["ISOTOPES"] = list_keys
            self.define_isotope_colors()

        icp_measurements = np.array([[df_data[isotope] for isotope in file_isotopes]])
        y_max = np.amax(icp_measurements)

        ## ISOTOPE LIST
        frm_isotopes = SE(
            parent=subwindow_quickplotter, row_id=row_start + 1, column_id=column_start + 40, n_rows=n_rows - 3,
            n_columns=20, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb = ttk.Scrollbar(master=frm_isotopes, orient="vertical")
        text = tk.Text(
            master=frm_isotopes, width=30, height=15, yscrollcommand=vsb.set, bg=self.bg_colors["Very Light"])
        vsb.config(command=text.yview)
        vsb.pack(side="right", fill="y")
        text.pack(side="left", fill="both", expand=True)

        self.temp_checkbuttons = {}
        for index, isotope in enumerate(file_isotopes):
            self.temp_checkbuttons[isotope] = tk.IntVar(value=1)

            cb_i = tk.Checkbutton(
                master=frm_isotopes, text=isotope, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"],
                variable=self.temp_checkbuttons[isotope],
                command=lambda var_isotope=isotope, var_file_short=file_short:
                self.show_line(var_isotope, var_file_short))

            text.window_create("end", window=cb_i)
            text.insert("end", "\n")
            cb_i.select()

        ## DIAGRAMS
        var_fig = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        var_ax = var_fig.add_subplot(label=np.random.uniform())

        self.temp_lines = {}

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        try:
            for isotope in file_isotopes:
                ln = var_ax.plot(
                    dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope], linewidth=var_lw,
                    visible=True)
                self.temp_lines[isotope] = ln
        except:
            self.define_temporary_colors(filename_short=file_short)
            for isotope in file_isotopes:
                ln = var_ax.plot(
                    dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors_temporary[isotope],
                    linewidth=var_lw, visible=True)
                self.temp_lines[isotope] = ln

        if file_short in self.container_helper[var_filetype]:
            if len(self.container_helper[var_filetype][file_short]["BG"]["Content"]) > 0:
                times_bg = self.container_helper[var_filetype][file_short]["BG"]["Content"][1]["Times"]
                box_bg = var_ax.axvspan(
                    float(times_bg[0]), float(times_bg[1]), alpha=0.35, color=self.colors_intervals["BG"])
            if len(self.container_helper[var_filetype][file_short]["MAT"]["Content"]) > 0:
                times_sig = self.container_helper[var_filetype][file_short]["MAT"]["Content"][1]["Times"]
                box_sig = var_ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=self.colors_intervals["MAT"])

        var_ax.grid(True)
        var_ax.set_yscale("log")
        var_ax.set_xlim(left=0, right=x_max)
        var_ax.set_xticks(np.arange(0, x_max, 20))
        var_ax.set_ylim(top=1.5*y_max)
        var_ax.grid(which="major", linestyle="-", linewidth=1)
        var_ax.minorticks_on()
        var_ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        var_ax.set_axisbelow(True)
        var_ax.set_title(file_short, fontsize=9)
        var_ax.set_xlabel("Time (s)", labelpad=0.5, fontsize=8)
        var_ax.set_ylabel("Signal (cps)", labelpad=0.5, fontsize=8)
        var_ax.xaxis.set_tick_params(labelsize=8)
        var_ax.yaxis.set_tick_params(labelsize=8)

        # Canvas
        var_canvas = FigureCanvasTkAgg(var_fig, master=subwindow_quickplotter)
        var_canvas.get_tk_widget().grid(
            row=row_start + 1, column=column_start, rowspan=n_rows - 3, columnspan=40, sticky="nesw")
        # Toolbar
        var_toolbarFrame = tk.Frame(master=subwindow_quickplotter)
        var_toolbarFrame.grid(row=n_rows - 2, column=0, rowspan=2, columnspan=40, sticky="ew")
        var_toolbar = NavigationToolbar2Tk(var_canvas, var_toolbarFrame)
        var_toolbar.config(
            bg=self.bg_colors["Very Light"], highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
            highlightcolor=self.bg_colors["Dark Font"], bd=0)
        var_toolbar._message_label.config(
            background=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"], font="sans 12")
        var_toolbar.winfo_children()[-2].config(background=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])

        self.container_var["Plotting"][self.pysills_mode]["Quickview"][file_short] = {
            "Figure": var_fig, "Canvas": var_canvas, "Toolbar": var_toolbar, "Axes": var_ax}

        ## BUTTONS
        btn_01 = SE(
            parent=subwindow_quickplotter, row_id=n_rows - 2, column_id=column_start + 40, n_rows=2, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Show All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_file_short=file_short: self.show_all_lines(var_file_short))
        btn_02 = SE(
            parent=subwindow_quickplotter, row_id=n_rows - 2, column_id=column_start + 45, n_rows=2, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Hide All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_file_short=file_short: self.hide_all_lines(var_file_short))

    def show_line(self, var_isotope, var_file_short):
        if self.temp_checkbuttons[var_isotope].get() == 1:
            self.temp_lines[var_isotope][0].set_visible(True)
        else:
            self.temp_lines[var_isotope][0].set_visible(False)
        #
        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short]["Canvas"].draw()
    #
    def show_all_lines(self, var_file_short):
        file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
        for isotope in file_isotopes:
            self.temp_checkbuttons[isotope].set(1)
            self.temp_lines[isotope][0].set_visible(True)

        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short]["Canvas"].draw()

    def hide_all_lines(self, var_file_short):
        file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
        for isotope in file_isotopes:
            self.temp_checkbuttons[isotope].set(0)
            self.temp_lines[isotope][0].set_visible(False)

        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short]["Canvas"].draw()

    def place_srm_values(self, var_srm, header_col, default=False):
        #
        lbl_srm_03 = SE(parent=self.parent, row_id=0, column_id=header_col, n_rows=1, n_columns=42, fg=self.green_light,
                            bg=self.green_dark).create_simple_label(text=str(var_srm)+" - Element Concentrations (ppm)",
                                                                    relief=tk.GROOVE, fontsize="sans 10 bold")
        self.container_elements["SRM"]["Label"].append(lbl_srm_03)
        #
        if default == True:
            for file in self.list_std:
                parts = file.split("/")
                self.container_var["SRM"][file].set(var_srm)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
        #
        try:
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.srm_actual)
        except:
            self.srm_actual[var_srm] = {}
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.srm_actual)
        #
        for element in self.list_pse:
            if element in self.srm_actual[var_srm]:
                self.container_var["SRM"][element].set(self.srm_actual[var_srm][element])
            else:
                self.container_var["SRM"][element].set(0.0)
    #
    def fill_srm_values(self, var_srm):
        if var_srm not in self.srm_actual:
            self.srm_actual[var_srm] = {}
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.srm_actual)
    #
    def calculate_mineral_chemistry(self):
        #
        M_H = 1.008
        M_C = 12.011
        M_O = 15.999
        M_F = 18.998
        M_Na = 22.990
        M_Mg = 24.305
        M_Al = 26.982
        M_Si = 28.085
        M_P = 30.974
        M_S = 32.059
        M_Cl = 35.450
        M_K = 39.098
        M_Ca = 40.078
        M_Ti = 47.867
        M_Cr = 51.996
        M_Mn = 54.938
        M_Fe = 55.845
        M_Cu = 63.546
        M_Zn = 65.382
        M_As = 74.922
        M_Sr = 87.620
        M_Zr = 91.224
        M_Mo = 95.950
        M_Ba = 137.33
        M_La = 138.91
        M_Ce = 140.12
        M_Pr = 140.91
        M_Nd = 144.24
        M_Sm = 150.360
        M_Eu = 151.960
        M_Gd = 157.25
        M_Pb = 207.200
        M_Th = 232.04
        #
        #self.mineral_chem = {}
        for mineral in self.mineral_list:
            self.mineral_chem[mineral] = {}
            if mineral == "Quartz":  # SiO2
                M_Qz = M_Si + 2 * M_O
                w_Si = (M_Si) / (M_Qz) * 1000000
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Arsenopyrite":  # FeAsS
                M_Apy = M_Fe + M_As + M_S
                w_S = (M_S)/(M_Apy)*1000000
                w_Fe = (M_Fe)/(M_Apy)*1000000
                w_As = (M_As)/(M_Apy)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
                self.mineral_chem[mineral]["As"] = w_As
            elif mineral == "Barite":  # BaSO4
                M_Brt = M_Ba + M_S + 4*M_O
                w_O = (4*M_O)/(M_Brt)*1000000
                w_S = (M_S)/(M_Brt)*1000000
                w_Ba = (M_Ba)/(M_Brt)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Ba"] = w_Ba
            elif mineral == "Ilvaite":  # CaFe3(SiO4)2(OH)
                M_Ilvt = M_Ca + 3*M_Fe + 2*(M_Si + 4*M_O) + (M_O + M_H)
                w_H = (M_H)/(M_Ilvt)*1000000
                w_O = (9*M_O)/(M_Ilvt)*1000000
                w_Si = (2*M_Si)/(M_Ilvt)*1000000
                w_Ca = (M_Ca)/(M_Ilvt)*1000000
                w_Fe = (3*M_Fe)/(M_Ilvt)*1000000
                self.mineral_chem[mineral]["H"] = w_H
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Bornite":  # Cu5FeS4
                M_Bn = 5*M_Cu + M_Fe + 4*M_S
                w_S = (4*M_S)/(M_Bn)*1000000
                w_Fe = (M_Fe)/(M_Bn)*1000000
                w_Cu = (5*M_Cu)/(M_Bn)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
                self.mineral_chem[mineral]["Cu"] = w_Cu
            elif mineral == "Calcite":  # CaCO3
                M_Cal = M_Ca + M_C + 3 * M_O
                w_C = (M_C) / (M_Cal) * 1000000
                w_Ca = (M_Ca) / (M_Cal) * 1000000
                self.mineral_chem[mineral]["C"] = w_C
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Chalcopyrite":  # CuFeS2
                M_Ccp = M_Cu + M_Fe + 2*M_S
                w_S = (2*M_S)/(M_Ccp)*1000000
                w_Fe = (M_Fe)/(M_Ccp)*1000000
                w_Cu = (M_Cu)/(M_Ccp)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
                self.mineral_chem[mineral]["Cu"] = w_Cu
            elif mineral == "Chromite":  # FeCr2O4
                M = M_Fe + 2*M_Cr + 4*M_O
                w_O = (4*M_O)/(M)*1000000
                w_Cr = (2*M_Cr)/(M)*1000000
                w_Fe = (M_Fe)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Cr"] = w_Cr
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Enargite":  # Cu3AsS4
                M_En = 3*M_Cu + M_As + 4*M_S
                w_S = (4*M_S)/(M_En)*1000000
                w_Cu = (3*M_Cu)/(M_En)*1000000
                w_As = (M_As)/(M_En)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Cu"] = w_Cu
                self.mineral_chem[mineral]["As"] = w_As
            elif mineral == "Fluorite":  # CaF2
                M_Fl = M_Ca + 2 * M_F
                w_F = (2 * M_F) / (M_Fl) * 1000000
                w_Ca = (M_Ca) / (M_Fl) * 1000000
                self.mineral_chem[mineral]["F"] = w_F
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Apatite-Cl":  # Ca5(PO4)3Cl
                M_Ap = 5 * M_Ca + 3 * (M_P + 4 * M_O) + M_Cl
                w_P = (3 * M_P) / (M_Ap) * 1000000
                w_Cl = (M_Cl) / (M_Ap) * 1000000
                w_Ca = (5 * M_Ca) / (M_Ap) * 1000000
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Cl"] = w_Cl
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Apatite-F":  # Ca5(PO4)3F
                M_Ap = 5 * M_Ca + 3 * (M_P + 4 * M_O) + M_F
                w_F = (M_F) / (M_Ap) * 1000000
                w_P = (3 * M_P) / (M_Ap) * 1000000
                w_Ca = (5 * M_Ca) / (M_Ap) * 1000000
                self.mineral_chem[mineral]["F"] = w_F
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Apatite-OH":  # Ca5(PO4)3OH
                M_Ap = 5 * M_Ca + 3 * (M_P + 4 * M_O) + (M_O + M_H)
                w_H = (M_H) / (M_Ap) * 1000000
                w_P = (3 * M_P) / (M_Ap) * 1000000
                w_Ca = (5 * M_Ca) / (M_Ap) * 1000000
                self.mineral_chem[mineral]["H"] = w_H
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Forsterite":  # Mg2SiO4
                M_Ol = 2 * M_Mg + M_Si + 4 * M_O
                w_Mg = (2 * M_Mg) / (M_Ol) * 1000000
                w_Si = (M_Si) / (M_Ol) * 1000000
                self.mineral_chem[mineral]["Mg"] = w_Mg
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Fayalite":  # Fe2SiO4
                M_Ol = 2 * M_Fe + M_Si + 4 * M_O
                w_Si = (M_Si) / (M_Ol) * 1000000
                w_Fe = (2 * M_Fe) / (M_Ol) * 1000000
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Gahnite":  # ZnAl2O4
                M = M_Zn + 2*M_Al + 4*M_O
                w_O = (4*M_O)/(M)*1000000
                w_Al = (2*M_Al)/(M)*1000000
                w_Zn = (M_Zn)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Zn"] = w_Zn
            elif mineral == "Galena":  # PbS
                M_Gn = M_Pb + M_S
                w_S = (M_S)/(M_Gn)*1000000
                w_Pb = (M_Pb)/(M_Gn)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Pb"] = w_Pb
            elif mineral == "Hematite":  # Fe2O3
                M = 2*M_Fe + 3*M_O
                w_O = (3*M_O)/(M)*1000000
                w_Fe = (2*M_Fe)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Tephroite":  # Mn2SiO4
                M_Ol = 2 * M_Mn + M_Si + 4 * M_O
                w_Si = (M_Si) / (M_Ol) * 1000000
                w_Mn = (2 * M_Mn) / (M_Ol) * 1000000
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Mn"] = w_Mn
            elif mineral == "Albite":  # NaAlSi3O8
                M_Ab = M_Na + M_Al + 3 * M_Si + 8 * M_O
                w_Na = (M_Na) / (M_Ab) * 1000000
                w_Al = (M_Al) / (M_Ab) * 1000000
                w_Si = (3 * M_Si) / (M_Ab) * 1000000
                self.mineral_chem[mineral]["Na"] = w_Na
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Anorthite":  # CaAl2Si2O8
                M_An = M_Ca + 2 * (M_Al + M_Si) + 8 * M_O
                w_Al = (2 * M_Al) / (M_An) * 1000000
                w_Si = (2 * M_Si) / (M_An) * 1000000
                w_Ca = (M_Ca) / (M_An) * 1000000
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Magnetite":  # Fe3O4
                M = 3*M_Fe + 4*M_O
                w_O = (4*M_O)/(M)*1000000
                w_Fe = (3*M_Fe)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Molybdenite":  # MoS2
                M = M_Mo + 2*M_S
                w_S = (2*M_S)/(M)*1000000
                w_Mo = (M_Mo)/(M)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Mo"] = w_Mo
            elif mineral == "Pyrite":  # FeS2
                M_Py = M_Fe + 2*M_S
                w_S = (2*M_S)/(M_Py)*1000000
                w_Fe = (M_Fe)/(M_Py)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral in ["Orthoclase", "Microcline"]:  # KAlSi3O8
                M_OrMc = M_K + M_Al + 3 * M_Si + 8 * M_O
                w_Al = (M_Al) / (M_OrMc) * 1000000
                w_Si = (3 * M_Si) / (M_OrMc) * 1000000
                w_K = (M_K) / (M_OrMc) * 1000000
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["K"] = w_K
            elif mineral == "Sphalerite":  # ZnS
                M_Sp = M_Zn + M_S
                w_S = (M_S)/(M_Sp)*1000000
                w_Zn = (M_Zn)/(M_Sp)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Zn"] = w_Zn
            elif mineral == "Zircon":  # ZrSiO4
                M_Zrn = M_Zr + (M_Si + 4*M_O)
                w_Si = (M_Si)/(M_Zrn)*1000000
                w_Zr = (M_Zr)/(M_Zrn)*1000000
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Zr"] = w_Zr
            elif mineral == "Meionite":  # Ca4 Al6 Si6 O24 CO3
                M = 4*M_Ca + 6*M_Al + 6*M_Si + 24*M_O + M_C + 3*M_O
                w_C = (M_C)/(M) * 1000000
                w_Al = (6*M_Al)/(M) * 1000000
                w_Si = (6*M_Si) / (M) * 1000000
                w_Ca = (4*M_Ca) / (M) * 1000000
                self.mineral_chem[mineral]["C"] = w_C
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Marialite":  # Na4 Al3 Si9 O24 Cl
                M = 4*M_Na + 3*M_Al + 9*M_Si + 24*M_O + M_Cl
                w_Na = (4*M_Na)/(M) * 1000000
                w_Al = (3*M_Al)/(M) * 1000000
                w_Si = (9*M_Si) / (M) * 1000000
                w_Cl = (M_Cl) / (M) * 1000000
                self.mineral_chem[mineral]["Na"] = w_Na
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Cl"] = w_Cl
            elif mineral == "Strontianite":  # Sr C O3
                M = M_Sr + M_C + 3*M_O
                w_C = (M_C)/(M) * 1000000
                w_O = (3*M_O)/(M) * 1000000
                w_Sr = (M_Sr)/(M) * 1000000
                self.mineral_chem[mineral]["C"] = w_C
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Sr"] = w_Sr
            elif mineral == "Titanite":  # Ca Ti Si O5
                M = M_Ca + M_Ti + M_Si + 5*M_O
                w_O = (5*M_O)/(M) * 1000000
                w_Si = (M_Si)/(M) * 1000000
                w_Ca = (M_Ca)/(M) * 1000000
                w_Ti = (M_Ti)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
                self.mineral_chem[mineral]["Ti"] = w_Ti
            elif mineral == "Aegirine":  # Na Fe Si2 O6
                M = M_Na + M_Fe + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Na = (M_Na)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Fe = (M_Fe)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Na"] = w_Na
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Diopside":  # Mg Ca Si2 O6
                M = M_Mg + M_Ca + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Mg = (M_Mg)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Ca = (M_Ca)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Mg"] = w_Mg
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Hedenbergite":  # Fe Ca Si2 O6
                M = M_Fe + M_Ca + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Ca = (M_Ca)/(M) * 1000000
                w_Fe = (M_Fe)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Ferrosilite":  # Fe2 Si2 O6
                M = 2*M_Fe + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Fe = (2*M_Fe)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Enstatite":  # Mg2 Si2 O6
                M = 2*M_Mg + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Mg = (2*M_Mg)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Mg"] = w_Mg
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Monazite-La":  # La P O4
                M = M_La + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_La = (M_La)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["La"] = w_La
            elif mineral == "Monazite-Ce":  # Ce P O4
                M = M_Ce + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Ce = (M_Ce)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Ce"] = w_Ce
            elif mineral == "Monazite-Pr":  # Pr P O4
                M = M_Pr + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Pr = (M_Pr)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Pr"] = w_Pr
            elif mineral == "Monazite-Nd":  # Nd P O4
                M = M_Nd + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Nd = (M_Nd)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Nd"] = w_Nd
            elif mineral == "Monazite-Sm":  # Sm P O4
                M = M_Sm + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Sm = (M_Sm)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Sm"] = w_Sm
            elif mineral == "Monazite-Eu":  # Eu P O4
                M = M_Eu + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Eu = (M_Eu)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Eu"] = w_Eu
            elif mineral == "Monazite-Gd":  # Gd P O4
                M = M_Gd + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Gd = (M_Gd)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Gd"] = w_Gd
            elif mineral == "Monazite-Th":  # Th P O4
                M = M_Th + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Th = (M_Th)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Th"] = w_Th
            elif mineral == "Select Mineral":
                pass
            #
            for element, value in self.mineral_chem[mineral].items():
                self.mineral_chem[mineral][element] = round(value, 4)
    #
    def place_mineral_values(self, var_min, header_col):
        #
        lbl_srm_03 = SE(parent=self.parent, row_id=0, column_id=header_col, n_rows=1, n_columns=42, fg=self.green_light,
                        bg=self.green_dark).create_simple_label(text=str(var_min)+" - Element Concentrations (ppm)",
                                                                relief=tk.GROOVE, fontsize="sans 10 bold")
        self.container_elements["SRM"]["Label"].append(lbl_srm_03)
        #
        self.srm_actual[var_min] = {}
        M_H = 1.008
        M_C = 12.011
        M_O = 15.999
        M_F = 18.998
        M_Na = 22.990
        M_Mg = 24.305
        M_Al = 26.982
        M_Si = 28.085
        M_P = 30.974
        M_Cl = 35.450
        M_K = 39.098
        M_Ca = 40.078
        M_Mn = 54.938
        M_Fe = 55.845
        M_Zr = 91.224
        M_Ba = 137.33
        #
        if var_min == "Quartz": # SiO2
            M_Qz = M_Si + 2*M_O
            w_Si = (M_Si)/(M_Qz) * 1000000
            self.srm_actual[var_min]["Si"] = w_Si
        elif var_min == "Arsenopyrite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
            self.srm_actual[var_min]["As"] = self.mineral_chem[var_min]["As"]
        elif var_min == "Barite":  # BaSO4
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Ba"] = self.mineral_chem[var_min]["Ba"]
        elif var_min == "Ilvaite":  # CaFe3(SiO4)2(OH)
            self.srm_actual[var_min]["H"] = self.mineral_chem[var_min]["H"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Bornite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
            self.srm_actual[var_min]["Cu"] = self.mineral_chem[var_min]["Cu"]
        elif var_min == "Calcite":  # CaCO3
            M_Cal = M_Ca + M_C + 3*M_O
            w_C = (M_C)/(M_Cal) * 1000000
            w_Ca = (M_Ca)/(M_Cal) * 1000000
            self.srm_actual[var_min]["C"] = w_C
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Chalcopyrite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
            self.srm_actual[var_min]["Cu"] = self.mineral_chem[var_min]["Cu"]
        elif var_min == "Chromite":
            self.srm_actual[var_min]["Cr"] = self.mineral_chem[var_min]["Cr"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Sphalerite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Zn"] = self.mineral_chem[var_min]["Zn"]
        elif var_min == "Enargite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Cu"] = self.mineral_chem[var_min]["Cu"]
            self.srm_actual[var_min]["As"] = self.mineral_chem[var_min]["As"]
        elif var_min == "Fluorite": # CaF2
            M_Fl = M_Ca + 2*M_F
            w_F = (2*M_F)/(M_Fl) * 1000000
            w_Ca = (M_Ca)/(M_Fl) * 1000000
            self.srm_actual[var_min]["F"] = w_F
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Hematite":
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Galena":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Pb"] = self.mineral_chem[var_min]["Pb"]
        elif var_min == "Gahnite":
            self.srm_actual[var_min]["Al"] = self.mineral_chem[var_min]["Al"]
            self.srm_actual[var_min]["Zn"] = self.mineral_chem[var_min]["Zn"]
        elif var_min == "Magnetite":
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Molybdenite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Mo"] = self.mineral_chem[var_min]["Mo"]
        elif var_min == "Pyrite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Apatite-Cl": # Ca5(PO4)3Cl
            M_Ap = 5*M_Ca + 3*(M_P + 4*M_O) + M_Cl
            w_P = (3*M_P)/(M_Ap) * 1000000
            w_Cl = (M_Cl)/(M_Ap) * 1000000
            w_Ca = (5*M_Ca)/(M_Ap) * 1000000
            self.srm_actual[var_min]["P"] = w_P
            self.srm_actual[var_min]["Cl"] = w_Cl
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Apatite-F": # Ca5(PO4)3F
            M_Ap = 5*M_Ca + 3*(M_P + 4*M_O) + M_F
            w_F = (M_F)/(M_Ap) * 1000000
            w_P = (3*M_P)/(M_Ap) * 1000000
            w_Ca = (5*M_Ca)/(M_Ap) * 1000000
            self.srm_actual[var_min]["F"] = w_F
            self.srm_actual[var_min]["P"] = w_P
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Apatite-OH": # Ca5(PO4)3OH
            M_Ap = 5*M_Ca + 3*(M_P + 4*M_O) + (M_O + M_H)
            w_H = (M_H)/(M_Ap) * 1000000
            w_P = (3*M_P)/(M_Ap) * 1000000
            w_Ca = (5*M_Ca)/(M_Ap) * 1000000
            self.srm_actual[var_min]["H"] = w_H
            self.srm_actual[var_min]["P"] = w_P
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Forsterite": # Mg2SiO4
            M_Ol = 2*M_Mg + M_Si + 4*M_O
            w_Mg = (2*M_Mg)/(M_Ol) * 1000000
            w_Si = (M_Si)/(M_Ol) * 1000000
            self.srm_actual[var_min]["Mg"] = w_Mg
            self.srm_actual[var_min]["Si"] = w_Si
        elif var_min == "Fayalite": # Fe2SiO4
            M_Ol = 2*M_Fe + M_Si + 4*M_O
            w_Si = (M_Si)/(M_Ol) * 1000000
            w_Fe = (2*M_Fe)/(M_Ol) * 1000000
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Fe"] = w_Fe
        elif var_min == "Tephroite": # Mn2SiO4
            M_Ol = 2*M_Mn + M_Si + 4*M_O
            w_Si = (M_Si)/(M_Ol) * 1000000
            w_Mn = (2*M_Mn)/(M_Ol) * 1000000
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Mn"] = w_Mn
        elif var_min == "Albite": # NaAlSi3O8
            M_Ab = M_Na + M_Al + 3*M_Si + 8*M_O
            w_Na = (M_Na)/(M_Ab) * 1000000
            w_Al = (M_Al)/(M_Ab) * 1000000
            w_Si = (3*M_Si)/(M_Ab) * 1000000
            self.srm_actual[var_min]["Na"] = w_Na
            self.srm_actual[var_min]["Al"] = w_Al
            self.srm_actual[var_min]["Si"] = w_Si
        elif var_min == "Anorthite": # CaAl2Si2O8
            M_An = M_Ca + 2*(M_Al + M_Si) + 8*M_O
            w_Al = (2*M_Al)/(M_An) * 1000000
            w_Si = (2*M_Si)/(M_An) * 1000000
            w_Ca = (M_Ca)/(M_An) * 1000000
            self.srm_actual[var_min]["Al"] = w_Al
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min in ["Orthoclase", "Microcline"]: # KAlSi3O8
            M_OrMc = M_K + M_Al + 3*M_Si + 8*M_O
            w_Al = (M_Al)/(M_OrMc) * 1000000
            w_Si = (3*M_Si)/(M_OrMc) * 1000000
            w_K = (M_K)/(M_OrMc) * 1000000
            self.srm_actual[var_min]["Al"] = w_Al
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["K"] = w_K
        elif var_min == "Zircon": # ZrSiO4
            M_Zrn = M_Zr + (M_Si + 4*M_O)
            w_Si = (M_Si)/(M_Zrn)*1000000
            w_Zr = (M_Zr)/(M_Zrn)*1000000
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Zr"] = w_Zr
        elif var_min == "Meionite":
            self.srm_actual[var_min]["C"] = self.mineral_chem[var_min]["C"]
            self.srm_actual[var_min]["Al"] = self.mineral_chem[var_min]["Al"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
        elif var_min == "Marialite":
            self.srm_actual[var_min]["Na"] = self.mineral_chem[var_min]["Na"]
            self.srm_actual[var_min]["Al"] = self.mineral_chem[var_min]["Al"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Cl"] = self.mineral_chem[var_min]["Cl"]
        elif var_min == "Strontianite":
            self.srm_actual[var_min]["C"] = self.mineral_chem[var_min]["C"]
            self.srm_actual[var_min]["Sr"] = self.mineral_chem[var_min]["Sr"]
        elif var_min == "Titanite":
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
            self.srm_actual[var_min]["Ti"] = self.mineral_chem[var_min]["Ti"]
        elif var_min == "Aegirine":
            self.srm_actual[var_min]["Na"] = self.mineral_chem[var_min]["Na"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Diopside":
            self.srm_actual[var_min]["Mg"] = self.mineral_chem[var_min]["Mg"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
        elif var_min == "Hedenbergite":
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Ferrosilite":
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Enstatite":
            self.srm_actual[var_min]["Mg"] = self.mineral_chem[var_min]["Mg"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
        elif var_min == "Monazite-La":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["La"] = self.mineral_chem[var_min]["La"]
        elif var_min == "Monazite-Ce":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Ce"] = self.mineral_chem[var_min]["Ce"]
        elif var_min == "Monazite-Pr":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Pr"] = self.mineral_chem[var_min]["Pr"]
        elif var_min == "Monazite-Nd":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Nd"] = self.mineral_chem[var_min]["Nd"]
        elif var_min == "Monazite-Sm":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Sm"] = self.mineral_chem[var_min]["Sm"]
        elif var_min == "Monazite-Eu":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Eu"] = self.mineral_chem[var_min]["Eu"]
        elif var_min == "Monazite-Gd":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Gd"] = self.mineral_chem[var_min]["Gd"]
        elif var_min == "Monazite-Th":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Th"] = self.mineral_chem[var_min]["Th"]
        #
        for element in self.list_pse:
            if element in self.srm_actual[var_min]:
                self.container_var["SRM"][element].set(self.srm_actual[var_min][element])
            else:
                self.container_var["SRM"][element].set(0.0)
    #
    def select_mineral_is(self, var_min, fluidinclusion=False):
        self.srm_actual[var_min] = {}

        if var_min in self.mineral_chem:
            for key, value in self.mineral_chem[var_min].items():
                self.srm_actual[var_min][key] = value

            if fluidinclusion == False:
                if self.file_loaded == False:
                    self.container_var["isotopes"]["default"].set("Select IS")
                    self.container_var["settings"]["IS Concentration"].set(0.0)
            if len(self.container_var["mineralchemistry"]) > 0:
                self.container_var["mineralchemistry"].clear()
            self.container_var["mineralchemistry"].extend(list(self.mineral_chem[var_min].keys()))
            self.container_var["mineralchemistry"].sort()

            possible_is = []
            for element in self.container_var["mineralchemistry"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    key = re.search("(\D+)(\d+)", isotope)
                    if element == key.group(1):
                        possible_is.append(isotope)

            if fluidinclusion == True:
                list_fluidchemistry = ["H", "Na", "Mg", "Ca", "K", "Cl", "F", "Br", "I", "At"]
                for element in list_fluidchemistry:
                    for isotope in self.container_lists["ISOTOPES"]:
                        key = re.search("(\D+)(\d+)", isotope)
                        if element == key.group(1):
                            possible_is.append(isotope)

            if fluidinclusion == False:
                self.opt_is_std_def["menu"].delete(0, "end")
                self.opt_is_smpl_def["menu"].delete(0, "end")

                for index, isotope in enumerate(possible_is):
                    for file_long in self.container_lists["STD"]["Long"]:
                        if index == 0:
                            self.container_optionmenu["STD"][file_long]["menu"].delete(0, "end")

                        self.container_optionmenu["STD"][file_long]["menu"].add_command(
                            label=isotope, command=lambda element=isotope, file=file_long:
                            self.change_std_is(element, file))

                        if self.file_loaded is False:
                            self.container_var["STD"][file_long]["IS"].set("Select IS")
                    for file_long in self.container_lists["SMPL"]["Long"]:
                        if index == 0:
                            self.container_optionmenu["SMPL"][file_long]["menu"].delete(0, "end")

                        self.container_optionmenu["SMPL"][file_long]["menu"].add_command(
                            label=isotope,
                            command=lambda element=isotope, file=file_long, mineral=self.container_var["mineral"].get():
                            self.change_smpl_is(element, file, mineral))

                        if self.file_loaded is False:
                            self.container_var["SMPL"][file_long]["IS"].set("Select IS")

                    self.opt_is_std_def["menu"].add_command(
                        label=isotope, command=lambda element=isotope, mineral=var_min:
                        self.change_std_is_default(element, mineral))
                    self.opt_is_smpl_def["menu"].add_command(
                        label=isotope, command=lambda element=isotope, mineral=var_min:
                        self.change_smpl_is_default(element, mineral))

            self.container_lists["Possible IS"].clear()
            self.container_lists["Possible IS"].extend(possible_is)

            self.mineral_chem["Unknown"] = {}
            for element in self.container_var["mineralchemistry"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    key = re.search("(\D+)(\d+)", isotope)
                    if element == key.group(1):
                        self.mineral_chem["Unknown"][element] = self.srm_actual[var_min][element]
                        self.mineral_chem["Unknown"][isotope] = self.srm_actual[var_min][element]

    def onclick(self, var, filename, ratio_mode, event, spikes=False):
        if spikes == False:
            if var.get() in [1, 2, 3, 4, 5]:
                if len(self.container_helper["positions"][filename]) == 2 and len(
                        self.container_helper["indices"][filename]) == 2:
                    self.container_helper["positions"][filename].clear()
                    self.container_helper["indices"][filename].clear()
                #
                x_nearest = min(self.times, key=lambda x: abs(x - event.xdata))
                self.container_helper["positions"][filename].append(x_nearest)
                self.container_helper["indices"][filename].append(self.times[self.times == x_nearest].index[0])
                #
                if len(self.container_helper["positions"][filename])+len(
                        self.container_helper["indices"][filename]) == 4:
                    if var.get() == 1:  # BG
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["BG STD"][filename]) > 0:
                                self.bg_id = self.container_helper["positions"]["BG STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["BG SMPL"][filename]) > 0:
                                self.bg_id = self.container_helper["positions"]["BG SMPL"][filename][-1][4]
                        #
                        self.bg_id += 1
                        self.bg_idlist.append(self.bg_id)
                        self.container_helper["limits BG"][self.file]["ID"].append(self.bg_id)
                        self.container_helper["limits BG"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["BG"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["BG"][0].insert(
                            tk.END, "BG" + str(self.bg_id) + " [" + str(
                                self.container_helper["positions"][filename][0]) + "-" +
                                    str(self.container_helper["positions"][filename][1]) + "]")
                        #
                        if ratio_mode == False:
                            box_bg = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            box_bg_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            #
                            self.container_helper["limits BG"][self.file][str(self.bg_id)] = box_bg
                            self.container_helper["limits BG Ratio"][self.file][str(self.bg_id)] = box_bg_ratio
                            #
                            self.canvas.draw()
                            try:
                                self.canvas_ratio.draw()
                            except:
                                pass
                        else:
                            box_bg = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            box_bg_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            #
                            self.container_helper["limits BG"][self.file][str(self.bg_id)] = box_bg
                            self.container_helper["limits BG Ratio"][self.file][str(self.bg_id)] = box_bg_ratio
                            #
                            self.canvas.draw()
                            self.canvas_ratio.draw()
                        #
                        self.indices_bg = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id] = {}
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Box"] = box_bg
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["BG"][self.bg_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_bg, box_bg_ratio]}
                            self.container_helper["positions"]["BG STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.bg_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["BG"][self.bg_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_bg, box_bg_ratio]}
                            self.container_helper["positions"]["BG SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.bg_id])
                    elif var.get() == 2:    # SIG
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["SIG STD"][filename]) > 0:
                                self.sig_id = self.container_helper["positions"]["SIG STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["SIG SMPL"][filename]) > 0:
                                self.sig_id = self.container_helper["positions"]["SIG SMPL"][filename][-1][4]
                        self.sig_id += 1
                        self.sig_idlist.append(self.sig_id)
                        self.container_helper["limits SIG"][self.file]["ID"].append(self.sig_id)
                        self.container_helper["limits SIG"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["SIG"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["SIG"][0].insert(
                            tk.END, "SIG"+str(self.sig_id)+" ["+str(self.container_helper["positions"][filename][0])+"-"
                                           +str(self.container_helper["positions"][filename][1])+"]")
                        #
                        if ratio_mode == False:
                            box_sig = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            self.container_helper["limits SIG"][self.file][str(self.sig_id)] = box_sig
                            self.canvas.draw()
                            #
                            # box_sig_ratio = self.ax_ratio.axvspan(
                            #     self.container_helper["positions"][filename][0],
                            #     self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            # self.container_helper["limits SIG Ratio"][self.file][str(self.sig_id)] = box_sig_ratio
                            # self.canvas_ratio.draw()
                        else:
                            box_sig_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            box_sig = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            #
                            self.container_helper["limits SIG Ratio"][self.file][str(self.sig_id)] = box_sig_ratio
                            self.container_helper["limits SIG"][self.file][str(self.sig_id)] = box_sig
                            #
                            self.canvas_ratio.draw()
                            self.canvas.draw()
                        #
                        self.indices_sig = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id] = {}
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Box"] = box_sig
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["SIG"][self.sig_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_sig, box_sig_ratio]}
                            self.container_helper["positions"]["SIG STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.sig_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["SIG"][self.sig_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_sig, box_sig_ratio]}
                            self.container_helper["positions"]["SIG SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.sig_id])
                    elif var.get() == 3:    # SPK
                        isotope_list = []
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in self.container_helper[self.file_type][filename]["SPK"]:
                                self.container_helper[self.file_type][filename]["SPK"][isotope] = {}
                            if self.container_var["plotting"][isotope][1].get() == 1:
                                isotope_list.append(isotope)
                        for isotope in isotope_list:
                            if len(self.container_helper[self.file_type][filename]["SPK"][isotope]) == 0:
                                self.spk_id = 1
                            else:
                                self.spk_id = int(len(self.container_helper[self.file_type][filename]["SPK"][isotope]) + 1)
                        isotope = "".join(isotope_list)
                        self.spk_idlist.append(self.spk_id)
                        self.container_helper["limits SPK"][self.file]["ID"].append(self.spk_id)
                        self.container_helper["limits SPK"][self.file]["type"].append("custom")
                        self.container_helper["limits SPK"][self.file]["info"].append([isotope, self.spk_id])
                        self.container_helper["positions"]["SPK"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        #
                        if len(isotope_list) > 1:
                            color_var = self.yellow_dark
                        else:
                            color_var = self.isotope_colors[isotope]
                        self.container_listboxes[self.file_type][filename]["SPK"][0].insert(
                            tk.END, "["+", ".join(isotope_list)+"] #"+str(self.spk_id)+" ["+str(
                                self.container_helper["positions"][filename][0])+"-"+str(
                                self.container_helper["positions"][filename][1])+"]")
                        #
                        if ratio_mode == False:
                            box_spk = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            box_spk_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            #
                            self.container_helper["limits SPK"][self.file][str(self.spk_id)] = box_spk
                            self.container_helper["limits SPK Ratio"][self.file][str(self.spk_id)] = box_spk_ratio
                            #
                            self.canvas_ratio.draw()
                            self.canvas.draw()
                        else:
                            box_spk_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            box_spk = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            #
                            self.container_helper["limits SPK Ratio"][self.file][str(self.spk_id)] = box_spk_ratio
                            self.container_helper["limits SPK"][self.file][str(self.spk_id)] = box_spk
                            #
                            self.canvas_ratio.draw()
                            self.canvas.draw()
                        #
                        self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id] = {}
                        for isotope in isotope_list:
                            if isotope not in self.spikes_isotopes[self.file_type][filename]:
                                self.spikes_isotopes[self.file_type][filename][isotope] = []
                                self.spikes_isotopes[self.file_type][filename][isotope].append([self.container_helper["indices"][filename][0],
                                                                      self.container_helper["indices"][filename][1]])
                            else:
                                self.spikes_isotopes[self.file_type][filename][isotope].append([self.container_helper["indices"][filename][0],
                                                                      self.container_helper["indices"][filename][1]])
                            #
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Isotope"] = isotope
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Times"] = [
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1]]
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Positions"] = [
                                self.container_helper["indices"][filename][0],
                                self.container_helper["indices"][filename][1]]
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Box"] = box_spk
                            #
                            if self.file_type == "STD":
                                self.container_helper["STD"][filename]["SPK"][isotope][self.spk_id] = {
                                    "Times": [self.container_helper["positions"][filename][0],
                                              self.container_helper["positions"][filename][1]],
                                    "Positions": [self.container_helper["indices"][filename][0],
                                                  self.container_helper["indices"][filename][1]],
                                    "Object": [box_spk, box_spk_ratio]}
                            elif self.file_type == "SMPL":
                                self.container_helper["SMPL"][filename]["SPK"][isotope][self.spk_id] = {
                                    "Times": [self.container_helper["positions"][filename][0],
                                              self.container_helper["positions"][filename][1]],
                                    "Positions": [self.container_helper["indices"][filename][0],
                                                  self.container_helper["indices"][filename][1]],
                                    "Object": [box_spk, box_spk_ratio]}
                    #
                    elif var.get() == 4:    # MAT
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["MAT STD"][filename]) > 0:
                                self.mat_id = self.container_helper["positions"]["MAT STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["MAT SMPL"][filename]) > 0:
                                self.mat_id = self.container_helper["positions"]["MAT SMPL"][filename][-1][4]
                        self.mat_id += 1
                        self.mat_idlist.append(self.mat_id)
                        self.container_helper["limits MAT"][self.file]["ID"].append(self.mat_id)
                        self.container_helper["limits MAT"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["MAT"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["MAT"][0].insert(
                            tk.END, "MAT"+str(self.mat_id)+" ["+str(self.container_helper["positions"][filename][0])+"-"
                                    +str(self.container_helper["positions"][filename][1])+"]")
                        #
                        # if ratio_mode == False:
                        #     box_mat = self.ax.axvspan(
                        #         self.container_helper["positions"][filename][0],
                        #         self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        #     self.container_helper["limits MAT"][self.file][str(self.mat_id)] = box_mat
                        #     #
                        #     self.canvas.draw()
                        # else:
                        #     box_mat = self.ax_ratio.axvspan(
                        #         self.container_helper["positions"][filename][0],
                        #         self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        #     self.container_helper["limits MAT Ratio"][self.file][str(self.mat_id)] = box_mat
                        #     #
                        #     self.canvas_ratio.draw()
                        #
                        box_mat = self.ax.axvspan(
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        box_mat_ratio = self.ax_ratio.axvspan(
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        self.container_helper["limits MAT"][self.file][str(self.mat_id)] = box_mat
                        self.container_helper["limits MAT Ratio"][self.file][str(self.mat_id)] = box_mat_ratio
                        #
                        self.canvas_ratio.draw()
                        self.canvas.draw()
                        #
                        self.indices_mat = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id] = {}
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Box"] = box_mat
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["MAT"][self.mat_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_mat, box_mat_ratio]}
                            self.container_helper["positions"]["MAT STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.mat_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["MAT"][self.mat_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_mat, box_mat_ratio]}
                            self.container_helper["positions"]["MAT SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.mat_id])
                    #
                    elif var.get() == 5:  # INCL
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["INCL STD"][filename]) > 0:
                                self.incl_id = self.container_helper["positions"]["INCL STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["INCL SMPL"][filename]) > 0:
                                self.incl_id = self.container_helper["positions"]["INCL SMPL"][filename][-1][4]
                        self.incl_id += 1
                        self.incl_idlist.append(self.incl_id)
                        self.container_helper["limits INCL"][self.file]["ID"].append(self.incl_id)
                        self.container_helper["limits INCL"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["INCL"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["INCL"][0].insert(
                            tk.END, "INCL" + str(self.incl_id) + " [" + str(
                                self.container_helper["positions"][filename][0]) + "-"
                                    + str(self.container_helper["positions"][filename][1]) + "]")
                        #
                        if ratio_mode == False:
                            box_incl = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.slate_grey_dark)
                            self.container_helper["limits INCL"][self.file][str(self.incl_id)] = box_incl
                            #
                            self.canvas.draw()
                        else:
                            box_incl = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.slate_grey_dark)
                            self.container_helper["limits INCL Ratio"][self.file][str(self.incl_id)] = box_incl
                            #
                            self.canvas_ratio.draw()
                        #
                        self.indices_incl = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id] = {}
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id][
                            "Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id][
                            "Box"] = box_incl
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["INCL"][self.incl_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": box_incl}
                            self.container_helper["positions"]["INCL STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.incl_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["INCL"][self.incl_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": box_incl}
                            self.container_helper["positions"]["INCL SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.incl_id])
                #
                    elif var.get() == 0:
                        pass
            else:
                pass
            #
        else:
            if var.get() == 1:
                if len(self.container_helper["positions"][filename]) == 2 and len(self.container_helper["indices"][filename]) == 2:
                    self.container_helper["positions"][filename].clear()
                    self.container_helper["indices"][filename].clear()
                #
                x_nearest = min(self.times, key=lambda x: abs(x-event.xdata))
                self.container_helper["positions"][filename].append(x_nearest)
                self.container_helper["indices"][filename].append(self.times[self.times == x_nearest].index[0])
                #
                if len(self.container_helper["positions"][filename])+len(self.container_helper["indices"][filename]) == 4:
                    if var.get() == 1:
                        self.se_id += 1
                        self.se_idlist.append(self.se_id)
                        self.positions_se.append([round(self.container_helper["positions"][filename][0], 4), round(self.container_helper["positions"][filename][1], 4)])
                        self.lb_se.insert(tk.END, "Spikes"+str(self.se_id)+" ["+str(self.container_helper["positions"][filename][0])+"-"+
                                                       str(self.container_helper["positions"][filename][1])+"]"+" ["+str(self.container_helper["indices"][filename][0]) + "-"+
                                                       str(self.container_helper["indices"][filename][1]) +"]")
                        box_se = self.ax.axvspan(self.container_helper["positions"][filename][0], self.container_helper["positions"][filename][1], alpha=0.25,
                                                 color="#fff6a4")
                        self.limits_se[str(self.se_id)] = box_se
                        self.canvas_se.draw()
                    elif var.get() == 0:
                        pass
            else:
                pass

    def do_spike_elimination_all_grubbs(self, filetype):
        if "Selection" not in self.container_spikes:
            self.container_spikes["Selection"] = {}

        if self.pysills_mode == "MA":
            var_alpha = float(self.container_var["ma_setting"]["SE Alpha"].get())
            var_threshold = int(self.container_var["ma_setting"]["SE Threshold"].get())
            if self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (SILLS)":
                var_method = 0
            elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test":
                var_method = 1
        elif self.pysills_mode == "FI":
            var_alpha = float(self.container_var["fi_setting"]["SE Alpha"].get())
            var_threshold = int(self.container_var["fi_setting"]["SE Threshold"].get())
            if self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (SILLS)":
                var_method = 0
            elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test":
                var_method = 1
        elif self.pysills_mode == "MI":
            var_alpha = float(self.container_var["mi_setting"]["SE Alpha"].get())
            var_threshold = int(self.container_var["mi_setting"]["SE Threshold"].get())
            if self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (SILLS)":
                var_method = 0
            elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test":
                var_method = 1

        if filetype == "STD":
            for file_std in self.container_lists["STD"]["Short"]:
                isotopes_spiked_list = [*self.spikes_isotopes[filetype][file_std]]
                corrected_isotopes = []
                not_corrected_isotopes = []
                self.container_spikes[file_std] = {}

                if file_std not in self.container_spikes["Selection"]:
                    self.container_spikes["Selection"][file_std] = {}

                file_isotopes = self.container_lists["Measured Isotopes"][file_std]
                for isotope in file_isotopes:
                    if bool(self.spikes_isotopes[filetype][file_std]) == True:
                        for isotope_spiked, intervals in self.spikes_isotopes[filetype][file_std].items():
                            #
                            if isotope_spiked not in self.container_spikes["Selection"][file_std]:
                                self.container_spikes["Selection"][file_std][isotope_spiked] = {}
                            #
                            if isotope in isotopes_spiked_list:
                                if isotope not in corrected_isotopes:
                                    corrected_isotopes.append(isotope)
                                    spike_intervals = np.array(intervals)
                                    merged_intervals = ES(variable=spike_intervals).merge_times()
                                    for interval in merged_intervals:
                                        dataset_raw = self.container_measurements["RAW"][file_std][isotope][
                                                      interval[0]:interval[1]]
                                        dataset_complete = self.container_measurements["RAW"][file_std][isotope]

                                        if var_method == 0:
                                            data_smoothed, indices_outl = GrubbsTestSILLS(
                                                raw_data=dataset_raw, alpha=var_alpha, threshold=var_threshold,
                                                start_index=interval[0],
                                                dataset_complete=dataset_complete).determine_outlier()
                                        elif var_method == 1:
                                            data_smoothed, indices_outl = ES(variable=dataset_raw).do_grubbs_test(
                                                alpha=var_alpha, dataset_complete=dataset_complete,
                                                threshold=var_threshold)

                                        self.container_measurements["EDITED"][file_std][isotope][
                                            "Uncut"] = data_smoothed
                                        #
                                        self.container_spikes[file_std][isotope] = {
                                            "Data RAW": self.container_measurements["RAW"][file_std][isotope],
                                            "Data SMOOTHED": data_smoothed, "Indices": indices_outl,
                                            "Times": self.container_measurements["SELECTED"][file_std]["Time"]}
                                    #
                                    for var_index in indices_outl:
                                        self.container_spikes["Selection"][file_std][isotope][
                                            var_index] = data_smoothed[var_index]
                                    #
                                else:
                                    pass
                            else:
                                if isotope not in not_corrected_isotopes:
                                    not_corrected_isotopes.append(isotope)
                                    self.container_measurements["EDITED"][file_std][isotope]["Uncut"] = \
                                        self.container_measurements["RAW"][file_std][isotope]
                                else:
                                    pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][file_std][isotope]["Uncut"] = \
                                self.container_measurements["RAW"][file_std][isotope]
                        else:
                            pass
            # Fill container_spike_values
            self.helper_fill_container_spike_values(mode=filetype)
        elif filetype == "SMPL":
            for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
                filename_long = self.container_lists["SMPL"]["Long"][index]
                isotopes_spiked_list = [*self.spikes_isotopes[filetype][file_smpl]]
                corrected_isotopes = []
                not_corrected_isotopes = []
                self.container_spikes[file_smpl] = {}
                #
                if file_smpl not in self.container_spikes["Selection"]:
                    self.container_spikes["Selection"][file_smpl] = {}

                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_data = DE(filename_long=filename_long).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_data = DE(filename_long=filename_long).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    df_data = self.container_measurements["Dataframe"][file_smpl]

                list_names = list(df_data.columns.values)
                list_names.pop(0)
                df_isotopes = list_names

                for isotope in df_isotopes:
                    if bool(self.spikes_isotopes[filetype][file_smpl]) == True:
                        for isotope_spiked, intervals in self.spikes_isotopes[filetype][file_smpl].items():
                            #
                            if isotope_spiked not in self.container_spikes["Selection"][file_smpl]:
                                self.container_spikes["Selection"][file_smpl][isotope_spiked] = {}
                            #
                            if isotope in isotopes_spiked_list:
                                if isotope not in corrected_isotopes:
                                    corrected_isotopes.append(isotope)
                                    spike_intervals = np.array(intervals)
                                    merged_intervals = ES(variable=spike_intervals).merge_times()
                                    for interval in merged_intervals:
                                        dataset_raw = self.container_measurements["RAW"][file_smpl][isotope][
                                                      interval[0]:interval[1]]
                                        dataset_complete = self.container_measurements["RAW"][file_smpl][isotope]
                                        if var_method == 0:
                                            data_smoothed, indices_outl = GrubbsTestSILLS(
                                                raw_data=dataset_raw, alpha=var_alpha, threshold=var_threshold,
                                                start_index=interval[0],
                                                dataset_complete=dataset_complete).determine_outlier()
                                        elif var_method == 1:
                                            data_smoothed, indices_outl = ES(variable=dataset_raw).do_grubbs_test(
                                                alpha=var_alpha, dataset_complete=dataset_complete,
                                                threshold=var_threshold)
                                        #
                                        if self.pysills_mode == "FI":
                                            if self.container_var["fi_setting"]["Spike Elimination Inclusion"].get() == 2:
                                                length_incl_datasets = len(
                                                    self.container_helper["SMPL"][file_smpl]["INCL"]["Content"])
                                                #
                                                if length_incl_datasets > 0:
                                                    for key, items in self.container_helper["SMPL"][file_smpl]["INCL"][
                                                        "Content"].items():
                                                        var_indices = items["Indices"]
                                                        data_raw = self.container_measurements["RAW"][file_smpl][isotope]
                                                        #
                                                        for index in range(var_indices[0], var_indices[1] + 1):
                                                            data_smoothed[index] = data_raw[index]
                                        #
                                        self.container_measurements["EDITED"][file_smpl][isotope][
                                            "Uncut"] = data_smoothed
                                        self.container_spikes[file_smpl][isotope] = {
                                            "Data RAW": self.container_measurements["RAW"][file_smpl][isotope],
                                            "Data SMOOTHED": data_smoothed, "Indices": indices_outl,
                                            "Times": self.container_measurements["SELECTED"][file_smpl]["Time"]}
                                    #
                                    for var_index in indices_outl:
                                        self.container_spikes["Selection"][file_smpl][isotope][
                                            var_index] = data_smoothed[var_index]
                                    #
                                else:
                                    pass
                            else:
                                if isotope not in not_corrected_isotopes:
                                    not_corrected_isotopes.append(isotope)
                                    self.container_measurements["EDITED"][file_smpl][isotope]["Uncut"] = \
                                        self.container_measurements["RAW"][file_smpl][isotope]
                                else:
                                    pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][file_smpl][isotope]["Uncut"] = \
                                self.container_measurements["RAW"][file_smpl][isotope]
                        else:
                            pass
            # Fill container_spike_values
            self.helper_fill_container_spike_values(mode=filetype)

    def ma_export_calculation_report(self):
        header = ["filename", "ID"]
        n_decimals_concentration = 5
        n_decimals_intensity = 5
        n_decimals_sensitivity = 5
        #
        # Concentration
        report_concentration = {}
        report_concentration["Total STD"] = {}
        report_concentration["Total SMPL"] = {}
        # 1-Sigma-Concentration
        report_concentration_sigma = {}
        report_concentration_sigma["Total STD"] = {}
        report_concentration_sigma["Total SMPL"] = {}
        # Concentration Ratio
        report_concentration_ratio = {}
        report_concentration_ratio["Total STD"] = {}
        report_concentration_ratio["Total SMPL"] = {}
        # Limit of Detection
        report_lod = {}
        report_lod["Total STD"] = {}
        report_lod["Total SMPL"] = {}
        # Intensity
        report_intensity = {}
        report_intensity["Total STD"] = {}
        report_intensity["Total SMPL"] = {}
        # 1-Sigma-Intensity
        report_intensity_sigma = {}
        report_intensity_sigma["Total STD"] = {}
        report_intensity_sigma["Total SMPL"] = {}
        # Intensity Ratio
        report_intensity_ratio = {}
        report_intensity_ratio["Total STD"] = {}
        report_intensity_ratio["Total SMPL"] = {}
        # Analytical Sensitivity
        report_analytical_sensitivity = {}
        report_analytical_sensitivity["Total STD"] = {}
        report_analytical_sensitivity["Total SMPL"] = {}
        # Normalized Sensitivity
        report_normalized_sensitivity = {}
        report_normalized_sensitivity["Total STD"] = {}
        report_normalized_sensitivity["Total SMPL"] = {}
        # Relative Sensitivity Factor
        report_rsf = {}
        report_rsf["Total STD"] = {}
        report_rsf["Total SMPL"] = {}
        #
        for var_filetype in ["STD", "SMPL"]:
            var_key = "Total " + str(var_filetype)
            #
            report_concentration[var_filetype] = {}
            report_concentration[var_key] = {}
            report_concentration[var_key]["filename"] = "All Files"
            #
            report_concentration_sigma[var_filetype] = {}
            report_concentration_sigma[var_key] = {}
            report_concentration_sigma[var_key]["filename"] = "All Files"
            #
            report_concentration_ratio[var_filetype] = {}
            report_concentration_ratio[var_key] = {}
            report_concentration_ratio[var_key]["filename"] = "All Files"
            #
            report_lod[var_filetype] = {}
            report_lod[var_key] = {}
            report_lod[var_key]["filename"] = "All Files"
            #
            report_intensity[var_filetype] = {}
            report_intensity[var_key] = {}
            report_intensity[var_key]["filename"] = "All Files"
            #
            report_intensity_sigma[var_filetype] = {}
            report_intensity_sigma[var_key] = {}
            report_intensity_sigma[var_key]["filename"] = "All Files"
            #
            report_intensity_ratio[var_filetype] = {}
            report_intensity_ratio[var_key] = {}
            report_intensity_ratio[var_key]["filename"] = "All Files"
            #
            report_analytical_sensitivity[var_filetype] = {}
            report_analytical_sensitivity[var_key] = {}
            report_analytical_sensitivity[var_key]["filename"] = "All Files"
            #
            report_normalized_sensitivity[var_filetype] = {}
            report_normalized_sensitivity[var_key] = {}
            report_normalized_sensitivity[var_key]["filename"] = "All Files"
            #
            report_rsf[var_filetype] = {}
            report_rsf[var_key] = {}
            report_rsf[var_key]["filename"] = "All Files"
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_concentration[var_filetype][var_datatype] = {}
                report_concentration_sigma[var_filetype][var_datatype] = {}
                report_concentration_ratio[var_filetype][var_datatype] = {}
                report_lod[var_filetype][var_datatype] = {}
                #
                report_intensity[var_filetype][var_datatype] = {}
                report_intensity_sigma[var_filetype][var_datatype] = {}
                report_intensity_ratio[var_filetype][var_datatype] = {}
                #
                report_analytical_sensitivity[var_filetype][var_datatype] = {}
                report_normalized_sensitivity[var_filetype][var_datatype] = {}
                report_rsf[var_filetype][var_datatype] = {}
                #
                for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                    file_long = self.container_lists[var_filetype]["Long"][index]
                    ## Compositional Results
                    report_concentration[var_filetype][var_datatype][file_short] = {}
                    report_concentration[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_sigma[var_filetype][var_datatype][file_short] = {}
                    report_concentration_sigma[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_ratio[var_filetype][var_datatype][file_short] = {}
                    report_concentration_ratio[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_lod[var_filetype][var_datatype][file_short] = {}
                    report_lod[var_filetype][var_datatype][file_short]["filename"] = file_short
                    if var_filetype == "STD":
                        report_concentration[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_concentration_ratio[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_lod[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_concentration[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_concentration_ratio[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_lod[var_filetype][var_datatype][file_short]["ID"] = self.container_var[var_filetype][
                            file_long]["ID"].get()
                    ## Intensity Results
                    report_intensity[var_filetype][var_datatype][file_short] = {}
                    report_intensity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_sigma[var_filetype][var_datatype][file_short] = {}
                    report_intensity_sigma[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_ratio[var_filetype][var_datatype][file_short] = {}
                    report_intensity_ratio[var_filetype][var_datatype][file_short]["filename"] = file_short
                    if var_filetype == "STD":
                        report_intensity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_ratio[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_intensity[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_ratio[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                    ## Sensitivity Results
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_rsf[var_filetype][var_datatype][file_short] = {}
                    report_rsf[var_filetype][var_datatype][file_short]["filename"] = file_short
                    if var_filetype == "STD":
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = self.container_var[var_filetype][
                            file_long]["ID"].get()
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        ## Compositional Results
                        # Concentration
                        if var_filetype == "SMPL":
                            value_i = self.container_concentration[var_filetype][var_datatype][file_short]["MAT"][
                                isotope]
                            value_lod_i = self.container_lod[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        else:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            var_srm_file = self.container_var["STD"][file_long]["SRM"].get()
                            if var_srm_i == var_srm_file:
                                value_i = self.container_concentration[var_filetype][var_datatype][file_short]["MAT"][
                                    isotope]
                                value_lod_i = self.container_lod[var_filetype][var_datatype][file_short]["MAT"][isotope]
                            else:
                                value_i = None
                        if value_i != None:
                            if value_i >= value_lod_i:
                                report_concentration[var_filetype][var_datatype][file_short][isotope] = round(
                                    value_i, n_decimals_concentration)
                            else:
                                report_concentration[var_filetype][var_datatype][file_short][isotope] = round(
                                    -value_i, n_decimals_concentration)
                        else:
                            report_concentration[var_filetype][var_datatype][file_short][isotope] = "---"

                        # 1-Sigma-Concentration
                        value_i = self.container_concentration[var_filetype][var_datatype][file_short]["1 SIGMA MAT"][
                            isotope]
                        report_concentration_sigma[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_concentration)

                        # Concentration Ratio
                        value_i = self.container_concentration_ratio[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        try:
                            report_concentration_ratio[var_filetype][var_datatype][file_short][
                                isotope] = "{:0.5e}".format(value_i)
                        except:
                            report_concentration_ratio[var_filetype][var_datatype][file_short][isotope] = "---"

                        # Limit of Detection
                        value_i = self.container_lod[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        report_lod[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_concentration)

                        ## Intensity Results
                        # Intensity
                        if var_filetype == "SMPL":
                            value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short]["MAT"][
                                isotope]
                        else:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            var_srm_file = self.container_var["STD"][file_long]["SRM"].get()
                            if var_srm_i == var_srm_file:
                                value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short][
                                    "MAT"][isotope]
                            else:
                                value_i = None
                        if value_i != None:
                            report_intensity[var_filetype][var_datatype][file_short][isotope] = round(
                                value_i, n_decimals_intensity)
                        else:
                            report_intensity[var_filetype][var_datatype][file_short][isotope] = "---"

                        # 1-Sigma-Intensity
                        value_i = self.container_intensity[var_filetype][var_datatype][file_short]["1 SIGMA MAT"][
                            isotope]
                        report_intensity_sigma[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_intensity)

                        # Intensity Ratio
                        value_i = self.container_intensity_ratio[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        try:
                            report_intensity_ratio[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                                value_i)
                        except:
                            report_intensity_ratio[var_filetype][var_datatype][file_short][isotope] = "---"

                        ## Sensitivity Results
                        # Analytical Sensitivity
                        value_i = self.container_analytical_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        try:
                            report_analytical_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                                value_i, n_decimals_sensitivity)
                        except:
                            report_analytical_sensitivity[var_filetype][var_datatype][file_short][isotope] = "---"

                        # Normalized Sensitivity
                        if var_filetype == "SMPL":
                            value_i = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short][
                                "MAT"][isotope]
                        else:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            var_srm_file = self.container_var["STD"][file_long]["SRM"].get()
                            if var_srm_i == var_srm_file:
                                value_i = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short][
                                    "MAT"][isotope]
                            else:
                                value_i = None
                        if value_i != None:
                            report_normalized_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                                value_i, n_decimals_sensitivity)
                        else:
                            report_normalized_sensitivity[var_filetype][var_datatype][file_short][isotope] = "---"

                        # Relative Sensitivity Factor
                        value_i = self.container_rsf[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        try:
                            report_rsf[var_filetype][var_datatype][file_short][isotope] = round(
                                value_i, n_decimals_sensitivity)
                        except:
                            report_rsf[var_filetype][var_datatype][file_short][isotope] = "---"

        for isotope in self.container_lists["ISOTOPES"]:
            header.append(isotope)
        #
        var_file_extension_pre = self.container_var["General Settings"]["File type"].get()
        if var_file_extension_pre == "*.csv":
            var_file_extension = ".csv"
        elif var_file_extension_pre == "*.txt":
            var_file_extension = ".txt"

        var_delimiter_pre = self.container_var["General Settings"]["Delimiter"].get()
        if var_delimiter_pre == "comma":
            var_delimiter = ","
        elif var_delimiter_pre == "semicolon":
            var_delimiter = ";"

        if self.rb_report.get() == 0: # All in one
            self.ma_export_report_0(
                report_concentration, report_concentration_sigma, report_concentration_ratio, report_lod,
                report_intensity, report_intensity_sigma, report_intensity_ratio, report_analytical_sensitivity,
                report_normalized_sensitivity, report_rsf, var_file_extension, var_delimiter, header)
        elif self.rb_report.get() == 1: # STD vs. SMPL
            self.ma_export_report_1(
                report_concentration, report_concentration_sigma, report_concentration_ratio, report_lod,
                report_intensity, report_intensity_sigma, report_intensity_ratio, report_analytical_sensitivity,
                report_normalized_sensitivity, report_rsf, var_file_extension, var_delimiter, header)
        elif self.rb_report.get() == 2: # RAW vs. SMOOTHED
            self.ma_export_report_2(
                report_concentration, report_concentration_sigma, report_concentration_ratio, report_lod,
                report_intensity, report_intensity_sigma, report_intensity_ratio, report_analytical_sensitivity,
                report_normalized_sensitivity, report_rsf, var_file_extension, var_delimiter, header)

    def ma_export_report_0(
            self, report_concentration, report_concentration_sigma, report_concentration_ratio, report_lod,
            report_intensity, report_intensity_sigma, report_intensity_ratio, report_analytical_sensitivity,
            report_normalized_sensitivity, report_rsf, var_file_extension, var_delimiter, header):
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=var_file_extension)
        filename = export_file.name
        #
        with open(filename, "w", newline="") as report_file:
            writer = csv.DictWriter(report_file, fieldnames=header, delimiter=var_delimiter)
            report_file.write("CALCULATION REPORT\n")
            report_file.write("\n")
            report_file.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file.write("\n")
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_file.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file.write("\n")
                for var_filetype in ["SMPL", "STD"]:
                    if var_filetype == "SMPL":
                        report_file.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file.write("STANDARD FILES\n")
                    var_key = "Total " + str(var_filetype)
                    report_file.write("\n")

                    ## COMPOSITIONAL ANALYSIS
                    report_file.write("COMPOSITIONAL ANALYSIS\n")

                    report_file.write("Concentration\n")            # Concentration
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration[var_filetype][var_datatype][file_short])
                    report_file.write("\n")

                    report_file.write("1-Sigma-Concentration\n")  # 1-Sigma-Concentration
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration_sigma[var_filetype][var_datatype][file_short])
                    report_file.write("\n")

                    if var_filetype == "SMPL":
                        report_file.write("Concentration Ratio\n")      # Concentration Ratio
                        report_file.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_ratio[var_filetype][var_datatype][file_short])
                        report_file.write("\n")

                        report_file.write("Limit of Detection\n")  # Limit of Detection
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod[var_filetype][var_datatype][file_short])
                        report_file.write("\n")

                    report_file.write("INTENSITY ANALYSIS\n")

                    report_file.write("Intensity (Sample)\n")  # Intensity
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    report_file.write("\n")

                    report_file.write("1-Sigma-Intensity (Sample)\n")  # 1-Sigma-Intensity
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_sigma[var_filetype][var_datatype][file_short])
                    report_file.write("\n")

                    if var_filetype == "SMPL":
                        report_file.write("Intensity Ratio (Sample)\n")  # Intensity Ratio
                        report_file.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_ratio[var_filetype][var_datatype][file_short])
                        report_file.write("\n")

                    report_file.write("SENSITIVITY ANALYSIS\n")

                    report_file.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file.write("(1)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    report_file.write("\n")

                    report_file.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    report_file.write("\n")

                    if var_filetype == "SMPL":
                        report_file.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                        report_file.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                        report_file.write("\n")

    def ma_export_report_1(
            self, report_concentration, report_concentration_sigma, report_concentration_ratio, report_lod,
            report_intensity, report_intensity_sigma, report_intensity_ratio, report_analytical_sensitivity,
            report_normalized_sensitivity, report_rsf, var_file_extension, var_delimiter, header):
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=var_file_extension)
        filename_base = export_file.name
        filename_base_parts = filename_base.split(".")
        filename_std = filename_base_parts[0] + "_std" + var_file_extension
        filename_smpl = filename_base_parts[0] + "_smpl" + var_file_extension

        if os.path.exists(filename_base):
            os.remove(filename_base)
        else:
            print("The file does not exist!")

        # Standard Files
        with open(filename_std, "w", newline="") as report_file_std:
            writer = csv.DictWriter(report_file_std, fieldnames=header, delimiter=var_delimiter)
            report_file_std.write("CALCULATION REPORT\n")
            report_file_std.write("\n")
            report_file_std.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file_std.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file_std.write("\n")
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_file_std.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file_std.write("\n")
                for var_filetype in ["STD"]:
                    if var_filetype == "SMPL":
                        report_file_std.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file_std.write("STANDARD FILES\n")
                    var_key = "Total " + str(var_filetype)
                    report_file_std.write("\n")

                    ## COMPOSITIONAL ANALYSIS
                    report_file_std.write("COMPOSITIONAL ANALYSIS\n")

                    report_file_std.write("Concentration\n")            # Concentration
                    report_file_std.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration[var_filetype][var_datatype][file_short])
                    report_file_std.write("\n")

                    report_file_std.write("1-Sigma-Concentration\n")  # 1-Sigma-Concentration
                    report_file_std.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration_sigma[var_filetype][var_datatype][file_short])
                    report_file_std.write("\n")

                    if var_filetype == "SMPL":
                        report_file_std.write("Concentration Ratio\n")      # Concentration Ratio
                        report_file_std.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_ratio[var_filetype][var_datatype][file_short])
                        report_file_std.write("\n")

                        report_file_std.write("Limit of Detection\n")  # Limit of Detection
                        report_file_std.write("(ppm)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod[var_filetype][var_datatype][file_short])
                        report_file_std.write("\n")

                    report_file_std.write("INTENSITY ANALYSIS\n")

                    report_file_std.write("Intensity (Sample)\n")  # Intensity
                    report_file_std.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    report_file_std.write("\n")

                    report_file_std.write("1-Sigma-Intensity (Sample)\n")  # 1-Sigma-Intensity
                    report_file_std.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_sigma[var_filetype][var_datatype][file_short])
                    report_file_std.write("\n")

                    if var_filetype == "SMPL":
                        report_file_std.write("Intensity Ratio (Sample)\n")  # Intensity Ratio
                        report_file_std.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_ratio[var_filetype][var_datatype][file_short])
                        report_file_std.write("\n")

                    report_file_std.write("SENSITIVITY ANALYSIS\n")

                    report_file_std.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file_std.write("(1)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_std.write("\n")

                    report_file_std.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file_std.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_std.write("\n")

                    if var_filetype == "SMPL":
                        report_file_std.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                        report_file_std.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                        report_file_std.write("\n")
        # Sample Files
        with open(filename_smpl, "w", newline="") as report_file_smpl:
            writer = csv.DictWriter(report_file_smpl, fieldnames=header, delimiter=var_delimiter)
            report_file_smpl.write("CALCULATION REPORT\n")
            report_file_smpl.write("\n")
            report_file_smpl.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file_smpl.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file_smpl.write("\n")
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_file_smpl.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file_smpl.write("\n")
                for var_filetype in ["SMPL"]:
                    if var_filetype == "SMPL":
                        report_file_smpl.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file_smpl.write("STANDARD FILES\n")
                    var_key = "Total " + str(var_filetype)
                    report_file_smpl.write("\n")

                    ## COMPOSITIONAL ANALYSIS
                    report_file_smpl.write("COMPOSITIONAL ANALYSIS\n")

                    report_file_smpl.write("Concentration\n")            # Concentration
                    report_file_smpl.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    report_file_smpl.write("1-SigmaConcentration\n")  # 1-Sigma-Concentration
                    report_file_smpl.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_sigma[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    if var_filetype == "SMPL":
                        report_file_smpl.write("Concentration Ratio\n")      # Concentration Ratio
                        report_file_smpl.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_ratio[var_filetype][var_datatype][file_short])
                        report_file_smpl.write("\n")

                        report_file_smpl.write("Limit of Detection\n")  # Limit of Detection
                        report_file_smpl.write("(ppm)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod[var_filetype][var_datatype][file_short])
                        report_file_smpl.write("\n")

                    report_file_smpl.write("INTENSITY ANALYSIS\n")

                    report_file_smpl.write("Intensity (Sample)\n")  # Intensity
                    report_file_smpl.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    report_file_smpl.write("1-Sigma-Intensity (Sample)\n")  # 1-Sigma-Intensity
                    report_file_smpl.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_sigma[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    report_file_smpl.write("1-Sigma-Intensity (Sample)\n")  # 1-Sigma-Intensity
                    report_file_smpl.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    if var_filetype == "SMPL":
                        report_file_smpl.write("Intensity Ratio (Sample)\n")  # Intensity Ratio
                        report_file_smpl.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_ratio[var_filetype][var_datatype][file_short])
                        report_file_smpl.write("\n")

                    report_file_smpl.write("SENSITIVITY ANALYSIS\n")

                    report_file_smpl.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file_smpl.write("(1)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    report_file_smpl.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file_smpl.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_smpl.write("\n")

                    if var_filetype == "SMPL":
                        report_file_smpl.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                        report_file_smpl.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                        report_file_smpl.write("\n")

    def ma_export_report_2(
            self, report_concentration, report_concentration_sigma, report_concentration_ratio, report_lod,
            report_intensity, report_intensity_sigma, report_intensity_ratio, report_analytical_sensitivity,
            report_normalized_sensitivity, report_rsf, var_file_extension, var_delimiter, header):
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=var_file_extension)
        filename_base = export_file.name
        filename_base_parts = filename_base.split(".")
        filename_raw = filename_base_parts[0] + "_raw" + var_file_extension
        filename_smoothed = filename_base_parts[0] + "_smoothed" + var_file_extension

        if os.path.exists(filename_base):
            os.remove(filename_base)
        else:
            print("The file does not exist!")

        # RAW Data
        with open(filename_raw, "w", newline="") as report_file_raw:
            writer = csv.DictWriter(report_file_raw, fieldnames=header, delimiter=var_delimiter)
            report_file_raw.write("CALCULATION REPORT\n")
            report_file_raw.write("\n")
            report_file_raw.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file_raw.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file_raw.write("\n")
            for var_datatype in ["RAW"]:
                report_file_raw.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file_raw.write("\n")
                for var_filetype in ["SMPL", "STD"]:
                    if var_filetype == "SMPL":
                        report_file_raw.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file_raw.write("STANDARD FILES\n")
                    var_key = "Total " + str(var_filetype)
                    report_file_raw.write("\n")

                    ## COMPOSITIONAL ANALYSIS
                    report_file_raw.write("COMPOSITIONAL ANALYSIS\n")

                    report_file_raw.write("Concentration\n")            # Concentration
                    report_file_raw.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration[var_filetype][var_datatype][file_short])
                    report_file_raw.write("\n")

                    report_file_raw.write("1-Sigma-Concentration\n")  # 1-Sigma-Concentration
                    report_file_raw.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration_sigma[var_filetype][var_datatype][file_short])
                    report_file_raw.write("\n")

                    if var_filetype == "SMPL":
                        report_file_raw.write("Concentration Ratio\n")      # Concentration Ratio
                        report_file_raw.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_ratio[var_filetype][var_datatype][file_short])
                        report_file_raw.write("\n")

                        report_file_raw.write("Limit of Detection\n")  # Limit of Detection
                        report_file_raw.write("(ppm)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod[var_filetype][var_datatype][file_short])
                        report_file_raw.write("\n")

                    report_file_raw.write("INTENSITY ANALYSIS\n")

                    report_file_raw.write("Intensity (Sample)\n")  # Intensity
                    report_file_raw.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    report_file_raw.write("\n")

                    report_file_raw.write("1-Sigma-Intensity (Sample)\n")  # 1-Sigma-Intensity
                    report_file_raw.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_sigma[var_filetype][var_datatype][file_short])
                    report_file_raw.write("\n")

                    if var_filetype == "SMPL":
                        report_file_raw.write("Intensity Ratio (Sample)\n")  # Intensity Ratio
                        report_file_raw.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_ratio[var_filetype][var_datatype][file_short])
                        report_file_raw.write("\n")

                    report_file_raw.write("SENSITIVITY ANALYSIS\n")

                    report_file_raw.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file_raw.write("(1)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_raw.write("\n")

                    report_file_raw.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file_raw.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_raw.write("\n")

                    if var_filetype == "SMPL":
                        report_file_raw.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                        report_file_raw.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                        report_file_raw.write("\n")
        # SMOOTHED Data
        with open(filename_smoothed, "w", newline="") as report_file_smoothed:
            writer = csv.DictWriter(report_file_smoothed, fieldnames=header, delimiter=var_delimiter)
            report_file_smoothed.write("CALCULATION REPORT\n")
            report_file_smoothed.write("\n")
            report_file_smoothed.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file_smoothed.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file_smoothed.write("\n")
            for var_datatype in ["SMOOTHED"]:
                report_file_smoothed.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file_smoothed.write("\n")
                for var_filetype in ["SMPL", "STD"]:
                    if var_filetype == "SMPL":
                        report_file_smoothed.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file_smoothed.write("STANDARD FILES\n")
                    var_key = "Total " + str(var_filetype)
                    report_file_smoothed.write("\n")

                    ## COMPOSITIONAL ANALYSIS
                    report_file_smoothed.write("COMPOSITIONAL ANALYSIS\n")

                    report_file_smoothed.write("Concentration\n")            # Concentration
                    report_file_smoothed.write("(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration[var_filetype][var_datatype][file_short])
                    report_file_smoothed.write("\n")

                    if var_filetype == "SMPL":
                        report_file_smoothed.write("Concentration Ratio\n")      # Concentration Ratio
                        report_file_smoothed.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_ratio[var_filetype][var_datatype][file_short])
                        report_file_smoothed.write("\n")

                        report_file_smoothed.write("Limit of Detection\n")  # Limit of Detection
                        report_file_smoothed.write("(ppm)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod[var_filetype][var_datatype][file_short])
                        report_file_smoothed.write("\n")

                    report_file_smoothed.write("INTENSITY ANALYSIS\n")

                    report_file_smoothed.write("Intensity (Sample)\n")  # Intensity
                    report_file_smoothed.write("(cps)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    report_file_smoothed.write("\n")

                    if var_filetype == "SMPL":
                        report_file_smoothed.write("Intensity Ratio (Sample)\n")  # Intensity Ratio
                        report_file_smoothed.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_ratio[var_filetype][var_datatype][file_short])
                        report_file_smoothed.write("\n")

                    report_file_smoothed.write("SENSITIVITY ANALYSIS\n")

                    report_file_smoothed.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file_smoothed.write("(1)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_smoothed.write("\n")

                    report_file_smoothed.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file_smoothed.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    report_file_smoothed.write("\n")

                    if var_filetype == "SMPL":
                        report_file_smoothed.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                        report_file_smoothed.write("(1)\n")
                        writer.writeheader()
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                        report_file_smoothed.write("\n")

    def fi_export_calculation_report(self):
        header = ["filename", "ID"]
        #
        # Concentration Inclusion
        report_concentration_incl = {}
        report_concentration_incl["Total STD"] = {}
        report_concentration_incl["Total SMPL"] = {}
        # Concentration Matrix
        report_concentration_mat = {}
        report_concentration_mat["Total STD"] = {}
        report_concentration_mat["Total SMPL"] = {}
        # Concentration Ratio
        report_concentration_mix = {}
        report_concentration_mix["Total STD"] = {}
        report_concentration_mix["Total SMPL"] = {}
        # Limit of Detection
        report_lod_incl = {}
        report_lod_incl["Total STD"] = {}
        report_lod_incl["Total SMPL"] = {}
        #
        report_lod_mat = {}
        report_lod_mat["Total STD"] = {}
        report_lod_mat["Total SMPL"] = {}
        # Mixing ratio
        report_mixingratio_a = {}
        report_mixingratio_a["Total STD"] = {}
        report_mixingratio_a["Total SMPL"] = {}
        #
        report_mixingratio_x = {}
        report_mixingratio_x["Total STD"] = {}
        report_mixingratio_x["Total SMPL"] = {}
        # Intensity Inclusion
        report_intensity_incl = {}
        report_intensity_incl["Total STD"] = {}
        report_intensity_incl["Total SMPL"] = {}
        # Intensity Matrix
        report_intensity_mat = {}
        report_intensity_mat["Total STD"] = {}
        report_intensity_mat["Total SMPL"] = {}
        # Intensity Background
        report_intensity_bg = {}
        report_intensity_bg["Total STD"] = {}
        report_intensity_bg["Total SMPL"] = {}
        # Intensity Mix
        report_intensity_mix = {}
        report_intensity_mix["Total STD"] = {}
        report_intensity_mix["Total SMPL"] = {}
        # Analytical Sensitivity
        report_analytical_sensitivity = {}
        report_analytical_sensitivity["Total STD"] = {}
        report_analytical_sensitivity["Total SMPL"] = {}
        # Normalized Sensitivity
        report_normalized_sensitivity = {}
        report_normalized_sensitivity["Total STD"] = {}
        report_normalized_sensitivity["Total SMPL"] = {}
        # Relative Sensitivity Factor
        report_rsf = {}
        report_rsf["Total STD"] = {}
        report_rsf["Total SMPL"] = {}
        #
        for var_filetype in ["STD", "SMPL"]:
            var_key = "Total " + str(var_filetype)
            #
            report_concentration_incl[var_filetype] = {}
            report_concentration_incl[var_key] = {}
            report_concentration_incl[var_key]["filename"] = "All Files"
            #
            report_concentration_mat[var_filetype] = {}
            report_concentration_mat[var_key] = {}
            report_concentration_mat[var_key]["filename"] = "All Files"
            #
            report_concentration_mix[var_filetype] = {}
            report_concentration_mix[var_key] = {}
            report_concentration_mix[var_key]["filename"] = "All Files"
            #
            report_lod_incl[var_filetype] = {}
            report_lod_incl[var_key] = {}
            report_lod_incl[var_key]["filename"] = "All Files"
            #
            report_lod_mat[var_filetype] = {}
            report_lod_mat[var_key] = {}
            report_lod_mat[var_key]["filename"] = "All Files"
            #
            report_mixingratio_a[var_filetype] = {}
            report_mixingratio_a[var_key] = {}
            report_mixingratio_a[var_key]["filename"] = "All Files"
            #
            report_mixingratio_x[var_filetype] = {}
            report_mixingratio_x[var_key] = {}
            report_mixingratio_x[var_key]["filename"] = "All Files"
            #
            report_intensity_incl[var_filetype] = {}
            report_intensity_incl[var_key] = {}
            report_intensity_incl[var_key]["filename"] = "All Files"
            #
            report_intensity_mat[var_filetype] = {}
            report_intensity_mat[var_key] = {}
            report_intensity_mat[var_key]["filename"] = "All Files"
            #
            report_intensity_bg[var_filetype] = {}
            report_intensity_bg[var_key] = {}
            report_intensity_bg[var_key]["filename"] = "All Files"
            #
            report_intensity_mix[var_filetype] = {}
            report_intensity_mix[var_key] = {}
            report_intensity_mix[var_key]["filename"] = "All Files"
            #
            report_analytical_sensitivity[var_filetype] = {}
            report_analytical_sensitivity[var_key] = {}
            report_analytical_sensitivity[var_key]["filename"] = "All Files"
            #
            report_normalized_sensitivity[var_filetype] = {}
            report_normalized_sensitivity[var_key] = {}
            report_normalized_sensitivity[var_key]["filename"] = "All Files"
            #
            report_rsf[var_filetype] = {}
            report_rsf[var_key] = {}
            report_rsf[var_key]["filename"] = "All Files"
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_concentration_incl[var_filetype][var_datatype] = {}
                report_concentration_mat[var_filetype][var_datatype] = {}
                report_concentration_mix[var_filetype][var_datatype] = {}
                report_lod_incl[var_filetype][var_datatype] = {}
                report_lod_mat[var_filetype][var_datatype] = {}
                report_mixingratio_a[var_filetype][var_datatype] = {}
                report_mixingratio_x[var_filetype][var_datatype] = {}
                #
                report_intensity_incl[var_filetype][var_datatype] = {}
                report_intensity_mat[var_filetype][var_datatype] = {}
                report_intensity_bg[var_filetype][var_datatype] = {}
                report_intensity_mix[var_filetype][var_datatype] = {}
                #
                report_analytical_sensitivity[var_filetype][var_datatype] = {}
                report_normalized_sensitivity[var_filetype][var_datatype] = {}
                report_rsf[var_filetype][var_datatype] = {}
                #
                for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                    file_long = self.container_lists[var_filetype]["Long"][index]
                    file_isotopes = self.container_lists["Measured Isotopes"][file_short]

                    report_concentration_incl[var_filetype][var_datatype][file_short] = {}
                    report_concentration_incl[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_mat[var_filetype][var_datatype][file_short] = {}
                    report_concentration_mat[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_mix[var_filetype][var_datatype][file_short] = {}
                    report_concentration_mix[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_lod_incl[var_filetype][var_datatype][file_short] = {}
                    report_lod_incl[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_lod_mat[var_filetype][var_datatype][file_short] = {}
                    report_lod_mat[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_mixingratio_a[var_filetype][var_datatype][file_short] = {}
                    report_mixingratio_a[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_mixingratio_x[var_filetype][var_datatype][file_short] = {}
                    report_mixingratio_x[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_concentration_incl[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_concentration_mat[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_concentration_mix[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_lod_incl[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_lod_mat[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_mixingratio_a[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_mixingratio_x[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_concentration_incl[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_concentration_mat[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_concentration_mix[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_lod_incl[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_lod_mat[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_mixingratio_a[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_mixingratio_x[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                    #
                    report_intensity_incl[var_filetype][var_datatype][file_short] = {}
                    report_intensity_incl[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_mat[var_filetype][var_datatype][file_short] = {}
                    report_intensity_mat[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_bg[var_filetype][var_datatype][file_short] = {}
                    report_intensity_bg[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_mix[var_filetype][var_datatype][file_short] = {}
                    report_intensity_mix[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_intensity_incl[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_mat[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_bg[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_mix[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_intensity_incl[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_mat[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_bg[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_mix[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                    #
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_rsf[var_filetype][var_datatype][file_short] = {}
                    report_rsf[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = self.container_var[var_filetype][
                            file_long]["ID"].get()
                    #
                    for isotope in file_isotopes:
                        ## COMPOSITIONAL ANALYSIS
                        # Concentration Inclusion
                        if var_filetype == "SMPL":
                            value_i = self.container_concentration[var_filetype][var_datatype][file_short]["INCL"][
                                isotope]
                            value_mean = self.container_concentration[var_filetype][var_datatype]["INCL"][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_concentration_incl[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_concentration_incl[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Concentration Matrix
                        value_i = self.container_concentration[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_concentration[var_filetype][var_datatype]["MAT"][isotope]
                        #
                        n_digits = 5
                        #
                        report_concentration_mat[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_concentration_mat[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Concentration Mixed
                        if var_filetype == "SMPL":
                            value_i = self.container_mixed_concentration[var_filetype][var_datatype][file_short][
                                isotope]
                            value_mean = self.container_mixed_concentration[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_concentration_mix[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_concentration_mix[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Limit of Detection (Inclusion)
                        if var_filetype == "SMPL":
                            value_i = self.container_lod[var_filetype][var_datatype][file_short]["INCL"][isotope]
                            value_mean = self.container_lod[var_filetype][var_datatype]["INCL"][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_lod_incl[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_lod_incl[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Limit of Detection (Matrix)
                        value_i = self.container_lod[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        value_mean = self.container_lod[var_filetype][var_datatype]["MAT"][isotope]
                        #
                        n_digits = 5
                        #
                        report_lod_mat[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_lod_mat[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Mixing Ratio (Factor a)
                        if var_filetype == "SMPL":
                            value_i = self.container_mixed_concentration_ratio[var_filetype][var_datatype][file_short][
                                isotope]
                            value_mean = self.container_mixed_concentration_ratio[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        report_mixingratio_a[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                            value_i)
                        report_mixingratio_a[var_key][isotope] = "{:0.5e}".format(value_mean)
                        #
                        # Mixing Ratio (Factor x)
                        if var_filetype == "SMPL":
                            value_i = self.container_mixing_ratio[var_filetype][var_datatype][file_short][isotope]
                            value_mean = self.container_mixing_ratio[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        report_mixingratio_x[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                            value_i)
                        report_mixingratio_x[var_key][isotope] = "{:0.5e}".format(value_mean)
                        #
                        ## INTENSITY ANALYSIS
                        # Intensity Inclusion
                        if var_filetype == "SMPL":
                            value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short][
                                "INCL"][isotope]
                            value_mean = self.container_intensity_corrected[var_filetype][var_datatype]["INCL"][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_intensity_incl[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_incl[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Intensity Matrix
                        value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_intensity_corrected[var_filetype][var_datatype]["MAT"][isotope]
                        #
                        n_digits = 5
                        #
                        report_intensity_mat[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_mat[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Intensity Background
                        value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short]["BG"][
                            isotope]
                        value_mean = self.container_intensity_corrected[var_filetype][var_datatype]["BG"][isotope]
                        #
                        n_digits = 5
                        #
                        report_intensity_bg[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_bg[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Intensity Mixed
                        if var_filetype == "SMPL":
                            value_i = self.container_intensity_mix[var_filetype][var_datatype][file_short][isotope]
                            value_mean = self.container_intensity_mix[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_intensity_mix[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_mix[var_key][isotope] = round(value_mean, n_digits)
                        #
                        ## SENSITIVITY ANALYSIS
                        # Analytical Sensitivity
                        value_i = self.container_analytical_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_analytical_sensitivity[var_filetype][var_datatype][isotope]
                        #
                        n_digits = 5
                        #
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_analytical_sensitivity[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Normalized Sensitivity
                        value_i = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_normalized_sensitivity[var_filetype][var_datatype][isotope]
                        #
                        n_digits = 5
                        #
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_normalized_sensitivity[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Relative Sensitivity Factor
                        value_i = self.container_rsf[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        value_mean = self.container_rsf[var_filetype][var_datatype][isotope]
                        #
                        report_rsf[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(value_i)
                        report_rsf[var_key][isotope] = "{:0.5e}".format(value_mean)

        for isotope in self.container_lists["ISOTOPES"]:
            header.append(isotope)
        #
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=".csv")
        filename = export_file.name
        #
        with open(filename, "w", newline="") as report_file:
            writer = csv.DictWriter(report_file, fieldnames=header, delimiter=";")
            report_file.write("CALCULATION REPORT\n")
            report_file.write("\n")
            report_file.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file.write("\n")
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_file.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file.write("\n")
                #
                for var_filetype in ["SMPL", "STD"]:
                    if var_filetype == "SMPL":
                        report_file.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file.write("STANDARD FILES\n")
                    #
                    var_key = "Total " + str(var_filetype)
                    report_file.write("\n")
                    #
                    ## COMPOSITIONAL ANALYSIS
                    report_file.write("COMPOSITIONAL ANALYSIS\n")
                    if var_filetype == "SMPL":
                        report_file.write("Composition (Inclusion)\n")  # Concentration Inclusion
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_incl[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_concentration_incl[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("Composition (Matrix)\n")  # Concentration Matrix
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration_mat[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_concentration_mat[var_key])
                    report_file.write("\n")
                    #
                    if var_filetype == "SMPL":
                        report_file.write("Composition (Mixed)\n")  # Concentration Mixed
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_mix[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_concentration_mix[var_key])
                        report_file.write("\n")
                        #
                        report_file.write("Limit of Detection (Inclusion)\n")  # Limit of Detection (Inclusion)
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod_incl[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_lod_incl[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("Limit of Detection (Matrix)\n")  # Limit of Detection (Matrix)
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_lod_mat[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_lod_mat[var_key])
                    report_file.write("\n")
                    #
                    if var_filetype == "SMPL":
                        report_file.write("Mixing Ratio a\n")  # Mixing Ratio a
                        report_file.write("(1)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_mixingratio_a[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_mixingratio_a[var_key])
                        report_file.write("\n")
                        #
                        report_file.write("Mixing Ratio x\n")  # Mixing Ratio x
                        report_file.write("(1)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_mixingratio_x[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_mixingratio_x[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("INTENSITY ANALYSIS\n")
                    if var_filetype == "SMPL":
                        report_file.write("Intensity (Inclusion)\n")  # Intensity Inclusion
                        report_file.write("(cps)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_incl[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_intensity_incl[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("Intensity (Matrix)\n")  # Intensity Matrix
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_mat[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_intensity_mat[var_key])
                    report_file.write("\n")
                    #
                    report_file.write("Intensity (Background)\n")  # Intensity Background
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_bg[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_intensity_bg[var_key])
                    report_file.write("\n")
                    #
                    if var_filetype == "SMPL":
                        report_file.write("Intensity (Mixed)\n")  # Intensity Mixed
                        report_file.write("(cps)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_mix[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_intensity_mix[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("SENSITIVITY ANALYSIS\n")
                    report_file.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_analytical_sensitivity[var_key])
                    report_file.write("\n")
                    #
                    report_file.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_normalized_sensitivity[var_key])
                    report_file.write("\n")
                    #
                    report_file.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_rsf[var_key])
                    report_file.write("\n")
    #
    def save_project(self):
        save_file = filedialog.asksaveasfile(mode="w", defaultextension=".csv")
        # Save information about the project
        self.save_project_information_in_file(save_file=save_file)
        # Save information about 'Standard Files Setup'
        self.save_standard_file_information_in_file(save_file=save_file)
        # Save information about 'Sample Files Setup'
        self.save_sample_file_information_in_file(save_file=save_file)
        # Save information about 'Measured Isotopes'
        self.save_measured_isotopes_in_file(save_file=save_file)

        if self.pysills_mode in ["FI", "MI"]:
            # Save information about 'Inclusion Setup'
            self.save_inclusion_information_in_file(save_file=save_file)
            # Save information about 'PyPitzer'
            self.save_pypitzer_settings_in_file(save_file=save_file)
            # Save information about 'Quantification Setup (Matrix-Only Tracer)'
            self.save_quantification_method_matrix_only_in_file(save_file=save_file)
            # Save information about 'Quantification Setup (Second Internal Standard)'
            self.save_quantification_method_second_internal_in_file(save_file=save_file)
            # Save information about 'Geometric Approach (Halter2002)'
            self.save_quantification_method_halter2002(save_file=save_file)
            #Save information about 'Geometric Approach (Borisova2021)'
            self.save_quantification_method_borisova2021(save_file=save_file)

        # Save information about 'Sample/Matrix Setup'
        self.save_mineralphase_information_in_file(save_file=save_file)
        # Save information about 'Dwell Time Settings'
        self.save_dwell_time_information_in_file(save_file=save_file)
        # Save information about 'Interval Settings'
        self.save_interval_information_in_file(save_file=save_file)
        # Save information about 'Spike Elimination'
        self.save_spike_elimination_information_in_file(save_file=save_file)
        # Save information about the experimental input data
        self.save_experimental_data_in_file(save_file=save_file)
        # END
        save_file.write("END")
        save_file.close()

    def save_project_information_in_file(self, save_file):
        if self.pysills_mode == "MA":
            info_mode = "Mineral Analysis"
            info_key = "ma_setting"
        elif self.pysills_mode == "FI":
            info_mode = "Fluid Inclusion Analysis"
            info_key = "fi_setting"
        elif self.pysills_mode == "MI":
            info_mode = "Melt Inclusion Analysis"
            info_key = "mi_setting"

        save_file.write("PROJECT INFORMATION" + "\n")
        save_file.write(str(info_mode) + "\n")

        info_author = self.container_var[info_key]["Author"].get()
        info_source = self.container_var[info_key]["Source ID"].get()
        info_carrier_gas = self.container_var["LASER"].get()
        info_icpms = self.var_opt_icp.get()

        str_proj = str(info_author) + ";" + str(info_source) + ";" + str(info_carrier_gas) + ";" + str(info_icpms)
        str_proj += "\n"

        save_file.write(str_proj)
        save_file.write("\n")

    def save_standard_file_information_in_file(self, save_file):
        save_file.write("STANDARD FILES" + "\n")

        for index, filename_short in enumerate(self.container_lists["STD"]["Short"]):
            filename_long = self.container_lists["STD"]["Long"][index]

            if filename_long in self.container_var["STD"]:
                info_srm = self.container_var["STD"][filename_long]["SRM"].get()
                info_cb_state = self.container_var["STD"][filename_long]["Checkbox"].get()
                info_sign_color = self.container_var["STD"][filename_long]["Sign Color"].get()
                info_acquisition = self.container_var["acquisition times"]["STD"][filename_short].get()
            else:
                info_srm = "Select SRM"
                info_cb_state = 1
                info_sign_color = self.sign_red
                info_acquisition = "00:00:00"

            str_std = (str(filename_short) + ";" + str(info_srm) + ";" + str(info_cb_state) + ";" +
                       str(info_sign_color) + ";" + str(info_acquisition))

            str_std += "\n"
            save_file.write(str_std)
        save_file.write("\n")

    def save_sample_file_information_in_file(self, save_file):
        save_file.write("SAMPLE FILES" + "\n")

        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]

            if filename_long in self.container_var["SMPL"]:
                info_is = self.container_var["SMPL"][filename_long]["IS Data"]["IS"].get()
                info_assemblage = self.container_var["SMPL"][filename_long]["ID"].get()
                info_cb_state = self.container_var["SMPL"][filename_long]["Checkbox"].get()
                info_sign_color = self.container_var["SMPL"][filename_long]["Sign Color"].get()
                info_acquisition = self.container_var["acquisition times"]["SMPL"][filename_short].get()
                info_oxide = self.container_var["SMPL"][filename_long]["Matrix Setup"]["Oxide"]["Name"].get()
                info_totalamount = self.container_var["Oxides Quantification"]["Total Amounts"][filename_short].get()
            else:
                info_is = "Select IS"
                info_assemblage = "A"
                info_cb_state = 1
                info_sign_color = self.sign_red
                info_acquisition = "00:00:00"
                info_oxide = "Select Oxide"
                info_totalamount = "100.0"

            str_smpl = (str(filename_short) + ";" + str(info_is) + ";" + str(info_assemblage) + ";" + str(info_cb_state)
                        + ";" + str(info_sign_color) + ";" + str(info_acquisition) + ";" + str(info_oxide)  + ";"
                        + str(info_totalamount))

            str_smpl += "\n"
            save_file.write(str_smpl)
        save_file.write("\n")

    def save_measured_isotopes_in_file(self, save_file):
        save_file.write("ISOTOPES" + "\n")

        for isotope in self.container_lists["Measured Isotopes"]["All"]:
            info_srm = self.container_var["SRM"][isotope].get()

            str_iso = str(isotope) + ";" + str(info_srm)
            str_iso += "\n"

            save_file.write(str_iso)

        save_file.write("\n")

        if len(self.container_lists["Selected Oxides"]["All"]) > 0:
            for oxide in self.container_lists["Selected Oxides"]["All"]:
                str_oxide = str(oxide)
                str_oxide += "\n"

                save_file.write(str_oxide)

            save_file.write("\n")

    def save_inclusion_information_in_file(self, save_file):
        save_file.write("INCLUSION SETTINGS" + "\n")

        info_method = self.container_var["fi_setting"]["Inclusion Setup Selection"].get()

        str_incl = str("Method") + ";" + str(info_method) + "\n"
        save_file.write(str_incl)
        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            try:
                info_is = self.container_var["SMPL"][filename_long]["IS Data"]["IS"].get()
                info_concentration = self.container_var["SMPL"][filename_long]["IS Data"]["Concentration"].get()
                info_salinity = self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                    filename_short].get()
            except:
                info_is = "Select IS"
                info_concentration = 0.0
                info_salinity = 0.0

            str_incl = (str(filename_short) + ";" + str(info_is) + ";" + str(info_concentration) + ";"
                        + str(info_salinity))

            str_incl += "\n"
            save_file.write(str_incl)

        save_file.write("\n")

    def save_pypitzer_settings_in_file(self, save_file):
        save_file.write("PYPITZER SETTINGS" + "\n")

        str_cations = "Cations" + ";"
        str_anions = "Anions" + ";"
        str_isotopes = "Isotopes" + ";"

        for index, cation in enumerate(self.container_lists["Selected Cations"]):
            if index < len(self.container_lists["Selected Cations"]) - 1:
                str_cations += cation + ";"
            else:
                str_cations += cation + "\n"

        for index, anion in enumerate(self.container_lists["Selected Anions"]):
            if index < len(self.container_lists["Selected Anions"]) - 1:
                str_anions += anion + ";"
            else:
                str_anions += anion + "\n"

        for index, isotope in enumerate(list(self.helper_checkbuttons["Isotopes"].keys())):
            if self.helper_checkbuttons["Isotopes"][isotope].get() == 1:
                if index < len(list(self.helper_checkbuttons["Isotopes"].keys())) - 1:
                    str_isotopes += isotope + ";"
                else:
                    str_isotopes += isotope + "\n"

        str_isotopes = str_isotopes[:-1]
        str_isotopes += "\n"

        save_file.write(str_cations)
        save_file.write(str_anions)
        save_file.write(str_isotopes)

        for index, filename_smpl_long in enumerate(self.container_lists["SMPL"]["Long"]):
            filename_smpl_short = self.container_lists["SMPL"]["Short"][index]
            var_last_compound = self.container_var["SMPL"][filename_smpl_long]["Last compound"].get()
            var_melting_temperature = self.container_var["SMPL"][filename_smpl_long]["Melting temperature"].get()
            str_file = filename_smpl_short + ";" + var_last_compound + ";" + var_melting_temperature + "\n"

            save_file.write(str_file)

        save_file.write("\n")

    def save_quantification_method_matrix_only_in_file(self, save_file):
        save_file.write("QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)" + "\n")

        info_method = self.container_var["fi_setting"]["Quantification Method"].get()
        info_method_incl = self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get()

        str_method = str("Method") + ";" + str(info_method) + ";" + str(info_method_incl) +  "\n"
        save_file.write(str_method)
        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            try:
                info_amount = self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Amount"].get()
                info_matrix = self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Matrix"].get()
                info_isotope = self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Name"].get()
                info_concentration = self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Value"].get()
            except:
                info_amount = 0.0
                info_matrix = "Select Matrix"
                info_isotope = "Select Isotope"
                info_concentration = 0.0

            str_method = (str(filename_short) + ";" + str(info_amount) + ";" + str(info_matrix) + ";"
                          + str(info_isotope) + ";" + str(info_concentration) + "\n")

            save_file.write(str_method)

        save_file.write("\n")

    def save_quantification_method_second_internal_in_file(self, save_file):
        save_file.write("QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)" + "\n")

        info_method = self.container_var["fi_setting"]["Quantification Method"].get()
        info_method_incl = self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get()

        str_method = str("Method") + ";" + str(info_method) + ";" + str(info_method_incl) + "\n"
        save_file.write(str_method)
        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            try:
                info_isotope = self.container_var["SMPL"][filename_long]["Second Internal Standard"]["Name"].get()
                info_concentration = self.container_var["SMPL"][filename_long]["Second Internal Standard"][
                    "Value"].get()
            except:
                info_isotope = "Select Isotope"
                info_concentration = 0.0
            str_method = str(filename_short) + ";" + str(info_isotope) + ";" + str(info_concentration) + "\n"
            save_file.write(str_method)

        save_file.write("\n")
        
    def save_quantification_method_halter2002(self, save_file):
        save_file.write("QUANTIFICATION SETTINGS (HALTER2002)" + "\n")
        info_method = self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get()
        str_method = str("Method") + ";" + str(info_method) + "\n"
        save_file.write(str_method)

        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            val_a_i = self.container_var["SMPL"][filename_long]["Halter2002"]["a"].get()
            val_b_i = self.container_var["SMPL"][filename_long]["Halter2002"]["b"].get()
            val_rho_host_i = self.container_var["SMPL"][filename_long]["Halter2002"]["rho(host)"].get()
            val_rho_incl_i = self.container_var["SMPL"][filename_long]["Halter2002"]["rho(incl)"].get()
            val_r_i = self.container_var["SMPL"][filename_long]["Halter2002"]["R"].get()
            str_i = (str(filename_short) + ";" + str(val_a_i) + ";" + str(val_b_i) + ";" + str(val_rho_host_i) +
                     ";" + str(val_rho_incl_i) + ";" + str(val_r_i) + "\n")
            save_file.write(str_i)

        save_file.write("\n")
    
    def save_quantification_method_borisova2021(self, save_file):
        save_file.write("QUANTIFICATION SETTINGS (BORISOVA2021)" + "\n")
        info_method = self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get()
        str_method = str("Method") + ";" + str(info_method) + "\n"
        save_file.write(str_method)

        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            val_r_host_i = self.container_var["SMPL"][filename_long]["Borisova2021"]["R(host)"].get()
            val_r_incl_i = self.container_var["SMPL"][filename_long]["Borisova2021"]["R(incl)"].get()
            val_rho_host_i = self.container_var["SMPL"][filename_long]["Borisova2021"]["rho(host)"].get()
            val_rho_incl_i = self.container_var["SMPL"][filename_long]["Borisova2021"]["rho(incl)"].get()
            str_i = (str(filename_short) + ";" + str(val_r_host_i) + ";" + str(val_r_incl_i) + ";" +
                     str(val_rho_host_i) + ";" + str(val_rho_incl_i) + "\n")
            save_file.write(str_i)

        save_file.write("\n")

    def save_mineralphase_information_in_file(self, save_file):
        if self.pysills_mode == "MA":
            info_title = "SAMPLE SETTINGS"
        elif self.pysills_mode == "FI":
            info_title = "MATRIX SETTINGS"
        elif self.pysills_mode == "MI":
            info_title = "MATRIX SETTINGS"

        save_file.write(str(info_title) + "\n")
        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            if filename_long in self.container_var["SMPL"]:
                if self.pysills_mode == "MA":
                    info_is = self.container_var["SMPL"][filename_long]["IS Data"]["IS"].get()
                    info_concentration = self.container_var["SMPL"][filename_long]["IS Data"]["Concentration"].get()
                else:
                    info_is = self.container_var["SMPL"][filename_long]["Matrix Setup"]["IS"]["Name"].get()
                    info_concentration = self.container_var["SMPL"][filename_long]["Matrix Setup"]["IS"][
                        "Concentration"].get()
            else:
                info_is = "Select IS"
                info_concentration = "1000000"

            str_smpl_is = str(filename_short) + ";" + str(info_is) + ";" + str(info_concentration) + "\n"

            save_file.write(str_smpl_is)

        save_file.write("\n")

    def save_dwell_time_information_in_file(self, save_file):
        save_file.write("DWELL TIME SETTINGS" + "\n")

        for isotope in self.container_lists["Measured Isotopes"]["All"]:
            info_dwell = self.container_var["dwell_times"]["Entry"][isotope].get()
            str_dwell = str(isotope) + ";" + str(info_dwell) + "\n"
            save_file.write(str_dwell)

        save_file.write("\n")

    def save_interval_information_in_file(self, save_file):
        save_file.write("INTERVAL SETTINGS" + "\n")

        for index, filename_short in enumerate(self.container_lists["STD"]["Short"]):
            str_intervals = str(filename_short) + ";" + "STD" + "\n"
            if filename_short in self.container_helper["STD"]:
                for key, item in self.container_helper["STD"][filename_short]["BG"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]

                    str_intervals += "BG" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"

                for key, item in self.container_helper["STD"][filename_short]["MAT"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]

                    str_intervals += "MAT" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"

                save_file.write(str_intervals)

        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            str_intervals = str(filename_short) + ";" + "SMPL" + "\n"

            if filename_short in self.container_helper["SMPL"]:
                for key, item in self.container_helper["SMPL"][filename_short]["BG"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]

                    str_intervals += "BG" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"

                for key, item in self.container_helper["SMPL"][filename_short]["MAT"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]

                    str_intervals += "MAT" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"

                if self.pysills_mode in ["FI", "MI"]:
                    for key, item in self.container_helper["SMPL"][filename_short]["INCL"]["Content"].items():
                        info_id = key
                        info_times = item["Times"]
                        info_indices = item["Indices"]

                        str_intervals += "INCL" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(
                            info_indices) + "\n"

                save_file.write(str_intervals)

        save_file.write("\n")

    def save_spike_elimination_information_in_file(self, save_file):
        if self.pysills_mode == "MA":
            mode_key = "ma_setting"
        elif self.pysills_mode == "FI":
            mode_key = "fi_setting"
        elif self.pysills_mode == "MI":
            mode_key = "mi_setting"

        save_file.write("SPIKE ELIMINATION" + "\n")

        info_std_state = self.container_var["Spike Elimination"]["STD"]["State"]
        info_smpl_state = self.container_var["Spike Elimination"]["SMPL"]["State"]
        info_method = self.container_var["Spike Elimination Method"].get()
        info_alpha = self.container_var[mode_key]["SE Alpha"].get()
        info_threshold = self.container_var[mode_key]["SE Threshold"].get()

        if self.pysills_mode == "MA":
            str_spike = (str("STD") + ";" + str(info_std_state) + ";" + str("SMPL") + ";" + str(info_smpl_state) + ";"
                         + str(info_method) + ";" + str(info_alpha) + ";" + str(info_threshold) + "\n")
        else:
            info_inclusion_consideration = self.container_var[mode_key]["Spike Elimination Inclusion"].get()

            str_spike = (str("STD") + ";" + str(info_std_state) + ";" + str("SMPL") + ";" + str(info_smpl_state) + ";"
                         + str(info_inclusion_consideration) + ";" + str(info_method) + ";" + str(info_alpha) + ";"
                         + str(info_threshold) + "\n")

        save_file.write(str_spike)

        for var_file, dataset_isotopes in self.container_spike_values.items():
            str_spike_file = var_file + "\n"
            save_file.write(str_spike_file)
            for var_isotope, dataset_values in dataset_isotopes.items():
                str_spike_isotope = str(var_isotope) + ";"
                for var_id, val_id in dataset_values["Save"].items():
                    str_spike_isotope += str(var_id) + ";" + str(val_id) + ";"
                str_spike_isotope = str_spike_isotope[:-1]
                str_spike_isotope += "\n"
                save_file.write(str_spike_isotope)

        save_file.write("\n")

    def save_experimental_data_in_file(self, save_file):
        save_file.write("EXPERIMENTAL DATA" + "\n")

        for filetype in ["STD", "SMPL"]:
            if filetype == "STD":
                save_file.write("Standard Files" + "\n")
            else:
                save_file.write("Sample Files" + "\n")
            for index, filename_short in enumerate(self.container_lists[filetype]["Short"]):
                if filename_short in self.container_var["acquisition times"][filetype]:
                    info_acquisition = self.container_var["acquisition times"][filetype][filename_short].get()
                    filename_long = self.container_lists[filetype]["Long"][index]
                    save_file.write(str(filename_short) + "\n")
                    save_file.write("Acquisition" + ";" + str(info_acquisition) + "\n")
                    file_header = "Time" + ";"
                    file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                    for isotope in file_isotopes:
                        file_header += str(isotope) + ";"
                    save_file.write(str(file_header) + "\n")

                    if self.file_loaded == False:
                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            df_data = DE(filename_long=filename_long).get_measurements(
                                delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                        else:
                            df_data = DE(filename_long=filename_long).get_measurements(
                                delimiter=",", skip_header=3, skip_footer=1)
                    else:
                        df_data = self.container_measurements["Dataframe"][filename_short]

                    dataset_time = list(DE().get_times(dataframe=df_data))
                    for index_line, time_value in enumerate(dataset_time):
                        file_content_line = str(time_value) + ";"
                        for isotope in file_isotopes:
                            file_content_line += str(df_data[isotope][index_line]) + ";"
                        save_file.write(str(file_content_line) + "\n")
                    save_file.write("\n")
    #
    def open_project(self):
        filename = filedialog.askopenfilename()

        try:
            file_loaded = open(str(filename), "r")
            loaded_lines = file_loaded.readlines()
            n_settings = 0
            strings = ["PROJECT INFORMATION", "STANDARD FILES"]
            index_container = {}

            while n_settings < len(strings):
                index_container[strings[n_settings]] = 0
                index = 0
                flag = 0
                for line in open(str(filename), "r"):
                    if strings[n_settings] in line:
                        flag = 1
                        break
                    else:
                        index += 1
                if flag == 0:
                    pass
                else:
                    index_container[strings[n_settings]] += index
                    n_settings += 1

            for i in range(index_container["PROJECT INFORMATION"] + 1, index_container["STANDARD FILES"] - 1):
                line_std = str(loaded_lines[i].strip())
                splitted_line = line_std.split(";")
                var_mode = splitted_line[0]
                if var_mode == "Mineral Analysis":
                    self.pysills_mode = "MA"
                    self.var_rb_mode.set(0)
                elif var_mode == "Fluid Inclusion Analysis":
                    self.pysills_mode = "FI"
                    self.var_rb_mode.set(1)
                elif var_mode == "Melt Inclusion Analysis":
                    self.pysills_mode = "MI"
                    self.var_rb_mode.set(2)
                break
            self.select_experiment(var_rb=self.var_rb_mode)

            n_settings = 0
            if "EXPERIMENTAL DATA\n" in loaded_lines:
                if self.pysills_mode == "MA":
                    strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES", "SAMPLE SETTINGS",
                               "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION", "EXPERIMENTAL DATA",
                               "END"]
                else:
                    if ("PYPITZER SETTINGS\n" in loaded_lines and "QUANTIFICATION SETTINGS (HALTER2002)\n" in loaded_lines
                            and "QUANTIFICATION SETTINGS (BORISOVA2021)\n" in loaded_lines):
                        strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES",
                                   "INCLUSION SETTINGS", "PYPITZER SETTINGS",
                                   "QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)",
                                   "QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)",
                                   "QUANTIFICATION SETTINGS (HALTER2002)", "QUANTIFICATION SETTINGS (BORISOVA2021)",
                                   "MATRIX SETTINGS", "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION",
                                   "EXPERIMENTAL DATA", "END"]
                    else:
                        strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES",
                                   "INCLUSION SETTINGS", "QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)",
                                   "QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)", "MATRIX SETTINGS",
                                   "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION", "EXPERIMENTAL DATA",
                                   "END"]
                        self.without_pypitzer = True
            else:
                if self.pysills_mode == "MA":
                    strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES", "SAMPLE SETTINGS",
                           "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION", "END"]
                else:
                    strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES",
                               "INCLUSION SETTINGS", "PYPITZER SETTINGS",
                               "QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)",
                               "QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)",
                               "QUANTIFICATION SETTINGS (HALTER2002)", "QUANTIFICATION SETTINGS (BORISOVA2021)",
                               "MATRIX SETTINGS", "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION",
                               "END"]
                self.old_file = True

            index_container = {}
            while n_settings < len(strings):
                index_container[strings[n_settings]] = 0
                index = 0
                flag = 0
                for line in open(str(filename), "r"):
                    if strings[n_settings] in line:
                        flag = 1
                        break
                    else:
                        index += 1
                if flag == 0:
                    pass
                else:
                    index_container[strings[n_settings]] += index
                    n_settings += 1

            if self.pysills_mode == "MA":
                ## PROJECT INFORMATION
                for i in range(index_container["PROJECT INFORMATION"] + 2,
                               index_container["STANDARD FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    self.container_var["ma_setting"]["Author"].set(splitted_std[0])
                    self.container_var["ma_setting"]["Source ID"].set(splitted_std[1])
                    self.container_var["LASER"].set(splitted_std[2])
                    try:
                        self.var_opt_icp.set(splitted_std[3])
                    except:
                        self.var_opt_icp.set("Select ICP-MS")
                ## STANDARD FILES
                for i in range(index_container["STANDARD FILES"] + 1,
                               index_container["SAMPLE FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_files["STD"][var_file_short] = {"SRM": tk.StringVar()}
                    self.container_var["STD"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar(), "Sign Color": tk.StringVar(), "SRM": tk.StringVar()}
                    self.container_var["acquisition times"]["STD"][var_file_short] = tk.StringVar()

                    self.lb_std.insert(tk.END, str(var_file_short))
                    self.list_std.append(var_file_long)
                    self.container_lists["STD"]["Long"].append(var_file_long)
                    self.container_lists["STD"]["Short"].append(var_file_short)
                    self.container_var["STD"][var_file_long]["SRM"].set(splitted_std[1])
                    self.container_var["STD"][var_file_long]["Checkbox"].set(splitted_std[2])
                    self.container_var["STD"][var_file_long]["Sign Color"].set(splitted_std[3])
                    try:
                        self.container_var["acquisition times"]["STD"][var_file_short].set(splitted_std[4])
                    except:
                        self.container_var["acquisition times"]["STD"][var_file_short].set("unknown")

                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            var_timestamp = self.container_icpms["timestamp"]
                            var_icpms = self.container_icpms["name"]

                            dates, times = Data(filename=var_file_long).import_as_list(
                                skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp,
                                icpms=var_icpms)
                        else:
                            dates, times = Data(filename=var_file_long).import_as_list(
                                skip_header=3, skip_footer=1, timestamp=2,
                                icpms="Agilent 7900s")

                        self.container_var["acquisition times"]["STD"][var_file_short].set(
                            times[0][0] + ":" + times[0][1] + ":" + times[0][2])

                    self.ma_current_file_std = self.list_std[0]
                    #
                ## SAMPLE FILES
                for i in range(index_container["SAMPLE FILES"] + 1,
                               index_container["ISOTOPES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_var["SMPL"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar(), "ID": tk.StringVar(), "Sign Color": tk.StringVar()}
                    self.container_var["acquisition times"]["SMPL"][var_file_short] = tk.StringVar()

                    # self.container_var["SMPL"][var_file_long]["IS Data"] = {
                    #     "IS": tk.StringVar(), "Concentration": tk.StringVar(),
                    #     "RAW": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                    #     "SMOOTHED": {"IS": tk.StringVar(), "Concentration": tk.StringVar()}}
                    # self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set("Select IS")
                    # self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].set("0.0")
                    # self.container_var["SMPL"][var_file_long]["IS Data"]["RAW"]["IS"].set("Select IS")
                    # self.container_var["SMPL"][var_file_long]["IS Data"]["RAW"]["Concentration"].set("0.0")
                    # self.container_var["SMPL"][var_file_long]["IS Data"]["SMOOTHED"]["IS"].set("Select IS")
                    # self.container_var["SMPL"][var_file_long]["IS Data"]["SMOOTHED"]["Concentration"].set("0.0")

                    self.container_var["SMPL"][var_file_long]["Matrix Setup"] = {
                        "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}

                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Name"].set("Select IS")
                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Concentration"].set("0.0")
                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Element"]["Name"].set("Select Element")
                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Element"]["Concentration"].set("100.0")

                    self.lb_smpl.insert(tk.END, str(var_file_short))
                    self.list_smpl.append(var_file_long)
                    self.container_lists["SMPL"]["Long"].append(var_file_long)
                    self.container_lists["SMPL"]["Short"].append(var_file_short)
                    self.container_var["SMPL"][var_file_long]["Checkbox"].get()
                    self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set(splitted_std[1])
                    if splitted_std[1] not in self.container_lists["Possible IS"]:
                        self.container_lists["Possible IS"].append(splitted_std[1])
                    self.container_var["SMPL"][var_file_long]["ID"].set(splitted_std[2])
                    self.container_var["SMPL"][var_file_long]["Checkbox"].set(splitted_std[3])
                    self.container_var["SMPL"][var_file_long]["Sign Color"].set(splitted_std[4])

                    try:
                        self.container_var["acquisition times"]["SMPL"][var_file_short].set(splitted_std[5])
                    except:
                        self.container_var["acquisition times"]["SMPL"][var_file_short].set("unknown")

                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            var_timestamp = self.container_icpms["timestamp"]
                            var_icpms = self.container_icpms["name"]

                            dates, times = Data(filename=var_file_long).import_as_list(
                                skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp,
                                icpms=var_icpms)
                        else:
                            dates, times = Data(filename=var_file_long).import_as_list(
                                skip_header=3, skip_footer=1, timestamp=2,
                                icpms="Agilent 7900s")

                        self.container_var["acquisition times"]["SMPL"][var_file_short].set(
                            times[0][0] + ":" + times[0][1] + ":" + times[0][2])

                    self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Name"].set(splitted_std[1])

                    try:
                        self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Oxide"]["Name"].set(splitted_std[6])
                    except:
                        self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")

                    if var_file_short not in self.container_var["Oxides Quantification"]["Total Amounts"]:
                        self.container_var["Oxides Quantification"]["Total Amounts"][var_file_short] = tk.StringVar()

                    try:
                        self.container_var["Oxides Quantification"]["Total Amounts"][var_file_short].set(
                            splitted_std[7])
                    except:
                        self.container_var["Oxides Quantification"]["Total Amounts"][var_file_short].set("100.0")

                    self.ma_current_file_smpl = self.list_smpl[0]
                ## ISOTOPES
                for i in range(index_container["ISOTOPES"] + 1,
                               index_container["SAMPLE SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    if len(splitted_std) > 1:
                        isotope = splitted_std[0]
                        self.container_var["SRM"][isotope] = tk.StringVar()
                        self.container_lists["ISOTOPES"].append(isotope)
                        self.container_var["SRM"][isotope].set(splitted_std[1])
                    else:
                        oxide = splitted_std[0]

                        if len(oxide) > 0:
                            self.container_lists["Selected Oxides"]["All"].append(oxide)
                    #
                ## SAMPLE/MATRIX SETTINGS
                for i in range(index_container["SAMPLE SETTINGS"] + 1,
                               index_container["DWELL TIME SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")

                    info_file = splitted_std[0]
                    info_isotope = splitted_std[1]
                    info_concentration = splitted_std[2]

                    self.container_var["SMPL"][info_file]["IS Data"]["IS"].set(info_isotope)
                    self.container_var["SMPL"][info_file]["IS Data"]["Concentration"].set(info_concentration)

                    self.container_var["SMPL"][info_file]["Matrix Setup"]["IS"]["Name"].set(info_isotope)
                    self.container_var["SMPL"][info_file]["Matrix Setup"]["IS"]["Concentration"].set(
                        info_concentration)

                ## DWELL TIME SETTINGS
                for i in range(index_container["DWELL TIME SETTINGS"] + 1,
                               index_container["INTERVAL SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                    self.container_var["dwell_times"]["Entry"][isotope].set(splitted_std[1])
                    #
                ## INTERVAL SETTINGS
                for i in range(index_container["INTERVAL SETTINGS"] + 1,
                               index_container["SPIKE ELIMINATION"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    if splitted_std[-1] in ["STD", "SMPL"]:
                        var_filetype = splitted_std[1]
                        var_file_long = splitted_std[0]
                        var_file_short = splitted_std[0].split("/")[-1]

                        self.container_helper[var_filetype][var_file_short] = {
                            "BG": {"Content": {}, "Indices": []},
                            "MAT": {"Content": {}, "Indices": []}}
                    else:
                        if splitted_std[0] == "BG":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            helper_times = [float(key_times.group(1)), float(key_times.group(3))]
                            helper_indices = [int(key_indices.group(1)), int(key_indices.group(3))]
                            helper_times.sort()
                            helper_indices.sort()
                            self.container_helper[var_filetype][var_file_short]["BG"]["ID"] = var_id
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Times"] = helper_times
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Indices"] = helper_indices
                            self.container_helper[var_filetype][var_file_short]["BG"]["Indices"].append(var_id)
                        elif splitted_std[0] == "MAT":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            helper_times = [float(key_times.group(1)), float(key_times.group(3))]
                            helper_indices = [int(key_indices.group(1)), int(key_indices.group(3))]
                            helper_times.sort()
                            helper_indices.sort()
                            self.container_helper[var_filetype][var_file_short]["MAT"]["ID"] = var_id
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Times"] = helper_times
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Indices"] = helper_indices
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Indices"].append(var_id)
                    #
                ## SPIKE ELIMINATION
                index = 0
                if self.old_file == True:
                    final_line = index_container["END"] - 1
                else:
                    final_line = index_container["EXPERIMENTAL DATA"] - 1

                for i in range(index_container["SPIKE ELIMINATION"] + 1, final_line):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    if index == 0:
                        self.container_var["Spike Elimination"]["STD"]["State"] = self.convert_true_false_string(
                            splitted_std[1])
                        self.container_var["Spike Elimination"]["SMPL"]["State"] = self.convert_true_false_string(
                            splitted_std[3])
                        self.container_var["Spike Elimination Method"].set(splitted_std[4])
                        self.container_var["ma_setting"]["SE Alpha"].set(splitted_std[5])
                        self.container_var["ma_setting"]["SE Threshold"].set(int(splitted_std[6]))
                        index += 1
                    else:
                        if len(splitted_std) == 1:
                            var_file = splitted_std[0]
                            if var_file not in self.container_spike_values:
                                self.container_spike_values[var_file] = {}
                        if len(splitted_std) > 1:
                            var_isotope = splitted_std[0]
                            list_values = splitted_std[1:]
                            if var_isotope not in self.container_spike_values[var_file]:
                                self.container_spike_values[var_file][var_isotope] = {
                                    "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
                            for var_index in range(0, len(list_values), 2):
                                var_id = int(list_values[var_index])
                                val_id = float(list_values[var_index + 1])
                                self.container_spike_values[var_file][var_isotope]["Save"][var_id] = val_id
                if self.old_file == False:
                    # EXPERIMENTAL DATA
                    helper_indices = {}
                    for index, i in enumerate(range(index_container["EXPERIMENTAL DATA"] + 1,
                                                    index_container["END"] - 1)):
                        line_std = str(loaded_lines[i].strip())
                        splitted_std = line_std.split(";")
                        if len(splitted_std) == 1:
                            if splitted_std[0] not in ["Standard Files", "Sample Files", ""]:
                                if splitted_std[0] not in helper_indices:
                                    helper_indices[splitted_std[0]] = [i + 2]
                                if index > 1:
                                    helper_indices[last_file].append(i - 2)
                                last_file = splitted_std[0]
                    if index > 1:
                        helper_indices[last_file].append(i)

                    for key, data in helper_indices.items():
                        header_names = ["Time"]
                        header_names.extend(self.container_lists["ISOTOPES"])
                        dataframe = pd.read_csv(
                            filename, sep=";", header=0, skiprows=data[0], nrows=data[1] - data[0], usecols=header_names,
                            engine="python")
                        dataframe_blank = dataframe.loc[dataframe.isnull().all(1)]
                        if len(dataframe_blank) > 0:
                            first_blank_index = dataframe_blank.index[0]
                            dataframe = dataframe[:first_blank_index]
                        var_columns = dataframe.columns
                        for column in var_columns:
                            dataframe[column] = dataframe[column].astype(float)
                        df_isotopes = DE().get_isotopes(dataframe=dataframe)
                        times = DE().get_times(dataframe=dataframe)
                        self.container_lists["Measured Isotopes"][key] = df_isotopes

                        if key not in self.container_lists["Measured Elements"]:
                            self.container_lists["Measured Elements"][key] = {}
                        for isotope in df_isotopes:
                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            if element not in self.container_lists["Measured Elements"][key]:
                                self.container_lists["Measured Elements"][key][element] = [isotope]
                            else:
                                if isotope not in self.container_lists["Measured Elements"][key][element]:
                                    self.container_lists["Measured Elements"][key][element].append(isotope)
                            if element not in self.container_lists["Measured Elements"]["All"]:
                                self.container_lists["Measured Elements"]["All"].append(element)

                        if "Dataframe" not in self.container_measurements:
                            self.container_measurements["Dataframe"] = {}
                        if key not in self.container_measurements["Dataframe"]:
                            self.container_measurements["Dataframe"][key] = dataframe

                        if key not in self.container_measurements["RAW"]:
                            self.container_measurements["RAW"][key] = {}
                            self.container_measurements["EDITED"][key] = {}
                            self.container_measurements["SELECTED"][key] = {}
                        self.container_measurements["RAW"][key]["Time"] = times.tolist()
                        self.container_measurements["EDITED"][key]["Time"] = times.tolist()
                        self.container_measurements["SELECTED"][key]["Time"] = times.tolist()

                        for isotope in df_isotopes:
                            self.container_measurements["RAW"][key][isotope] = dataframe[isotope].tolist()
                            self.container_measurements["EDITED"][key][isotope] = {}
                            if "RAW" not in self.container_measurements["SELECTED"][key]:
                                self.container_measurements["SELECTED"][key]["RAW"] = {}
                            if "SMOOTHED" not in self.container_measurements["SELECTED"][key]:
                                self.container_measurements["SELECTED"][key]["SMOOTHED"] = {}
                            self.container_measurements["SELECTED"][key]["RAW"][isotope] = {}
                            self.container_measurements["SELECTED"][key]["SMOOTHED"][isotope] = {}

            elif self.pysills_mode == "FI":
                ## PROJECT INFORMATION
                for i in range(index_container["PROJECT INFORMATION"] + 2,
                               index_container["STANDARD FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")

                    self.container_var["fi_setting"]["Author"].set(splitted_std[0])
                    self.container_var["fi_setting"]["Source ID"].set(splitted_std[1])
                    self.container_var["LASER"].set(splitted_std[2])
                    try:
                        self.var_opt_icp.set(splitted_std[3])
                    except:
                        self.var_opt_icp.set("Select ICP-MS")
                ## STANDARD FILES
                for i in range(index_container["STANDARD FILES"] + 1,
                               index_container["SAMPLE FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_files["STD"][var_file_short] = {"SRM": tk.StringVar()}
                    self.container_var["STD"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar(), "Sign Color": tk.StringVar(), "SRM": tk.StringVar()}
                    self.container_var["acquisition times"]["STD"][var_file_short] = tk.StringVar()

                    self.lb_std.insert(tk.END, str(var_file_short))
                    self.list_std.append(var_file_long)
                    self.container_lists["STD"]["Long"].append(var_file_long)
                    self.container_lists["STD"]["Short"].append(var_file_short)
                    self.container_var["STD"][var_file_long]["SRM"].set(splitted_std[1])
                    #self.container_var["STD"][var_file_long]["IS Data"]["IS"].set(splitted_std[2])
                    self.container_var["STD"][var_file_long]["Checkbox"].set(splitted_std[2])

                    try:
                        self.container_var["STD"][var_file_long]["Sign Color"].set(splitted_std[3])
                    except:
                        self.container_var["STD"][var_file_long]["Sign Color"].set(self.sign_red)

                    self.container_var["acquisition times"]["STD"][var_file_short].set(splitted_std[4])

                    self.fi_current_file_std = self.list_std[0]
                    #
                ## SAMPLE FILES
                for i in range(index_container["SAMPLE FILES"] + 1,
                               index_container["ISOTOPES"] - 1):
                    line_smpl = str(loaded_lines[i].strip())
                    splitted_data_smpl = line_smpl.split(";")

                    var_file_long = splitted_data_smpl[0]
                    var_file_short = splitted_data_smpl[0].split("/")[-1]

                    self.container_var["SMPL"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar(), "ID": tk.StringVar(), "Sign Color": tk.StringVar()}
                    self.container_var["acquisition times"]["SMPL"][var_file_short] = tk.StringVar()
                    self.container_var["SMPL"][var_file_long]["Last compound"] = tk.StringVar()
                    self.container_var["SMPL"][var_file_long]["Last compound"].set("Select last solid")
                    self.container_var["SMPL"][var_file_long]["Melting temperature"] = tk.StringVar()
                    self.container_var["SMPL"][var_file_long]["Melting temperature"].set("25.0")

                    self.container_var["SMPL"][var_file_long]["IS Data"] = {
                        "IS": tk.StringVar(), "Concentration": tk.StringVar(),
                        "RAW": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "SMOOTHED": {"IS": tk.StringVar(), "Concentration": tk.StringVar()}}
                    self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set("Select IS")
                    self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].set("0.0")
                    self.container_var["SMPL"][var_file_long]["IS Data"]["RAW"]["IS"].set("Select IS")
                    self.container_var["SMPL"][var_file_long]["IS Data"]["RAW"]["Concentration"].set("0.0")
                    self.container_var["SMPL"][var_file_long]["IS Data"]["SMOOTHED"]["IS"].set("Select IS")
                    self.container_var["SMPL"][var_file_long]["IS Data"]["SMOOTHED"]["Concentration"].set("0.0")

                    self.lb_smpl.insert(tk.END, str(var_file_short))
                    self.list_smpl.append(var_file_long)
                    self.container_lists["SMPL"]["Long"].append(var_file_long)
                    self.container_lists["SMPL"]["Short"].append(var_file_short)
                    self.container_var["SMPL"][var_file_long]["Checkbox"].get()
                    self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set(splitted_data_smpl[1])
                    self.container_var["SMPL"][var_file_long]["ID"].set(splitted_data_smpl[2])
                    self.container_var["SMPL"][var_file_long]["Checkbox"].set(splitted_data_smpl[3])

                    try:
                        self.container_var["SMPL"][var_file_long]["Sign Color"].set(splitted_data_smpl[4])
                    except:
                        self.container_var["SMPL"][var_file_long]["Sign Color"].set(self.sign_red)

                    self.container_var["acquisition times"]["SMPL"][var_file_short].set(splitted_data_smpl[5])

                    try:
                        self.container_var["SMPL"][var_file_long]["Last compound"].set(splitted_data_smpl[8])
                    except:
                        self.container_var["SMPL"][var_file_long]["Last compound"].set("Select last solid")

                    try:
                        self.container_var["SMPL"][var_file_long]["Melting temperature"].set(splitted_data_smpl[9])
                    except:
                        self.container_var["SMPL"][var_file_long]["Melting temperature"].set("25.0")

                    self.fi_current_file_smpl = self.list_smpl[0]
                    #
                ## ISOTOPES
                for i in range(index_container["ISOTOPES"] + 1,
                               index_container["INCLUSION SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["SRM"][isotope] = tk.StringVar()
                    self.container_lists["ISOTOPES"].append(isotope)
                    self.container_var["SRM"][isotope].set(splitted_std[1])

                ## INCLUSION SETTINGS
                index = 0
                if self.without_pypitzer == False:
                    keyword = "PYPITZER SETTINGS"
                else:
                    keyword = "QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)"

                for i in range(index_container["INCLUSION SETTINGS"] + 1, index_container[keyword] - 1):
                    line_data = str(loaded_lines[i].strip())
                    splitted_data = line_data.split(";")

                    if index == 0:
                        self.container_var["fi_setting"]["Inclusion Setup Selection"] = tk.IntVar()
                        self.container_var["fi_setting"]["Inclusion Setup Selection"].set(splitted_data[1])
                    else:
                        info_file = splitted_data[0]
                        info_file_short = info_file.split("/")[-1]
                        info_is = splitted_data[1]
                        info_concentration = splitted_data[2]
                        info_salinity = splitted_data[3]

                        self.container_var["SMPL"][info_file]["IS Data"]["IS"].set(info_is)
                        self.container_var["SMPL"][info_file]["IS Data"]["Concentration"].set(info_concentration)
                        self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                            info_file_short] = tk.StringVar()
                        self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][info_file_short].set(
                            info_salinity)

                    index += 1

                # PYPITZER SETTINGS
                if self.without_pypitzer == False:
                    for i in range(index_container["PYPITZER SETTINGS"] + 1,
                                   index_container["QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)"] - 1):
                        line_data = str(loaded_lines[i].strip())
                        splitted_data = line_data.split(";")

                        if splitted_data[0] == "Cations":
                            self.container_lists["Selected Cations"].extend(splitted_data[1:])
                        elif splitted_data[0] == "Anions":
                            self.container_lists["Selected Anions"].extend(splitted_data[1:])
                        elif splitted_data[0] == "Isotopes":
                            for isotope in splitted_data[1:]:
                                self.helper_checkbuttons["Isotopes"][isotope] = tk.IntVar()
                                self.helper_checkbuttons["Isotopes"][isotope].set(1)
                        elif splitted_data[0] in self.container_lists["SMPL"]["Short"]:
                            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                                var_last_compound = splitted_data[1]
                                var_melting_temperature = splitted_data[2]

                                self.container_var["SMPL"][filename_smpl_long]["Last compound"] = tk.StringVar()
                                self.container_var["SMPL"][filename_smpl_long]["Melting temperature"] = tk.StringVar()
                                self.container_var["SMPL"][filename_smpl_long]["Last compound"].set(var_last_compound)
                                self.container_var["SMPL"][filename_smpl_long]["Melting temperature"].set(
                                    var_melting_temperature)

                ## QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)
                index = 0
                for i in range(index_container["QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)"] + 1,
                               index_container["QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)"] - 1):
                    line_data = str(loaded_lines[i].strip())
                    splitted_data = line_data.split(";")
                    #
                    if index == 0:
                        self.container_var["fi_setting"]["Quantification Method"] = tk.IntVar()
                        self.container_var["fi_setting"]["Quantification Method"].set(splitted_data[1])
                        try:
                            self.container_var["fi_setting"]["Inclusion Intensity Calculation"].set(splitted_data[2])
                        except:
                            self.container_var["fi_setting"]["Inclusion Intensity Calculation"].set(0)
                    else:
                        info_file = splitted_data[0]
                        info_amount = splitted_data[1]
                        info_matrix = splitted_data[2]
                        info_isotope = splitted_data[3]
                        info_concentration = splitted_data[4]
                        #
                        self.container_var["SMPL"][info_file]["Host Only Tracer"] = {
                            "Name": tk.StringVar(), "Value": tk.StringVar(), "Matrix": tk.StringVar(),
                            "Amount": tk.StringVar()}
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Amount"].set(info_amount)
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Matrix"].set(info_matrix)
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Name"].set(info_isotope)
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Value"].set(info_concentration)
                    #
                    index += 1
                #
                ## QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)
                index = 0
                if self.without_pypitzer == False:
                    keyword = "QUANTIFICATION SETTINGS (HALTER2002)"
                else:
                    keyword = "MATRIX SETTINGS"

                for i in range(index_container["QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)"] + 1,
                               index_container[keyword] - 1):
                    line_data = str(loaded_lines[i].strip())
                    splitted_data = line_data.split(";")
                    #
                    if index == 0:
                        self.container_var["fi_setting"]["Quantification Method"] = tk.IntVar()
                        self.container_var["fi_setting"]["Quantification Method"].set(splitted_data[1])
                        try:
                            self.container_var["fi_setting"]["Inclusion Intensity Calculation"].set(splitted_data[2])
                        except:
                            self.container_var["fi_setting"]["Inclusion Intensity Calculation"].set(0)
                    else:
                        info_file = splitted_data[0]
                        info_isotope = splitted_data[1]
                        info_concentration = splitted_data[2]
                        #
                        self.container_var["SMPL"][info_file]["Second Internal Standard"] = {
                            "Name": tk.StringVar(), "Value": tk.StringVar()}
                        self.container_var["SMPL"][info_file]["Second Internal Standard"]["Name"].set(info_isotope)
                        self.container_var["SMPL"][info_file]["Second Internal Standard"]["Value"].set(
                            info_concentration)
                    #
                    index += 1

                ## QUANTIFICATION SETTINGS (HALTER2002)
                index = 0
                if self.without_pypitzer == False:
                    for i in range(index_container["QUANTIFICATION SETTINGS (HALTER2002)"] + 1,
                                   index_container["QUANTIFICATION SETTINGS (BORISOVA2021)"] - 1):
                        line_data = str(loaded_lines[i].strip())
                        splitted_data = line_data.split(";")

                        if index == 0:
                            val_method = splitted_data[1]
                            self.container_var["fi_setting"]["Inclusion Intensity Calculation"].set(val_method)
                        else:
                            filename_short = splitted_data[0]
                            index_filename = self.container_lists["SMPL"]["Short"].index(filename_short)
                            filename_long = self.container_lists["SMPL"]["Long"][index_filename]
                            val_a_i = splitted_data[1]
                            val_b_i = splitted_data[2]
                            val_rho_host_i = splitted_data[3]
                            val_rho_incl_i = splitted_data[4]
                            val_r_i = splitted_data[5]
                            self.container_var["SMPL"][filename_long]["Halter2002"]["a"].set(val_a_i)
                            self.container_var["SMPL"][filename_long]["Halter2002"]["b"].set(val_b_i)
                            self.container_var["SMPL"][filename_long]["Halter2002"]["rho(host)"].set(val_rho_host_i)
                            self.container_var["SMPL"][filename_long]["Halter2002"]["rho(incl)"].set(val_rho_incl_i)
                            self.container_var["SMPL"][filename_long]["Halter2002"]["R"].set(val_r_i)

                            index += 1

                ## QUANTIFICATION SETTINGS (BORISOVA2021)
                index = 0
                if self.without_pypitzer == False:
                    for i in range(index_container["QUANTIFICATION SETTINGS (BORISOVA2021)"] + 1,
                                   index_container["MATRIX SETTINGS"] - 1):
                        line_data = str(loaded_lines[i].strip())
                        splitted_data = line_data.split(";")

                        if index == 0:
                            val_method = splitted_data[1]
                            self.container_var["fi_setting"]["Inclusion Intensity Calculation"].set(val_method)
                        else:
                            filename_short = splitted_data[0]
                            index_filename = self.container_lists["SMPL"]["Short"].index(filename_short)
                            filename_long = self.container_lists["SMPL"]["Long"][index_filename]
                            val_r_host_i = splitted_data[1]
                            val_r_incl_i = splitted_data[2]
                            val_rho_host_i = splitted_data[3]
                            val_rho_incl_i = splitted_data[4]
                            self.container_var["SMPL"][filename_long]["Borisova2021"]["R(host)"].set(val_r_host_i)
                            self.container_var["SMPL"][filename_long]["Borisova2021"]["R(incl)"].set(val_r_incl_i)
                            self.container_var["SMPL"][filename_long]["Borisova2021"]["rho(host)"].set(val_rho_host_i)
                            self.container_var["SMPL"][filename_long]["Borisova2021"]["rho(incl)"].set(val_rho_incl_i)

                            index += 1

                ## MATRIX SETTINGS
                for i in range(index_container["MATRIX SETTINGS"] + 1,
                               index_container["DWELL TIME SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    info_file = splitted_std[0]
                    info_isotope = splitted_std[1]
                    info_concentration = splitted_std[2]
                    #
                    self.container_var["SMPL"][info_file]["Matrix Setup"] = {
                        "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
                    self.container_var["SMPL"][info_file]["Matrix Setup"]["IS"]["Name"].set(info_isotope)
                    self.container_var["SMPL"][info_file]["Matrix Setup"]["IS"]["Concentration"].set(info_concentration)
                #
                ## DWELL TIME SETTINGS
                for i in range(index_container["DWELL TIME SETTINGS"] + 1,
                               index_container["INTERVAL SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                    self.container_var["dwell_times"]["Entry"][isotope].set(splitted_std[1])
                    #
                ## INTERVAL SETTINGS
                for i in range(index_container["INTERVAL SETTINGS"] + 1,
                               index_container["SPIKE ELIMINATION"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    if splitted_std[-1] in ["STD", "SMPL"]:
                        var_filetype = splitted_std[1]
                        var_file_long = splitted_std[0]
                        var_file_short = splitted_std[0].split("/")[-1]
                        #
                        self.container_helper[var_filetype][var_file_short] = {
                            "BG": {"Content": {}, "Indices": []},
                            "MAT": {"Content": {}, "Indices": []},
                            "INCL": {"Content": {}, "Indices": []}}
                    else:
                        if splitted_std[0] == "BG":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            helper_times = [float(key_times.group(1)), float(key_times.group(3))]
                            helper_indices = [int(key_indices.group(1)), int(key_indices.group(3))]
                            helper_times.sort()
                            helper_indices.sort()
                            self.container_helper[var_filetype][var_file_short]["BG"]["ID"] = var_id
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Times"] = helper_times
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Indices"] = helper_indices
                            #
                            self.container_helper[var_filetype][var_file_short]["BG"]["Indices"].append(var_id)
                            #
                        elif splitted_std[0] == "MAT":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            helper_times = [float(key_times.group(1)), float(key_times.group(3))]
                            helper_indices = [int(key_indices.group(1)), int(key_indices.group(3))]
                            helper_times.sort()
                            helper_indices.sort()
                            self.container_helper[var_filetype][var_file_short]["MAT"]["ID"] = var_id
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Times"] = helper_times
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Indices"] = helper_indices
                            #
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Indices"].append(var_id)
                            #
                        elif splitted_std[0] == "INCL":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            helper_times = [float(key_times.group(1)), float(key_times.group(3))]
                            helper_indices = [int(key_indices.group(1)), int(key_indices.group(3))]
                            helper_times.sort()
                            helper_indices.sort()
                            self.container_helper[var_filetype][var_file_short]["INCL"]["ID"] = var_id
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"][var_id][
                                "Times"] = helper_times
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"][var_id][
                                "Indices"] = helper_indices
                            #
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Indices"].append(var_id)
                    #
                    if splitted_std[0] == "BG":
                        self.container_helper[var_filetype][var_file_short]["BG"]["ID"] = len(
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"])
                        #
                    elif splitted_std[0] == "MAT":
                        self.container_helper[var_filetype][var_file_short]["MAT"]["ID"] = len(
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"])
                        #
                    elif splitted_std[0] == "INCL":
                        self.container_helper[var_filetype][var_file_short]["INCL"]["ID"] = len(
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"])
                #
                ## SPIKE ELIMINATION
                index = 0
                if self.old_file == True:
                    final_line = index_container["END"] - 1
                else:
                    final_line = index_container["EXPERIMENTAL DATA"] - 1

                for i in range(index_container["SPIKE ELIMINATION"] + 1, final_line):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")

                    if index == 0:
                        self.container_var["Spike Elimination"]["STD"]["State"] = bool(splitted_std[1])
                        self.container_var["Spike Elimination"]["SMPL"]["State"] = bool(splitted_std[3])
                        self.container_var["fi_setting"]["Spike Elimination Inclusion"].set(splitted_std[4])
                        self.container_var["Spike Elimination Method"].set(splitted_std[5])
                        self.container_var["fi_setting"]["SE Alpha"].set(splitted_std[6])
                        self.container_var["fi_setting"]["SE Threshold"].set(int(splitted_std[7]))
                        index += 1
                    else:
                        if len(splitted_std) == 1:
                            var_file = splitted_std[0]
                            if var_file not in self.container_spike_values:
                                self.container_spike_values[var_file] = {}
                        if len(splitted_std) > 1:
                            var_isotope = splitted_std[0]
                            list_values = splitted_std[1:]
                            if var_isotope not in self.container_spike_values[var_file]:
                                self.container_spike_values[var_file][var_isotope] = {
                                    "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
                            for var_index in range(0, len(list_values), 2):
                                var_id = int(list_values[var_index])
                                val_id = float(list_values[var_index + 1])
                                self.container_spike_values[var_file][var_isotope]["Save"][var_id] = val_id

                if self.old_file == False:
                    # EXPERIMENTAL DATA
                    helper_indices = {}
                    for index, i in enumerate(range(index_container["EXPERIMENTAL DATA"] + 1,
                                                    index_container["END"] - 1)):
                        line_std = str(loaded_lines[i].strip())
                        splitted_std = line_std.split(";")
                        if len(splitted_std) == 1:
                            if splitted_std[0] not in ["Standard Files", "Sample Files", ""]:
                                if splitted_std[0] not in helper_indices:
                                    helper_indices[splitted_std[0]] = [i + 2]
                                if index > 1:
                                    helper_indices[last_file].append(i - 2)
                                last_file = splitted_std[0]
                    if index > 1:
                        helper_indices[last_file].append(i)

                    for key, data in helper_indices.items():
                        header_names = ["Time"]
                        header_names.extend(self.container_lists["ISOTOPES"])
                        dataframe = pd.read_csv(
                            filename, sep=";", header=0, skiprows=data[0], nrows=data[1] - data[0],
                            usecols=header_names,
                            engine="python")
                        dataframe_blank = dataframe.loc[dataframe.isnull().all(1)]
                        if len(dataframe_blank) > 0:
                            first_blank_index = dataframe_blank.index[0]
                            dataframe = dataframe[:first_blank_index]
                        var_columns = dataframe.columns
                        for column in var_columns:
                            dataframe[column] = dataframe[column].astype(float)
                        df_isotopes = DE().get_isotopes(dataframe=dataframe)
                        times = DE().get_times(dataframe=dataframe)
                        self.container_lists["Measured Isotopes"][key] = df_isotopes

                        if key not in self.container_lists["Measured Elements"]:
                            self.container_lists["Measured Elements"][key] = {}
                        for isotope in df_isotopes:
                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            if element not in self.container_lists["Measured Elements"][key]:
                                self.container_lists["Measured Elements"][key][element] = [isotope]
                            else:
                                if isotope not in self.container_lists["Measured Elements"][key][element]:
                                    self.container_lists["Measured Elements"][key][element].append(isotope)
                            if element not in self.container_lists["Measured Elements"]["All"]:
                                self.container_lists["Measured Elements"]["All"].append(element)

                        if "Dataframe" not in self.container_measurements:
                            self.container_measurements["Dataframe"] = {}
                        if key not in self.container_measurements["Dataframe"]:
                            self.container_measurements["Dataframe"][key] = dataframe

                        if key not in self.container_measurements["RAW"]:
                            self.container_measurements["RAW"][key] = {}
                            self.container_measurements["EDITED"][key] = {}
                            self.container_measurements["SELECTED"][key] = {}
                        self.container_measurements["RAW"][key]["Time"] = times.tolist()
                        self.container_measurements["EDITED"][key]["Time"] = times.tolist()
                        self.container_measurements["SELECTED"][key]["Time"] = times.tolist()

                        for isotope in df_isotopes:
                            self.container_measurements["RAW"][key][isotope] = dataframe[isotope].tolist()
                            self.container_measurements["EDITED"][key][isotope] = {}
                            if "RAW" not in self.container_measurements["SELECTED"][key]:
                                self.container_measurements["SELECTED"][key]["RAW"] = {}
                            if "SMOOTHED" not in self.container_measurements["SELECTED"][key]:
                                self.container_measurements["SELECTED"][key]["SMOOTHED"] = {}
                            self.container_measurements["SELECTED"][key]["RAW"][isotope] = {}
                            self.container_measurements["SELECTED"][key]["SMOOTHED"][isotope] = {}
            elif self.pysills_mode == "MI":
                pass

            # Initialization
            self.file_loaded = True
            self.demo_mode = False

            if self.old_file == True and self.var_opt_icp.get() == "Select ICP-MS":
                self.container_icpms["name"] = None
            else:
                self.select_icp_ms(var_opt=self.var_opt_icp)

            if self.pysills_mode == "MA":
                self.ma_settings()
            elif self.pysills_mode == "FI":
                self.fi_settings()
            elif self.pysills_mode == "MI":
                self.mi_settings()
        except FileNotFoundError:
            pass

    def convert_true_false_string(self, var_str):
        d = {"True": True, "False": False}
        return d.get(var_str, var_str)

    def delete_csv(self, var_lb, var_list):
        if var_lb == self.lb_std:
            var_list = self.list_std
        elif var_lb == self.lb_smpl:
            var_list = self.list_smpl
        item = var_lb.curselection()
        var_list.remove(var_list[item[0]])
        var_lb.delete(tk.ANCHOR)
        #
        if var_lb == self.lb_std:
            del self.container_lists["STD"]["Long"][item[0]]
            del self.container_lists["STD"]["Short"][item[0]]
        elif var_lb == self.lb_smpl:
            del self.container_lists["SMPL"]["Long"][item[0]]
            del self.container_lists["SMPL"]["Short"][item[0]]

    def restart_pysills(self):
        self.parent.destroy()
        root = tk.Tk()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        PySILLS(parent=root, var_screen_width=screen_width, var_screen_height=screen_height)
        root.mainloop()

    ####################
    ## DATA PROCESSING #
    ####################
    def open_csv(self, datatype):
        if datatype == "STD":
            if "Default_STD_01.csv" in self.list_std:
                self.list_std.clear()
            var_list = self.list_std
            var_listbox = self.lb_std
        elif datatype == "SMPL":
            if "Default_SMPL_01.csv" in self.list_smpl:
                self.list_smpl.clear()
            var_list = self.list_smpl
            var_listbox = self.lb_smpl

        filename = filedialog.askopenfilenames(
            parent=self.parent,
            filetypes=(("LA-ICP-MS files", "*.csv *.FIN2 *.xl *.txt"), ("csv files", "*.csv"), ("FIN2 files", "*.FIN2"),
                       ("xl files", "*.xl"), ("txt files", "*.txt"), ("all files", "*.*")), initialdir=os.getcwd())

        for i in filename:
            if i not in var_list:
                var_list.append(i)
                file_parts = i.split("/")
                var_listbox.insert(tk.END, file_parts[-1])
                str_filename_long = i
                str_filename_short = file_parts[-1]

                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_exmpl = DE(filename_long=str_filename_long).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_exmpl = DE(filename_long=str_filename_long).get_measurements(
                        delimiter=",", skip_header=3, skip_footer=1)

                if "Dataframe" not in self.container_measurements:
                    self.container_measurements["Dataframe"] = {}
                if str_filename_short not in self.container_measurements["Dataframe"]:
                    self.container_measurements["Dataframe"][str_filename_short] = df_exmpl

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["Measured Isotopes"][str_filename_short] = df_isotopes
                file_isotopes = df_isotopes

                self.add_needed_variables_for_later_added_files(
                    filename_long=str_filename_long, filename_short=str_filename_short, filetype=datatype,
                    file_isotopes=file_isotopes)

                if (self.container_icpms["name"] != None and
                        self.container_icpms["name"] not in ["PerkinElmer Syngistix"]):
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    var_timestamp = self.container_icpms["timestamp"]
                    var_icpms = self.container_icpms["name"]

                    dates, times = Data(filename=str_filename_long).import_as_list(
                        skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp,
                        icpms=var_icpms)
                elif self.container_icpms["name"] == "PerkinElmer Syngistix":
                    create_time = os.path.getctime(str_filename_long)
                    create_date = datetime.datetime.fromtimestamp(create_time)
                    times = [[str(create_date.hour), str(create_date.minute), str(create_date.second)]]
                    dates = [str(create_date.year), str(create_date.month), str(create_date.day)]
                else:
                    dates, times = Data(filename=str_filename_long).import_as_list(
                        skip_header=3, skip_footer=1, timestamp=2,
                        icpms="Agilent 7900s")

                if str_filename_short not in self.container_var["acquisition times"][datatype]:
                    self.container_var["acquisition times"][datatype][str_filename_short] = tk.StringVar()
                    self.container_var["acquisition times"][datatype][str_filename_short].set(
                        times[0][0] + ":" + times[0][1] + ":" + times[0][2])

        self.demo_mode = False

    def create_dwell_time_window(self):
        ## Window Settings
        window_dwell = tk.Toplevel(self.parent)
        window_dwell.title("Dwell Times Setup")
        window_dwell.geometry("300x450+0+0")
        window_dwell.resizable(False, False)
        window_dwell["bg"] = self.bg_colors["Super Dark"]
        #
        window_width = 300
        window_heigth = 450
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(window_dwell, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(window_dwell, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            window_dwell.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            window_dwell.grid_columnconfigure(i, minsize=column_min)

        ## Labels
        lbl_01 = SE(
            parent=window_dwell, row_id=0, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Dwell Time Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=window_dwell, row_id=1, column_id=0, n_rows=1, n_columns=7, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Default Dwell Time", relief=tk.FLAT, fontsize="sans 10 bold")

        self.container_elements["dwell_times"]["Label"].extend([lbl_01, lbl_02])

        if self.container_var["dwell_times"]["Entry"]["Default"].get() != "0.01":
            var_text = self.container_var["dwell_times"]["Entry"]["Default"].get()
        else:
            var_text = "0.01"

        entr_dwell = SE(
            parent=window_dwell, row_id=1, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["dwell_times"]["Entry"]["Default"], text_default=var_text,
            command=lambda event, var_isotope=None, mode="Default":
            self.change_dwell_times(var_isotope, mode, event))

        self.container_elements["dwell_times"]["Entry"].append(entr_dwell)

        ## TREEVIEWS
        frm_dwell = SE(
            parent=window_dwell, row_id=2, column_id=0, n_rows=15, n_columns=14, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_dwell = ttk.Scrollbar(master=frm_dwell, orient="vertical")
        text_dwell = tk.Text(
            master=frm_dwell, width=30, height=25, yscrollcommand=vsb_dwell.set, bg=self.bg_colors["Very Light"])
        vsb_dwell.config(command=text_dwell.yview)
        vsb_dwell.pack(side="right", fill="y")
        text_dwell.pack(side="left", fill="both", expand=True)

        for var_isotope in self.container_lists["ISOTOPES"]:
            lbl_i = tk.Label(
                frm_dwell, text=var_isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_dwell.window_create("end", window=lbl_i)
            text_dwell.insert("end", "\t")

            entr_i = tk.Entry(
                frm_dwell, textvariable=self.container_var["dwell_times"]["Entry"][var_isotope],
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0,
                highlightbackground=self.bg_colors["Very Light"], width=12)
            text_dwell.window_create("insert", window=entr_i)
            text_dwell.insert("end", "\n")

    def change_dwell_times(self, var_isotope, mode, event):
        if mode == "Default":
            value = self.container_var["dwell_times"]["Entry"]["Default"].get()
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["dwell_times"]["Entry"][isotope].set(value)
        elif mode == "Specific":
            value = self.container_var["dwell_times"]["Entry"][var_isotope].get()
            self.container_var["dwell_times"]["Entry"][var_isotope].set(value)
    #
    def detect_signal_interval(self, mode="BG"):
        data_interval_detection = {}
        data_calc = {}

        list_files = []
        list_files.extend(self.container_lists["STD"]["Long"])
        if self.pysills_mode == "MA" or mode == "BG":
            list_files.extend(self.container_lists["SMPL"]["Long"])

        for file_long in list_files:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=file_long).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=file_long).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
            dataset_time = list(DE().get_times(dataframe=df_data))
            file_short = file_long.split("/")[-1]

            condition = False
            index_isotope = 0
            if file_long in self.container_lists["STD"]["Long"]:
                var_srm_file = self.container_var["STD"][file_long]["SRM"].get()
                index = self.container_lists["STD"]["Long"].index(file_long)
                file_short = self.container_lists["STD"]["Short"][index]

                for element, value in sorted(
                        self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                    if element in self.container_lists["Measured Elements"][file_short]:
                        isotope_is = self.container_lists["Measured Elements"][file_short][element][0]
                    break
            else:
                isotope_is = self.container_var["SMPL"][file_long]["IS Data"]["IS"].get()

            if isotope_is == "Select IS":
                file_dummy = file_long

                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_data_dummy = DE(filename_long=file_dummy).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_data_dummy = DE(filename_long=file_dummy).get_measurements(
                        delimiter=",", skip_header=3, skip_footer=1)

                max_values = {"Last": 0}
                for isotope in list(df_data_dummy.keys())[1:]:
                    dataset_isotope = list(df_data[isotope])
                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        if np.mean(dataset_isotope) > max_values["Last"]:
                            max_values.clear()
                            max_values[isotope] = np.mean(dataset_isotope)
                            max_values["Last"] = np.mean(dataset_isotope)
                    else:
                        if np.median(dataset_isotope) > max_values["Last"]:
                            max_values.clear()
                            max_values[isotope] = np.median(dataset_isotope)
                            max_values["Last"] = np.median(dataset_isotope)

                del max_values["Last"]
                isotope_is = list(max_values.keys())[0]
            else:
                max_values = {"Last": 0}

                for isotope in list(df_data.keys())[1:]:
                    dataset_isotope = list(df_data[isotope])
                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        if np.mean(dataset_isotope) > max_values["Last"]:
                            max_values.clear()
                            max_values[isotope] = np.mean(dataset_isotope)
                            max_values["Last"] = np.mean(dataset_isotope)
                    else:
                        if np.median(dataset_isotope) > max_values["Last"]:
                            max_values.clear()
                            max_values[isotope] = np.median(dataset_isotope)
                            max_values["Last"] = np.median(dataset_isotope)

                del max_values["Last"]
                isotope_is = list(max_values.keys())[0]

            n_loops = 0
            while condition == False:
                n = 0
                if file_short not in data_interval_detection:
                    data_interval_detection[file_short] = {"BG": {"Start": None, "End": None, "Index": None},
                                                           "MAT": {"Start": None, "End": None, "Index": None}}
                    data_calc[file_short] = {"Time": [], "Cumulative Average": [], "Change": [], "Ratio": []}

                dataset_isotope = list(df_data[isotope_is])
                condition_2 = False
                index_2 = 10
                while condition_2 == False:
                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        mean_first10 = np.mean(dataset_isotope[:index_2])
                    else:
                        mean_first10 = np.median(dataset_isotope[:index_2])

                    if mean_first10 > 0:
                        condition_2 = True
                    else:
                        index_2 += 1

                for index, value_time in enumerate(dataset_time):
                    data_calc[file_short]["Time"].append(value_time)

                    if index > 1:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            value_cumulavg = np.mean(dataset_isotope[:index+1])
                        else:
                            value_cumulavg = np.median(dataset_isotope[:index + 1])
                        data_calc[file_short]["Cumulative Average"].append(value_cumulavg)
                        value_change = value_cumulavg - data_calc[file_short]["Cumulative Average"][-2]
                        data_calc[file_short]["Change"].append(value_change)
                        value_ratio = value_cumulavg/mean_first10
                        data_calc[file_short]["Ratio"].append(value_ratio)
                    elif index == 1:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            value_cumulavg = np.mean(dataset_isotope[:index])
                        else:
                            value_cumulavg = np.median(dataset_isotope[:index])
                        data_calc[file_short]["Cumulative Average"].append(value_cumulavg)
                        value_change = value_cumulavg - data_calc[file_short]["Cumulative Average"][0]
                        data_calc[file_short]["Change"].append(value_change)
                        value_ratio = value_cumulavg/mean_first10
                        data_calc[file_short]["Ratio"].append(value_ratio)
                    elif index == 0:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            value_cumulavg = np.mean(dataset_isotope[0])
                        else:
                            value_cumulavg = np.median(dataset_isotope[0])
                        data_calc[file_short]["Cumulative Average"].append(value_cumulavg)
                        value_change = 0.0
                        data_calc[file_short]["Change"].append(value_change)
                        value_ratio = value_cumulavg/mean_first10
                        data_calc[file_short]["Ratio"].append(value_ratio)

                    if value_ratio > 20 and data_interval_detection[file_short]["BG"]["End"] == None:
                        offset_bg_start = self.container_var["General Settings"]["BG Offset Start"].get()
                        offset_bg_end = self.container_var["General Settings"]["BG Offset End"].get()
                        offset_mat_start = self.container_var["General Settings"]["MAT Offset Start"].get()

                        data_interval_detection[file_short]["BG"]["Start"] = dataset_time[offset_bg_start]

                        index_time = dataset_time.index(value_time)
                        data_interval_detection[file_short]["BG"]["End"] = dataset_time[index_time - offset_bg_end]
                        data_interval_detection[file_short]["MAT"]["Start"] = dataset_time[index_time + offset_mat_start]

                        index_start = dataset_time.index(dataset_time[offset_bg_start])
                        index_end = dataset_time.index(dataset_time[index_time - offset_bg_end])
                        data_interval_detection[file_short]["BG"]["Index"] = [index_start, index_end]

                        index_start_mat = dataset_time.index(dataset_time[index_time + offset_mat_start])

                    if value_change < 0 and index > 0.5*len(dataset_time) \
                            and data_interval_detection[file_short]["MAT"]["End"] == None:
                        offset_mat_end = self.container_var["General Settings"]["MAT Offset End"].get()

                        index_time = dataset_time.index(value_time)
                        data_interval_detection[file_short]["MAT"]["End"] = dataset_time[index_time - offset_mat_end]

                        index_end = dataset_time.index(dataset_time[index_time - offset_mat_end])
                        data_interval_detection[file_short]["MAT"]["Index"] = [index_start_mat, index_end]

                for key1, value1 in data_interval_detection[file_short].items():
                    if key1 == mode:
                        for key2, value2 in value1.items():
                            if value2 != None:
                                n += 1

                if n == 3:
                    condition = True
                else:
                    index_isotope += 1

                n_loops += 1

                if n_loops == 1000:
                    break

        if mode == "BG":
            if self.pysills_mode == "MA":
                self.container_var["ma_setting"]["Time BG Start"].set("auto-detection used")
                self.container_var["ma_setting"]["Time BG End"].set("auto-detection used")
            else:
                if self.pysills_mode == "FI":
                    self.container_var["fi_setting"]["Time BG Start"].set("auto-detection used")
                    self.container_var["fi_setting"]["Time BG End"].set("auto-detection used")
                else:
                    if n_loops == 1000:
                        self.container_var["mi_setting"]["Time BG Start"].set("auto-detection not successfull")
                        self.container_var["mi_setting"]["Time BG End"].set("auto-detection not successfull")
                    else:
                        self.container_var["mi_setting"]["Time BG Start"].set("auto-detection used")
                        self.container_var["mi_setting"]["Time BG End"].set("auto-detection used")

            self.autodetection_bg = True
        elif mode == "MAT":
            if self.pysills_mode == "MA":
                self.container_var["ma_setting"]["Time MAT Start"].set("auto-detection used")
                self.container_var["ma_setting"]["Time MAT End"].set("auto-detection used")
            elif self.pysills_mode == "FI":
                self.container_var["fi_setting"]["Time MAT Start"].set("auto-detection used")
                self.container_var["fi_setting"]["Time MAT End"].set("auto-detection used")
            elif self.pysills_mode == "MI":
                self.container_var["mi_setting"]["Time MAT Start"].set("auto-detection used")
                self.container_var["mi_setting"]["Time MAT End"].set("auto-detection used")

            self.autodetection_sig = True

        if n_loops < 1000:
            for filename, dataset in data_interval_detection.items():
                if filename in self.container_lists["STD"]["Short"]:
                    filetype = "STD"

                    if self.pysills_mode == "MA":
                        self.temp_lines_checkup2[filetype][filename] = 0
                elif filename in self.container_lists["SMPL"]["Short"]:
                    filetype = "SMPL"

                    if self.pysills_mode == "MA":
                        self.temp_lines_checkup2[filetype][filename] = 0

                var_index = self.container_lists[filetype]["Short"].index(filename)
                filename_long = self.container_lists[filetype]["Long"][var_index]

                t_start = dataset[mode]["Start"]
                t_end = dataset[mode]["End"]
                index_start = dataset[mode]["Index"][0]
                index_end = dataset[mode]["Index"][1]

                self.container_helper[filetype][filename][mode]["Content"][1] = {
                    "Times": [t_start, t_end], "Indices": [index_start, index_end], "Object": None}
                self.container_helper[filetype][filename][mode]["ID"] += 1
                self.container_helper[filetype][filename][mode]["Indices"].append(1)

                self.container_var[filetype][filename_long]["Frame"].config(background=self.sign_yellow, bd=1)
                self.container_var[filetype][filename_long]["Sign Color"].set(self.sign_yellow)

                if self.pysills_mode == "MA":
                    self.temp_lines_checkup2[filetype][filename] = 0
                    self.show_time_signal_diagram_checker(var_setting_key="ma_setting")
                elif self.pysills_mode == "FI":
                    self.temp_lines_checkup2[filetype][filename] = 0
                    self.show_time_signal_diagram_checker(var_setting_key="fi_setting")
                elif self.pysills_mode == "MI":
                    self.temp_lines_checkup2[filetype][filename] = 0
                    self.show_time_signal_diagram_checker(var_setting_key="mi_setting")

    def internal_standard_concentration_setup(self):
        try:
            self.srm_isotopes
        except:
            self.srm_isotopes = {}
            for isotope in self.container_lists["ISOTOPES"]:
                self.srm_isotopes[isotope] = {}
                var_srm = self.container_var["SRM"][isotope].get()
                key_element = re.search("(\D+)(\d+)", isotope)
                var_element = key_element.group(1)
                self.srm_isotopes[isotope]["SRM"] = var_srm
                if var_element in self.srm_actual[var_srm]:
                    self.srm_isotopes[isotope]["Concentration"] = self.srm_actual[var_srm][var_element]
                else:
                    self.srm_isotopes[isotope]["Concentration"] = 0.0
        #
        ## Window Settings
        window_issetup = tk.Toplevel(self.parent)
        window_issetup.title("Check-Up - Internal Standard Setup")
        window_issetup.geometry("420x450+0+0")
        window_issetup.resizable(False, False)
        window_issetup["bg"] = self.bg_colors["Super Dark"]
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
        #
        window_width = 420
        window_heigth = 450
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(window_issetup, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(window_issetup, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            window_issetup.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            window_issetup.grid_columnconfigure(i, minsize=column_min)
        #
        if len(self.gui_subwindows["Mineral Analysis"]["Check IS"]["Label"]["Permanent"]) > 0:
            gui_elements = ["Label", "Entry", "Option Menu"]
            #
            for gui_element in gui_elements:
                self.gui_subwindows["Mineral Analysis"]["Check IS"][gui_element]["Permanent"].clear()
        #
        if len(self.gui_subwindows["Mineral Analysis"]["Check IS"]["Label"]["Permanent"]) == 0:
            ## LABELS
            lbl_header_smpl = SE(
                parent=window_issetup, row_id=0, column_id=0, n_rows=1,
                n_columns=20, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Internal Standard Setup", relief=tk.FLAT, fontsize="sans 10 bold")
            #
            self.gui_subwindows["Mineral Analysis"]["Check IS"]["Label"]["Permanent"].extend(
                [lbl_header_smpl])
            #
            frm_iso = SE(
                parent=window_issetup, row_id=1, column_id=0, n_rows=15, n_columns=20, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Very Light"]).create_frame()
            vsb_iso = ttk.Scrollbar(frm_iso, orient="vertical")
            text_iso = tk.Text(
                master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
            vsb_iso.config(command=text_iso.yview)
            vsb_iso.pack(side="right", fill="y")
            text_iso.pack(side="left", fill="both", expand=True)
            #
            for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
                file = self.container_lists["SMPL"]["Long"][index]

                lbl_i = tk.Label(
                    frm_iso, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
                text_iso.window_create("end", window=lbl_i)
                text_iso.insert("end", "\t")

                if len(self.container_lists["Possible IS"]) == 0:
                    var_list_is = self.container_lists["ISOTOPES"]
                else:
                    var_list_is = self.container_lists["Possible IS"]

                opt_is_i = tk.OptionMenu(
                    frm_iso, self.container_var["SMPL"][file]["IS Data"]["IS"], *var_list_is,
                    command=lambda var_is=self.container_var["SMPL"][file]["IS Data"]["IS"], var_file=file,
                                   mode="Specific": self.change_is_setup(var_is, var_file, mode))
                opt_is_i["menu"].config(
                    fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=accent_fg,
                    activebackground=accent_bg)
                opt_is_i.config(
                    bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=accent_bg,
                    activeforeground=accent_fg, highlightthickness=0)
                text_iso.window_create("end", window=opt_is_i)
                text_iso.insert("end", "\t")

                if self.container_var["SMPL"][file]["IS Data"]["Concentration"].get() != "0.0":
                    var_txt_smpl_i = self.container_var["SMPL"][file]["IS Data"]["Concentration"].get()
                else:
                    var_txt_smpl_i = "0.0"
                self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(var_txt_smpl_i)
                entr_i = tk.Entry(
                    frm_iso, textvariable=self.container_var["SMPL"][file]["IS Data"]["Concentration"],
                    fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0,
                    highlightbackground=self.bg_colors["Very Light"], width=15)
                text_iso.window_create("insert", window=entr_i)
                text_iso.insert("end", "\n")

            ## Option Menu
            if self.container_var["IS"]["Default SMPL"].get() != "Select IS":
                var_text_smpl = self.container_var["IS"]["Default SMPL"].get()
            else:
                var_text_smpl = "Select IS"
            #
            opt_smpl_def = SE(
                parent=window_issetup, row_id=16, column_id=8, n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=self.container_var["IS"]["Default SMPL"], option_list=var_list_is,
                text_set=var_text_smpl, fg_active=self.green_dark, bg_active=self.red_dark,
                command=lambda var_is=self.container_var["IS"]["Default SMPL"]: self.change_is_setup(var_is))
            #
            self.gui_subwindows["Mineral Analysis"]["Check IS"]["Option Menu"]["Permanent"].append(opt_smpl_def)
            #
            ## Entry
            if self.container_var["IS SMPL Default"].get() != "0.0":
                var_txt_default_smpl = self.container_var["IS SMPL Default"].get()
            else:
                var_txt_default_smpl = "0.0"
            #
            entr_smpl_def = SE(
                parent=window_issetup, row_id=16, column_id=14, n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["White"]).create_simple_entry(
                var=self.container_var["IS SMPL Default"], text_default=var_txt_default_smpl,
                command=lambda event, var_entr=self.container_var["IS SMPL Default"]:
                self.change_is_value_default(var_entr, event))
            #
            self.gui_subwindows["Mineral Analysis"]["Check IS"]["Entry"]["Permanent"].append(entr_smpl_def)
    #
    def change_is_value_default(self, var_entr, event):
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_entr.get())
    #
    def change_is_setup(self, var_is, var_file=None, mode="Default"):
        if mode == "Default":
            try:
                value_is = self.mineral_chem["Unknown"][var_is]
            except:
                value_is = 0.0
            #
            self.container_var["IS SMPL Default"].set(value_is)
            #
            for file in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file]["IS Data"]["IS"].set(var_is)
                self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(value_is)
                #
                file_short = file.split("/")[-1]
                self.container_files["SMPL"][file_short]["IS"].set(var_is)
                self.container_files["SMPL"][file_short]["IS Concentration"].set(value_is)
                #
                self.container_var["SMPL"][file]["IS"].set(var_is)
            #
        else:
            try:
                value_is = self.mineral_chem["Unknown"][var_is]
            except:
                value_is = 0.0
            #
            self.container_var["SMPL"][var_file]["IS Data"]["IS"].set(var_is)
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(value_is)
            #
            file_short = var_file.split("/")[-1]
            self.container_files["SMPL"][file_short]["IS"].set(var_is)
            self.container_files["SMPL"][file_short]["IS Concentration"].set(value_is)
            #
            self.container_var["SMPL"][var_file]["IS"].set(var_is)

    def srm_window(self):
        ## Window Settings
        window_width = 860
        window_heigth = 625
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        window_srm = tk.Toplevel(self.parent)
        window_srm.title("SRM and Mineral Composition Data")
        window_srm.geometry(var_geometry)
        window_srm.resizable(False, False)
        window_srm["bg"] = self.green_light
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(window_srm, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(window_srm, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            window_srm.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            window_srm.grid_columnconfigure(i, minsize=column_min)
        #
        ###########################################################
        #
        ## Frames
        frm_01 = SE(
            parent=window_srm, row_id=0, column_id=0, n_rows=n_rows, n_columns=9,
            fg=self.green_light, bg=self.green_dark).create_frame(relief=tk.FLAT)
        #
        ## Labels
        lbl_01 = SE(
            parent=window_srm, row_id=0, column_id=0, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Select SRM", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=window_srm, row_id=2, column_id=0, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Select Mineral", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=window_srm, row_id=0, column_id=10, n_rows=1, n_columns=32, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Periodic Table of the Elements", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=window_srm, row_id=n_rows - 4, column_id=0, n_rows=4, n_columns=9, fg=self.green_dark,
            bg=self.red_dark).create_simple_label(
            text="CAUTION!\n The mineral composition\n data reflects only the\n ideal composition of\n pure endmembers",
            relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## Option Menues
        list_srm = np.sort(self.list_srm)
        opt_srm = SE(
            parent=window_srm, row_id=1, column_id=0, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_simple_optionmenu(
            var_opt=self.container_var["srm_window"]["Option Menu"]["SRM"], var_default="Select SRM",
            var_list=list_srm, fg_active=self.green_dark, bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["srm_window"]["Option Menu"]["SRM"]:
            self.change_option_srm_window(var_opt))
        #
        list_minerals = np.sort(self.mineral_list)
        opt_mineral = SE(
            parent=window_srm, row_id=3, column_id=0, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_simple_optionmenu(
            var_opt=self.container_var["srm_window"]["Option Menu"]["Mineral"], var_default="Select Mineral",
            var_list=list_minerals, fg_active=self.green_dark, bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["srm_window"]["Option Menu"]["Mineral"]:
            self.change_option_srm_window(var_opt))
        #
        ## Labels and Entries
        start_column_pse = 10
        for index, element in enumerate(self.list_pse):
            if 0 <= index < 23:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1, column_id=start_column_pse, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1, column_id=start_column_pse + 3, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
            elif 23 <= index < 46:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1 - 23, column_id=start_column_pse + 8, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1 - 23, column_id=start_column_pse + 11, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
            elif 46 <= index < 69:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1 - 46, column_id=start_column_pse + 16, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1 - 46, column_id=start_column_pse + 19, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
            elif 69 <= index < 92:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1 - 69, column_id=start_column_pse + 24, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1 - 69, column_id=start_column_pse + 27, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
    #
    def change_option_srm_window(self, var_opt):
        self.srm_values = {}
        self.srm_values[var_opt] = {}
        #
        if var_opt in self.list_srm:
            self.container_var["srm_window"]["Option Menu"]["Mineral"].set("Select Mineral")
            #
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_values)
            #
            for element in self.list_pse:
                if element in self.srm_values[var_opt].keys():
                    self.container_var["srm_window"]["Entry"][element].set(self.srm_values[var_opt][element])
                else:
                    self.container_var["srm_window"]["Entry"][element].set("0.0")
            #
        elif var_opt in self.mineral_list:
            self.container_var["srm_window"]["Option Menu"]["SRM"].set("Select SRM")
            #
            for element in self.list_pse:
                if element in self.mineral_chem[var_opt].keys():
                    self.container_var["srm_window"]["Entry"][element].set(self.mineral_chem[var_opt][element])
                else:
                    self.container_var["srm_window"]["Entry"][element].set("0.0")
    #
    def create_srm_data_list(self):
        for var_srm in self.list_srm:
            self.container_lists["SRM Data"][var_srm] = {}
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.container_lists["SRM Data"])
        #
        for var_srm in self.list_srm:
            data_srm = self.container_lists["SRM Data"][var_srm]
            for element in self.list_pse:
                if element not in self.container_lists["SRM Data"]:
                    self.container_lists["SRM Data"][element] = {}
                #
                if element in data_srm:
                    self.container_lists["SRM Data"][element][var_srm] = data_srm[element]
    #
    def subwindow_general_settings(self):
        ## Window Settings
        window_width = 980
        window_heigth = 375
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        subwindow_generalsettings = tk.Toplevel(self.parent)
        subwindow_generalsettings.title("General Settings")
        subwindow_generalsettings.geometry(var_geometry)
        subwindow_generalsettings.resizable(False, False)
        subwindow_generalsettings["bg"] = self.bg_colors["Super Dark"]

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_generalsettings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_generalsettings, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            subwindow_generalsettings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_generalsettings.grid_columnconfigure(i, minsize=column_min)

        ###########################################################
        start_row = 0
        start_column = 0

        ## Labels
        str_lbl_01 = self.language_dict["Project Information"][self.var_language]
        str_lbl_02 = self.language_dict["Calculation Accuracy"][self.var_language]
        str_lbl_03 = self.language_dict["Sensitivity Drift"][self.var_language]
        str_lbl_04 = self.language_dict["Limit of Detection"][self.var_language]
        str_lbl_05 = self.language_dict["Offset Automatic Interval Detection"][self.var_language]
        str_lbl_06 = self.language_dict["Colormap"][self.var_language]
        str_lbl_07 = self.language_dict["Report File"][self.var_language]
        str_lbl_08 = self.language_dict["Plotting Setup"][self.var_language]
        str_lbl_09 = self.language_dict["Language Selection"][self.var_language]
        str_lbl_10 = self.language_dict["Data Processing"][self.var_language]

        lbl_01 = SE(
            parent=subwindow_generalsettings, row_id=0, column_id=start_column, n_rows=2, n_columns=9,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_generalsettings, row_id=4, column_id=start_column, n_rows=2, n_columns=9,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Reference\n Material (SRM)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_generalsettings, row_id=8, column_id=start_column, n_rows=2, n_columns=9,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_02, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_generalsettings, row_id=0, column_id=start_column + 10, n_rows=2, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_03, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=subwindow_generalsettings, row_id=5, column_id=start_column + 10, n_rows=2, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_04, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=subwindow_generalsettings, row_id=10, column_id=start_column + 10, n_rows=2, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_05, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_08 = SE(
            parent=subwindow_generalsettings, row_id=0, column_id=start_column + 27, n_rows=2, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_06, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_09 = SE(
            parent=subwindow_generalsettings, row_id=5, column_id=start_column + 27, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_07, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_10 = SE(
            parent=subwindow_generalsettings, row_id=9, column_id=start_column + 27, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_08, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_11 = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 27, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_09, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_11 = SE(
            parent=subwindow_generalsettings, row_id=0, column_id=start_column + 38, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text=str_lbl_10, relief=tk.FLAT, fontsize="sans 10 bold")

        self.gui_elements["general_settings"]["Label"]["General"].extend(
            [lbl_01, lbl_02, lbl_04, lbl_05, lbl_06, lbl_07, lbl_08, lbl_09, lbl_10, lbl_11])

        lbl_01a = SE(
            parent=subwindow_generalsettings, row_id=2, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Default Author", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02a = SE(
            parent=subwindow_generalsettings, row_id=6, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Default SRM", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_05a = SE(
            parent=subwindow_generalsettings, row_id=2, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Transform time values into ...", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_06a = SE(
            parent=subwindow_generalsettings, row_id=7, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Calculation formula from ...", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07a = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 10, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Background", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07b = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 10, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Signal", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08a = SE(
            parent=subwindow_generalsettings, row_id=2, column_id=start_column + 27, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_09a = SE(
            parent=subwindow_generalsettings, row_id=6, column_id=start_column + 27, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="File type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_09b = SE(
                parent=subwindow_generalsettings, row_id=7, column_id=start_column + 27, n_rows=1, n_columns=5,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
                text="Delimiter", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_10a = SE(
            parent=subwindow_generalsettings, row_id=10, column_id=start_column + 27, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Line width", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        self.gui_elements["general_settings"]["Label"]["General"].extend(
            [lbl_01a, lbl_02a, lbl_05a, lbl_06a, lbl_07a, lbl_07b, lbl_08a, lbl_09a, lbl_09b, lbl_10a])
        #
        ## Entries
        entr_01a = SE(
            parent=subwindow_generalsettings, row_id=3, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["General Settings"]["Default Author"],
            text_default=self.container_var["General Settings"]["Default Author"].get(), command=None)
        entr_07a = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 16, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["General Settings"]["BG Offset Start"],
            text_default=self.container_var["General Settings"]["BG Offset Start"].get(), command=None)
        entr_07b = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 21, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["General Settings"]["BG Offset End"],
            text_default=self.container_var["General Settings"]["BG Offset End"].get(), command=None)
        entr_07c = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 16, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["General Settings"]["MAT Offset Start"],
            text_default=self.container_var["General Settings"]["MAT Offset Start"].get(), command=None)
        entr_07d = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 21, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["General Settings"]["MAT Offset End"],
            text_default=self.container_var["General Settings"]["MAT Offset End"].get(), command=None)
        entr_10a = SE(
            parent=subwindow_generalsettings, row_id=10, column_id=start_column + 32, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["General Settings"]["Line width"],
            text_default=self.container_var["General Settings"]["Line width"].get(),
            command=lambda event, var_entr=self.container_var["General Settings"]["Line width"]:
            self.check_lw_value(var_entr, event))
        #
        self.gui_elements["general_settings"]["Entry"]["General"].extend(
            [entr_01a, entr_07a, entr_07b, entr_07c, entr_07d, entr_10a])
        #
        ## Option Menus
        list_srm = list(np.sort(self.list_srm))
        list_srm.insert(0, "Select SRM")
        list_colormaps = [
            "turbo", "rainbow", "gist_rainbow", "jet", "nipy_spectral", "gnuplot", "gist_earth", "ocean", "hsv",
            "seismic", "coolwarm", "Spectral", "copper", "hot", "cool", "viridis", "plasma", "inferno", "magma",
            "cividis", "brg"]
        list_languages = ["English", "German", "Spanish", "Italian", "French", "Chinese", "Greek", "Russian"]
        list_colormaps.sort()
        list_filetypes = ["*.csv", "*.txt"]
        list_filetypes.sort()
        list_delimiter = ["comma", "semicolon"]
        list_delimiter.sort()
        list_languages.sort()

        opt_srm = SE(
            parent=subwindow_generalsettings, row_id=7, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=self.container_var["General Settings"]["Default SRM"],
            var_default=self.container_var["General Settings"]["Default SRM"].get(), var_list=list_srm,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        opt_colormaps = SE(
            parent=subwindow_generalsettings, row_id=3, column_id=start_column + 27, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=self.container_var["General Settings"]["Colormap"],
            var_default=self.container_var["General Settings"]["Colormap"].get(), var_list=list_colormaps,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["General Settings"]["Colormap"]: self.change_colormap(var_opt))
        opt_filetype = SE(
            parent=subwindow_generalsettings, row_id=6, column_id=start_column + 32, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=self.container_var["General Settings"]["File type"],
            var_default=self.container_var["General Settings"]["File type"].get(), var_list=list_filetypes,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["General Settings"]["File type"]: self.change_filetype(var_opt))
        opt_delimiter = SE(
            parent=subwindow_generalsettings, row_id=7, column_id=start_column + 32, n_rows=1, n_columns=5,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=self.container_var["General Settings"]["Delimiter"],
            var_default=self.container_var["General Settings"]["Delimiter"].get(), var_list=list_delimiter,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["General Settings"]["Delimiter"]: self.change_delimiter(var_opt))
        opt_language = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 27, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=self.container_var["General Settings"]["Language"],
            var_default=self.container_var["General Settings"]["Language"].get(), var_list=list_languages,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        #opt_language["menu"].entryconfig("German", state="disable")
        opt_language["menu"].entryconfig("Italian", state="disable")
        opt_language["menu"].entryconfig("Spanish", state="disable")
        opt_language["menu"].entryconfig("French", state="disable")
        opt_language["menu"].entryconfig("Chinese", state="disable")
        opt_language["menu"].entryconfig("Greek", state="disable")
        opt_language["menu"].entryconfig("Russian", state="disable")

        self.gui_elements["general_settings"]["Option Menu"]["General"].extend(
            [opt_srm, opt_colormaps, opt_filetype, opt_delimiter, opt_language])
        #
        ## Radiobuttons
        rb_04a = SE(
            parent=subwindow_generalsettings, row_id=10, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Calculation Accuracy"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_04b = SE(
            parent=subwindow_generalsettings, row_id=11, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Calculation Accuracy"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="PySILLS",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_05a = SE(
            parent=subwindow_generalsettings, row_id=3, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Sensitivity Drift"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="seconds",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_05b = SE(
            parent=subwindow_generalsettings, row_id=4, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Sensitivity Drift"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="decimal numbers", sticky="nesw",
            relief=tk.FLAT, font="sans 10 bold")
        #
        rb_06a = SE(
            parent=subwindow_generalsettings, row_id=8, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["LOD Selection"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Pettke et al. (2012)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_06b = SE(
            parent=subwindow_generalsettings, row_id=9, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["LOD Selection"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Longerich et al. (1996)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        rb_06b = SE(
            parent=subwindow_generalsettings, row_id=1, column_id=start_column + 38, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Desired Average"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Arithmetic Mean",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_06b = SE(
            parent=subwindow_generalsettings, row_id=2, column_id=start_column + 38, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Desired Average"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Median",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        rb_07 = SE(
            parent=subwindow_generalsettings, row_id=3, column_id=start_column + 38, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Interval Processing"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Average of every interval",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_07 = SE(
            parent=subwindow_generalsettings, row_id=4, column_id=start_column + 38, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Interval Processing"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Stack all intervals into one",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        #
        self.gui_elements["general_settings"]["Radiobutton"]["General"].extend(
            [rb_05a, rb_05b, rb_06a, rb_06b])
        #
        ## Buttons
        btn_01 = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Save Settings", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.confirm_general_settings)
        #
        self.gui_elements["general_settings"]["Button"]["General"].extend([btn_01])

        self.check_lw_value(var_entr=self.container_var["General Settings"]["Line width"], event="")

    def check_lw_value(self, var_entr, event):
        if float(var_entr.get()) < 0:
            var_entr.set("0.5")
        elif float(var_entr.get()) > 2:
            var_entr.set("2.0")

    def change_colormap(self, var_opt):
        self.container_var["General Settings"]["Colormap"].set(var_opt)

    def change_filetype(self, var_opt):
        self.container_var["General Settings"]["File type"].set(var_opt)

    def change_delimiter(self, var_opt):
        self.container_var["General Settings"]["Delimiter"].set(var_opt)

    def confirm_general_settings(self):
        path_pysills = os.path.dirname(os.path.realpath(__file__))
        filename = os.path.join(path_pysills, "user_settings.txt")
        with open(filename, "w") as file_settings:
            file_settings.write("GENERAL SETTINGS" + ";\n")
            #
            for key, value in self.container_var["General Settings"].items():
                str_key = str(key)+ ";" + str(value.get())+";\n"
                file_settings.write(str_key)
    #
    def check_srm_settings(self):
        ## Window Settings
        window_width = 640
        window_heigth = 575
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_srm_checkup = tk.Toplevel(self.parent)
        subwindow_srm_checkup.title("Check-Up - Standard Reference Material")
        subwindow_srm_checkup.geometry(var_geometry)
        subwindow_srm_checkup.resizable(False, False)
        subwindow_srm_checkup["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_srm_checkup, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_srm_checkup, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_srm_checkup.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_srm_checkup.grid_columnconfigure(i, minsize=column_min)
        #
        ###########################################################
        #
        start_column = 0
        start_row = 0

        ## LABELS
        lbl_std = SE(
            parent=subwindow_srm_checkup, row_id=start_row, column_id=start_column, n_rows=1, n_columns=17,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 11, column_id=start_column, n_rows=1, n_columns=17,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_srm_checkup, row_id=start_row, column_id=start_column + 18, n_rows=1, n_columns=13,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="SRM Values", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## TREEVIEW
        tv_std = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 1, column_id=start_column, n_rows=10, n_columns=17,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=2, text_n=["Name", "SRM"], width_n=["120", "220"], individual=True)
        #
        list_srm = ["Select SRM"]
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            var_srm_file_i = self.container_var["STD"][var_file]["SRM"].get()
            #
            if var_srm_file_i not in list_srm:
                list_srm.append(var_srm_file_i)
            #
            entry_std = [file_std, var_srm_file_i]
            #
            tv_std.insert("", tk.END, values=entry_std)
        #
        if len(list_srm) > 1:
            list_srm.remove("Select SRM")
        #
        tv_isotope = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 12, column_id=start_column, n_rows=10, n_columns=17,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=3, text_n=["Name", "SRM", "Concentration (ppm)"], width_n=["70", "130", "140"],
            individual=True)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            var_srm_i = self.container_var["SRM"][isotope].get()
            #
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            if element in self.srm_actual[var_srm_i]:
                var_isotope_concentration = self.srm_actual[var_srm_i][element]
            else:
                var_isotope_concentration = 0.0
            #
            entry_isotope = [isotope, var_srm_i, var_isotope_concentration]
            #
            tv_isotope.insert("", tk.END, values=entry_isotope)
        #
        tv_srm = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 2, column_id=start_column + 18, n_rows=20, n_columns=13,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["100", "160"], individual=True)
        #
        ## Option Menus
        var_opt_srm = tk.StringVar()
        if self.container_var["SRM"]["default"][0].get() != "Select SRM":
            var_opt_srm.set(self.container_var["SRM"]["default"][0].get())
        else:
            var_opt_srm.set("Select SRM")
        #
        opt_srm = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 1, column_id=start_column + 18, n_rows=1, n_columns=13,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=var_opt_srm, var_default=var_opt_srm.get(), var_list=list_srm,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=var_opt_srm, var_tv=tv_srm: self.change_srm_checkup(var_opt, var_tv))
        #
        ## INITIALIZATION
        self.change_srm_checkup(var_opt=var_opt_srm.get(), var_tv=tv_srm)
        #
    def change_srm_checkup(self, var_opt, var_tv):
        if len(var_tv.get_children()) > 0:
            for item in var_tv.get_children():
                var_tv.delete(item)
        #
        if var_opt != "Select SRM":
            for element in np.sort(list(self.srm_actual[var_opt].keys())):
                entry_isotope = [element, self.srm_actual[var_opt][element]]
                #
                var_tv.insert("", tk.END, values=entry_isotope)
    #
    def check_interval_settings(self):
        ## Window Settings
        window_width = 1080
        window_heigth = 825
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_intervals = tk.Toplevel(self.parent)
        subwindow_intervals.title("Check-Up - Calculation Intervals")
        subwindow_intervals.geometry(var_geometry)
        subwindow_intervals.resizable(False, False)
        subwindow_intervals["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_intervals, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_intervals, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_intervals.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_intervals.grid_columnconfigure(i, minsize=column_min)
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
            accent_btn_bg = self.colors_ma["Medium"]
            accent_btn_fg = self.colors_ma["Dark Font"]
            var_categories = ["Filename", "Category", "ID", "Start", "End"]
            var_widths = ["160", "90", "90", "90", "90"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
            accent_btn_bg = self.colors_fi["Medium"]
            accent_btn_fg = self.colors_fi["Dark Font"]
            var_categories = ["Filename", "Category", "ID", "Start", "End"]
            var_widths = ["160", "90", "90", "90", "90"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
            accent_btn_bg = self.colors_mi["Medium"]
            accent_btn_fg = self.colors_mi["Dark Font"]
            var_categories = ["Name", "BG(start)", "BG(end)", "MAT(start)", "MAT(end)", "INCL(start)", "INCL(end)"]
            var_widths = ["120", "67", "67", "67", "67", "67", "67"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
            accent_btn_bg = self.bg_colors["Medium"]
            accent_btn_fg = self.bg_colors["Dark Font"]
        #
        ################################################################################################################
        #
        start_column = 0
        start_row = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column + 26,
            n_rows=n_rows, n_columns=n_columns - 26, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## FIGURES
        fig_checkup_std = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        fig_checkup_smpl = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        #
        canvas_std = FigureCanvasTkAgg(fig_checkup_std, master=subwindow_intervals)
        canvas_std.get_tk_widget().grid(
            row=start_row + 1, column=start_column + 26, rowspan=15, columnspan=27, sticky="nesw")
        canvas_smpl = FigureCanvasTkAgg(fig_checkup_smpl, master=subwindow_intervals)
        canvas_smpl.get_tk_widget().grid(
            row=start_row + 17, column=start_column + 26, rowspan=15, columnspan=27, sticky="nesw")
        #
        self.container_checkup["STD"].append(canvas_std)
        self.container_checkup["SMPL"].append(canvas_smpl)
        self.temp_figure_checkup = {"STD": fig_checkup_std, "SMPL": fig_checkup_smpl}
        self.temp_canvas_checkup = {"STD": canvas_std, "SMPL": canvas_smpl}
        self.temp_axes_checkup = {"STD": {}, "SMPL": {}}
        self.temp_lines_checkup = {"STD": {}, "SMPL": {}}
        #
        ## LABELS
        lbl_std = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## BUTTONS
        btn_std_01 = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", mode="Back", var_fig=fig_checkup_std:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_std_02 = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", var_fig=fig_checkup_std: self.change_graph_checkup(filetype, var_fig))
        #
        if self.pysills_mode == "MA":
            btn_std_03 = SE(
                parent=subwindow_intervals, row_id=start_row, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_filename_long=self.ma_current_file_std, var_filetype="STD", checkup_mode=True:
                self.ma_check_specific_file(var_filename_long, var_filetype, checkup_mode))
            #
        elif self.pysills_mode == "FI":
            btn_std_03 = SE(
                parent=subwindow_intervals, row_id=start_row, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.fi_current_file_std, var_type="STD", checkup_mode=True:
                self.fi_check_specific_file(var_file, var_type, checkup_mode))
            #
        elif self.pysills_mode == "MI":
            btn_std_03 = SE(
                parent=subwindow_intervals, row_id=start_row, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.mi_current_file_std, var_type="STD", checkup_mode=True:
                self.mi_check_specific_file(var_file, var_type, checkup_mode))
        #
        btn_smpl_01 = SE(
            parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", mode="Back", var_fig=fig_checkup_smpl:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_smpl_02 = SE(
            parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", var_fig=fig_checkup_smpl: self.change_graph_checkup(filetype, var_fig))
        if self.pysills_mode == "MA":
            btn_smpl_03 = SE(
                parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_filename_long=self.ma_current_file_smpl, var_filetype="SMPL", checkup_mode=True:
                self.ma_check_specific_file(var_filename_long, var_filetype, checkup_mode))
        elif self.pysills_mode == "FI":
            btn_smpl_03 = SE(
                parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.fi_current_file_smpl, var_type="SMPL", checkup_mode=True:
                self.fi_check_specific_file(var_file, var_type, checkup_mode))
        elif self.pysills_mode == "FI":
            btn_smpl_03 = SE(
                parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.mi_current_file_smpl, var_type="SMPL", checkup_mode=True:
                self.mi_check_specific_file(var_file, var_type, checkup_mode))
        #
        ## TREEVIEW
        #
        tv_std = SE(
            parent=subwindow_intervals, row_id=start_row + 1, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(var_categories), text_n=var_categories, width_n=var_widths, individual=True)
        #
        if self.pysills_mode == "MA":
            for file_std in self.container_lists["STD"]["Short"]:
                for category in ["BG", "MAT"]:
                    if len(self.container_helper["STD"][file_std][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["STD"][file_std][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_std = [file_std, category, var_id, times[0], times[1]]
                            tv_std.insert("", tk.END, values=entry_std)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_std = [file_std, category, var_id, times[0], times[1]]
                        tv_std.insert("", tk.END, values=entry_std)
                        #
                self.temp_axes_checkup["STD"][file_std] = fig_checkup_std.add_subplot(label=file_std)
                self.temp_lines_checkup["STD"][file_std] = 0
            #
        else:
            for file_std in self.container_lists["STD"]["Short"]:
                for category in ["BG", "MAT"]:
                    if len(self.container_helper["STD"][file_std][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["STD"][file_std][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_std = [file_std, category, var_id, times[0], times[1]]
                            tv_std.insert("", tk.END, values=entry_std)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_std = [file_std, category, var_id, times[0], times[1]]
                        tv_std.insert("", tk.END, values=entry_std)
                        #
                self.temp_axes_checkup["STD"][file_std] = fig_checkup_std.add_subplot(label=file_std)
                self.temp_lines_checkup["STD"][file_std] = 0
        #
        tv_smpl = SE(
            parent=subwindow_intervals, row_id=start_row + 17, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(var_categories), text_n=var_categories, width_n=var_widths, individual=True)
        #
        if self.pysills_mode == "MA":
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                for category in ["BG", "MAT"]:
                    if len(self.container_helper["SMPL"][file_smpl][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["SMPL"][file_smpl][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                            tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                        tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                self.temp_axes_checkup["SMPL"][file_smpl] = fig_checkup_smpl.add_subplot(label=file_smpl)
                self.temp_lines_checkup["SMPL"][file_smpl] = 0
            #
        else:
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                for category in ["BG", "MAT", "INCL"]:
                    if len(self.container_helper["SMPL"][file_smpl][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["SMPL"][file_smpl][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                            tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                        tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                self.temp_axes_checkup["SMPL"][file_smpl] = fig_checkup_smpl.add_subplot(label=file_smpl)
                self.temp_lines_checkup["SMPL"][file_smpl] = 0
        #
        ## INITIALIZATION
        self.change_graph_checkup(filetype="STD", initialization=True, var_fig=fig_checkup_std)
        self.change_graph_checkup(filetype="SMPL", initialization=True, var_fig=fig_checkup_smpl)
    #
    def check_acquisition_times(self):
        ## Window Settings
        window_width = 520
        window_heigth = 825
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        subwindow_aquisition_times = tk.Toplevel(self.parent)
        subwindow_aquisition_times.title("Check-Up - Acquisition  Times")
        subwindow_aquisition_times.geometry(var_geometry)
        subwindow_aquisition_times.resizable(False, False)
        subwindow_aquisition_times["bg"] = self.bg_colors["Very Dark"]

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_aquisition_times, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_aquisition_times, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            subwindow_aquisition_times.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_aquisition_times.grid_columnconfigure(i, minsize=column_min)

        start_column = 0
        start_row = 0

        ## LABELS
        lbl_std = SE(
            parent=subwindow_aquisition_times, row_id=start_row, column_id=start_column, n_rows=1, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 16, column_id=start_column, n_rows=1, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")

        ## ENTRY
        self.var_entr_std_time = tk.StringVar()
        self.var_entr_std_time.set("00:00:00")

        entr_std = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 1, column_id=start_column + 17, n_rows=2,
            n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.var_entr_std_time, text_default=self.var_entr_std_time.get(),
            command=lambda event, filetype="STD": self.change_value_acquisition(filetype, event))

        self.var_entr_smpl_time = tk.StringVar()
        self.var_entr_smpl_time.set("00:00:00")

        entr_smpl = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 17, column_id=start_column + 17, n_rows=2,
            n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.var_entr_smpl_time, text_default=self.var_entr_smpl_time.get(),
            command=lambda event, filetype="SMPL": self.change_value_acquisition(filetype, event))

        ## TREEVIEWS
        self.tv_std = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 1, column_id=start_column, n_rows=14, n_columns=15,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Filename", "Acquisition Time"],
            width_n=["150", "150"], individual=True)

        scb_v = ttk.Scrollbar(subwindow_aquisition_times, orient="vertical")
        scb_h = ttk.Scrollbar(subwindow_aquisition_times, orient="horizontal")
        self.tv_std.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_std.yview)
        scb_h.config(command=self.tv_std.xview)
        scb_v.grid(row=start_row + 1, column=start_column + 15, rowspan=14, columnspan=1, sticky="ns")
        scb_h.grid(row=start_row + 15, column=start_column, rowspan=1, columnspan=15, sticky="ew")

        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            var_file_short = file_std

            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]

            if self.file_loaded == False:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
            else:
                var_time = self.container_var["acquisition times"]["STD"][var_file_short].get()
                parts_time = var_time.split(":")
                times = parts_time

            if index == 0:
                if self.file_loaded == False:
                    t_start_0 = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                    t_start = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                else:
                    t_start_0 = datetime.timedelta(
                        hours=int(times[0]), minutes=int(times[1]), seconds=int(times[2]))
                    t_start = datetime.timedelta(
                        hours=int(times[0]), minutes=int(times[1]), seconds=int(times[2]))
            else:
                if self.file_loaded == False:
                    t_start = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                else:
                    t_start = datetime.timedelta(
                        hours=int(times[0]), minutes=int(times[1]), seconds=int(times[2]))

            t_delta_0 = (t_start - t_start_0).total_seconds()
            self.container_lists["Acquisition Times Delta"][file_std] = t_delta_0

            if file_std not in self.container_var["acquisition times"]["STD"]:
                self.container_var["acquisition times"]["STD"][file_std] = tk.StringVar()
                self.container_var["acquisition times"]["STD"][file_std].set(
                    times[0][0] + ":" + times[0][1] + ":" + times[0][2])

            entry_std = [file_std, self.container_var["acquisition times"]["STD"][file_std].get()]
            self.tv_std.insert("", tk.END, values=entry_std)

        self.tv_smpl = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 17, column_id=start_column, n_rows=14, n_columns=15,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Filename", "Acquisition Time"],
            width_n=["150", "150"], individual=True)

        scb_v = ttk.Scrollbar(subwindow_aquisition_times, orient="vertical")
        scb_h = ttk.Scrollbar(subwindow_aquisition_times, orient="horizontal")
        self.tv_smpl.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_smpl.yview)
        scb_h.config(command=self.tv_smpl.xview)
        scb_v.grid(row=start_row + 17, column=start_column + 15, rowspan=14, columnspan=1, sticky="ns")
        scb_h.grid(row=start_row + 31, column=start_column, rowspan=1, columnspan=15, sticky="ew")

        for index, var_file in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = var_file.split("/")
            file_smpl = parts[-1]
            var_file_short = file_smpl

            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]

            if self.file_loaded == False:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
            else:
                var_time = self.container_var["acquisition times"]["SMPL"][var_file_short].get()
                parts_time = var_time.split(":")
                times = parts_time

            if self.file_loaded == False:
                t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
            else:
                t_start = datetime.timedelta(hours=int(times[0]), minutes=int(times[1]), seconds=int(times[2]))
            t_delta_0 = (t_start - t_start_0).total_seconds()
            self.container_lists["Acquisition Times Delta"][file_smpl] = t_delta_0

            if file_smpl not in self.container_var["acquisition times"]["SMPL"]:
                self.container_var["acquisition times"]["SMPL"][file_smpl] = tk.StringVar()
                if self.file_loaded == False:
                    self.container_var["acquisition times"]["SMPL"][file_smpl].set(
                        times[0][0] + ":" + times[0][1] + ":" + times[0][2])
                else:
                    self.container_var["acquisition times"]["SMPL"][file_smpl].set(
                        times[0] + ":" + times[1] + ":" + times[2])

            entry_smpl = [file_smpl, self.container_var["acquisition times"]["SMPL"][file_smpl].get()]
            self.tv_smpl.insert("", tk.END, values=entry_smpl)

    def calculate_acquisition_time_deltas(self):
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]

            if self.file_loaded == False:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
            else:
                var_time = self.container_var["acquisition times"]["STD"][file_std].get()
                parts_time = var_time.split(":")
                times = parts_time

            if times[0] == "unknown" and self.file_loaded == True:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)

            if len(times) == 2:
                data_times = times[0]
            else:
                data_times = times

            if index == 0:
                if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                    if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                        t_start_0 = datetime.timedelta(
                            hours=int(data_times[0]), minutes=int(data_times[1]), seconds=int(data_times[2]))
                    else:
                        t_start_0 = datetime.timedelta(
                            hours=int(data_times[0]), minutes=int(data_times[1]), seconds=int("00"))
                else:
                    t_start_0 = int(data_times[0]) + int(data_times[1])/60

            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                    t_start = datetime.timedelta(
                        hours=int(data_times[0]), minutes=int(data_times[1]), seconds=int(data_times[2]))
                else:
                    t_start = datetime.timedelta(
                        hours=int(data_times[0]), minutes=int(data_times[1]), seconds=int("00"))
            else:
                t_start = int(data_times[0]) + int(data_times[1])/60

            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                t_delta_0 = (t_start - t_start_0).total_seconds()
            else:
                t_delta_0 = t_start - t_start_0

            self.container_lists["Acquisition Times Delta"][file_std] = t_delta_0

        for index, var_file in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = var_file.split("/")
            file_smpl = parts[-1]
            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]

            if self.file_loaded == False:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
            else:
                var_time = self.container_var["acquisition times"]["SMPL"][file_smpl].get()
                parts_time = var_time.split(":")
                times = parts_time

            if times[0] == "unknown" and self.file_loaded == True:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)

            if len(times) == 2:
                data_times = times[0]
            else:
                data_times = times

            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                    t_start = datetime.timedelta(
                        hours=int(data_times[0]), minutes=int(data_times[1]), seconds=int(data_times[2]))
                else:
                    t_start = datetime.timedelta(
                        hours=int(data_times[0]), minutes=int(data_times[1]), seconds=int("00"))
            else:
                t_start = int(data_times[0]) + int(data_times[1])/60

            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                t_delta_0 = (t_start - t_start_0).total_seconds()
            else:
                t_delta_0 = t_start - t_start_0

            self.container_lists["Acquisition Times Delta"][file_smpl] = t_delta_0

    def check_imported_files(self):
        ## Window Settings
        window_width = 1080
        window_heigth = 825
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_imported_files = tk.Toplevel(self.parent)
        subwindow_imported_files.title("Check-Up - Imported Files")
        subwindow_imported_files.geometry(var_geometry)
        subwindow_imported_files.resizable(False, False)
        subwindow_imported_files["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_imported_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_imported_files, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_imported_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_imported_files.grid_columnconfigure(i, minsize=column_min)
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
            accent_btn_bg = self.colors_ma["Medium"]
            accent_btn_fg = self.colors_ma["Dark Font"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
            accent_btn_bg = self.colors_fi["Medium"]
            accent_btn_fg = self.colors_fi["Dark Font"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
            accent_btn_bg = self.colors_mi["Medium"]
            accent_btn_fg = self.colors_mi["Dark Font"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
            accent_btn_bg = self.bg_colors["Medium"]
            accent_btn_fg = self.bg_colors["Dark Font"]
        #
        ###########################################################
        #
        start_column = 0
        start_row = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column + 26,
            n_rows=n_rows, n_columns=n_columns - 26, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## LABELS
        lbl_std = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_imported_files, row_id=start_row + 16, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## FIGURES
        fig_checkup_std = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        fig_checkup_smpl = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        #
        canvas_std = FigureCanvasTkAgg(fig_checkup_std, master=subwindow_imported_files)
        canvas_std.get_tk_widget().grid(
            row=start_row + 1, column=start_column + 26, rowspan=15, columnspan=28, sticky="nesw")
        canvas_smpl = FigureCanvasTkAgg(fig_checkup_smpl, master=subwindow_imported_files)
        canvas_smpl.get_tk_widget().grid(
            row=start_row + 17, column=start_column + 26, rowspan=15, columnspan=28, sticky="nesw")
        #
        self.container_checkup["STD"].append(canvas_std)
        self.container_checkup["SMPL"].append(canvas_smpl)
        self.temp_figure_checkup = {"STD": fig_checkup_std, "SMPL": fig_checkup_smpl}
        self.temp_canvas_checkup = {"STD": canvas_std, "SMPL": canvas_smpl}
        self.temp_axes_checkup = {"STD": {}, "SMPL": {}}
        self.temp_lines_checkup = {"STD": {}, "SMPL": {}}
        #
        ## BUTTONS
        btn_std_01 = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", mode="Back", var_fig=fig_checkup_std:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_std_02 = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", var_fig=fig_checkup_std: self.change_graph_checkup(filetype, var_fig))
        btn_smpl_01 = SE(
            parent=subwindow_imported_files, row_id=start_row + 16, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", mode="Back", var_fig=fig_checkup_smpl:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_smpl_02 = SE(
            parent=subwindow_imported_files, row_id=start_row + 16, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", var_fig=fig_checkup_smpl: self.change_graph_checkup(filetype, var_fig))
        #
        ## TREEVIEW
        tv_std = SE(
            parent=subwindow_imported_files, row_id=start_row + 1, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=6, text_n=["Name", "N Isotopes", "t(start)", "t(end)", "t(day)", "date"],
            width_n=["120", "80", "80", "80", "80", "80"], individual=True)
        #
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            var_file_short = parts[-1]
            if self.file_loaded == False:
                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_data = DE(filename_long=var_file).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_data = DE(filename_long=var_file).get_measurements(
                        delimiter=",", skip_header=3, skip_footer=1)
            else:
                df_data = self.container_measurements["Dataframe"][var_file_short]

            # if self.container_icpms["name"] != None:
            #     var_skipheader = self.container_icpms["skipheader"]
            #     var_skipfooter = self.container_icpms["skipfooter"]
            #     df_data = DE(filename_long=var_file).get_measurements(
            #         delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            # else:
            #     df_data = DE(filename_long=var_file).get_measurements(
            #         delimiter=",", skip_header=3, skip_footer=1)
            dataset_time = list(DE().get_times(dataframe=df_data))
            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]

            if self.file_loaded == False:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
            else:
                var_time = self.container_var["acquisition times"]["STD"][var_file_short].get()
                parts_time = var_time.split(":")
                times = parts_time

            if self.file_loaded == False:
                entry_std = [file_std, len(list(df_data.keys())[1:]), dataset_time[0], dataset_time[-1],
                             times[0][0]+":"+times[0][1]+":"+times[0][2], dates[0][0]+"/"+dates[0][1]+"/"+dates[0][2]]
            else:
                entry_std = [file_std, len(list(df_data.keys())[1:]), dataset_time[0], dataset_time[-1],
                             times[0] + ":" + times[1] + ":" + times[2]]

            tv_std.insert("", tk.END, values=entry_std)
            #
            self.temp_axes_checkup["STD"][file_std] = fig_checkup_std.add_subplot(label=file_std)
            self.temp_lines_checkup["STD"][file_std] = 0
        #
        tv_smpl = SE(
            parent=subwindow_imported_files, row_id=start_row + 17, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=6, text_n=["Name", "N Isotopes", "t(start)", "t(end)", "t(day)", "date"],
            width_n=["120", "80", "80", "80", "80", "80"], individual=True)
        #
        for index, var_file in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = var_file.split("/")
            file_smpl = parts[-1]
            var_file_short = parts[-1]
            if self.file_loaded == False:
                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_data = DE(filename_long=var_file).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_data = DE(filename_long=var_file).get_measurements(
                        delimiter=",", skip_header=3, skip_footer=1)
            else:
                df_data = self.container_measurements["Dataframe"][var_file_short]

            dataset_time = list(DE().get_times(dataframe=df_data))
            var_skipheader = self.container_icpms["skipheader"]
            var_skipfooter = self.container_icpms["skipfooter"]
            var_timestamp = self.container_icpms["timestamp"]
            var_icpms = self.container_icpms["name"]
            if self.file_loaded == False:
                dates, times = Data(filename=var_file).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
            else:
                var_time = self.container_var["acquisition times"]["SMPL"][var_file_short].get()
                parts_time = var_time.split(":")
                times = parts_time

            if self.file_loaded == False:
                entry_smpl = [file_smpl, len(list(df_data.keys())[1:]), dataset_time[0], dataset_time[-1],
                             times[0][0] + ":" + times[0][1] + ":" + times[0][2],
                             dates[0][0] + "/" + dates[0][1] + "/" + dates[0][2]]
            else:
                entry_smpl = [file_smpl, len(list(df_data.keys())[1:]), dataset_time[0], dataset_time[-1],
                              times[0] + ":" + times[1] + ":" + times[2]]

            tv_smpl.insert("", tk.END, values=entry_smpl)
            #
            self.temp_axes_checkup["SMPL"][file_smpl] = fig_checkup_smpl.add_subplot(label=file_smpl)
            self.temp_lines_checkup["SMPL"][file_smpl] = 0
        #
        ## INITIALIZATION
        self.change_graph_checkup(filetype="STD", initialization=True, var_fig=fig_checkup_std)
        self.change_graph_checkup(filetype="SMPL", initialization=True, var_fig=fig_checkup_smpl)
    #
    def change_graph_checkup(self, filetype, var_fig, mode="Next", initialization=False):
        counter_key = "Counter " + str(filetype)
        #
        for key, axis_item in self.temp_axes_checkup[filetype].items():
            axis_item.axis("off")
            axis_item.set_visible(False)
        #
        self.temp_canvas_checkup[filetype].draw()
        #
        if initialization == False:
            n_files = len(self.container_lists[filetype]["Long"])
            #
            if mode == "Next":
                if self.container_checkup[counter_key] < n_files - 1:
                    self.container_checkup[counter_key] += 1
                else:
                    self.container_checkup[counter_key] = 0
            else:
                if self.container_checkup[counter_key] > 0:
                    self.container_checkup[counter_key] -= 1
                else:
                    self.container_checkup[counter_key] = n_files - 1
        #
        var_file = self.container_lists[filetype]["Long"][self.container_checkup[counter_key]]
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        var_fig = self.temp_figure_checkup[filetype]
        #
        if filetype == "STD":
            self.fi_current_file_std = var_file
        elif filetype == "SMPL":
            self.fi_current_file_smpl = var_file
        #
        if self.temp_lines_checkup[filetype][var_file_short] == 0:
            if self.file_loaded == False:
                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_data = DE(filename_long=var_file).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_data = DE(filename_long=var_file).get_measurements(
                        delimiter=",", skip_header=3, skip_footer=1)
            else:
                df_data = self.container_measurements["Dataframe"][var_file_short]

            dataset_time = list(DE().get_times(dataframe=df_data))
            x_max = max(dataset_time)
            icp_measurements = np.array([[df_data[isotope] for isotope in self.container_lists["ISOTOPES"]]])
            y_max = np.amax(icp_measurements)
            #
            ## DIAGRAMS
            ax = var_fig.add_subplot(label=np.random.uniform())
            self.temp_axes_checkup[filetype][var_file_short] = ax
            #
            for isotope in self.container_lists["ISOTOPES"]:
                ln = ax.plot(dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                             linewidth=1, visible=True)
            #
            if self.pysills_mode in ["FI", "MI"]:
                var_check_bg = self.container_helper[filetype][var_file_short]["BG"]["Content"]
            else:
                var_check_bg = self.container_helper[filetype][var_file_short]["BG"]["Content"]
            #
            if len(var_check_bg) > 0:
                if self.pysills_mode in ["FI", "MI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short]["BG"]["Content"].items():
                        times_bg = var_content["Times"]
                        #
                        box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                else:
                    for var_id, var_content in self.container_helper[filetype][var_file_short]["BG"]["Content"].items():
                        times_bg = var_content["Times"]
                        #
                        box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                    # times_bg = self.container_helper[filetype][var_file_short]["BG"][1]["Times"]
                    # #
                    # box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.5, color=self.colors_intervals["BG"])
            #
            if self.pysills_mode == "MA":
                signal_key = "MAT"
                var_check_sig = self.container_helper[filetype][var_file_short][signal_key]["Content"]
                # signal_key = "SIG"
                # var_check_sig = self.container_helper[filetype][var_file_short][signal_key]
            else:
                signal_key = "MAT"
                var_check_sig = self.container_helper[filetype][var_file_short][signal_key]["Content"]
            #
            if len(var_check_sig) > 0:
                if self.pysills_mode in ["FI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][signal_key][
                        "Content"].items():
                        times_sig = var_content["Times"]
                        var_color = self.colors_intervals["MAT"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                elif self.pysills_mode in ["MI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][signal_key][
                        "Content"].items():
                        times_sig = self.container_helper[filetype][var_file_short][signal_key]["Content"][1]["Times"]
                        var_color = self.colors_intervals["MAT"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                else:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][signal_key][
                        "Content"].items():
                        times_sig = var_content["Times"]
                        var_color = self.colors_intervals["MAT"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    # times_sig = times_sig = self.container_helper[filetype][var_file_short][signal_key][1]["Times"]
                    # var_color = self.colors_intervals["SIG"]
                    # #
                    # box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
            #
            if self.pysills_mode == "MA":
                inclusion_key = "INCL"
                var_check_incl = []
            else:
                inclusion_key = "INCL"
                var_check_incl = self.container_helper[filetype][var_file_short][inclusion_key]["Content"]
            #
            if len(var_check_incl) > 0:
                if self.pysills_mode in ["FI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][inclusion_key][
                        "Content"].items():
                        times_sig = var_content["Times"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=self.colors_intervals["INCL"])
                elif self.pysills_mode in ["MI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][inclusion_key][
                        "Content"].items():
                        times_sig = self.container_helper[filetype][var_file_short][inclusion_key]["Content"][1][
                            "Times"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=self.colors_intervals["INCL"])
            #
            ax.grid(True)
            ax.set_yscale("log")
            ax.set_xlim(left=0, right=x_max)
            ax.set_xticks(np.arange(0, x_max, 20))
            ax.set_ylim(bottom=100, top=1.5*y_max)
            ax.grid(which="major", linestyle="-", linewidth=1)
            ax.minorticks_on()
            ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            ax.set_axisbelow(True)
            ax.set_title(var_file_short, fontsize=9)
            ax.set_xlabel("Time (s)", labelpad=0.5, fontsize=8)
            ax.set_ylabel("Signal (cps)", labelpad=0.5, fontsize=8)
            ax.xaxis.set_tick_params(labelsize=8)
            ax.yaxis.set_tick_params(labelsize=8)
            #
            var_fig.subplots_adjust(bottom=0.125, top=0.925, left=0.1125, right=0.95)
            #
            self.temp_canvas_checkup[filetype].draw()
            #
            self.temp_lines_checkup[filetype][var_file_short] = 1
            #
        else:
            self.temp_axes_checkup[filetype][var_file_short].axis("on")
            self.temp_axes_checkup[filetype][var_file_short].set_visible(True)
            #
            self.temp_canvas_checkup[filetype].draw()

    def change_value_acquisition(self, filetype, event):
        if filetype == "STD":
            selected_item = self.tv_std.selection()[0]
            index = int(str(selected_item)[-1]) - 1
            new_time = self.var_entr_std_time.get()
            var_file = self.container_lists[filetype]["Short"][index]
            #
            self.tv_std.item(item=selected_item, text=var_file, values=(var_file, new_time))
        else:
            selected_item = self.tv_smpl.selection()[0]
            index = int(str(selected_item)[-1]) - 1
            new_time = self.var_entr_smpl_time.get()
            var_file = self.container_lists[filetype]["Short"][index]
            #
            self.tv_smpl.item(item=selected_item, text=var_file, values=(var_file, new_time))
        #
        self.container_var["acquisition times"][filetype][var_file].set(new_time)

########################################################################################################################
### EXTRAS #############################################################################################################
########################################################################################################################
    def ma_extras(self):
        """Main window of additional analysis tools for a mineral analysis project."""
        ## Window Settings
        window_width = 520
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_ma_extras = tk.Toplevel(self.parent)
        self.subwindow_ma_extras.title("MINERAL ANALYSIS - Extras")
        self.subwindow_ma_extras.geometry(var_geometry)
        self.subwindow_ma_extras.resizable(False, False)
        self.subwindow_ma_extras["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_extras, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_extras, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_extras.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_extras.grid_columnconfigure(i, minsize=column_min)

        var_row_start = 0
        var_columm_start = 0
        var_header_n = 12
        int_category_n = 8

        # LABELS
        lbl_01 = SE(
            parent=self.subwindow_ma_extras, row_id=var_row_start, column_id=var_columm_start, n_rows=1,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Geothermometry", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_ma_extras, row_id=var_row_start, column_id=var_columm_start + var_header_n + 1,
            n_rows=1, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Geochronology", relief=tk.FLAT, fontsize="sans 10 bold")

        lbl_001 = SE(
            parent=self.subwindow_ma_extras, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=1,
            n_columns=int_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Ti-in-Quartz", relief=tk.FLAT, fontsize="sans 10 bold")

        lbl_002 = SE(
            parent=self.subwindow_ma_extras, row_id=var_row_start + 1, column_id=var_columm_start + var_header_n + 1,
            n_rows=1, n_columns=int_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="U-Pb Dating", relief=tk.FLAT, fontsize="sans 10 bold")

        # BUTTONS
        btn_001 = SE(
            parent=self.subwindow_ma_extras, row_id=var_row_start + 1, column_id=var_columm_start + int_category_n,
            n_rows=1, n_columns=var_header_n - int_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.geothermometry_titanium_in_quartz)

        btn_002 = SE(
            parent=self.subwindow_ma_extras, row_id=var_row_start + 1,
            column_id=var_columm_start + var_header_n + 1 + int_category_n, n_rows=1,
            n_columns=var_header_n - int_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])

    def geothermometry_titanium_in_quartz(self):
        """Window for the Titanium-in-Quartz thermometry."""
        ## Window Settings
        window_width = 800
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_geothermometry_ti_in_qz = tk.Toplevel(self.parent)
        self.subwindow_geothermometry_ti_in_qz.title("Geothermometry - Titanium-in-Quartz")
        self.subwindow_geothermometry_ti_in_qz.geometry(var_geometry)
        self.subwindow_geothermometry_ti_in_qz.resizable(False, False)
        self.subwindow_geothermometry_ti_in_qz["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_geothermometry_ti_in_qz, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_geothermometry_ti_in_qz, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_geothermometry_ti_in_qz.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_geothermometry_ti_in_qz.grid_columnconfigure(i, minsize=column_min)

        var_row_start = 0
        var_columm_start = 0
        var_header_n = 12
        int_category_n = 12

        # LABELS
        lbl_01 = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start, column_id=var_columm_start, n_rows=1,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Titanium-in-Quartz Thermometry", relief=tk.FLAT, fontsize="sans 10 bold")

        lbl_02 = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start + 6, column_id=var_columm_start,
            n_rows=1, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Additional Settings", relief=tk.FLAT, fontsize="sans 10 bold")

        lbl_03 = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start,
            column_id=var_columm_start + var_header_n + 1, n_rows=1, n_columns=var_header_n + 14,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Results", relief=tk.FLAT, fontsize="sans 10 bold")

        # BUTTONS
        btn_03 = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start + 5, column_id=var_row_start, n_rows=1,
            n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Run", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.run_geothermometer_titanium_in_quartz)
        btn_03 = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start + 5, column_id=6, n_rows=1,
            n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Export Results", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])

        # RADIOBUTTONS
        rb_001 = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start + 1, column_id=var_columm_start,
            n_rows=1, n_columns=int_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["Geothermometry"]["Titanium in Quartz"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="TitaniQ - after Wark (2006)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        ## TREEVIEW
        self.tv_results_ti_in_qz = SE(
            parent=self.subwindow_geothermometry_ti_in_qz, row_id=var_row_start + 1,
            column_id=var_columm_start + var_header_n + 1, n_rows=14, n_columns=var_header_n + 14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=5, text_n=["Filename", "Data Type", "C(ppm)", "T(°C)", "T(K)"],
            width_n=["150", "100", "90", "90", "90"], individual=True)

        for index, str_filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            entry_results = [str_filename_short, "-", "-"]
            self.tv_results_ti_in_qz.insert("", tk.END, values=entry_results)
            file_isotopes = self.container_lists["Measured Isotopes"][str_filename_short]
            self.list_ti_isotopes = []

            for isotope in file_isotopes:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if element == "Ti":
                    self.list_ti_isotopes.append(isotope)

            for isotope_ti in self.list_ti_isotopes:
                entry_results = [isotope_ti, "-", "-"]
                self.tv_results_ti_in_qz.insert("", tk.END, values=entry_results)

    def run_geothermometer_titanium_in_quartz(self):
        if self.container_var["Geothermometry"]["Titanium in Quartz"].get() == 0:
            # TitaniQ
            self.calculate_temperature_titaniq()

    def calculate_temperature_titaniq(self):
        if len(self.tv_results_ti_in_qz.get_children()) > 0:
            for item in self.tv_results_ti_in_qz.get_children():
                self.tv_results_ti_in_qz.delete(item)

        for index, str_filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            entry_results = [str_filename_short, "-", "-"]
            self.tv_results_ti_in_qz.insert("", tk.END, values=entry_results)
            for datatype in ["RAW", "SMOOTHED"]:
                for isotope_ti in self.list_ti_isotopes:
                    val_concentration_ti = round(self.container_concentration["SMPL"][datatype][str_filename_short][
                                                     "MAT"][isotope_ti], 4)
                    val_temperature_i_celsius = -3765/(np.log(val_concentration_ti) - 5.69) - 273.15
                    val_temperature_i_kelvin = val_temperature_i_celsius + 273.15
                    entry_results = [isotope_ti, datatype, round(val_concentration_ti, 4),
                                     round(val_temperature_i_celsius, 2), round(val_temperature_i_kelvin, 2)]
                    self.tv_results_ti_in_qz.insert("", tk.END, values=entry_results)

########################################################################################################################
# MINERAL ANALYSIS #####################################################################################################
########################################################################################################################
    def ma_settings(self):
        """Main settings window of a mineral analysis project."""
        if self.file_system_need_update == True:
            path = os.getcwd()
            parent = os.path.dirname(path)

            if self.demo_mode == True:
                self.var_opt_icp.set("Agilent 7900s")
                self.select_icp_ms(var_opt=self.var_opt_icp)
                ma_demo_files = {"ALL": [], "STD": [], "SMPL": []}
                demo_files = os.listdir(path=path + str("/demo_files/"))
                for file in demo_files:
                    if file.startswith("demo_ma"):
                        path_complete = os.path.join(path + str("/demo_files/"), file)
                        if "_copy" not in  path_complete:
                            path_raw = pathlib.PureWindowsPath(path_complete)
                            ma_demo_files["ALL"].append(str(path_raw.as_posix()))
                ma_demo_files["ALL"].sort()
                ma_demo_files["STD"].extend(ma_demo_files["ALL"][:3])
                ma_demo_files["STD"].extend(ma_demo_files["ALL"][-3:])
                ma_demo_files["SMPL"].extend(ma_demo_files["ALL"][3:-4])

                self.list_std = ma_demo_files["STD"]
                self.list_smpl = ma_demo_files["SMPL"]

            self.ma_current_file_std = self.list_std[0]
            self.ma_current_file_smpl = self.list_smpl[0]

            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if file_std not in self.container_lists["STD"]["Long"]:
                    self.container_lists["STD"]["Long"].append(file_std)
                    self.container_lists["STD"]["Short"].append(file_parts[-1])
                if self.demo_mode == True:
                    self.lb_std.insert(tk.END, file_parts[-1])

                for item in ["Quickview", "File Setup", "Results Intensity", "Results Concentration",
                             "Results Sensitivity", "SE STD", "SE SMPL"]:
                    self.container_var["Subwindows"][self.pysills_mode][item] = {}

            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if file_smpl not in self.container_lists["SMPL"]["Long"]:
                    self.container_lists["SMPL"]["Long"].append(file_smpl)
                    self.container_lists["SMPL"]["Short"].append(file_parts[-1])
                if self.demo_mode == True:
                    self.lb_smpl.insert(tk.END, file_parts[-1])

            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_exmpl = DE(filename_long=file_std).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_exmpl = DE(filename_long=file_std).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    if "Dataframe" in self.container_measurements:
                        file_parts = file_std.split("/")
                        df_exmpl = self.container_measurements["Dataframe"][file_parts[-1]]
                    else:
                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            df_exmpl = DE(filename_long=file_std).get_measurements(
                                delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                        else:
                            df_exmpl = DE(filename_long=file_std).get_measurements(
                                delimiter=",", skip_header=3, skip_footer=1)

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["ISOTOPES"] = df_isotopes
                self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
                self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]

            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_exmpl = DE(filename_long=file_smpl).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_exmpl = DE(filename_long=file_smpl).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    if "Dataframe" in self.container_measurements:
                        file_parts = file_smpl.split("/")
                        df_exmpl = self.container_measurements["Dataframe"][file_parts[-1]]
                    else:
                        if self.container_icpms["name"] != None:
                            var_skipheader = self.container_icpms["skipheader"]
                            var_skipfooter = self.container_icpms["skipfooter"]
                            df_exmpl = DE(filename_long=file_smpl).get_measurements(
                                delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                        else:
                            df_exmpl = DE(filename_long=file_smpl).get_measurements(
                                delimiter=",", skip_header=3, skip_footer=1)

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["ISOTOPES"] = df_isotopes
                self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
                self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]

            if "Dataframe" not in self.container_measurements:
                self.container_measurements["Dataframe"] = {}

            if file_parts[-1] not in self.container_measurements["Dataframe"]:
                self.container_measurements["Dataframe"][file_parts[-1]] = df_exmpl

            self.times = DE().get_times(dataframe=df_exmpl)
            df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
            self.container_lists["ISOTOPES"] = df_isotopes
            self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
            self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]

            for isotope in self.container_lists["Measured Isotopes"]["All"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if element not in self.container_lists["Measured Elements"]["All"]:
                    self.container_lists["Measured Elements"]["All"].append(element)

            for filename_short in self.container_lists["STD"]["Short"]:
                self.container_lists["Measured Elements"][filename_short] = {}
                self.container_lists["Measured Isotopes"][filename_short] = df_isotopes
                for isotope in self.container_lists["Measured Isotopes"][filename_short]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element not in self.container_lists["Measured Elements"][filename_short]:
                        self.container_lists["Measured Elements"][filename_short][element] = [isotope]
                    else:
                        if isotope not in self.container_lists["Measured Elements"][filename_short][element]:
                            self.container_lists["Measured Elements"][filename_short][element].append(isotope)

            for filename_short in self.container_lists["SMPL"]["Short"]:
                self.container_lists["Measured Elements"][filename_short] = {}
                self.container_lists["Measured Isotopes"][filename_short] = df_isotopes
                for isotope in self.container_lists["Measured Isotopes"][filename_short]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element not in self.container_lists["Measured Elements"][filename_short]:
                        self.container_lists["Measured Elements"][filename_short][element] = [isotope]
                    else:
                        if isotope not in self.container_lists["Measured Elements"][filename_short][element]:
                            self.container_lists["Measured Elements"][filename_short][element].append(isotope)

            self.define_isotope_colors()

        ## Window Settings
        window_width = 1220
        window_heigth = 950
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        str_title_window = self.language_dict["MINERAL ANALYSIS - Setup"][self.var_language]
        self.subwindow_ma_settings = tk.Toplevel(self.parent)
        self.subwindow_ma_settings.title("MINERAL ANALYSIS - Setup")
        self.subwindow_ma_settings.geometry(var_geometry)
        self.subwindow_ma_settings.resizable(False, False)
        self.subwindow_ma_settings["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_settings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_settings, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_settings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_settings.grid_columnconfigure(i, minsize=column_min)
        #
        ## INITIALIZATION
        for isotope in self.container_lists["ISOTOPES"]:
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            #
            if element not in self.container_lists["Elements"]:
                self.container_lists["Elements"].append(element)

        ## Static
        # Build section 'Project Information'
        var_project_information = {"Row start": 0, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_project_information(var_geometry_info=var_project_information)
        # Build section 'Standard Reference Material'
        var_standard_reference_material = {"Row start": 3, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_standard_reference_material(var_geometry_info=var_standard_reference_material)
        # Build section 'Matrix Settings'
        var_sample_settings = {"Row start": 6, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_sample_settings(var_geometry_info=var_sample_settings)
        # Build section 'Assemblage Setup'
        var_assemblage_setup = {"Row start": 8, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_assemblage_setup(var_geometry_info=var_assemblage_setup)
        # Build section 'Dwell Time Setup'
        var_dwell_time_setup = {"Row start": 10, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_dwell_time_setup(var_geometry_info=var_dwell_time_setup)
        # Build section 'Calculation Window (Background) Setup'
        var_calculation_window_bg_setup = {"Row start": 12, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_calculation_window_bg(var_geometry_info=var_calculation_window_bg_setup)
        # Build section 'Calculation Window (Sample) Setup'
        var_calculation_window_smpl_setup = {"Row start": 16, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_calculation_window_smpl(var_geometry_info=var_calculation_window_smpl_setup)
        # Build section 'Spike Elimination Setup'
        var_spike_elimination_setup = {"Row start": 20, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_spike_elimination_setup(var_geometry_info=var_spike_elimination_setup)
        # Build section 'Check-Up'
        var_checkup = {"Row start": 26, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_checkup_feature(var_geometry_info=var_checkup)
        # Build section 'Acquisition Times'
        var_acquisition_times_check = {"Row start": 17, "Column start": 42, "N rows": 1, "N columns": 18}
        self.place_acquisition_times_check(var_geometry_info=var_acquisition_times_check)
        # Build section 'Standard Files'
        var_standard_files = {"Row start": 0, "Column start": 19, "N rows": 15, "N columns": 22}
        self.place_standard_files_table(var_geometry_info=var_standard_files)
        # Build section 'Sample Files'
        var_sample_files = {"Row start": 17, "Column start": 19, "N rows": 18, "N columns": 22}
        self.place_sample_files_table(var_geometry_info=var_sample_files)
        # Build section 'Time-Signal Diagram Checker'
        self.define_isotope_colors()
        var_time_signal_diagram_check = {"Row start": 25, "Column start": 42, "N rows": 1, "N columns": 18}
        self.place_time_signal_plot_checker(var_geometry_info=var_time_signal_diagram_check)
        # Build section 'Measured Isotopes'
        var_measured_isotopes = {"Row start": 1, "Column start": 42, "N rows": 15, "N columns": 18}
        self.place_measured_isotopes_overview(var_geometry_info=var_measured_isotopes)

        ## INITIALIZATION
        self.select_spike_elimination(
            var_opt=self.container_var["Spike Elimination Method"].get(),
            start_row=var_spike_elimination_setup["Row start"], mode="MA")

        if self.file_loaded == True:
            if self.container_var["Spike Elimination"]["STD"]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                self.spike_elimination_all(filetype="STD", algorithm=var_method)
            if self.container_var["Spike Elimination"]["SMPL"]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                self.spike_elimination_all(filetype="SMPL", algorithm=var_method)
        else:
            self.ma_select_srm_default(var_opt=self.container_var["SRM"]["default"][0].get())
            self.ma_select_srm_default(var_opt=self.container_var["SRM"]["default"][1].get(), mode="ISOTOPES")
            self.ma_select_id_default(var_opt=self.container_var["ID"]["Default SMPL"].get())

        self.build_srm_database()
        self.file_system_need_update = False

    def place_project_information(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Project Information'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        str_lbl_01 = self.language_dict["Project Information"][self.var_language]
        str_lbl_02 = self.language_dict["Author"][self.var_language]
        str_lbl_03 = self.language_dict["Source ID"][self.var_language]

        lbl_01 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text=str_lbl_02, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text=str_lbl_03, relief=tk.FLAT, fontsize="sans 10 bold")

        # Entries
        self.container_var[var_setting_key]["Author"].set(
            self.container_var["General Settings"]["Default Author"].get())
        var_entr_01a_default = self.container_var[var_setting_key]["Author"].get()
        var_entr_01b_default = self.container_var[var_setting_key]["Source ID"].get()

        entr_01a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var[var_setting_key]["Author"], text_default=var_entr_01a_default)
        entr_01b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_category_n, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var[var_setting_key]["Source ID"], text_default=var_entr_01b_default)

    def place_standard_reference_material(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Standard Reference Material'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        str_lbl_01 = self.language_dict["Standard Reference Material (SRM)"][self.var_language]
        str_lbl_02 = self.language_dict["Standard Files"][self.var_language]
        str_lbl_03 = self.language_dict["Isotopes"][self.var_language]

        lbl_02 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n - 4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text=str_lbl_02, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n - 4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text=str_lbl_03, relief=tk.FLAT, fontsize="sans 10 bold")

        # Option Menus
        if self.container_var["SRM"]["default"][0].get() != "Select SRM":
            var_text_std = self.container_var["SRM"]["default"][0].get()
        else:
            if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                var_text_std = self.container_var["General Settings"]["Default SRM"].get()
            else:
                var_text_std = "Select SRM"

        self.container_var["SRM"]["default"][0].set(var_text_std)

        if self.container_var["SRM"]["default"][1].get() != "Select SRM":
            var_text_iso = self.container_var["SRM"]["default"][1].get()
        else:
            if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                var_text_iso = self.container_var["General Settings"]["Default SRM"].get()
            else:
                var_text_iso = "Select SRM"

        self.container_var["SRM"]["default"][1].set(var_text_iso)

        opt_02a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n - 4, n_rows=var_row_n,
            n_columns=var_category_n - 2, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_srm(
            var_srm=self.container_var["SRM"]["default"][0], text_set=var_text_std,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            option_list=self.container_lists["SRM Library"],
            command=lambda var_srm=self.container_var["SRM"]["default"][0]: self.change_srm_default(var_srm))
        opt_02a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_02a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        opt_02b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_category_n - 4, n_rows=var_row_n,
            n_columns=var_category_n - 2, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_srm(
            var_srm=self.container_var["SRM"]["default"][1], text_set=var_text_iso,
            fg_active=self.bg_colors["Dark Font"], option_list=self.container_lists["SRM Library"],
            bg_active=self.accent_color, command=lambda var_srm=self.container_var["SRM"]["default"][1]:
            self.change_srm_default(var_srm, key="isotope"))
        opt_02b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_02b.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

    def place_sample_settings(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Sample Settings'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
            str_lbl_01 = self.language_dict["Sample Settings"][self.var_language]
            str_btn_01 = self.language_dict["Setup"][self.var_language]
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
            str_lbl_01 = self.language_dict["Matrix Settings"][self.var_language]
            str_btn_01 = self.language_dict["Setup"][self.var_language]
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"
            str_lbl_01 = self.language_dict["Matrix Settings"][self.var_language]
            str_btn_01 = self.language_dict["Setup"][self.var_language]

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_03 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")

        # Buttons
        btn_03a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_header_n - 9, n_rows=var_row_n,
            n_columns=var_header_n - 9, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.mineral_matrix_quantification)

        # Option Menu
        str_default_method = self.container_var["Quantification Mineral"]["Method"].get()
        list_methods = ["Internal Standard", "100 wt.% Oxides"]

        opt_03a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n - 9, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Quantification Mineral"]["Method"], option_list=list_methods,
            text_set=str_default_method, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        opt_03a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
        opt_03a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color, highlightthickness=0)

    def mineral_matrix_quantification(self):
        # Window Settings
        window_width = 480
        window_height = 175
        var_geometry = str(window_width) + "x" + str(window_height) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_height/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        if self.pysills_mode == "MA":
            str_title_window = "Sample Quantification"
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            str_title_window = "Matrix Quantification"
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            str_title_window = "Matrix Quantification"
            var_setting_key = "mi_setting"

        self.subwindow_mineral_matrix_quantification = tk.Toplevel(self.parent)
        self.subwindow_mineral_matrix_quantification.title(str_title_window)
        self.subwindow_mineral_matrix_quantification.geometry(var_geometry)
        self.subwindow_mineral_matrix_quantification.resizable(False, False)
        self.subwindow_mineral_matrix_quantification["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_mineral_matrix_quantification, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_mineral_matrix_quantification, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_mineral_matrix_quantification.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_mineral_matrix_quantification.grid_columnconfigure(i, minsize=column_min)

        str_method = self.container_var["Quantification Mineral"]["Method"].get()

        var_row_start = 0
        var_columm_start = 0
        var_row_n = 1
        var_header_n = 11

        if str_method == "Internal Standard":
            # LABELS
            str_lbl_01 = self.language_dict["Internal Standard Setup"][self.var_language]
            str_lbl_02 = self.language_dict["Oxide Calculation"][self.var_language]
            str_lbl_03 = self.language_dict["Element Calculation"][self.var_language]
            str_lbl_04 = self.language_dict["Experimental Data"][self.var_language]
            str_lbl_05 = self.language_dict["Custom Data"][self.var_language]
            str_lbl_06 = self.language_dict["Mineral Calculation"][self.var_language]
            str_btn_01 = self.language_dict["Setup"][self.var_language]

            lbl_01 = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start, column_id=var_columm_start,
                n_rows=var_row_n, n_columns=2*var_header_n + 1, fg=self.bg_colors["Light Font"],
                bg=self.bg_colors["Super Dark"]).create_simple_label(
                text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")
            # RADIOBUTTONS
            rb_01a = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 1,
                column_id=var_columm_start, n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Host Setup Selection"], value_rb=1,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text=str_lbl_02,
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
            rb_01b = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 2,
                column_id=var_columm_start, n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Host Setup Selection"], value_rb=2,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text=str_lbl_03,
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
            rb_01c = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 4,
                column_id=var_columm_start, n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Host Setup Selection"], value_rb=3,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text=str_lbl_04,
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
            rb_01d = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 5,
                column_id=var_columm_start, n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Host Setup Selection"], value_rb=4,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text=str_lbl_05,
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
            rb_01e = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 3,
                column_id=var_columm_start, n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Host Setup Selection"], value_rb=5,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text=str_lbl_06,
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
            rb_01e.configure(state="disabled")
            # BUTTONS
            btn_02a = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 1,
                column_id=var_header_n +1, n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.ma_matrix_concentration_setup)
        elif str_method == "100 wt.% Oxides":
            # LABELS
            str_lbl_01 = self.language_dict["Oxide Setup"][self.var_language]
            str_btn_01 = self.language_dict["Composition Setup"][self.var_language]
            str_btn_02 = self.language_dict["File-specific Setup"][self.var_language]

            lbl_01 = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start, column_id=var_columm_start,
                n_rows=var_row_n, n_columns=2*var_header_n + 1, fg=self.bg_colors["Light Font"],
                bg=self.bg_colors["Super Dark"]).create_simple_label(
                text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")
            # BUTTONS
            btn_01a = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 1,
                column_id=var_columm_start, n_rows=2, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_01, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.oxides_setup_composition)
            btn_01b = SE(
                parent=self.subwindow_mineral_matrix_quantification, row_id=var_row_start + 1,
                column_id=var_header_n + 1, n_rows=2, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_simple_button(
                text=str_btn_02, bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.oxides_setup_files)

    def oxides_setup_composition(self):
        # Window Settings
        window_width = 1220
        window_height = 525
        var_geometry = str(window_width) + "x" + str(window_height) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_height/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        if self.pysills_mode == "MA":
            str_title_window = "Sample Quantification"
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            str_title_window = "Matrix Quantification"
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            str_title_window = "Matrix Quantification"
            var_setting_key = "mi_setting"

        self.subwindow_oxides_composition = tk.Toplevel(self.parent)
        self.subwindow_oxides_composition.title(str_title_window)
        self.subwindow_oxides_composition.geometry(var_geometry)
        self.subwindow_oxides_composition.resizable(False, False)
        self.subwindow_oxides_composition["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_oxides_composition, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_oxides_composition, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_oxides_composition.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_oxides_composition.grid_columnconfigure(i, minsize=column_min)

        var_row_start = 0
        var_columm_start = 1
        var_row_n = 1
        var_header_n = 8

        # FRAMES
        frm_01 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=19,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_frame(
            relief=tk.FLAT)
        frm_02 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=var_header_n + 2, n_rows=19,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_frame(
            relief=tk.FLAT)
        frm_03 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=2*var_header_n + 3, n_rows=19,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_frame(
            relief=tk.FLAT)
        frm_04 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=3*var_header_n + 4, n_rows=19,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_frame(
            relief=tk.FLAT)
        frm_04 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=4*var_header_n + 5, n_rows=19,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_frame(
            relief=tk.FLAT)

        # LABELS
        lbl_01 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start, column_id=var_columm_start,
            n_rows=var_row_n, n_columns=4*var_header_n + 3, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Select all present elements and their oxides", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=var_columm_start,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Rock-forming Elements", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=var_header_n + 2,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Industrial Metals", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=2*var_header_n + 3,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Precious Metals", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=3*var_header_n + 4,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Rare-Earth Elements", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=4*var_header_n + 5,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Other Elements", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 1, column_id=5*var_header_n + 6,
            n_rows=var_row_n, n_columns=2*var_header_n - 2, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Dark"]).create_simple_label(
            text="Define the oxide ratios", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06a = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 2, column_id=5*var_header_n + 6,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="FeO/(FeO + Fe2O3)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06b = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 3, column_id=5*var_header_n + 6,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="MnO/(MnO + MnO2)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06c = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 4, column_id=5*var_header_n + 6,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="PbO2/(PbO + PbO2)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06c = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 5, column_id=5*var_header_n + 6,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Pr6O11/(Pr2O3 + Pr6O11)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06c = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 6, column_id=5*var_header_n + 6,
            n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Tb4O7/(Tb2O3 + Tb4O7)", relief=tk.FLAT, fontsize="sans 10 bold")

        # BUTTONS
        btn_01a = SE(
            parent=self.subwindow_oxides_composition, row_id=var_row_start + 18, column_id=5*var_header_n + 6, n_rows=2,
            n_columns=2*var_header_n - 2, fg=self.bg_colors["Dark Font"],
            bg=self.accent_color).create_simple_button(
            text="Guess the composition", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.guess_composition)

        # CHECKBOXES
        self.container_checkboxes = {}
        ## Major Oxides
        list_major_oxides = [
            "SiO2", "Al2O3", "FeO", "Fe2O3", "CaO", "Na2O", "MgO", "K2O", "TiO2", "P2O5", "MnO", "MnO2", "SO3"]
        list_major_oxides = sorted(list_major_oxides)
        for index, oxide in enumerate(list_major_oxides):
            cb_002a = SE(
                parent=self.subwindow_oxides_composition, row_id=var_row_start + 2 + index,
                column_id=var_columm_start, fg=self.bg_colors["Dark Font"], n_rows=var_row_n,
                n_columns=var_header_n, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=self.container_var["Oxides Quantification"]["Major"][oxide], text=oxide, set_sticky="nesw",
                own_color=True, command=lambda var_oxide=oxide, var_key="Major": self.select_oxide(var_oxide, var_key))
            self.container_checkboxes[oxide] = cb_002a

            if oxide in self.container_lists["Selected Oxides"]["All"]:
                cb_002a.select()

        ## Industrial Metals
        list_industrial_metals= ["Cr2O3", "NiO", "ZnO", "CuO", "PbO", "PbO2", "SnO", "WO3", "MoO3"]
        list_industrial_metals = sorted(list_industrial_metals)
        for index, oxide in enumerate(list_industrial_metals):
            cb_003a = SE(
                parent=self.subwindow_oxides_composition, row_id=var_row_start + 2 + index,
                column_id=var_header_n + 2, fg=self.bg_colors["Dark Font"], n_rows=var_row_n,
                n_columns=var_header_n, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=self.container_var["Oxides Quantification"]["Minor"][oxide], text=oxide, set_sticky="nesw",
                own_color=True, command=lambda var_oxide=oxide, var_key="Minor": self.select_oxide(var_oxide, var_key))
            self.container_checkboxes[oxide] = cb_003a

            if oxide in self.container_lists["Selected Oxides"]["All"]:
                cb_003a.select()

        ## Precious Metals
        list_precious_metals = ["AgO", "PdO", "PtO", "Au2O", "OsO", "RuO", "IrO", "RhO"]
        list_precious_metals = sorted(list_precious_metals)
        for index, oxide in enumerate(list_precious_metals):
            cb_004a = SE(
                parent=self.subwindow_oxides_composition, row_id=var_row_start + 2 + index,
                column_id=2*var_header_n + 3, fg=self.bg_colors["Dark Font"], n_rows=var_row_n,
                n_columns=var_header_n, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=self.container_var["Oxides Quantification"]["Minor"][oxide], text=oxide, set_sticky="nesw",
                own_color=True, command=lambda var_oxide=oxide, var_key="Minor": self.select_oxide(var_oxide, var_key))
            self.container_checkboxes[oxide] = cb_004a

            if oxide in self.container_lists["Selected Oxides"]["All"]:
                cb_004a.select()

        ## Rare Earth Metals
        list_rareearth_metals = ["Ce2O3", "Nd2O3", "La2O3", "Y2O3", "Sc2O3", "Pr2O3", "Pr6O11", "Sm2O3", "Gd2O3",
                                 "Dy2O3", "Er2O3", "Yb2O3", "Eu2O3", "Ho2O3", "Tb2O3", "Tb4O7", "Lu2O3", "Tm2O3"]
        list_rareearth_metals = sorted(list_rareearth_metals)
        for index, oxide in enumerate(list_rareearth_metals):
            cb_005a = SE(
                parent=self.subwindow_oxides_composition, row_id=var_row_start + 2 + index,
                column_id=3*var_header_n + 4, fg=self.bg_colors["Dark Font"], n_rows=var_row_n,
                n_columns=var_header_n, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=self.container_var["Oxides Quantification"]["Minor"][oxide], text=oxide, set_sticky="nesw",
                own_color=True, command=lambda var_oxide=oxide, var_key="Minor": self.select_oxide(var_oxide, var_key))
            self.container_checkboxes[oxide] = cb_005a

            if oxide in self.container_lists["Selected Oxides"]["All"]:
                cb_005a.select()

        ## Other Elements
        list_other_elements = [
            "Li2O", "Ga2O3", "B2O3", "BeO", "GeO2", "As2O3", "Sb2O3", "BaO", "SrO", "Cl2O", "Br2O", "I2O"]
        list_other_elements = sorted(list_other_elements)
        for index, oxide in enumerate(list_other_elements):
            cb_005a = SE(
                parent=self.subwindow_oxides_composition, row_id=var_row_start + 2 + index,
                column_id=4*var_header_n + 5, fg=self.bg_colors["Dark Font"], n_rows=var_row_n,
                n_columns=var_header_n, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=self.container_var["Oxides Quantification"]["Minor"][oxide], text=oxide, set_sticky="nesw",
                own_color=True, command=lambda var_oxide=oxide, var_key="Minor": self.select_oxide(var_oxide, var_key))
            self.container_checkboxes[oxide] = cb_005a

            if oxide in self.container_lists["Selected Oxides"]["All"]:
                cb_005a.select()

        # ENTRIES
        list_oxideratios = ["Fe-Ratio", "Mn-Ratio", "Pb-Ratio", "Pr-Ratio", "Tb-Ratio"]
        for index, ratio in enumerate(list_oxideratios):
            if ratio in ["Mn-Ratio"]:
                self.container_var["Oxides Quantification"]["Ratios"][ratio].set("1.0")

            entr_002 = SE(
                parent=self.subwindow_oxides_composition, row_id=var_row_start + 2 + index,
                column_id=6*var_header_n + 6, n_rows=var_row_n, n_columns=var_header_n - 2,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=self.container_var["Oxides Quantification"]["Ratios"][ratio],
                text_default=self.container_var["Oxides Quantification"]["Ratios"][ratio].get())

    def guess_composition(self):
        list_major_oxides = [
            "SiO2", "Al2O3", "FeO", "Fe2O3", "CaO", "Na2O", "MgO", "K2O", "TiO2", "P2O5", "MnO", "MnO2", "SO3"]
        list_industrial_metals = ["Cr2O3", "NiO", "ZnO", "CuO", "PbO", "PbO2", "SnO", "WO3", "MoO3"]
        list_precious_metals = ["AgO", "PdO", "PtO", "Au2O", "OsO", "RuO", "IrO", "RhO"]
        list_rareearth_metals = [
            "Ce2O3", "Nd2O3", "La2O3", "Y2O3", "Sc2O3", "Pr2O3", "Pr6O11", "Sm2O3", "Gd2O3", "Dy2O3", "Er2O3", "Yb2O3",
            "Eu2O3", "Ho2O3", "Tb2O3", "Tb4O7", "Lu2O3", "Tm2O3"]
        list_other_elements = [
            "Li2O", "Ga2O3", "B2O3", "BeO", "GeO2", "As2O3", "Sb2O3", "BaO", "SrO", "Cl2O", "Br2O", "I2O"]
        all_lists = [
            list_major_oxides, list_industrial_metals, list_precious_metals, list_rareearth_metals, list_other_elements]

        for list_oxides in all_lists:
            for oxide in list_oxides:
                key = re.search("(\D+)(\d*)(\D+)(\d*)", oxide)
                element_oxide = key.group(1)
                if element_oxide in self.container_lists["Measured Elements"]["All"]:
                    if oxide not in ["FeO", "MnO2", "PbO2", "Pr6O11", "Tb4O7"]:
                        self.container_checkboxes[oxide].select()

                        if oxide not in self.container_lists["Selected Oxides"]["All"]:
                            self.container_lists["Selected Oxides"]["All"].append(oxide)

    def select_oxide(self, var_oxide, var_key):
        state_cb = self.container_var["Oxides Quantification"][var_key][var_oxide].get()

        if state_cb == 1:
            if var_oxide not in self.container_lists["Selected Oxides"]["All"]:
                self.container_lists["Selected Oxides"]["All"].append(var_oxide)

        if state_cb  == 0:
            if var_oxide in self.container_lists["Selected Oxides"]["All"]:
                self.container_lists["Selected Oxides"]["All"].remove(var_oxide)

    def oxides_setup_files(self):
        # Window Settings
        window_width = 760
        window_height = 425
        var_geometry = str(window_width) + "x" + str(window_height) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_height/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        if self.pysills_mode == "MA":
            str_title_window = "Sample Quantification"
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            str_title_window = "Matrix Quantification"
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            str_title_window = "Matrix Quantification"
            var_setting_key = "mi_setting"

        self.subwindow_oxides_files = tk.Toplevel(self.parent)
        self.subwindow_oxides_files.title(str_title_window)
        self.subwindow_oxides_files.geometry(var_geometry)
        self.subwindow_oxides_files.resizable(False, False)
        self.subwindow_oxides_files["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_oxides_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_oxides_files, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_oxides_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_oxides_files.grid_columnconfigure(i, minsize=column_min)

        var_row_start = 0
        var_columm_start = 0
        var_row_n = 1
        var_header_n = 8

        # LABELS
        lbl_01 = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start, column_id=var_columm_start,
            n_rows=var_row_n, n_columns=2*var_header_n + 1, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File-specific Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default total amount of oxides", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 2, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Import data from file", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 4, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Select Reference Element", relief=tk.FLAT, fontsize="sans 10 bold")

        # ENTRIES
        var_entr_default = tk.StringVar()
        var_entr_default.set("100.0")
        entr_02a = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 1, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=var_entr_default, text_default=var_entr_default.get())
        entr_02a.bind(
            "<Return>", lambda event, var_entr=var_entr_default: self.change_total_oxides_amount(var_entr, event))

        # BUTTONS
        btn_03a = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 3, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Import Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])

        # OPTION MENUS
        list_opt04a = sorted(self.container_lists["Selected Oxides"]["All"])
        opt_04a = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 5, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var[var_setting_key]["Oxide"],
            option_list=list_opt04a, text_set=self.container_var[var_setting_key]["Oxide"].get(),
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var[var_setting_key]["Oxide"], var_file=None, state_default=True:
            self.ma_change_matrix_compound(var_opt, var_file, state_default))
        opt_04a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_04a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)


        self.opt_02b = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 6, column_id=3*var_header_n + 1,
            n_rows=var_row_n, n_columns=var_header_n + 4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["IS"]["Default SMPL"],
            option_list=self.container_lists["Measured Isotopes"]["All"],
            text_set=self.container_var["IS"]["Default SMPL"].get(), fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color, command=lambda var_opt=self.container_var["IS"]["Default SMPL"]:
        self.select_reference_element(var_opt))
        self.opt_02b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        self.opt_02b.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)


        ## TREEVIEWS
        frm_tv = SE(
            parent=self.subwindow_oxides_files, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=15,
            n_columns=3*var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_tv = ttk.Scrollbar(master=frm_tv, orient="vertical")
        text_tv = tk.Text(
            master=frm_tv, width=30, height=25, yscrollcommand=vsb_tv.set, bg=self.bg_colors["Very Light"])
        vsb_tv.config(command=text_tv.yview)
        vsb_tv.pack(side="right", fill="y")
        text_tv.pack(side="left", fill="both", expand=True)

        lbl_i = tk.Label(
            frm_tv, text="Filename", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_tv.window_create("end", window=lbl_i)
        text_tv.insert("end", "\t")
        lbl_i = tk.Label(
            frm_tv, text="Reference Oxide", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_tv.window_create("end", window=lbl_i)
        text_tv.insert("end", "\t")
        lbl_i = tk.Label(
            frm_tv, text="Reference Isotope", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_tv.window_create("end", window=lbl_i)
        text_tv.insert("end", "\t")
        lbl_i = tk.Label(
            frm_tv, text="Total amount of oxides (wt.%)", bg=self.bg_colors["Very Light"],
            fg=self.bg_colors["Dark Font"])
        text_tv.window_create("end", window=lbl_i)
        text_tv.insert("end", "\n")

        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            self.container_var["SMPL"][filename_long]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
            lbl_i = tk.Label(
                frm_tv, text=filename_short, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_tv.window_create("end", window=lbl_i)
            text_tv.insert("end", "\t")

            list_opt_oxide_i = sorted(self.container_lists["Selected Oxides"]["All"])
            opt_oxide_i = tk.OptionMenu(
                frm_tv, self.container_var["SMPL"][filename_long]["Matrix Setup"]["Oxide"]["Name"],
                *list_opt_oxide_i,
                command=lambda var_opt=self.container_var["SMPL"][filename_long]["Matrix Setup"]["Oxide"]["Name"],
                               var_file=filename_long, state_default=False:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_oxide_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_oxide_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_tv.window_create("end", window=opt_oxide_i)
            text_tv.insert("end", " \t")

            if self.pysills_mode == "MA":
                var_opt_is_i = self.container_var["SMPL"][filename_long]["IS Data"]["IS"]
            else:
                var_opt_is_i = self.container_var["SMPL"][filename_long]["Matrix Setup"]["IS"]["Name"]

            opt_ref_i = tk.OptionMenu(
                frm_tv, var_opt_is_i, *self.container_lists["Measured Isotopes"]["All"],
                command=lambda var_opt=var_opt_is_i, var_file=filename_long, state_default=False:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_ref_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_ref_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_tv.window_create("end", window=opt_ref_i)
            text_tv.insert("end", " \t")

            if filename_short not in self.container_var["Oxides Quantification"]["Total Amounts"]:
                self.container_var["Oxides Quantification"]["Total Amounts"][filename_short] = tk.StringVar()
                self.container_var["Oxides Quantification"]["Total Amounts"][filename_short].set("100.0")

            entr_i = tk.Entry(
                frm_tv, textvariable=self.container_var["Oxides Quantification"]["Total Amounts"][filename_short],
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0,
                highlightbackground=self.bg_colors["Very Light"])
            text_tv.window_create("insert", window=entr_i)
            text_tv.insert("end", "\n")

    def change_total_oxides_amount(self, var_entr, event):
        for filename_short in self.container_lists["SMPL"]["Short"]:
            self.container_var["Oxides Quantification"]["Total Amounts"][filename_short].set(var_entr.get())

    def select_reference_element(self, var_opt):
        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
            filename_long = self.container_lists["SMPL"]["Long"][index]
            self.container_var["SMPL"][filename_long]["IS Data"]["IS"].set(var_opt)

    def place_quantification_method(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Quantification Method'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        if self.pysills_mode == "MA":
            pass
        else:
            if self.pysills_mode == "FI":
                key_setting = "fi_setting"
                int_row_start_quantification = 2
            elif self.pysills_mode == "MI":
                key_setting = "mi_setting"
                int_row_start_quantification = 2

            # Labels
            lbl_04 = SE(
                parent=var_parent, row_id=var_row_start + int_row_start_quantification, column_id=var_columm_start,
                n_rows=var_row_n, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
                bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Inclusion Settings", relief=tk.FLAT, fontsize="sans 10 bold")
            lbl_05 = SE(
                parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
                n_columns=var_header_n, fg=self.bg_colors["Light Font"],
                bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Quantification Method", relief=tk.FLAT, fontsize="sans 10 bold")

            # Option Menu
            str_default_inclusion_setup = self.container_var[key_setting]["Inclusion Setup Option"].get()
            if self.pysills_mode == "FI":
                list_opt_incl_is_quantification = ["Mass Balance", "Charge Balance", "PyPitzer (Liu et al. 2024)",
                                                   "Custom Data", "External Calculation"]
            elif self.pysills_mode == "MI":
                list_opt_incl_is_quantification = ["100 wt.% Oxides", "Custom Data", "External Calculation"]

            opt_02a = SE(
                parent=var_parent, row_id=var_row_start + 3, column_id=var_columm_start, n_rows=var_row_n,
                n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_srm(
                var_srm=self.container_var[key_setting]["Inclusion Setup Option"], text_set=str_default_inclusion_setup,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color, sort_list=False,
                option_list=list_opt_incl_is_quantification,
                command=lambda var_opt=self.container_var[key_setting]["Inclusion Setup Option"],
                               dict_geometry_info=var_geometry_info:
                self.select_opt_inclusion_is_quantification(var_opt, dict_geometry_info))
            opt_02a["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_02a.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

            str_default_quantification_setup = self.container_var[key_setting]["Quantification Method Option"].get()
            list_opt_incl_quantification = [
                "Matrix-only Tracer (SILLS)", "Second Internal Standard (SILLS)",
                "Geometric Approach (Halter et al. 2002)", "Geometric Approach (Borisova et al. 2021)"]

            opt_03a = SE(
                parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
                n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_srm(
                var_srm=self.container_var[key_setting]["Quantification Method Option"],
                text_set=str_default_quantification_setup, fg_active=self.bg_colors["Dark Font"],
                bg_active=self.accent_color, option_list=list_opt_incl_quantification, sort_list=False,
                command=lambda var_opt=self.container_var[key_setting]["Quantification Method Option"],
                               dict_geometry_info=var_geometry_info:
                self.select_opt_inclusion_quantification(var_opt, dict_geometry_info))
            opt_03a["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_03a.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

    def select_opt_inclusion_is_quantification(self, var_opt, dict_geometry_info):
        var_row_start = dict_geometry_info["Row start"]
        var_row_n = dict_geometry_info["N rows"]
        var_column_n = dict_geometry_info["N columns"]
        var_category_n = var_column_n - 6

        if self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings

        self.bool_incl_is_massbalance = False
        self.bool_incl_is_chargebalance = False
        self.bool_incl_is_pypitzer = False
        self.bool_incl_is_custom = False
        self.bool_incl_is_external = False

        if var_opt == "Mass Balance":
            if self.bool_incl_is_massbalance == False:
                self.btn_setup_massbalance = SE(
                    parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_mass_balance)
                self.bool_incl_is_massbalance = True
            else:
                self.btn_setup_massbalance.grid()
                if self.bool_incl_is_chargebalance == True:
                    self.btn_setup_chargebalance.grid_remove()
                if self.bool_incl_is_pypitzer == True:
                    self.btn_setup_pypitzer.grid_remove()
                if self.bool_incl_is_custom == True:
                    self.btn_setup_customdata.grid_remove()
                if self.bool_incl_is_external == True:
                    self.btn_setup_external.grid_remove()
        elif var_opt == "Charge Balance":
            if self.bool_incl_is_chargebalance == False:
                self.btn_setup_chargebalance = SE(
                    parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_charge_balance)
                self.bool_incl_is_chargebalance = True
            else:
                self.btn_setup_chargebalance.grid()
                if self.bool_incl_is_massbalance == True:
                    self.btn_setup_massbalance.grid_remove()
                if self.bool_incl_is_pypitzer == True:
                    self.btn_setup_pypitzer.grid_remove()
                if self.bool_incl_is_custom == True:
                    self.btn_setup_customdata.grid_remove()
                if self.bool_incl_is_external == True:
                    self.btn_setup_external.grid_remove()
        elif var_opt == "PyPitzer (Liu et al. 2024)":
            if self.bool_incl_is_pypitzer == False:
                self.btn_setup_pypitzer = SE(
                    parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_pypitzer)
                self.bool_incl_is_pypitzer = True
            else:
                self.btn_setup_pypitzer.grid()
                if self.bool_incl_is_massbalance == True:
                    self.btn_setup_massbalance.grid_remove()
                if self.bool_incl_is_chargebalance == True:
                    self.btn_setup_chargebalance.grid_remove()
                if self.bool_incl_is_custom == True:
                    self.btn_setup_customdata.grid_remove()
                if self.bool_incl_is_external == True:
                    self.btn_setup_external.grid_remove()
        elif var_opt == "Custom Data":
            if self.bool_incl_is_custom == False:
                self.btn_setup_customdata = SE(
                    parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_inclusion_setup_plugin)
                self.bool_incl_is_custom = True
                self.str_incl_is_custom_external = "Custom"
            else:
                self.btn_setup_customdata.grid()
                if self.bool_incl_is_massbalance == True:
                    self.btn_setup_massbalance.grid_remove()
                if self.bool_incl_is_chargebalance == True:
                    self.btn_setup_chargebalance.grid_remove()
                if self.bool_incl_is_pypitzer == True:
                    self.btn_setup_pypitzer.grid_remove()
                if self.bool_incl_is_external == True:
                    self.btn_setup_external.grid_remove()
        elif var_opt == "External Calculation":
            if self.bool_incl_is_external == False:
                self.btn_setup_external = SE(
                    parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_inclusion_setup_plugin)
                self.bool_incl_is_external = True
                self.str_incl_is_custom_external = "External"
            else:
                self.btn_setup_external.grid()
                if self.bool_incl_is_massbalance == True:
                    self.btn_setup_massbalance.grid_remove()
                if self.bool_incl_is_chargebalance == True:
                    self.btn_setup_chargebalance.grid_remove()
                if self.bool_incl_is_pypitzer == True:
                    self.btn_setup_pypitzer.grid_remove()
                if self.bool_incl_is_custom == True:
                    self.btn_setup_customdata.grid_remove()

    def select_opt_inclusion_quantification(self, var_opt, dict_geometry_info):
        var_row_start = dict_geometry_info["Row start"]
        var_row_n = dict_geometry_info["N rows"]
        var_column_n = dict_geometry_info["N columns"]
        var_category_n = var_column_n - 6

        if self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings

        if var_opt == "Matrix-only Tracer (SILLS)":
            if self.bool_matrixonlytracer == False:
                self.btn_setup_matrixonlytracer = SE(
                    parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_setup_matrix_only_tracer)
                self.bool_matrixonlytracer = True
            else:
                try:
                    self.btn_setup_matrixonlytracer.grid()
                except:
                    self.btn_setup_matrixonlytracer = SE(
                        parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
                        n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                        bg=self.bg_colors["Light"]).create_simple_button(
                        text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                        command=self.fi_setup_matrix_only_tracer)
                    self.bool_matrixonlytracer = True
                if self.bool_secondinternalstandard == True:
                    self.btn_setup_secondis.grid_remove()
                if self.bool_halter2002 == True:
                    self.btn_setup_halter2002.grid_remove()
                if self.bool_borisova2021 == True:
                    self.btn_setup_borisova2021.grid_remove()
        elif var_opt == "Second Internal Standard (SILLS)":
            if self.bool_secondinternalstandard == False:
                self.btn_setup_secondis = SE(
                    parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.fi_setup_second_internal_standard)
                self.bool_secondinternalstandard = True
            else:
                self.btn_setup_secondis.grid()
                if self.bool_matrixonlytracer == True:
                    self.btn_setup_matrixonlytracer.grid_remove()
                if self.bool_halter2002 == True:
                    self.btn_setup_halter2002.grid_remove()
                if self.bool_borisova2021 == True:
                    self.btn_setup_borisova2021.grid_remove()
        elif var_opt == "Geometric Approach (Halter et al. 2002)":
            if self.bool_halter2002 == False:
                self.btn_setup_halter2002 = SE(
                    parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.define_setup_halter2002)
                self.bool_halter2002 = True
            else:
                self.btn_setup_halter2002.grid()
                if self.bool_matrixonlytracer == True:
                    self.btn_setup_matrixonlytracer.grid_remove()
                if self.bool_secondinternalstandard == True:
                    self.btn_setup_secondis.grid_remove()
                if self.bool_borisova2021 == True:
                    self.btn_setup_borisova2021.grid_remove()
        elif var_opt == "Geometric Approach (Borisova et al. 2021)":
            if self.bool_borisova2021 == False:
                self.btn_setup_borisova2021 = SE(
                    parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
                    n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Light"]).create_simple_button(
                    text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                    command=self.define_setup_borisova2021)
                self.bool_borisova2021 = True
            else:
                self.btn_setup_borisova2021.grid()
                if self.bool_matrixonlytracer == True:
                    self.btn_setup_matrixonlytracer.grid_remove()
                if self.bool_secondinternalstandard == True:
                    self.btn_setup_secondis.grid_remove()
                if self.bool_halter2002 == True:
                    self.btn_setup_halter2002.grid_remove()

    def place_assemblage_setup(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Assemblage Setup'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_05 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")

        # Option Menus
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"
        opt_05a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["ID"]["Default SMPL"], option_list=self.list_alphabet, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["ID"]["Default SMPL"]: self.fi_select_id_default(var_opt))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

    def place_dwell_time_setup(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Dwell Time Setup'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_06 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Dwell Time Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Isotope Dwell Times", relief=tk.FLAT, fontsize="sans 10 bold")

        # Buttons
        btn_06a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.create_dwell_time_window)

    def place_calculation_window_bg(self, var_geometry_info, var_relief=tk.FLAT):
        """Creates and places the necessary tkinter widgets for the section: 'Calculation Window (Background) Setup'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_07 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Time Window (Background)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=var_relief, fontsize="sans 10 bold")
        lbl_07b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=var_relief, fontsize="sans 10 bold")
        lbl_07c = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Auto-Detection", relief=var_relief, fontsize="sans 10 bold")

        # Buttons
        btn_07c = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n - 6, n_rows=1,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Run", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="BG": self.detect_signal_interval(mode))
        btn_07cd = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=1,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Remove all", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="BG": self.clear_all_calculation_intervals(mode))

        # Entries
        var_entr_07a_default = self.container_var[var_setting_key]["Time BG Start"].get()
        var_entr_07b_default = self.container_var[var_setting_key]["Time BG End"].get()

        entr_07a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var[var_setting_key]["Time BG Start"], text_default=var_entr_07a_default,
            command=lambda event, var_entr=self.container_var["ma_setting"]["Time BG Start"], var_key="Start",
                           mode="default", var_interval="BG":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        entr_07b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var[var_setting_key]["Time BG End"], text_default=var_entr_07b_default,
            command=lambda event, var_entr=self.container_var["ma_setting"]["Time BG End"], var_key="End",
                           mode="default", var_interval="BG":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))

    def place_calculation_window_smpl(self, var_geometry_info, var_relief=tk.FLAT):
        """Creates and places the necessary tkinter widgets for the section: 'Calculation Window (Sample) Setup'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
            str_header = "Default Time Window (Sample)"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
            str_header = "Default Time Window (Matrix)"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"
            str_header = "Default Time Window (Matrix)"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_08 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text=str_header, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_08a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=var_relief, fontsize="sans 10 bold")
        lbl_08b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=var_relief, fontsize="sans 10 bold")
        lbl_08c = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Auto-Detection", relief=var_relief, fontsize="sans 10 bold")

        # Buttons
        btn_08c = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n - 6, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Run", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="MAT": self.detect_signal_interval(mode))
        btn_08cd = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Remove all", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="MAT": self.clear_all_calculation_intervals(mode))

        # Entries
        var_entr_08a_default = self.container_var[var_setting_key]["Time MAT Start"].get()
        var_entr_08b_default = self.container_var[var_setting_key]["Time MAT End"].get()

        entr_08a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var[var_setting_key]["Time MAT Start"], text_default=var_entr_08a_default,
            command=lambda event, var_entr=self.container_var[var_setting_key]["Time MAT Start"], var_key="Start",
                           mode="default", var_interval="MAT":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        entr_08b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_category_n, n_rows=var_row_n,
            n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var[var_setting_key]["Time MAT End"], text_default=var_entr_08b_default,
            command=lambda event, var_entr=self.container_var[var_setting_key]["Time MAT End"], var_key="End",
                           mode="default", var_interval="MAT":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))

    def place_spike_elimination_setup(self, var_geometry_info, var_relief=tk.FLAT):
        """Creates and places the necessary tkinter widgets for the section: 'Spike Elimination Setup'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n

        # Labels
        lbl_09 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike Elimination", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_09b = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n - 9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Calculation Method", relief=var_relief, fontsize="sans 10 bold")

        # Option Menus
        if self.container_var["Spike Elimination Method"].get() != "Select Method":
            var_text = self.container_var["Spike Elimination Method"].get()
        else:
            var_text = "Select Method"
        opt_09b = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_header_n - 9, n_rows=var_row_n,
            n_columns=var_header_n - 9, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Spike Elimination Method"], option_list=self.list_se_methods, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Spike Elimination Method"], start_row=var_row_start:
            self.select_spike_elimination(var_opt, start_row))
        opt_09b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_09b.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        if self.pysills_mode != "MA":
            # Radiobuttons
            rb_09a = SE(
                parent=var_parent, row_id=var_row_start + 2, column_id=0, n_rows=1, n_columns=var_header_n - 9,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Spike Elimination Inclusion"], value_rb=1,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Include Inclusion",
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
            rb_09b = SE(
                parent=var_parent, row_id=var_row_start + 2, column_id=var_header_n - 9, n_rows=1,
                n_columns=var_header_n - 9, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_radiobutton(
                var_rb=self.container_var[var_setting_key]["Spike Elimination Inclusion"], value_rb=2,
                color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Exclude Inclusion",
                sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

    def place_checkup_feature(self, var_geometry_info, var_relief=tk.FLAT):
        """Creates and places the necessary tkinter widgets for the section: 'Check-Up'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_10 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Check-Up", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_10a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Standard Reference Material", relief=var_relief, fontsize="sans 10 bold")
        lbl_10b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Internal Standard", relief=var_relief, fontsize="sans 10 bold")
        lbl_10c = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Calculation Intervals", relief=var_relief, fontsize="sans 10 bold")
        lbl_10d = SE(
            parent=var_parent, row_id=var_row_start + 4, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Acquisition Times", relief=var_relief, fontsize="sans 10 bold")
        lbl_10e = SE(
            parent=var_parent, row_id=var_row_start + 5, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Imported Files", relief=var_relief, fontsize="sans 10 bold")

        # Buttons
        btn_10a = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start + var_category_n,
            n_rows=var_row_n, n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_srm_settings)  # Check-Up - SRM Settings
        btn_10b = SE(
            parent=var_parent, row_id=var_row_start + 2, column_id=var_columm_start + var_category_n,
            n_rows=var_row_n, n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.internal_standard_concentration_setup)  # Check-Up - Internal Standard Settings
        btn_10c = SE(
            parent=var_parent, row_id=var_row_start + 3, column_id=var_columm_start + var_category_n,
            n_rows=var_row_n, n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_interval_settings)  # Check-Up - Calculation Interval Settings
        btn_10d = SE(
            parent=var_parent, row_id=var_row_start + 4, column_id=var_columm_start + var_category_n,
            n_rows=var_row_n, n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_acquisition_times)  # Check-Up - Acquisition Times
        btn_10e = SE(
            parent=var_parent, row_id=var_row_start + 5, column_id=var_columm_start + var_category_n,
            n_rows=var_row_n, n_columns=var_category_n - 6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_imported_files)

    def place_measured_isotopes_overview(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Measured Isotopes'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 11

        # Labels
        lbl_iso = SE(
            parent=var_parent, row_id=var_row_start - 1, column_id=var_columm_start, n_rows=1,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        frm_iso = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = ttk.Scrollbar(frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)
        #
        for index, isotope in enumerate(self.container_lists["Measured Isotopes"]["All"]):
            if self.container_var["LASER"].get() != "Select Gas":
                var_text = self.container_var["LASER"].get()
            else:
                var_text = "Select Gas"
            #
            if isotope not in self.container_var["SRM"]:
                self.container_var["SRM"][isotope] = tk.StringVar()
                self.container_var["SRM"][isotope].set("Select SRM")
                #
                self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                self.container_var["dwell_times"]["Entry"][isotope].set("0.01")
                #
                for file_std_short in self.container_lists["STD"]["Short"]:
                    self.build_checkbutton_isotope_visibility(
                        var_mode=var_setting_key, var_filetype="STD", var_filename_short=file_std_short,
                        var_isotope=isotope)

                    if file_std_short not in self.container_var[var_setting_key]["Time-Signal Lines"]["STD"]:
                        self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short] = {}
                        self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                        self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                        self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                        self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short].set(3)
                        self.container_var[var_setting_key]["Calculation Interval Visibility"]["STD"][
                            file_std_short] = {}

                    self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                #
                for file_smpl_short in self.container_lists["SMPL"]["Short"]:
                    self.build_checkbutton_isotope_visibility(
                        var_mode=var_setting_key, var_filetype="SMPL", var_filename_short=file_smpl_short,
                        var_isotope=isotope)

                    if file_smpl_short not in self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"]:
                        self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var[var_setting_key]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
                        self.container_var[var_setting_key]["Calculation Interval"]["SMPL"][file_smpl_short] = tk.IntVar()
                        self.container_var[var_setting_key]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
                        self.container_var[var_setting_key]["Calculation Interval Visibility"]["SMPL"][
                            file_smpl_short] = {}

                    self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
            #
            if self.file_loaded == True:
                for file_std_short in self.container_lists["STD"]["Short"]:
                    self.build_checkbutton_isotope_visibility(
                        var_mode=var_setting_key, var_filetype="STD", var_filename_short=file_std_short,
                        var_isotope=isotope)

                    if file_std_short not in self.container_var[var_setting_key]["Time-Signal Lines"]["STD"]:
                        self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short] = {}
                        self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                        self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                        self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                        self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short].set(3)
                        self.container_var[var_setting_key]["Calculation Interval Visibility"]["STD"][
                            file_std_short] = {}

                    self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                #
                for file_smpl_short in self.container_lists["SMPL"]["Short"]:
                    self.build_checkbutton_isotope_visibility(
                        var_mode=var_setting_key, var_filetype="SMPL", var_filename_short=file_smpl_short,
                        var_isotope=isotope)

                    if file_smpl_short not in self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"]:
                        self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var[var_setting_key]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
                        self.container_var[var_setting_key]["Calculation Interval"]["SMPL"][
                            file_smpl_short] = tk.IntVar()
                        self.container_var[var_setting_key]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
                        self.container_var[var_setting_key]["Calculation Interval Visibility"]["SMPL"][
                            file_smpl_short] = {}

                    self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][
                        isotope] = {
                        "RAW": None, "SMOOTHED": None}

            frm_i = tk.Frame(frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")
            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Very Dark"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")
            #
            if self.container_var["SRM"][isotope].get() != "Select SRM":
                var_text = self.container_var["SRM"][isotope].get()
            else:
                if self.container_var["SRM"]["default"][1].get() != "Select SRM":
                    var_text = self.container_var["SRM"]["default"][1].get()
                    self.container_var["SRM"][isotope].set(var_text)
                else:
                    var_text = "Select SRM"
            #
            opt_srm_i = tk.OptionMenu(
                frm_iso, self.container_var["SRM"][isotope], *np.sort(self.container_lists["SRM Library"]),
                command=lambda var_opt=self.container_var["SRM"][isotope], var_indiv=isotope, mode="ISOTOPES":
                self.ma_change_srm_individual(var_opt, var_indiv, mode))
            opt_srm_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_srm_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_iso.window_create("end", window=opt_srm_i)
            text_iso.insert("end", "\t")
            #
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            self.container_var["charge"][isotope] = {"textvar": tk.StringVar()}
            #
            if float(self.container_var["Gas Energy"].get()) >= float(self.ionization_energies["First"][element]) \
                    and float(self.container_var["Gas Energy"].get()) >= float(self.ionization_energies["Second"][
                                                                                   element]):
                self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                charge_fg = self.accent_color
            else:
                self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                charge_fg = self.bg_colors["Very Dark"]
            #
            lbl_i = tk.Label(
                frm_iso, text=self.container_var["charge"][isotope]["textvar"].get(),
                textvariable=self.container_var["charge"][isotope]["textvar"], bg=self.bg_colors["Very Light"],
                fg=charge_fg)
            self.container_var["charge"][isotope]["labelvar"] = lbl_i
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\n")

        # Option Menus
        list_opt_gas = ["Helium", "Neon", "Argon", "Krypton", "Xenon", "Radon"]
        opt_laser = SE(
            parent=var_parent, row_id=var_row_start + var_row_n, column_id=var_columm_start + 11, n_rows=1,
            n_columns=var_category_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["LASER"], option_list=list_opt_gas, text_set="Argon",
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["LASER"]: self.change_carrier_gas(var_opt))
        opt_laser["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_laser.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

    def place_acquisition_times_check(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Acquisition Times'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n
        var_category_n = var_column_n - 6

        # Labels
        lbl_01 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Acquisition Times", relief=tk.FLAT, fontsize="sans 10 bold")

        # Treeviews
        frm_02 = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start,
            n_rows=7, n_columns=var_header_n, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_02 = ttk.Scrollbar(frm_02, orient="vertical")
        text_02 = tk.Text(
            master=frm_02, width=25, height=25, yscrollcommand=vsb_02.set, bg=self.bg_colors["Very Light"])
        vsb_02.config(command=text_02.yview)
        vsb_02.pack(side="right", fill="y")
        text_02.pack(side="left", fill="both", expand=True)

        if len(self.container_var["acquisition times"]["STD"]) == 0:
            self.get_acquisition_times(var_filetype="STD")
        if len(self.container_var["acquisition times"]["SMPL"]) == 0:
            self.get_acquisition_times(var_filetype="SMPL")

        lbl_i = tk.Label(
                frm_02, text="Standard Files", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_02.window_create("end", window=lbl_i)
        text_02.insert("end", "\n")
        for var_file_short in self.container_lists["STD"]["Short"]:
            lbl_i = tk.Label(
                frm_02, text=var_file_short, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_02.window_create("end", window=lbl_i)
            text_02.insert("end", "\t")

            entr_i = tk.Entry(
                frm_02, textvariable=self.container_var["acquisition times"]["STD"][var_file_short],
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0, width=12)
            text_02.window_create("insert", window=entr_i)
            text_02.insert("end", "\n")

        lbl_i = tk.Label(
                frm_02, text="Sample Files", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_02.window_create("end", window=lbl_i)
        text_02.insert("end", "\n")
        for var_file_short in self.container_lists["SMPL"]["Short"]:
            lbl_i = tk.Label(
                frm_02, text=var_file_short, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_02.window_create("end", window=lbl_i)
            text_02.insert("end", "\t")

            entr_i = tk.Entry(
                frm_02, textvariable=self.container_var["acquisition times"]["SMPL"][var_file_short],
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0, width=12)
            text_02.window_create("insert", window=entr_i)
            text_02.insert("end", "\n")

    def get_acquisition_times(self, var_filetype):
        for var_file_long in self.container_lists[var_filetype]["Long"]:
            parts = var_file_long.split("/")
            var_file_short = parts[-1]
            if self.container_icpms["timestamp"] != "undefined":
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter= self.container_icpms["skipfooter"]
                var_timestamp = self.container_icpms["timestamp"]
                var_icpms = self.container_icpms["name"]
                dates, times = Data(filename=var_file_long).import_as_list(
                    skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp, icpms=var_icpms)
                if var_file_short not in self.container_var["acquisition times"][var_filetype]:
                    self.container_var["acquisition times"][var_filetype][var_file_short] = tk.StringVar()
                    self.container_var["acquisition times"][var_filetype][var_file_short].set(
                        times[0][0] + ":" + times[0][1] + ":" + times[0][2])
            else:
                times = [["00", "00", "00"]]
                if var_file_short not in self.container_var["acquisition times"][var_filetype]:
                    self.container_var["acquisition times"][var_filetype][var_file_short] = tk.StringVar()
                    self.container_var["acquisition times"][var_filetype][var_file_short].set(
                        times[0][0] + ":" + times[0][1] + ":" + times[0][2])

    def place_time_signal_plot_checker(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Time-Signal Diagram Checker'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_mode_setting = "ma_setting"
            row_correction = 0
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_mode_setting = "fi_setting"
            row_correction = 1
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_mode_setting = "mi_setting"
            row_correction = 1

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n

        # Labels
        lbl_01 = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Time-Signal Diagram Checker", relief=tk.FLAT, fontsize="sans 10 bold")

        # Frames
        frm_02 = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start,
            n_rows=11, n_columns=var_header_n, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)

        # Radiobuttons
        rb_01 = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[var_mode_setting]["Time-Signal Checker"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Standard file", sticky="nesw",
            relief=tk.FLAT, font="sans 10 bold", command=lambda var_setting_key=var_mode_setting:
            self.change_filetype_time_signal_diagram_checker(var_setting_key))
        rb_02 = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start + 5,
            n_rows=var_row_n, n_columns=5, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[var_mode_setting]["Time-Signal Checker"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Sample file", sticky="nesw",
            relief=tk.FLAT, font="sans 10 bold", command=lambda var_setting_key=var_mode_setting:
            self.change_filetype_time_signal_diagram_checker(var_setting_key))

        # Buttons
        btn_01 = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start + 10,
            n_rows=var_row_n, n_columns=4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Before", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_mode="Before", var_setting_key=var_mode_setting:
            self.change_file_time_signal_diagram_checker(var_mode, var_setting_key))
        btn_02 = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start + 14,
            n_rows=var_row_n, n_columns=4, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_simple_button(
            text="Next", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_mode="Next", var_setting_key=var_mode_setting:
            self.change_file_time_signal_diagram_checker(var_mode, var_setting_key))

        ## Initialization
        self.current_file_id_checker = 0

        self.fig_time_signal_checker = Figure(
            figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_time_signal_checker = FigureCanvasTkAgg(
            self.fig_time_signal_checker, master=var_parent)
        self.canvas_time_signal_checker.get_tk_widget().grid(
            row=var_row_start + 2, column=var_columm_start, rowspan=10 + row_correction, columnspan=var_header_n,
            sticky="nesw")

        self.temp_axes_checkup2 = {"STD": {}, "SMPL": {}}
        self.temp_lines_checkup2 = {"STD": {}, "SMPL": {}}

        for filetype in ["STD", "SMPL"]:
            for file_short in self.container_lists[filetype]["Short"]:
                if filetype == "STD":
                    self.temp_axes_checkup2[filetype][file_short] = self.fig_time_signal_checker.add_subplot(
                        label=file_short)
                else:
                    self.temp_axes_checkup2[filetype][file_short] = self.fig_time_signal_checker.add_subplot(
                        label=file_short)
                self.temp_lines_checkup2[filetype][file_short] = 0

        self.show_time_signal_diagram_checker(var_setting_key=var_mode_setting)

    def show_time_signal_diagram_checker(self, var_setting_key):
        if self.container_var[var_setting_key]["Time-Signal Checker"].get() == 1:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"

        for filetype in ["STD", "SMPL"]:
            for key, axis_item in self.temp_axes_checkup2[filetype].items():
                axis_item.axis("off")
                axis_item.set_visible(False)

            if filetype == "STD":
                self.canvas_time_signal_checker.draw()
            else:
                self.canvas_time_signal_checker.draw()

        var_file_long = self.container_lists[var_filetype]["Long"][self.current_file_id_checker]
        var_file_short = self.container_lists[var_filetype]["Short"][self.current_file_id_checker]

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        if self.temp_lines_checkup2[var_filetype][var_file_short] == 0:
            if self.file_loaded == False:
                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_data = DE(filename_long=var_file_long).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_data = DE(filename_long=var_file_long).get_measurements(
                        delimiter=",", skip_header=3, skip_footer=1)
            else:
                df_data = self.container_measurements["Dataframe"][var_file_short]
            dataset_time = list(DE().get_times(dataframe=df_data))
            x_max = max(dataset_time)
            icp_measurements = np.array(
                [[df_data[isotope] for isotope in self.container_lists["Measured Isotopes"]["All"]
                  if isotope in df_data]])
            y_max = np.amax(icp_measurements)

            if var_filetype == "STD":
                ax = self.fig_time_signal_checker.add_subplot(label=np.random.uniform())
            else:
                ax = self.fig_time_signal_checker.add_subplot(label=np.random.uniform())

            self.temp_axes_checkup2[var_filetype][var_file_short] = ax

            for isotope in self.container_lists["Measured Isotopes"]["All"]:
                if isotope in df_data:
                    ln_raw = ax.plot(
                        dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                        linewidth=var_lw, visible=True)

            # Background window
            if var_file_short in self.container_helper[var_filetype]:
                var_check_bg = self.container_helper[var_filetype][var_file_short]["BG"]["Content"]

                if len(var_check_bg) > 0:
                    if self.pysills_mode in ["MA", "FI", "MI"]:
                        for var_id, var_content in self.container_helper[var_filetype][var_file_short]["BG"][
                            "Content"].items():
                            times_bg = var_content["Times"]
                            box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])

            # Sample/Matrix window
            if var_file_short in self.container_helper[var_filetype]:
                var_check_sig = self.container_helper[var_filetype][var_file_short]["MAT"]["Content"]

                if len(var_check_sig) > 0:
                    if self.pysills_mode in ["FI"]:
                        for var_id, var_content in self.container_helper[var_filetype][var_file_short]["MAT"][
                            "Content"].items():
                            times_sig = var_content["Times"]
                            var_color = self.colors_intervals["MAT"]
                            box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    elif self.pysills_mode in ["MI"]:
                        for var_id, var_content in self.container_helper[var_filetype][var_file_short]["MAT"][
                            "Content"].items():
                            times_sig = self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][1]["Times"]
                            var_color = self.colors_intervals["MAT"]
                            box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    else:
                        for var_id, var_content in self.container_helper[var_filetype][var_file_short]["MAT"][
                            "Content"].items():
                            times_sig = var_content["Times"]
                            var_color = self.colors_intervals["MAT"]
                            box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)

            # Inclusion window
            if self.pysills_mode != "MA":
                if var_filetype == "SMPL":
                    inclusion_key = "INCL"
                    var_check_incl = self.container_helper[var_filetype][var_file_short][inclusion_key]["Content"]
                    if len(var_check_incl) > 0:
                        if self.pysills_mode == "FI":
                            for var_id, var_content in self.container_helper[var_filetype][var_file_short][inclusion_key][
                                "Content"].items():
                                times_incl = var_content["Times"]
                                box_incl = ax.axvspan(
                                    times_incl[0], times_incl[1], alpha=0.35, color=self.colors_intervals["INCL"])
                        elif self.pysills_mode == "MI":
                            for var_id, var_content in self.container_helper[var_filetype][var_file_short][inclusion_key][
                                "Content"].items():
                                times_incl = var_content["Times"]
                                box_incl = ax.axvspan(
                                    times_incl[0], times_incl[1], alpha=0.35, color=self.colors_intervals["INCL"])

            ax.set_title("Current file: "+str(var_file_short), fontsize=9)
            ax.set_xlabel("Time (s)", labelpad=0.5, fontsize=8)
            ax.set_ylabel("Intensity (cps)", labelpad=0.5, fontsize=8)

            ax.set_yscale("log")
            ax.set_xlim(left=0, right=x_max)
            ax.set_xticks(np.arange(0, x_max, 20))
            ax.set_ylim(bottom=100, top=1.5*y_max)
            ax.grid(which="major", linestyle="-", linewidth=1)
            ax.minorticks_on()
            ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            ax.set_axisbelow(True)
            ax.xaxis.set_tick_params(labelsize=8)
            ax.yaxis.set_tick_params(labelsize=8)

            if var_filetype == "STD":
                self.canvas_time_signal_checker.draw()
            else:
                self.canvas_time_signal_checker.draw()

            self.temp_lines_checkup2[var_filetype][var_file_short] = 1
        else:
            self.temp_axes_checkup2[var_filetype][var_file_short].axis("on")
            self.temp_axes_checkup2[var_filetype][var_file_short].set_visible(True)
            if var_filetype == "STD":
                self.canvas_time_signal_checker.draw()
            else:
                self.canvas_time_signal_checker.draw()

    def place_standard_files_table(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Standard Files'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n

        # Labels
        lbl_header = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=1, n_columns=var_header_n,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Standard Files Setup", relief=tk.FLAT, fontsize="sans 10 bold")

        # Buttons
        btn_confirm = SE(
            parent=var_parent, row_id=var_row_start + var_row_n + 1, column_id=var_columm_start + var_header_n - 6,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Confirm All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_filetype="STD": self.confirm_all_files_2(var_filetype))
        # Frames
        frm_files = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_files = ttk.Scrollbar(master=frm_files, orient="vertical")
        text_files = tk.Text(
            master=frm_files, width=30, height=25, yscrollcommand=vsb_files.set, bg=self.bg_colors["Very Light"])
        vsb_files.config(command=text_files.yview)
        vsb_files.pack(side="right", fill="y")
        text_files.pack(side="left", fill="both", expand=True)

        for index, file_std in enumerate(self.container_lists["STD"]["Long"]):
            parts = file_std.split("/")
            file_std_short = parts[-1]

            # Assigns isotopic signal intensity and time data for every standard/srm file
            df_isotopes, times_std_i = self.assign_time_and_isotopic_data(filetype="STD", filename_long=file_std)
            # Creates all necessary variables that are related to the standard files
            self.build_all_needed_variables(filetype="STD", filename_long=file_std, filename_short=file_std_short)

            for isotope in df_isotopes:
                if isotope not in self.container_lists["Measured Isotopes"]["All"]:
                    self.container_lists["Measured Isotopes"]["All"].append(isotope)

            if file_std_short not in self.container_measurements["EDITED"]:
                self.container_measurements["EDITED"][file_std_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()

            if self.container_flags["STD"]["Initialization"] == False:
                self.container_flags["STD"][file_std_short] = {
                    "BG set": False, "MAT set": False, "SMOOTHED data": False}

            # if file_std not in self.container_lists["STD"]["Long"] and self.demo_mode == True:
            #     self.container_lists["STD"]["Long"].append(file_std)
            #     self.container_lists["STD"]["Short"].append(file_std_short)
            #     self.container_var[var_setting_key]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Data Type Plot"]["STD"][file_std_short].set(0)
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
            #     self.container_var[var_setting_key]["Display RAW"]["STD"][file_std_short] = {}
            #     self.container_var[var_setting_key]["Display SMOOTHED"]["STD"][file_std_short] = {}
            # else:
            #     if file_std not in self.container_lists["STD"]["Long"]:
            #         self.container_lists["STD"]["Long"].append(file_std)
            #         self.container_lists["STD"]["Short"].append(file_std_short)
            #     if file_std_short not in self.container_var[var_setting_key]["Data Type Plot"]["STD"]:
            #         self.container_var[var_setting_key]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
            #         self.container_var[var_setting_key]["Data Type Plot"]["STD"][file_std_short].set(0)
            #     if file_std_short not in self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"]:
            #         self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
            #         self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
            #     if file_std_short not in self.container_var[var_setting_key]["Display RAW"]["STD"]:
            #         self.container_var[var_setting_key]["Display RAW"]["STD"][file_std_short] = {}
            #     if file_std_short not in self.container_var[var_setting_key]["Display SMOOTHED"]["STD"]:
            #         self.container_var[var_setting_key]["Display SMOOTHED"]["STD"][file_std_short] = {}

            # if self.file_loaded is False:
            #     self.container_var["STD"][file_std] = {}
            #     self.container_var["STD"][file_std]["IS Data"] = {
            #         "IS": tk.StringVar(), "Concentration": tk.StringVar()}
            #     self.container_var["STD"][file_std]["IS Data"]["IS"].set("Select IS")
            #     self.container_var["STD"][file_std]["IS Data"]["Concentration"].set("0.0")
            #     self.container_var["STD"][file_std]["Checkbox"] = tk.IntVar()
            #     self.container_var["STD"][file_std]["Checkbox"].set(1)
            #     self.container_var["STD"][file_std]["SRM"] = tk.StringVar()
            #     self.container_var["STD"][file_std]["SRM"].set("Select SRM")
            #     self.container_var["STD"][file_std]["Sign Color"] = tk.StringVar()
            #     self.container_var["STD"][file_std]["Sign Color"].set(self.sign_red)
            # else:
            #     #self.container_measurements["EDITED"][file_std_short] = {}
            #     #self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
            #
            #     self.spikes_isotopes["STD"][file_std_short] = {}
            #
            #     for isotope in df_isotopes:
            #         self.container_measurements["EDITED"][file_std_short][isotope] = {}
            #         self.container_measurements["EDITED"][file_std_short][isotope]["BG"] = []
            #         self.container_measurements["EDITED"][file_std_short][isotope]["MAT"] = []
            #         self.container_measurements["EDITED"][file_std_short][isotope]["INCL"] = []
            #
            #     self.create_container_results(var_filetype="STD", var_file_short=file_std_short, mode=self.pysills_mode)
            #
            #     file_std_short = parts[-1]
            #
            #     self.container_var[var_setting_key]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Data Type Plot"]["STD"][file_std_short].set(0)
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
            #     self.container_var[var_setting_key]["Display RAW"]["STD"][file_std_short] = {}
            #     self.container_var[var_setting_key]["Display SMOOTHED"]["STD"][file_std_short] = {}
            #
            #     self.container_helper["STD"][file_std_short]["FIGURE"] = None
            #     self.container_helper["STD"][file_std_short]["CANVAS"] = None
            #     self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
            #     self.container_helper["STD"][file_std_short]["AXES"] = {}
            #     self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
            #     self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
            #     self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
            #     self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
            #     self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
            #
            #     self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short] = {}
            #     self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short] = {}
            #     self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
            #     self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short].set(3)
            #     self.container_var[var_setting_key]["Calculation Interval Visibility"]["STD"][
            #         file_std_short] = {}
            #
            #     for isotope in df_isotopes:
            #         self.container_var[var_setting_key]["Display RAW"]["STD"][file_std_short][isotope] = tk.IntVar()
            #         self.container_var[var_setting_key]["Display SMOOTHED"]["STD"][file_std_short][isotope] = tk.IntVar()
            #         self.container_var[var_setting_key]["Display RAW"]["STD"][file_std_short][isotope].set(1)
            #         self.container_var[var_setting_key]["Display SMOOTHED"]["STD"][file_std_short][isotope].set(0)
            #         #
            #         self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
            #             "RAW": None, "SMOOTHED": None}
            #         self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
            #             "RAW": None, "SMOOTHED": None}
            #         self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
            #             "RAW": None, "SMOOTHED": None}
            #
            #     if file_std_short not in self.container_var[var_setting_key]["Time-Signal Lines"]["STD"]:
            #         self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short] = {}
            #         self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short] = {}
            #         self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
            #         self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
            #         self.container_var[var_setting_key]["Calculation Interval"]["STD"][file_std_short].set(3)
            #         self.container_var[var_setting_key]["Calculation Interval Visibility"]["STD"][
            #             file_std_short] = {}
            #     self.container_var[var_setting_key]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
            #         "RAW": None, "SMOOTHED": None}
            #     self.container_var[var_setting_key]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
            #         "RAW": None, "SMOOTHED": None}
            #     self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
            #         "RAW": None, "SMOOTHED": None}

            if file_std not in self.container_var["SRM"]:
                self.container_var["SRM"][file_std] = tk.StringVar()
                self.container_var["SRM"][file_std].set("Select SRM")

            # if file_std_short not in self.container_files["STD"]:
            #     self.container_files["STD"][file_std_short] = {}
            #     self.container_files["STD"][file_std_short]["SRM"] = tk.StringVar()
            #     self.container_files["STD"][file_std_short]["IS"] = tk.StringVar()
            #     self.container_measurements["EDITED"][file_std_short] = {}
            #     self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
            #
            #     self.create_container_results(var_filetype="STD", var_file_short=file_std_short, mode=self.pysills_mode)
            #
            #     for isotope in df_isotopes:
            #         self.container_measurements["EDITED"][file_std_short][isotope] = {}
            #         self.container_measurements["EDITED"][file_std_short][isotope]["BG"] = []
            #         self.container_measurements["EDITED"][file_std_short][isotope]["MAT"] = []
            #         self.container_measurements["EDITED"][file_std_short][isotope]["INCL"] = []

            if len(self.container_lists["STD"]["Long"]) < len(self.list_std) and self.file_loaded == False:
                self.build_container_helper(mode="STD")

                if "BG" not in self.container_helper["STD"][file_std_short]:
                    self.container_helper["STD"][file_std_short]["BG"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["STD"][file_std_short]["MAT"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["STD"][file_std_short]["INCL"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}

                self.spikes_isotopes["STD"][file_std_short] = {}
            elif len(self.container_lists["STD"]["Long"]) == len(self.list_std) and self.file_loaded == False:
                self.build_container_helper(mode="STD")

                if "BG" not in self.container_helper["STD"][file_std_short]:
                    self.container_helper["STD"][file_std_short]["BG"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["STD"][file_std_short]["MAT"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["STD"][file_std_short]["INCL"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}

                self.spikes_isotopes["STD"][file_std_short] = {}
            elif len(self.container_lists["STD"]["Long"]) == len(self.list_std) and self.file_loaded == True:
                for item_01 in ["BG", "MAT"]:
                    for item_02 in ["Listbox", "Content", "ID", "Indices"]:
                        if item_02 not in self.container_helper["STD"][file_std_short][item_01]:
                            if item_02 == "Listbox":
                                self.container_helper["STD"][file_std_short][item_01][item_02] = None
                            elif item_02 == "Content":
                                self.container_helper["STD"][file_std_short][item_01][item_02] = {}
                            elif item_02 == "ID":
                                self.container_helper["STD"][file_std_short][item_01][item_02] = 0
                            elif item_02 == "Indices":
                                self.container_helper["STD"][file_std_short][item_01][item_02] = []

            self.create_container_results(var_filetype="STD", var_file_short=file_std_short, mode=self.pysills_mode)

            categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                          "TOOLBARFRAME_RATIO"]
            self.container_diagrams["STD"][file_std_short] = {}
            self.container_listboxes["STD"][file_std_short] = {}
            self.diagrams_setup["STD"][file_std_short] = {}
            for category in categories:
                self.container_diagrams["STD"][file_std_short][category] = None
                self.diagrams_setup["STD"][file_std_short][category] = None
            categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter", "Time Ratio"]
            for category in categories:
                self.diagrams_setup["STD"][file_std_short][category] = {}
            categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
            for category in categories:
                self.container_listboxes["STD"][file_std_short][category] = None

            cb_i = tk.Checkbutton(
                master=frm_files, text=file_std_short, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Very Light"],
                variable=self.container_var["STD"][file_std]["Checkbox"], onvalue=1, offvalue=0,
                selectcolor=self.bg_colors["White"], activebackground=self.bg_colors["Very Light"],
                activeforeground=self.bg_colors["Very Dark"], anchor=tk.CENTER, highlightthickness=0, bd=0)
            text_files.window_create("end", window=cb_i)
            text_files.insert("end", "\t")

            if self.container_var["STD"][file_std]["SRM"].get() != "Select SRM":
                var_text = self.container_var["STD"][file_std]["SRM"].get()
                self.container_files["STD"][file_std_short]["SRM"].set(var_text)
            else:
                if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                    var_text = self.container_var["General Settings"]["Default SRM"].get()
                    self.container_var["SRM"][file_std].set(var_text)
                    self.container_files["STD"][file_std_short]["SRM"].set(var_text)

            opt_srm_i = tk.OptionMenu(
                frm_files, self.container_var["STD"][file_std]["SRM"], *np.sort(self.container_lists["SRM Library"]),
                command=lambda var_opt=self.container_var["STD"][file_std]["SRM"], var_indiv=file_std, mode="STD":
                self.fi_change_srm_individual(var_opt, var_indiv, mode))
            opt_srm_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_srm_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_files.window_create("end", window=opt_srm_i)
            text_files.insert("end", "\t")

            if self.pysills_mode == "MA":
                btn_i = tk.Button(
                    master=frm_files, text="Setup", bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                    activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                    highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
                    command=lambda var_filename_long=file_std, var_filetype="STD":
                    self.ma_check_specific_file(var_filename_long, var_filetype))
            elif self.pysills_mode == "FI":
                btn_i = tk.Button(
                    master=frm_files, text="Setup", bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                    activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                    highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
                    command=lambda var_file=file_std, var_type="STD": self.fi_check_specific_file(var_file, var_type))
            elif self.pysills_mode == "MI":
                btn_i = tk.Button(
                    master=frm_files, text="Setup", bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                    activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                    highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
                    command=lambda var_file=file_std, var_type="STD": self.fi_check_specific_file(var_file, var_type))
            text_files.window_create("end", window=btn_i)
            text_files.insert("end", "\t")

            try:
                color_sign = self.container_var["STD"][file_std]["Sign Color"].get()
            except:
                self.container_var["STD"][file_std]["Sign Color"] = tk.StringVar()
                self.container_var["STD"][file_std]["Sign Color"].set(self.sign_red)
                color_sign = self.container_var["STD"][file_std]["Sign Color"].get()

            frm_i = tk.Frame(
                frm_files, bg=color_sign, relief=tk.SOLID, height=15, width=15, highlightbackground="black", bd=1)
            text_files.window_create("end", window=frm_i)
            text_files.insert("end", "\n")

            self.container_var["STD"][file_std]["Frame"] = frm_i

    def assign_time_and_isotopic_data(self, filetype, filename_long):
        parts = filename_long.split("/")
        filename_short = parts[-1]

        if self.file_loaded == False:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_i = DE(filename_long=filename_long).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_i = DE(filename_long=filename_long).get_measurements(delimiter=",", skip_header=3, skip_footer=1)
        else:
            if self.old_file == True:
                if self.container_icpms["name"] != None:
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    df_i = DE(filename_long=filename_long).get_measurements(
                        delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                else:
                    df_i = DE(filename_long=filename_long).get_measurements(delimiter=",", skip_header=3, skip_footer=1)

                if "Dataframe" not in self.container_measurements:
                    self.container_measurements["Dataframe"] = {}

                if filename_short not in self.container_measurements["Dataframe"]:
                    self.container_measurements["Dataframe"][filename_short] = df_i
            else:
                df_i = self.container_measurements["Dataframe"][filename_short]

        df_isotopes_i = DE().get_isotopes(dataframe=df_i)
        self.container_lists["Measured Isotopes"][filename_short] = df_isotopes_i
        df_times_i = DE().get_times(dataframe=df_i)

        return df_isotopes_i, df_times_i

    def build_all_needed_variables(self, filetype, filename_long, filename_short):
        if self.pysills_mode == "MA":
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_setting_key = "mi_setting"

        # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --

        if filename_long not in self.container_lists[filetype]["Long"]:
            self.container_lists[filetype]["Long"].append(filename_long)
        if filename_short not in self.container_lists[filetype]["Short"]:
            self.container_lists[filetype]["Short"].append(filename_short)

        if filename_short not in self.container_var[var_setting_key]["Data Type Plot"][filetype]:
            self.container_var[var_setting_key]["Data Type Plot"][filetype][filename_short] = tk.IntVar()
            self.container_var[var_setting_key]["Data Type Plot"][filetype][filename_short].set(0)
        if filename_short not in self.container_var[var_setting_key]["Analyse Mode Plot"][filetype]:
            self.container_var[var_setting_key]["Analyse Mode Plot"][filetype][filename_short] = tk.IntVar()
            self.container_var[var_setting_key]["Analyse Mode Plot"][filetype][filename_short].set(0)
        if filename_short not in self.container_var[var_setting_key]["Display RAW"][filetype]:
            self.container_var[var_setting_key]["Display RAW"][filetype][filename_short] = {}
        if filename_short not in self.container_var[var_setting_key]["Display SMOOTHED"][filetype]:
            self.container_var[var_setting_key]["Display SMOOTHED"][filetype][filename_short] = {}

        if filename_long not in self.container_var[filetype]:
            self.container_var[filetype][filename_long] = {}

        if self.file_loaded == False:
            self.container_var[filetype][filename_long]["IS Data"] = {
                "IS": tk.StringVar(), "Concentration": tk.StringVar(),
                "RAW": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                "SMOOTHED": {"IS": tk.StringVar(), "Concentration": tk.StringVar()}}
            self.container_var[filetype][filename_long]["IS Data"]["IS"].set("Select IS")
            self.container_var[filetype][filename_long]["IS Data"]["Concentration"].set("0.0")
            self.container_var[filetype][filename_long]["IS Data"]["RAW"]["IS"].set("Select IS")
            self.container_var[filetype][filename_long]["IS Data"]["RAW"]["Concentration"].set("0.0")
            self.container_var[filetype][filename_long]["IS Data"]["SMOOTHED"]["IS"].set("Select IS")
            self.container_var[filetype][filename_long]["IS Data"]["SMOOTHED"]["Concentration"].set("0.0")
            self.container_var[filetype][filename_long]["Checkbox"] = tk.IntVar()
            self.container_var[filetype][filename_long]["Checkbox"].set(1)
            self.container_var[filetype][filename_long]["SRM"] = tk.StringVar()
            self.container_var[filetype][filename_long]["SRM"].set("Select SRM")
            self.container_var[filetype][filename_long]["Sign Color"] = tk.StringVar()
            self.container_var[filetype][filename_long]["Sign Color"].set(self.sign_red)
            self.container_var[filetype][filename_long]["ID"] = tk.StringVar()
            self.container_var[filetype][filename_long]["ID"].set("A")

        if filetype == "STD":
            if filename_long not in self.container_var["SRM"]:
                self.container_var["SRM"][filename_long] = tk.StringVar()
                self.container_var["SRM"][filename_long].set("Select SRM")

            if filename_short not in self.container_files[filetype]:
                self.container_files["STD"][filename_short] = {}
                self.container_files["STD"][filename_short]["SRM"] = tk.StringVar()
                self.container_files["STD"][filename_short]["IS"] = tk.StringVar()

        if filetype == "SMPL":
            if self.file_loaded == False:
                self.container_var[filetype][filename_long]["ID"] = tk.StringVar()
                self.container_var[filetype][filename_long]["ID"].set("A")
                self.container_var[filetype][filename_long]["Matrix Setup"] = {
                    "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
                self.container_var[filetype][filename_long]["Matrix Setup"]["IS"]["Name"].set("Select IS")
                self.container_var[filetype][filename_long]["Matrix Setup"]["IS"]["Concentration"].set("1000000")
                self.container_var[filetype][filename_long]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
                self.container_var[filetype][filename_long]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
                self.container_var[filetype][filename_long]["Matrix Setup"]["Element"]["Name"].set("Select Element")
                self.container_var[filetype][filename_long]["Matrix Setup"]["Element"]["Concentration"].set("100.0")

            if filename_short not in self.container_var["Oxides Quantification"]["Total Amounts"]:
                if self.file_loaded == False:
                    self.container_var["Oxides Quantification"]["Total Amounts"][filename_short] = tk.StringVar()
                    self.container_var["Oxides Quantification"]["Total Amounts"][filename_short].set("100.0")

            if self.pysills_mode != "MA":
                # Matrix-only Tracer
                if "Host Only Tracer" not in self.container_var["SMPL"][filename_long]:
                    self.container_var["SMPL"][filename_long]["Host Only Tracer"] = {
                        "Name": tk.StringVar(), "Value": tk.StringVar(), "Matrix": tk.StringVar(),
                        "Amount": tk.StringVar()}
                    self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Name"].set("Select Isotope")
                    self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Value"].set("0")
                    self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Matrix"].set("Select Oxide")
                    self.container_var["SMPL"][filename_long]["Host Only Tracer"]["Amount"].set("100")
                # Second Internal Standard
                if "Second Internal Standard" not in self.container_var["SMPL"][filename_long]:
                    self.container_var["SMPL"][filename_long]["Second Internal Standard"] = {
                        "Name": tk.StringVar(), "Value": tk.StringVar()}
                    self.container_var["SMPL"][filename_long]["Second Internal Standard"]["Name"].set(
                        "Select Isotope")
                    self.container_var["SMPL"][filename_long]["Second Internal Standard"]["Value"].set("0")
                # Geometric Approach (Halter et al. 2002)
                if "Halter2002" not in self.container_var["SMPL"][filename_long]:
                    self.container_var["SMPL"][filename_long]["Halter2002"] = {
                        "a": tk.StringVar(), "b": tk.StringVar(), "rho(incl)": tk.StringVar(),
                        "rho(host)": tk.StringVar(), "R": tk.StringVar(), "Name": tk.StringVar()}
                    self.container_var["SMPL"][filename_long]["Halter2002"]["a"].set("50.0")
                    self.container_var["SMPL"][filename_long]["Halter2002"]["b"].set("50.0")
                    self.container_var["SMPL"][filename_long]["Halter2002"]["rho(incl)"].set("1200.0")
                    self.container_var["SMPL"][filename_long]["Halter2002"]["rho(host)"].set("2700.0")
                    self.container_var["SMPL"][filename_long]["Halter2002"]["R"].set("75.0")
                    self.container_var["SMPL"][filename_long]["Halter2002"]["Name"].set("Select isotope")
                # Geometric Approach (Borisova et al. 2021)
                if "Borisova2021" not in self.container_var["SMPL"][filename_long]:
                    self.container_var["SMPL"][filename_long]["Borisova2021"] = {
                        "R(incl)": tk.StringVar(), "R(host)": tk.StringVar(), "rho(incl)": tk.StringVar(),
                        "rho(host)": tk.StringVar(), "Name": tk.StringVar()}
                    self.container_var["SMPL"][filename_long]["Borisova2021"]["R(incl)"].set("50.0")
                    self.container_var["SMPL"][filename_long]["Borisova2021"]["R(host)"].set("75.0")
                    self.container_var["SMPL"][filename_long]["Borisova2021"]["rho(incl)"].set("1200.0")
                    self.container_var["SMPL"][filename_long]["Borisova2021"]["rho(host)"].set("2700.0")
                    self.container_var["SMPL"][filename_long]["Borisova2021"]["Name"].set("Select isotope")
                # Melting temperatures
                if "Melting temperature" not in self.container_var["SMPL"][filename_long]:
                    self.container_var["SMPL"][filename_long]["Melting temperature"] = tk.StringVar()
                    self.container_var["SMPL"][filename_long]["Melting temperature"].set("25.0")
                # Last compound
                if "Last compound" not in self.container_var["SMPL"][filename_long]:
                    self.container_var["SMPL"][filename_long]["Last compound"] = tk.StringVar()
                    self.container_var["SMPL"][filename_long]["Last compound"].set("Select last solid")
                # Salinity
                if filename_short not in self.container_var[var_setting_key]["Salt Correction"][
                    "Salinity SMPL"]:
                    self.container_var[var_setting_key]["Salt Correction"]["Salinity SMPL"][
                        filename_short] = tk.StringVar()
                    self.container_var[var_setting_key]["Salt Correction"]["Salinity SMPL"][
                        filename_short].set("Set salinity")

        if filename_short not in self.spikes_isotopes[filetype]:
            self.spikes_isotopes[filetype][filename_short] = {}

        if filename_short not in self.container_var[var_setting_key]["Time-Signal Lines"][filetype]:
            self.container_var[var_setting_key]["Time-Signal Lines"][filetype][filename_short] = {}
        if filename_short not in self.container_var[var_setting_key]["Time-Ratio Lines"][filetype]:
            self.container_var[var_setting_key]["Time-Ratio Lines"][filetype][filename_short] = {}
        if filename_short not in self.container_var[var_setting_key]["Checkboxes Isotope Diagram"][filetype]:
            self.container_var[var_setting_key]["Checkboxes Isotope Diagram"][filetype][filename_short] = {}
        if filename_short not in self.container_var[var_setting_key]["Calculation Interval"][filetype]:
            self.container_var[var_setting_key]["Calculation Interval"][filetype][filename_short] = tk.IntVar()
            self.container_var[var_setting_key]["Calculation Interval"][filetype][filename_short].set(3)
        if filename_short not in self.container_var[var_setting_key]["Calculation Interval Visibility"][filetype]:
            self.container_var[var_setting_key]["Calculation Interval Visibility"][filetype][filename_short] = {}

        if filename_short not in self.container_helper[filetype]:
            self.container_helper[filetype][filename_short] = {}

        for category in ["FIGURE", "CANVAS", "TOOLBARFRAME", "RESULTS FRAME", "FIGURE RATIO", "CANVAS RATIO",
                         "TOOLBARFRAME RATIO"]:
            if category not in self.container_helper[filetype][filename_short]:
                self.container_helper[filetype][filename_short][category] = None
        for category in ["AXES", "AXES RATIO"]:
            if category not in self.container_helper[filetype][filename_short]:
                self.container_helper[filetype][filename_short][category] = {}

        if filename_short not in self.container_measurements["EDITED"]:
            self.container_measurements["EDITED"][filename_short] = {}

        # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --

        file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
        for isotope in file_isotopes:
            if isotope not in self.container_measurements["EDITED"][filename_short]:
                self.container_measurements["EDITED"][filename_short][isotope] = {"BG": [], "MAT": [], "INCL": []}
            if isotope not in self.container_var[var_setting_key]["Display RAW"][filetype][filename_short]:
                self.container_var[var_setting_key]["Display RAW"][filetype][filename_short][isotope] = tk.IntVar()
                self.container_var[var_setting_key]["Display RAW"][filetype][filename_short][isotope].set(1)
            if isotope not in self.container_var[var_setting_key]["Display SMOOTHED"][filetype][filename_short]:
                self.container_var[var_setting_key]["Display SMOOTHED"][filetype][filename_short][isotope] = tk.IntVar()
                self.container_var[var_setting_key]["Display SMOOTHED"][filetype][filename_short][isotope].set(0)
            if isotope not in self.container_var[var_setting_key]["Time-Signal Lines"][filetype][filename_short]:
                self.container_var[var_setting_key]["Time-Signal Lines"][filetype][filename_short][isotope] = {
                    "RAW": None, "SMOOTHED": None}
            if isotope not in self.container_var[var_setting_key]["Time-Signal Lines"][filetype][filename_short]:
                self.container_var[var_setting_key]["Time-Ratio Lines"][filetype][filename_short][isotope] = {
                    "RAW": None, "SMOOTHED": None}
            if isotope not in self.container_var[var_setting_key]["Time-Signal Lines"][filetype][filename_short]:
                self.container_var[var_setting_key]["Checkboxes Isotope Diagram"][filetype][filename_short][isotope] = {
                    "RAW": None, "SMOOTHED": None}

    def place_sample_files_table(self, var_geometry_info):
        """Creates and places the necessary tkinter widgets for the section: 'Standard Files'
        Parameters:  var_geometry_info  -   contains information for the widget setup
        """
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        var_row_start = var_geometry_info["Row start"]
        var_columm_start = var_geometry_info["Column start"]
        var_row_n = var_geometry_info["N rows"]
        var_column_n = var_geometry_info["N columns"]
        var_header_n = var_column_n

        # Labels
        lbl_header = SE(
            parent=var_parent, row_id=var_row_start, column_id=var_columm_start, n_rows=1, n_columns=var_header_n,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files Setup", relief=tk.FLAT, fontsize="sans 10 bold")

        # Buttons
        btn_confirm = SE(
            parent=var_parent, row_id=var_row_start + var_row_n + 1, column_id=var_columm_start + var_header_n - 6,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Confirm All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_filetype="SMPL": self.confirm_all_files_2(var_filetype))

        # Frames
        frm_files = SE(
            parent=var_parent, row_id=var_row_start + 1, column_id=var_columm_start, n_rows=var_row_n,
            n_columns=var_header_n, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_files = ttk.Scrollbar(master=frm_files, orient="vertical")
        text_files = tk.Text(
            master=frm_files, width=30, height=25, yscrollcommand=vsb_files.set, bg=self.bg_colors["Very Light"])
        vsb_files.config(command=text_files.yview)
        vsb_files.pack(side="right", fill="y")
        text_files.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = file_smpl.split("/")
            file_smpl_short = parts[-1]

            # Assigns isotopic signal intensity and time data for every sample file
            df_isotopes, times_smpl_i = self.assign_time_and_isotopic_data(filetype="SMPL", filename_long=file_smpl)
            # Creates all necessary variables that are related to the sample files
            self.build_all_needed_variables(filetype="SMPL", filename_long=file_smpl, filename_short=file_smpl_short)

            # if file_smpl_short not in self.container_var["Oxides Quantification"]["Total Amounts"]:
            #     self.container_var["Oxides Quantification"]["Total Amounts"][file_smpl_short] = tk.StringVar()
            #     self.container_var["Oxides Quantification"]["Total Amounts"][file_smpl_short].set("100.0")

            for isotope in df_isotopes:
                if isotope not in self.container_lists["Measured Isotopes"]["All"]:
                    self.container_lists["Measured Isotopes"]["All"].append(isotope)

            if file_smpl_short not in self.container_measurements["EDITED"]:
                self.container_measurements["EDITED"][file_smpl_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()

            if self.container_flags["SMPL"]["Initialization"] == False:
                self.container_flags["SMPL"][file_smpl_short] = {
                    "BG set": False, "MAT set": False, "SMOOTHED data": False}

            # if self.file_loaded is False:
            #     if file_smpl not in self.container_var["SMPL"]:
            #         self.container_var["SMPL"][file_smpl] = {}
            #         self.container_var["SMPL"][file_smpl]["IS"] = tk.StringVar()
            #         self.container_var["SMPL"][file_smpl]["IS"].set("Select IS")
            #         self.container_var["SMPL"][file_smpl]["IS Data"] = {
            #             "IS": tk.StringVar(), "Concentration": tk.StringVar()}
            #         self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set("Select IS")
            #         self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set("0.0")
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"] = {
            #             "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
            #             "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
            #             "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].set("Select IS")
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set("1000000")
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"].set("Select Element")
            #         self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].set("100.0")
            #         self.container_var["SMPL"][file_smpl]["Checkbox"] = tk.IntVar()
            #         self.container_var["SMPL"][file_smpl]["Checkbox"].set(1)
            #         self.container_var["SMPL"][file_smpl]["ID"] = tk.StringVar()
            #         self.container_var["SMPL"][file_smpl]["ID"].set("A")
            #         self.container_var["SMPL"][file_smpl]["Sign Color"] = tk.StringVar()
            #         self.container_var["SMPL"][file_smpl]["Sign Color"].set(self.sign_red)
            #         # if self.pysills_mode != "MA":
            #         #     # Matrix-only Tracer
            #         #     self.container_var["SMPL"][file_smpl]["Host Only Tracer"] = {
            #         #         "Name": tk.StringVar(), "Value": tk.StringVar(), "Matrix": tk.StringVar(),
            #         #         "Amount": tk.StringVar()}
            #         #     self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Name"].set("Select Isotope")
            #         #     self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set("0")
            #         #     self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Matrix"].set("Select Oxide")
            #         #     self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Amount"].set("100")
            #         #     # Second Internal Standard
            #         #     self.container_var["SMPL"][file_smpl]["Second Internal Standard"] = {
            #         #         "Name": tk.StringVar(), "Value": tk.StringVar()}
            #         #     self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Name"].set("Select Isotope")
            #         #     self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Value"].set("0")
            #         #     # Geometric Approach (Halter et al. 2002)
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"] = {
            #         #         "a": tk.StringVar(), "b": tk.StringVar(), "rho(incl)": tk.StringVar(),
            #         #         "rho(host)": tk.StringVar(), "R": tk.StringVar(), "Name": tk.StringVar()}
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"]["a"].set("50.0")
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"]["b"].set("50.0")
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"]["rho(incl)"].set("2700.0")
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"]["rho(host)"].set("1200.0")
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"]["R"].set("75.0")
            #         #     self.container_var["SMPL"][file_smpl]["Halter2002"]["Name"].set("Select isotope")
            #         #     # Geometric Approach (Borisova et al. 2021)
            #         #     self.container_var["SMPL"][file_smpl]["Borisova2021"] = {
            #         #         "R(incl)": tk.StringVar(), "R(host)": tk.StringVar(), "rho(incl)": tk.StringVar(),
            #         #         "rho(host)": tk.StringVar(), "Name": tk.StringVar()}
            #         #     self.container_var["SMPL"][file_smpl]["Borisova2021"]["R(incl)"].set("50.0")
            #         #     self.container_var["SMPL"][file_smpl]["Borisova2021"]["R(host)"].set("75.0")
            #         #     self.container_var["SMPL"][file_smpl]["Borisova2021"]["rho(incl)"].set("2700.0")
            #         #     self.container_var["SMPL"][file_smpl]["Borisova2021"]["rho(host)"].set("1200.0")
            #         #     self.container_var["SMPL"][file_smpl]["Borisova2021"]["Name"].set("Select isotope")
            #         #     # Melting temperatures
            #         #     self.container_var["SMPL"][file_smpl]["Melting temperature"] = tk.StringVar()
            #         #     self.container_var["SMPL"][file_smpl]["Melting temperature"].set("25.0")
            #         #     self.container_var["SMPL"][file_smpl]["Last compound"] = tk.StringVar()
            #         #     self.container_var["SMPL"][file_smpl]["Last compound"].set("Select last solid")
            # else:
            #     self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
            #     self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short] = {}
            #     self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
            #     #
            #     self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
            #     self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
            #     self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
            #     #
            #     self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
            #     self.container_var[var_setting_key]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
            #     self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
            #     self.container_var[var_setting_key]["Calculation Interval"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
            #     self.container_var[var_setting_key]["Calculation Interval Visibility"]["SMPL"][
            #         file_smpl_short] = {}
            #
            #     if "Halter2002" not in self.container_var["SMPL"][file_smpl]:
            #         # Geometric Approach (Halter et al. 2002)
            #         self.container_var["SMPL"][file_smpl]["Halter2002"] = {
            #             "a": tk.StringVar(), "b": tk.StringVar(), "rho(incl)": tk.StringVar(),
            #             "rho(host)": tk.StringVar(), "R": tk.StringVar(), "Name": tk.StringVar()}
            #         self.container_var["SMPL"][file_smpl]["Halter2002"]["a"].set("50.0")
            #         self.container_var["SMPL"][file_smpl]["Halter2002"]["b"].set("50.0")
            #         self.container_var["SMPL"][file_smpl]["Halter2002"]["rho(incl)"].set("2700.0")
            #         self.container_var["SMPL"][file_smpl]["Halter2002"]["rho(host)"].set("1200.0")
            #         self.container_var["SMPL"][file_smpl]["Halter2002"]["R"].set("75.0")
            #         self.container_var["SMPL"][file_smpl]["Halter2002"]["Name"].set("Select isotope")
            #
            #     if "Borisova2021" not in self.container_var["SMPL"][file_smpl]:
            #         # Geometric Approach (Borisova et al. 2021)
            #         self.container_var["SMPL"][file_smpl]["Borisova2021"] = {
            #             "R(incl)": tk.StringVar(), "R(host)": tk.StringVar(), "rho(incl)": tk.StringVar(),
            #             "rho(host)": tk.StringVar(), "Name": tk.StringVar()}
            #         self.container_var["SMPL"][file_smpl]["Borisova2021"]["R(incl)"].set("50.0")
            #         self.container_var["SMPL"][file_smpl]["Borisova2021"]["R(host)"].set("75.0")
            #         self.container_var["SMPL"][file_smpl]["Borisova2021"]["rho(incl)"].set("2700.0")
            #         self.container_var["SMPL"][file_smpl]["Borisova2021"]["rho(host)"].set("1200.0")
            #         self.container_var["SMPL"][file_smpl]["Borisova2021"]["Name"].set("Select isotope")
            #
            #     for isotope in df_isotopes:
            #         self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
            #         self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short][
            #             isotope] = tk.IntVar()
            #         self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short][isotope].set(1)
            #         self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope].set(0)
            #         #
            #         self.container_var[var_setting_key]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
            #             "RAW": None, "SMOOTHED": None}
            #         self.container_var[var_setting_key]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
            #             "RAW": None, "SMOOTHED": None}
            #         self.container_var[var_setting_key]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][
            #             isotope] = {"RAW": None, "SMOOTHED": None}

            # if file_smpl not in self.container_lists["SMPL"]["Long"] and self.demo_mode == True:
            #     self.container_lists["SMPL"]["Long"].append(file_smpl)
            #     self.container_lists["SMPL"]["Short"].append(file_smpl_short)
            #     self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
            #     self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short] = {}
            #     self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
            # else:
            #     if file_smpl not in self.container_lists["SMPL"]["Long"]:
            #         self.container_lists["SMPL"]["Long"].append(file_smpl)
            #         self.container_lists["SMPL"]["Short"].append(file_smpl_short)
            #     if file_smpl_short not in self.container_var[var_setting_key]["Data Type Plot"]["SMPL"]:
            #         self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #         self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
            #     if file_smpl_short not in self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"]:
            #         self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #         self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
            #     if file_smpl_short not in self.container_var[var_setting_key]["Display RAW"]["SMPL"]:
            #         self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short] = {}
            #     if file_smpl_short not in self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"]:
            #         self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}

            # if file_smpl_short not in self.container_var[var_setting_key]["Display RAW"]["SMPL"]:
            #     self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short] = {}
            # if file_smpl_short not in self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"]:
            #     self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}

            # if file_smpl not in self.container_lists["SMPL"]["Long"] and self.file_loaded == False:
            #     if file_smpl not in self.container_lists["SMPL"]["Long"]:
            #         self.container_lists["SMPL"]["Long"].append(file_smpl)
            #         self.container_lists["SMPL"]["Short"].append(file_smpl_short)
            #     self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
            #     self.container_var[var_setting_key]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
            #     self.container_var[var_setting_key]["Display RAW"]["SMPL"][file_smpl_short] = {}
            #     self.container_var[var_setting_key]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
            #
            # if file_smpl_short not in self.container_files["SMPL"]:
            #     self.container_files["SMPL"][file_smpl_short] = {}
            #     self.container_files["SMPL"][file_smpl_short]["IS"] = tk.StringVar()
            #     self.container_files["SMPL"][file_smpl_short]["IS Concentration"] = tk.StringVar()
            #     self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set("0.0")
            #     if self.pysills_mode != "MA":
            #         self.container_var[var_setting_key]["Salt Correction"]["Salinity SMPL"][
            #             file_smpl_short] = tk.StringVar()
            #         self.container_var[var_setting_key]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
            #             "Set salinity")
            #     self.container_measurements["EDITED"][file_smpl_short] = {}
            #     self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()
            #     #
            #     self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short, mode=self.pysills_mode)
            #     #
            #     for isotope in df_isotopes:
            #         self.container_measurements["EDITED"][file_smpl_short][isotope] = {}
            #         self.container_measurements["EDITED"][file_smpl_short][isotope]["BG"] = []
            #         self.container_measurements["EDITED"][file_smpl_short][isotope]["MAT"] = []
            #         self.container_measurements["EDITED"][file_smpl_short][isotope]["INCL"] = []
            #
            # if self.file_loaded == True:
            #     self.container_measurements["EDITED"][file_smpl_short] = {}
            #     self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()
            #     #
            #     self.spikes_isotopes["SMPL"][file_smpl_short] = {}
            #     #
            #     for isotope in df_isotopes:
            #         self.container_measurements["EDITED"][file_smpl_short][isotope] = {}
            #         self.container_measurements["EDITED"][file_smpl_short][isotope]["BG"] = []
            #         self.container_measurements["EDITED"][file_smpl_short][isotope]["MAT"] = []
            #         self.container_measurements["EDITED"][file_smpl_short][isotope]["INCL"] = []
            #         #
            #     self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short, mode=self.pysills_mode)

            if len(self.container_lists["SMPL"]["Long"]) < len(self.list_smpl) and self.file_loaded == False:
                self.build_container_helper(mode="SMPL")

                if "BG" not in self.container_helper["SMPL"][file_smpl_short]:
                    self.container_helper["SMPL"][file_smpl_short]["BG"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["SMPL"][file_smpl_short]["MAT"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["SMPL"][file_smpl_short]["INCL"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}

                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
            elif len(self.container_lists["SMPL"]["Long"]) == len(self.list_smpl) and self.file_loaded == False:
                self.build_container_helper(mode="SMPL")

                if "BG" not in self.container_helper["SMPL"][file_smpl_short]:
                    self.container_helper["SMPL"][file_smpl_short]["BG"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["SMPL"][file_smpl_short]["MAT"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}
                    self.container_helper["SMPL"][file_smpl_short]["INCL"] = {
                        "Listbox": None, "Content": {}, "ID": 0, "Indices": []}

                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
            elif len(self.container_lists["SMPL"]["Long"]) == len(self.list_smpl) and self.file_loaded == True:
                if self.pysills_mode in ["FI", "MI"]:
                    list_focus = ["BG", "MAT", "INCL"]
                else:
                    list_focus = ["BG", "MAT"]
                for item_01 in list_focus:
                    for item_02 in ["Listbox", "Content", "ID", "Indices"]:
                        if item_02 not in self.container_helper["SMPL"][file_smpl_short][item_01]:
                            if item_02 == "Listbox":
                                self.container_helper["SMPL"][file_smpl_short][item_01][item_02] = None
                            elif item_02 == "Content":
                                self.container_helper["SMPL"][file_smpl_short][item_01][item_02] = {}
                            elif item_02 == "ID":
                                self.container_helper["SMPL"][file_smpl_short][item_01][item_02] = 0
                            elif item_02 == "Indices":
                                self.container_helper["SMPL"][file_smpl_short][item_01][item_02] = []

            self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short, mode=self.pysills_mode)

            categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                          "TOOLBARFRAME_RATIO"]
            self.container_diagrams["SMPL"][file_smpl_short] = {}
            self.container_listboxes["SMPL"][file_smpl_short] = {}
            self.diagrams_setup["SMPL"][file_smpl_short] = {}
            for category in categories:
                self.container_diagrams["SMPL"][file_smpl_short][category] = None
                self.diagrams_setup["SMPL"][file_smpl_short][category] = None
            categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter", "Time Ratio"]
            for category in categories:
                self.diagrams_setup["SMPL"][file_smpl_short][category] = {}
            categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
            for category in categories:
                self.container_listboxes["SMPL"][file_smpl_short][category] = None
            #
            cb_i = tk.Checkbutton(
                master=frm_files, text=file_smpl_short, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Very Light"],
                variable=self.container_var["SMPL"][file_smpl]["Checkbox"], onvalue=1, offvalue=0,
                selectcolor=self.bg_colors["White"], activebackground=self.bg_colors["Very Light"],
                activeforeground=self.bg_colors["Very Dark"], anchor=tk.CENTER, highlightthickness=0, bd=0)
            text_files.window_create("end", window=cb_i)
            text_files.insert("end", "\t")
            if self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get() != "Select IS":
                var_text = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
            else:
                var_text = "Select IS"
            opt_is_i = tk.OptionMenu(
                frm_files, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"], *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_is_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_files.window_create("end", window=opt_is_i)
            text_files.insert("end", "\t")
            #
            if self.container_var["SMPL"][file_smpl]["ID"].get() != "A":
                var_text = self.container_var["SMPL"][file_smpl]["ID"].get()
            else:
                var_text = "A"
            opt_id_i = tk.OptionMenu(
                frm_files, self.container_var["SMPL"][file_smpl]["ID"], *np.sort(self.list_alphabet))
            opt_id_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_id_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_files.window_create("end", window=opt_id_i)
            text_files.insert("end", "\t")

            if self.pysills_mode == "MA":
                btn_i = tk.Button(
                    master=frm_files, text="Setup", bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
                    activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                    highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
                    command=lambda var_filename_long=file_smpl, var_filetype="SMPL":
                    self.ma_check_specific_file(var_filename_long, var_filetype))
            elif self.pysills_mode == "FI":
                btn_i = tk.Button(
                    master=frm_files, text="Setup", bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
                    activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                    highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
                    command=lambda var_file=file_smpl, var_type="SMPL": self.fi_check_specific_file(var_file, var_type))
            elif self.pysills_mode == "MI":
                btn_i = tk.Button(
                    master=frm_files, text="Setup", bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
                    activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                    highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
                    command=lambda var_file=file_smpl, var_type="SMPL": self.fi_check_specific_file(var_file, var_type))
            text_files.window_create("end", window=btn_i)
            text_files.insert("end", "\t")

            try:
                color_sign = self.container_var["SMPL"][file_smpl]["Sign Color"].get()
            except:
                self.container_var["SMPL"][file_smpl]["Sign Color"] = tk.StringVar()
                self.container_var["SMPL"][file_smpl]["Sign Color"].set(self.sign_red)
                color_sign = self.container_var["SMPL"][file_smpl]["Sign Color"].get()

            frm_i = tk.Frame(
                frm_files, bg=color_sign, relief=tk.SOLID, height=15, width=15, highlightbackground="black", bd=1)
            text_files.window_create("end", window=frm_i)
            text_files.insert("end", "\n")
            #
            self.container_var["SMPL"][file_smpl]["Frame"] = frm_i

    def change_filetype_time_signal_diagram_checker(self, var_setting_key):
        self.current_file_id_checker = 0

        if self.container_var[var_setting_key]["Time-Signal Checker"].get() == 1:
            var_filetype = "STD"
            var_filetype_previous = "SMPL"
        else:
            var_filetype = "SMPL"
            var_filetype_previous = "STD"

        self.show_time_signal_diagram_checker(var_setting_key=var_setting_key)

    def change_file_time_signal_diagram_checker(self, var_mode, var_setting_key):
        if self.container_var[var_setting_key]["Time-Signal Checker"].get() == 1:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"

        if var_mode == "Next":
            if self.current_file_id_checker < len(self.container_lists[var_filetype]["Short"]) - 1:
                self.current_file_id_checker += 1
            else:
                self.current_file_id_checker = 0
        else:
            if self.current_file_id_checker > 0:
                self.current_file_id_checker -= 1
            else:
                self.current_file_id_checker = len(self.container_lists[var_filetype]["Short"]) - 1

        self.show_time_signal_diagram_checker(var_setting_key=var_setting_key)

    def build_checkbutton_isotope_visibility(self, var_mode, var_filetype, var_filename_short, var_isotope):
        self.container_var[var_mode]["Display RAW"][var_filetype][var_filename_short][var_isotope] = tk.IntVar()
        self.container_var[var_mode]["Display SMOOTHED"][var_filetype][var_filename_short][var_isotope] = tk.IntVar()
        self.container_var[var_mode]["Display RAW"][var_filetype][var_filename_short][var_isotope].set(1)
        self.container_var[var_mode]["Display SMOOTHED"][var_filetype][var_filename_short][var_isotope].set(0)

    def define_temporary_colors(self, filename_short):
        var_n = len(self.container_lists["Measured Isotopes"][filename_short])
        var_cm = self.container_var["General Settings"]["Colormap"].get()
        cmap = plt.get_cmap(var_cm, var_n)
        colors_mpl = []

        for i in range(cmap.N):
            rgba = cmap(i)
            colors_mpl.append(mpl.colors.rgb2hex(rgba))

        self.isotope_colors_temporary = {}
        for index, isotope in enumerate(self.container_lists["Measured Isotopes"][filename_short]):
            self.isotope_colors_temporary[isotope] = colors_mpl[index]

    def define_isotope_colors(self):
        var_n = len(self.container_lists["Measured Isotopes"]["All"])
        var_cm = self.container_var["General Settings"]["Colormap"].get()
        cmap = plt.get_cmap(var_cm, var_n)
        colors_mpl = []

        for i in range(cmap.N):
            rgba = cmap(i)
            colors_mpl.append(mpl.colors.rgb2hex(rgba))

        self.isotope_colors = {}
        for index, isotope in enumerate(self.container_lists["Measured Isotopes"]["All"]):
            self.container_files["SRM"][isotope] = tk.StringVar()
            self.isotope_colors[isotope] = colors_mpl[index]



    def build_container_helper(self, mode):
        """Creates and defines some important helper variables.
        Args:
            mode (str): It defines the file type ("STD" vs. "SMPL").
        Returns:
        """

        for var_file_short in self.container_lists[mode]["Short"]:
            if var_file_short not in self.container_helper[mode]:
                self.container_helper[mode][var_file_short] = {}

            self.container_helper[mode][var_file_short]["FIGURE"] = None
            self.container_helper[mode][var_file_short]["CANVAS"] = None
            self.container_helper[mode][var_file_short]["TOOLBARFRAME"] = None
            self.container_helper[mode][var_file_short]["AXES"] = {}
            self.container_helper[mode][var_file_short]["RESULTS FRAME"] = None
            self.container_helper[mode][var_file_short]["FIGURE RATIO"] = None
            self.container_helper[mode][var_file_short]["CANVAS RATIO"] = None
            self.container_helper[mode][var_file_short]["TOOLBARFRAME RATIO"] = None
            self.container_helper[mode][var_file_short]["AXES RATIO"] = {}

    def build_matrix_setup_variables(self):
        for var_file in self.container_lists["SMPL"]["Long"]:
            if var_file not in self.container_var["SMPL"]:
                self.container_var["SMPL"][var_file] = {}

            self.container_var["SMPL"][var_file]["Matrix Setup"] = {
                "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}

            self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Name"].set("Select IS")
            self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Concentration"].set("0.0")
            self.container_var["SMPL"][var_file]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
            self.container_var["SMPL"][var_file]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
            self.container_var["SMPL"][var_file]["Matrix Setup"]["Element"]["Name"].set("Select Element")
            self.container_var["SMPL"][var_file]["Matrix Setup"]["Element"]["Concentration"].set("100.0")

    def confirm_all_files_2(self, var_filetype):
        for var_file_long in self.container_lists[var_filetype]["Long"]:
            self.container_var[var_filetype][var_file_long]["Sign Color"].set(self.sign_green)
            self.container_var[var_filetype][var_file_long]["Frame"].config(background=self.sign_green, bd=1)

    ## MATRIX SETTINGS #################################################################################################
    def ma_matrix_concentration_setup(self):
        if self.pysills_mode == "MA":
            var_setting_key = "ma_setting"
            var_window_header = "MINERAL ANALYSIS - Sample Concentration Setup"
        elif self.pysills_mode == "FI":
            var_setting_key = "fi_setting"
            var_window_header = "FLUID INCLUSION ANALYSIS - Matrix Concentration Setup"
        elif self.pysills_mode == "MI":
            var_setting_key = "mi_setting"
            var_window_header = "MELT INCLUSION ANALYSIS - Matrix Concentration Setup"

        ## Window Settings
        window_width = 800
        window_heigth = 450
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        subwindow_ma_matrix_concentration = tk.Toplevel(self.parent)
        subwindow_ma_matrix_concentration.title(var_window_header)
        subwindow_ma_matrix_concentration.geometry(var_geometry)
        subwindow_ma_matrix_concentration.resizable(False, False)
        subwindow_ma_matrix_concentration["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_ma_matrix_concentration, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_ma_matrix_concentration, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            subwindow_ma_matrix_concentration.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_ma_matrix_concentration.grid_columnconfigure(i, minsize=column_min)

        start_row = 0
        start_column = 0

        ## LABELS
        if self.container_var[var_setting_key]["Host Setup Selection"].get() == 1:
            var_text_02 = "Oxide Settings (default)"
            var_key = "oxides"
        elif self.container_var[var_setting_key]["Host Setup Selection"].get() == 2:
            var_text_02 = "Element Settings (default)"
            var_key = "elements"
        elif self.container_var[var_setting_key]["Host Setup Selection"].get() == 3:
            var_text_02 = "Experimental data"
            var_key = "experiments"
        elif self.container_var[var_setting_key]["Host Setup Selection"].get() == 4:
            var_text_02 = "Custom data"
            var_key = "custom"

        lbl_01 = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=19,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text=var_text_02, relief=tk.FLAT, fontsize="sans 10 bold")

        if self.container_var[var_setting_key]["Host Setup Selection"].get() not in [3, 4]:
            lbl_03 = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 3, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Internal Standard (default)", relief=tk.FLAT, fontsize="sans 10 bold")

        if self.container_var[var_setting_key]["Host Setup Selection"].get() == 4:
            lbl_03 = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Internal Standard (default)", relief=tk.FLAT, fontsize="sans 10 bold")

        list_possible_elements = []
        for isotope in self.container_var["SRM"]:
            if isotope in self.container_lists["ISOTOPES"]:
                var_srm_i = self.container_var["SRM"][isotope].get()
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if element in self.srm_actual[var_srm_i]:
                    var_isotope_concentration = self.srm_actual[var_srm_i][element]
                    if var_isotope_concentration > 0:
                        list_possible_elements.append(isotope)

        ## OPTION MENUS
        if var_key == "oxides":
            list_elements = []
            list_compound = []
            for isotope in list_possible_elements:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for oxide in self.container_lists["Oxides"]:
                key = re.search("(\D+)(\d*)(\D+)(\d*)", oxide)
                element_oxide = key.group(1)
                if element_oxide in list_elements:
                    if oxide not in list_compound:
                        list_compound.append(oxide)
            var_list_is = self.container_lists["Oxides"]
            var_opt_default = self.container_var[var_setting_key]["Oxide"]
            var_entr_default = self.container_var[var_setting_key]["Oxide Concentration"]

            if self.container_var[var_setting_key]["Oxide"].get() != "Select Oxide" \
                    and self.container_var[var_setting_key]["Oxide"].get() not in self.container_lists["Elements"]:
                var_opt_default_text = self.container_var[var_setting_key]["Oxide"].get()
            else:
                var_opt_default_text = "Select Oxide"

            if self.container_var[var_setting_key]["Oxide Concentration"].get() != "100.0":
                var_entr_default_text = self.container_var[var_setting_key]["Oxide Concentration"].get()
            else:
                var_entr_default_text = "100.0"
        elif var_key == "elements":
            list_elements = []
            list_compound = []
            for isotope in list_possible_elements:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for element in self.container_lists["Elements"]:
                if element in list_elements:
                    if element not in list_compound:
                        list_compound.append(element)
            var_list_is = self.container_lists["Elements"]
            var_opt_default = self.container_var[var_setting_key]["Element"]
            var_entr_default = self.container_var[var_setting_key]["Element Concentration"]

            if self.container_var[var_setting_key]["Element"].get() != "Select Element" \
                    and self.container_var[var_setting_key]["Element"].get() not in self.container_lists["Oxides"]:
                var_opt_default_text = self.container_var[var_setting_key]["Element"].get()
            else:
                var_opt_default_text = "Select Element"

            if self.container_var[var_setting_key]["Element Concentration"].get() != "1000000":
                var_entr_default_text = self.container_var[var_setting_key]["Element Concentration"].get()
            else:
                var_entr_default_text = "1000000"
        elif var_key == "experiments":
            btn_smpl = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 1, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Import Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda parent=subwindow_ma_matrix_concentration, mode="MA": self.import_is_data(parent, mode))
        elif var_key == "custom":
            var_opt_is_default = self.container_var["IS"]["Default SMPL"]
            var_opt_is_list = list_possible_elements

            if var_opt_is_default.get() != "Select IS":
                var_opt_is_default_text = var_opt_is_default.get()
            else:
                var_opt_is_default_text = "Select IS"

            self.opt_02b = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 1, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=var_opt_is_default, option_list=var_opt_is_list, text_set=var_opt_is_default_text,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt=var_opt_is_default, var_file=None, state_default=True:
                self.ma_change_is_smpl(var_opt, var_file, state_default))
            self.opt_02b["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            self.opt_02b.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, highlightthickness=0)

            var_entr_is_default = self.container_var["IS"]["Default SMPL Concentration"]
            var_entr_is_default_text = self.container_var["IS"]["Default SMPL Concentration"].get()

            entr_02b = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 2, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_entr_is_default, text_default=var_entr_is_default_text,
                command=lambda event, var_entr=var_entr_is_default, var_file=None, state_default=True:
                self.ma_change_is_concentration(var_entr, var_file, state_default, event))

        if var_key != "experiments" and var_key != "custom":
            var_opt_is_default = self.container_var["IS"]["Default SMPL"]
            var_opt_is_list = list_possible_elements
            var_entr_is_default = self.container_var["IS"]["Default SMPL Concentration"]

            if var_opt_is_default.get() != "Select IS":
                var_opt_is_default_text = var_opt_is_default.get()
            else:
                var_opt_is_default_text = "Select IS"

            var_entr_is_default_text = self.container_var["IS"]["Default SMPL Concentration"].get()

            opt_02a = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 1, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=var_opt_default, option_list=list_compound, text_set=var_opt_default_text,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt=var_opt_default, var_file=None, state_default=True:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_02a["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_02a.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, highlightthickness=0)

            self.opt_02b = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 4, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=var_opt_is_default, option_list=var_opt_is_list, text_set=var_opt_is_default_text,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt=var_opt_is_default, var_file=None, state_default=True:
                self.ma_change_is_smpl(var_opt, var_file, state_default))
            self.opt_02b["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            self.opt_02b.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, highlightthickness=0)

            ## ENTRIES
            entr_02a = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 2, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_entr_default, text_default=var_entr_default_text,
                command=lambda event, var_entr=var_entr_default, var_file=None, state_default=True:
                self.ma_change_matrix_concentration(var_entr, var_file, state_default, event))
            entr_02b = SE(
                parent=subwindow_ma_matrix_concentration, row_id=start_row + 5, column_id=start_column + 30, n_rows=1,
                n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_entr_is_default, text_default=var_entr_is_default_text,
                command=lambda event, var_entr=var_entr_is_default, var_file=None, state_default=True:
                self.ma_change_is_concentration(var_entr, var_file, state_default, event))

        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 1, column_id=start_column, n_rows=16,
            n_columns=29, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)

        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")

            if var_key == "oxides":     # Oxide Selection
                var_list_is = list_possible_elements
                var_list_comp = self.container_lists["Oxides"]
                var_opt_comp_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"]

                if self.pysills_mode == "MA":
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]
                else:
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]

                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].get() != "Select Oxide":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].get()
                else:
                    if var_opt_default.get() != "Select Oxide" \
                            and var_opt_default.get() not in self.container_lists["Elements"]:
                        var_opt_i_default = var_opt_default.get()
                    else:
                        var_opt_i_default = "Select Oxide"

                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"].get() != "100.0":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "100.0"

                if self.pysills_mode == "MA":
                    if self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get() != "1000000":
                        var_entr_is_default = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get()
                    else:
                        var_entr_is_default = "1000000"
                else:
                    if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"][
                        "Concentration"].get() != "1000000":
                        var_entr_is_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"][
                            "Concentration"].get()
                    else:
                        var_entr_is_default = "1000000"

            elif var_key == "elements":  # Element Selection
                var_list_is = list_possible_elements #self.container_lists["ISOTOPES"]
                var_list_comp = self.container_lists["Elements"]
                var_opt_comp_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"]
                if self.pysills_mode == "MA":
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]
                else:
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]

                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"].get() != "Select Element":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                        "Name"].get()
                else:
                    if var_opt_default.get() != "Select Element" \
                            and var_opt_default.get() not in self.container_lists["Oxides"]:
                        var_opt_i_default = var_opt_default.get()
                    else:
                        var_opt_i_default = "Select Element"

                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].get() != "100.0":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "100.0"

                if self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get() != "1000000":
                    var_entr_is_default = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get()
                else:
                    var_entr_is_default = "1000000"
            elif var_key in ["experiments", "custom"]:  # Experimental Data Selection
                var_list_is = list_possible_elements #self.container_lists["ISOTOPES"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"]
                if self.pysills_mode == "MA":
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]
                else:
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]

                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].get() != "100.0":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "100.0"

                if self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get() != "1000000":
                    var_entr_is_default = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get()
                else:
                    var_entr_is_default = "1000000"

            var_entr_is_i.set(var_entr_is_default)
            if var_key != "experiments" and var_key != "custom":
                var_entr_i.set(var_entr_i_default)
                if len(var_opt_i_default) > 0:
                    var_opt_comp_i.set(var_opt_i_default)
                else:
                    var_opt_comp_i.set(var_opt_default_text)

                opt_comp_i = tk.OptionMenu(
                    frm_smpl, var_opt_comp_i, *var_list_comp,
                    command=lambda var_opt=var_opt_comp_i, var_file=file_smpl, state_default=False:
                    self.ma_change_matrix_compound(var_opt, var_file, state_default))
                opt_comp_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                        activeforeground=self.colors_fi["Dark Font"],
                                        activebackground=self.accent_color)
                opt_comp_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                                activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color,
                                highlightthickness=0)
                text_smpl.window_create("end", window=opt_comp_i)
                text_smpl.insert("end", " \t")

                if len(var_entr_i.get()) > 0:
                    var_entr_i.set(var_entr_i.get())
                else:
                    var_entr_i.set(var_entr_default_text)

                entr_i = tk.Entry(
                    frm_smpl, textvariable=var_entr_i, width=15, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["White"], highlightthickness=0, highlightbackground=self.bg_colors["Very Light"])
                entr_i.bind(
                    "<Return>", lambda event, var_entr=var_entr_i, var_file=file_smpl, state_default=False:
                    self.ma_change_matrix_concentration(var_entr, var_file, state_default, event))
                text_smpl.window_create("insert", window=entr_i)
                text_smpl.insert("end", "\t")

            opt_is_i = tk.OptionMenu(
                frm_smpl, var_opt_is_i, *var_list_is,
                command=lambda var_opt=var_opt_is_i, var_file=file_smpl, state_default=False:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_is_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color)
            opt_is_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")

            entr_is_i = tk.Entry(
                frm_smpl, textvariable=var_entr_is_i, width=15, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["White"], highlightthickness=0, highlightbackground=self.bg_colors["Very Light"])
            entr_is_i.bind(
                "<Return>", lambda event, var_entr=var_entr_is_i, var_file=file_smpl, state_default=False:
                self.ma_change_is_concentration(var_entr, var_file, state_default, event))
            text_smpl.window_create("insert", window=entr_is_i)
            text_smpl.insert("end", "\n")

        # Finishing
        for var_file_smpl in self.container_var["SMPL"].keys():
            if "IS Data" in self.container_var["SMPL"][var_file_smpl]:
                var_is = self.container_var["SMPL"][var_file_smpl]["IS Data"]["IS"].get()
                if var_is not in self.container_lists["Possible IS"]:
                    self.container_lists["Possible IS"].append(var_is)

    def import_is_data(self, parent, mode="MA"):
        self.pypitzer_performed = False
        filename = filedialog.askopenfilenames(
            parent=parent,
            filetypes=(("LA-ICP-MS files", "*.csv *.xl *.txt"), ("csv files", "*.csv"), ("xl files", "*.xl"),
                       ("txt files", "*.txt"), ("all files", "*.*")), initialdir=os.getcwd())
        df_expdata = pd.read_csv(filename[0])

        if mode == "MA":
            for index, file in enumerate(df_expdata["file"]):
                file_id = self.container_lists["SMPL"]["Short"].index(file)
                file_long = self.container_lists["SMPL"]["Long"][file_id]
                self.container_var["SMPL"][file_long]["IS Data"]["IS"].set(df_expdata["isotope"][index])
                self.container_var["SMPL"][file_long]["IS Data"]["Concentration"].set(df_expdata["value"][index])
                if self.container_var["IS"]["Default STD"].get() == "Select IS":
                    self.container_var["IS"]["Default STD"].set(df_expdata["isotope"][index])
                    for file_std in self.container_lists["STD"]["Long"]:
                        if self.container_var["STD"][file_std]["IS Data"]["IS"].get() == "Select IS":
                            self.container_var["STD"][file_std]["IS Data"]["IS"].set(df_expdata["isotope"][index])
        elif mode in ["FI", "MI"]:
            for index, file in enumerate(df_expdata["file"]):
                file_id = self.container_lists["SMPL"]["Short"].index(file)
                file_long = self.container_lists["SMPL"]["Long"][file_id]
                self.container_var["SMPL"][file_long]["IS Data"]["IS"].set(df_expdata["isotope"][index])
                self.container_var["SMPL"][file_long]["IS Data"]["Concentration"].set(df_expdata["value"][index])
                if self.container_var["IS"]["Default STD"].get() == "Select IS":
                    self.container_var["IS"]["Default STD"].set(df_expdata["isotope"][index])
                    for file_std in self.container_lists["STD"]["Long"]:
                        if self.container_var["STD"][file_std]["IS Data"]["IS"].get() == "Select IS":
                            self.container_var["STD"][file_std]["IS Data"]["IS"].set(df_expdata["isotope"][index])

    def ma_change_matrix_compound(self, var_opt, var_file=None, state_default=False):
        str_method = self.container_var["Quantification Mineral"]["Method"].get()
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1 or str_method != "Internal Standard":
            var_key = "Oxide"
        else:
            var_key = "Element"

        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].set(var_opt)

            self.container_var["IS"]["Default SMPL Concentration"].set(1000000)
            if var_key == "Oxide":
                key = re.search("(\D+)(\d*)(\D+)(\d*)", var_opt)
                var_opt_element = key.group(1)
            else:
                var_opt_element = var_opt
            possible_is = []

            for isotope in self.container_lists["ISOTOPES"]:
                key_02 = re.search("(\D+)(\d+)", isotope)
                element = key_02.group(1)
                if element == var_opt_element:
                    possible_is.append(isotope)

            self.container_var["IS"]["Default SMPL"].set("Select IS")
            for index, isotope in enumerate(possible_is):
                if index == 0:
                    self.opt_02b["menu"].delete(0, "end")
                #
                self.opt_02b["menu"].add_command(
                    label=isotope, command=lambda var_opt=isotope, var_file=None, state_default=True:
                    self.ma_change_is_smpl(var_opt, var_file, state_default))
            #
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"][var_key]["Name"].set(var_opt)
    #
    def ma_change_matrix_concentration(self, var_entr, var_file, state_default, event):
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Concentration"].set(var_entr.get())
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"][var_key]["Concentration"].set(var_entr.get())
            #
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(
                int(float(var_entr.get())/100*float(self.container_var["IS"]["Default SMPL Concentration"].get())))
    #
    def ma_change_is_smpl(self, var_opt, var_file=None, state_default=False):
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"

        if self.container_var[var_setting_key]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        elif self.container_var[var_setting_key]["Host Setup Selection"].get() == 2:
            var_key = "Element"
        elif self.container_var[var_setting_key]["Host Setup Selection"].get() == 4:
            var_key = "custom"
        #
        self.container_var["IS"]["Default SMPL"].set(var_opt)
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                if self.pysills_mode == "MA":
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]
                else:
                    var_opt_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                    var_entr_is_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]
                #self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_opt)
                var_opt_is_i.set(var_opt)
                if var_key == "Oxide":
                    var_oxide = self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].get()
                    if var_oxide != "Select Oxide":
                        key = re.search("(\D+)(\d*)(\D+)(\d*)", var_oxide)
                        list_elements = []
                        list_amounts = []
                        list_fraction = {}
                        #
                        for index, item in enumerate(key.groups()):
                            if index in [0, 2]:
                                list_elements.append(item)
                            else:
                                if item == "":
                                    list_amounts.append(1)
                                else:
                                    list_amounts.append(int(item))
                        #
                        mass_total = 0
                        for index, element in enumerate(list_elements):
                            if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                                mass_total += list_amounts[index]*self.chemistry_data[element]
                            else:
                                mass_total += list_amounts[index]*self.chemistry_data_sills[element]
                        #
                        for index, element in enumerate(list_elements):
                            if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                                list_fraction[element] = (list_amounts[index]*self.chemistry_data[element])/mass_total
                            else:
                                list_fraction[element] = (list_amounts[index]*self.chemistry_data_sills[element])/mass_total
                            #
                            if index == 0:
                                oxide_weight = (float(self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"][
                                    "Concentration"].get()))/100
                                is_concentration = round(list_fraction[element]*10**6, 4)
                                self.container_var["IS"]["Default SMPL Concentration"].set(is_concentration)
                                #self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(round(
                                #    oxide_weight*is_concentration, 4))
                                var_entr_is_i.set(round(oxide_weight*is_concentration, 4))

                        if self.container_var["IS"]["Default STD"].get() == "Select IS":
                            self.container_var["IS"]["Default STD"].set(var_opt)
                            for file_std in self.container_lists["STD"]["Long"]:
                                if self.container_var["STD"][file_std]["IS Data"]["IS"].get() == "Select IS":
                                    self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_opt)
                    else:
                        if self.container_var["IS"]["Default SMPL"].get() == "Select IS":
                            self.container_var["IS"]["Default SMPL"].set(var_opt)
                        if self.container_var["IS"]["Default STD"].get() == "Select IS":
                            self.container_var["IS"]["Default STD"].set(var_opt)
                            for file_std in self.container_lists["STD"]["Long"]:
                                if self.container_var["STD"][file_std]["IS Data"]["IS"].get() == "Select IS":
                                    self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_opt)
                #
                else:
                    oxide_weight = (float(self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                                              "Concentration"].get())) / 100
                    is_concentration = round(1*10**6, 4)
                    self.container_var["IS"]["Default SMPL Concentration"].set(is_concentration)
                    #self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(
                    #    round(oxide_weight*is_concentration, 4))
                    var_entr_is_i.set(round(oxide_weight*is_concentration, 4))

                    if self.container_var["IS"]["Default STD"].get() == "Select IS":
                        self.container_var["IS"]["Default STD"].set(var_opt)
                        for file_std in self.container_lists["STD"]["Long"]:
                            if self.container_var["STD"][file_std]["IS Data"]["IS"].get() == "Select IS":
                                self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_opt)
        else:
            if self.pysills_mode == "MA":
                var_opt_is_i = self.container_var["SMPL"][var_file]["IS Data"]["IS"]
                var_entr_is_i = self.container_var["SMPL"][var_file]["IS Data"]["Concentration"]
            else:
                var_opt_is_i = self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Name"]
                var_entr_is_i = self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Concentration"]
            #self.container_var["SMPL"][var_file]["IS Data"]["IS"].set(var_opt)
            var_opt_is_i.set(var_opt)
            self.container_var["SMPL"][var_file]["IS"].set(var_opt)

        if self.pysills_mode == "MA":
            self.container_lists["Possible IS"].clear()
            for var_file, var_content in self.container_var["SMPL"].items():
                if var_file in self.container_lists["SMPL"]["Long"]:
                    var_is = var_content["IS Data"]["IS"].get()
                    if var_is not in self.container_lists["Possible IS"]:
                        self.container_lists["Possible IS"].append(var_is)

    def ma_change_is_concentration(self, var_entr, var_file, state_default, event):
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_entr.get())
        else:
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(var_entr.get())
    #
    ####################################################################################################################
    #
    def ma_select_srm_default(self, var_opt, mode="STD"):
        if mode == "STD":
            for file_std in self.list_std:
                parts = file_std.split("/")
                self.container_var["STD"][file_std]["SRM"].set(var_opt)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["SRM"][isotope].set(var_opt)

        if var_opt not in self.srm_actual and var_opt != "Select SRM":
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
            self.fill_srm_values(var_srm=var_opt)

    def ma_select_id_default(self, var_opt):
        var_id = var_opt
        for file_smpl in self.list_smpl:
            self.container_var["SMPL"][file_smpl]["ID"].set(var_id)
    #
    def ma_change_srm_individual(self, var_opt, var_indiv, mode="STD"):
        if mode == "STD":
            parts = var_indiv.split("/")
            self.container_var["STD"][var_indiv]["SRM"].set(var_opt)
            self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["SRM"][var_indiv].set(var_opt)

        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)

        self.fill_srm_values(var_srm=var_opt)
    #
    ## FILE-SPECIFIC ANALYSIS ##########################################################################################
    #
    def ma_check_specific_file(self, var_filename_long, var_filetype="STD", checkup_mode=False):
        str_filename_long = var_filename_long
        str_filetype = var_filetype
        bool_checkup_mode = checkup_mode

        if bool_checkup_mode == True:
            if str_filetype == "STD":
                str_filename_long = self.ma_current_file_std
            elif str_filetype == "SMPL":
                str_filename_long = self.ma_current_file_smpl

        ## INPUT
        parts = str_filename_long.split("/")
        var_filename_short = parts[-1]
        self.helper_intervals = {"BG": [], "MAT": []}
        self.container_var["ma_setting"]["Analyse Mode Plot"][str_filetype][var_filename_short].set(0)

        ## Window Settings
        window_width = 1060
        window_heigth = 750
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_ma_checkfile = tk.Toplevel(self.parent)
        self.subwindow_ma_checkfile.title("MINERAL ANALYSIS - File Analysis of " + str(var_filename_short))
        self.subwindow_ma_checkfile.geometry(var_geometry)
        self.subwindow_ma_checkfile.resizable(False, False)
        self.subwindow_ma_checkfile["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_checkfile, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_checkfile, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_checkfile.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_checkfile.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0

        ## FRAMES
        frm_00 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row, column_id=start_column + 14, n_rows=n_rows - 8,
            n_columns=n_columns - 11, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(
            relief=tk.SOLID)

        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Display Options", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 18, column_id=start_column, n_rows=1,
            n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Anaylsis Mode", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 22, column_id=start_column, n_rows=1,
            n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Interval Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column, n_rows=1,
            n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=start_column, n_rows=1,
            n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=tk.FLAT, fontsize="sans 10 bold")

        ## BUTTONS
        btn_02a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 16, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Show All", bg_active=self.bg_colors["Dark"], fg_active=self.bg_colors["Light Font"],
            command=lambda var_type=str_filetype, var_file_short=var_filename_short: self.ma_show_all_lines(
                var_type, var_file_short, ))
        btn_02b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 17, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Hide All", bg_active=self.bg_colors["Dark"], fg_active=self.bg_colors["Light Font"],
            command=lambda var_type=str_filetype, var_file_short=var_filename_short: self.ma_hide_all_lines(
                var_type, var_file_short))
        btn_04a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 25, column_id=0, n_rows=2, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Remove Interval", bg_active=self.bg_colors["Dark"], fg_active=self.bg_colors["Light Font"],
            command=lambda var_type=str_filetype, var_file_short=var_filename_short:
            self.ma_remove_interval(var_type, var_file_short))
        btn_08 = SE(
            parent=self.subwindow_ma_checkfile, row_id=n_rows - 2, column_id=0, n_rows=2, n_columns=14,
            fg=self.colors_fi["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Confirm and Close", bg_active=self.bg_colors["Dark"],
            fg_active=self.bg_colors["Light Font"],
            command=lambda var_parent=self.subwindow_ma_checkfile, var_type=str_filetype,
                           var_file_long=str_filename_long:
            self.confirm_specific_file_setup(var_parent, var_type, var_file_long))

        ## RADIOBUTTONS
        rb_02a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 16, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Data Type Plot"][str_filetype][var_filename_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="RAW", sticky="nesw",
            relief=tk.FLAT)
        rb_02b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 17, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Data Type Plot"][str_filetype][var_filename_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SMOOTHED", sticky="nesw",
            relief=tk.FLAT)
        #
        rb_03a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 19, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Analyse Mode Plot"][str_filetype][var_filename_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Signal Plot", sticky="nesw",
            relief=tk.FLAT, command=lambda var_file=str_filename_long, var_filetype=str_filetype, var_lb_state=False:
            self.ma_show_time_signal_diagram(var_file, var_filetype, var_lb_state))
        rb_03b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 20, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Analyse Mode Plot"][str_filetype][var_filename_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Ratio Plot", sticky="nesw",
            relief=tk.FLAT, command=lambda var_file=str_filename_long, var_type=str_filetype:
            self.ma_show_time_ratio_diagram(var_file, var_type))
        rb_03c = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 21, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Analyse Mode Plot"][str_filetype][var_filename_short], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Quick Results", sticky="nesw",
            relief=tk.FLAT, command=lambda var_file=str_filename_long, var_type=str_filetype:
            self.ma_show_quick_results(var_file, var_type))
        rb_05 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 14, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["BG"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Calculation Interval"][str_filetype][var_filename_short], value_rb=0,
            color_bg=self.colors_intervals["BG"], fg=self.bg_colors["Light Font"], text="Background Interval",
            sticky="nesw", relief=tk.FLAT )
        rb_06 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 27, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["MAT"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Calculation Interval"][str_filetype][var_filename_short], value_rb=1,
            color_bg=self.colors_intervals["MAT"], fg=self.bg_colors["Light Font"], text="Sample Interval",
            sticky="nesw",
            relief=tk.FLAT)
        rb_08 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 22, column_id=start_column + 14, n_rows=1,
            n_columns=26, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Calculation Interval"][str_filetype][var_filename_short], value_rb=3,
            color_bg=self.bg_colors["Super Dark"], fg=self.bg_colors["Light Font"], text="No Selection",
            sticky="nesw", relief=tk.FLAT)

        ## CHECKBOXES
        if "BG" not in self.container_var["ma_setting"]["Calculation Interval Visibility"][str_filetype][
            var_filename_short]:
            self.container_var["ma_setting"]["Calculation Interval Visibility"][str_filetype][var_filename_short] = {
                "BG": tk.IntVar(), "MAT": tk.IntVar(), "INCL": tk.IntVar()}
            self.container_var["ma_setting"]["Calculation Interval Visibility"][str_filetype][var_filename_short]["BG"].set(
                1)
            self.container_var["ma_setting"]["Calculation Interval Visibility"][str_filetype][var_filename_short][
                "MAT"].set(1)
        #
        cb_bg = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 25,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["BG"]).create_simple_checkbox(
            var_cb=self.container_var["ma_setting"]["Calculation Interval Visibility"][str_filetype][var_filename_short][
                "BG"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="BG", var_type=str_filetype, var_file_short=var_filename_short:
            self.ma_change_interval_visibility(var_key, var_type, var_file_short))
        cb_mat = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 38,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["MAT"]).create_simple_checkbox(
            var_cb=self.container_var["ma_setting"]["Calculation Interval Visibility"][str_filetype][var_filename_short][
                "MAT"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="MAT", var_type=str_filetype, var_file_short=var_filename_short:
            self.ma_change_interval_visibility(var_key, var_type, var_file_short))

        ## ENTRIES
        var_entr_start = tk.StringVar()
        var_entr_start.set("Set start value")
        var_entr_end = tk.StringVar()
        var_entr_end.set("Set end value")
        self.helper_time_entries = {"Start": var_entr_start, "End": var_entr_end}

        entr_04a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=var_entr_start, text_default=var_entr_start.get(),
            command=lambda event, var_entr=var_entr_start, var_key="Start", mode=str_filename_long, var_interval=None:
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        entr_04b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=var_entr_end, text_default=var_entr_end.get(),
            command=lambda event, var_entr=var_entr_end, var_key="End", mode=str_filename_long, var_interval=None:
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))

        ## MEASURED ISOTOPES
        frm_iso = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 1, column_id=start_column, n_rows=14,
            n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = ttk.Scrollbar(frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)

        df_isotopes = self.container_lists["Measured Isotopes"][var_filename_short]
        for index, isotope in enumerate(df_isotopes):
            frm_i = tk.Frame(
                frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")

            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")

            cb_raw_i = tk.Checkbutton(
                frm_iso,
                variable=self.container_var["ma_setting"]["Display RAW"][str_filetype][var_filename_short][isotope],
                text="RAW", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"],
                command=lambda var_type=str_filetype, var_file_short=var_filename_short, var_datatype="RAW",
                               var_isotope=isotope: self.ma_change_line_visibility(var_type, var_file_short,
                                                                                   var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_raw_i)
            text_iso.insert("end", "\t")

            cb_smoothed_i = tk.Checkbutton(
                frm_iso, variable=self.container_var["ma_setting"]["Display SMOOTHED"][str_filetype][var_filename_short][
                    isotope], text="SMOOTHED", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"],
                fg=self.bg_colors["Dark Font"],
                command=lambda var_type=str_filetype, var_file_short=var_filename_short, var_datatype="SMOOTHED",
                               var_isotope=isotope: self.ma_change_line_visibility(var_type, var_file_short,
                                                                                   var_datatype, var_isotope))
            if self.container_var["Spike Elimination"][str_filetype]["State"] == False:
                cb_smoothed_i.configure(state="disabled")
            else:
                cb_smoothed_i.configure(state="normal")
            text_iso.window_create("end", window=cb_smoothed_i)
            text_iso.insert("end", "\n")

        ## BACKGROUND INTERVAL
        lb_bg, scrollbar_bg_y = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=start_column + 14, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["BG LB"]).create_simple_listbox_grid(
            include_scrb_x=False)
        self.container_helper[str_filetype][var_filename_short]["BG"]["Listbox"] = lb_bg

        ## MATRIX INTERVAL
        lb_mat, scrollbar_mat_y = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=start_column + 27, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["MAT LB"]).create_simple_listbox_grid(include_scrb_x=False)
        self.container_helper[str_filetype][var_filename_short]["MAT"]["Listbox"] = lb_mat

        ## INITIALIZATION

        self.ma_show_time_signal_diagram(var_file=str_filename_long, var_filetype=str_filetype)

    def confirm_specific_file_setup(self, var_parent, var_type, var_file_long):
        self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_green, bd=1)
        self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_green)
        var_parent.destroy()

    def ma_show_time_signal_diagram(self, var_file, var_filetype, var_lb_state=True):
        str_filename_long = var_file
        str_filetype = var_filetype
        bool_lb_state = var_lb_state

        parts = str_filename_long.split("/")
        str_filename_short = parts[-1]

        ## Cleaning
        try:
            canvas_ratio = self.container_helper[str_filetype][str_filename_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[str_filetype][str_filename_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass
        #
        try:
            resultsframe = self.container_helper[str_filetype][str_filename_short]["RESULTS FRAME"]
            #
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass

        self.fig_specific = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_specific = FigureCanvasTkAgg(self.fig_specific, master=self.subwindow_ma_checkfile)
        self.canvas_specific.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame_specific = tk.Frame(master=self.subwindow_ma_checkfile)
        self.toolbarFrame_specific.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="ew")
        self.toolbar_specific = NavigationToolbar2Tk(self.canvas_specific, self.toolbarFrame_specific)
        self.toolbar_specific.config(
            bg=self.bg_colors["Very Light"], highlightthickness=0, highlightbackground=self.bg_colors["Very Light"],
            highlightcolor=self.bg_colors["Dark Font"], bd=0)
        self.toolbar_specific._message_label.config(
            bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"], font="sans 12")
        self.toolbar_specific.winfo_children()[-2].config(
            bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])

        self.container_helper[str_filetype][str_filename_short]["FIGURE"] = self.fig_specific
        self.container_helper[str_filetype][str_filename_short]["CANVAS"] = self.canvas_specific
        self.container_helper[str_filetype][str_filename_short]["TOOLBARFRAME"] = self.toolbarFrame_specific

        if self.file_loaded == False:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
        else:
            df_data = self.container_measurements["Dataframe"][str_filename_short]
        self.dataset_time = list(DE().get_times(dataframe=df_data))
        x_max = max(self.dataset_time)
        df_isotopes = self.container_lists["Measured Isotopes"][str_filename_short]
        icp_measurements = np.array([[df_data[isotope] for isotope in df_isotopes]])
        y_max = np.amax(icp_measurements)

        ## DIAGRAMS
        ax = self.fig_specific.add_subplot(label=np.random.uniform())
        self.container_helper[str_filetype][str_filename_short]["AXES"] = {"Time-Signal": ax}

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        for isotope in df_isotopes:
            ln_raw = ax.plot(self.dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                             linewidth=var_lw, visible=True)
            self.container_var["ma_setting"]["Time-Signal Lines"][str_filetype][str_filename_short][isotope]["RAW"] = ln_raw
            #
            if isotope in self.container_measurements["EDITED"][str_filename_short]:
                if "Uncut" in self.container_measurements["EDITED"][str_filename_short][isotope]:
                    ln_smoothed = ax.plot(
                        self.dataset_time, self.container_measurements["EDITED"][str_filename_short][isotope]["Uncut"],
                        label=isotope, color=self.isotope_colors[isotope], linewidth=var_lw, visible=True)
                    self.container_var["ma_setting"]["Time-Signal Lines"][str_filetype][str_filename_short][isotope][
                        "SMOOTHED"] = ln_smoothed
                    self.container_var["ma_setting"]["Display SMOOTHED"][str_filetype][str_filename_short][isotope].set(1)
                    #
        #
        if self.pysills_mode in ["FI", "MI"]:
            var_check_bg = self.container_helper[str_filetype][str_filename_short]["BG"]["Content"]
        else:
            var_check_bg = self.container_helper[str_filetype][str_filename_short]["BG"]["Content"]
        #
        if len(var_check_bg) > 0:
            if self.pysills_mode in ["MA", "FI", "MI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short]["BG"]["Content"].items():
                    times_bg = var_content["Times"]
                    #
                    box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                    var_content["Object"] = box_bg
                    #
                    if bool_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["BG"]["Listbox"].insert(
                            tk.END, "BG" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            else:
                times_bg = self.container_helper[str_filetype][str_filename_short]["BG"][1]["Times"]
                #
                box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                self.container_helper[str_filetype][str_filename_short]["BG"][1]["Object"] = box_bg
        #
        if self.pysills_mode == "MA":
            signal_key = "MAT"
            var_check_sig = self.container_helper[str_filetype][str_filename_short][signal_key]["Content"]
        else:
            signal_key = "MAT"
            var_check_sig = self.container_helper[str_filetype][str_filename_short][signal_key]["Content"]
        #
        if len(var_check_sig) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][signal_key][
                    "Content"].items():
                    times_sig = var_content["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if bool_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][signal_key][
                    "Content"].items():
                    times_sig = self.container_helper[str_filetype][str_filename_short][signal_key]["Content"][1]["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if bool_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            else:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][signal_key][
                    "Content"].items():
                    times_sig = var_content["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if bool_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
        #
        if self.pysills_mode == "MA":
            inclusion_key = "INCL"
            var_check_incl = []
        else:
            inclusion_key = "INCL"
            var_check_incl = self.container_helper[str_filetype][str_filename_short][inclusion_key]["Content"]
        #
        if len(var_check_incl) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][inclusion_key][
                    "Content"].items():
                    times_incl = var_content["Times"]
                    #
                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35,
                                          color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl
                    #
                    if bool_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][inclusion_key][
                    "Content"].items():
                    times_incl = self.container_helper[str_filetype][str_filename_short][inclusion_key]["Content"][1][
                        "Times"]
                    #
                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35,
                                          color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl
                    #
                    if bool_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
        #
        ax.grid(True)
        ax.set_yscale("log")
        ax.set_xlim(left=0, right=x_max)
        ax.set_xticks(np.arange(0, x_max, 20))
        ax.set_ylim(bottom=100, top=1.5*y_max)
        ax.grid(which="major", linestyle="-", linewidth=1)
        ax.minorticks_on()
        ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        ax.set_axisbelow(True)
        ax.set_title(str_filename_short, fontsize=9)
        ax.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        ax.set_ylabel("Signal Intensity $I$ (cps)", labelpad=0.5, fontsize=8)
        ax.xaxis.set_tick_params(labelsize=8)
        ax.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_specific.draw()
        #
        self.canvas_specific.mpl_connect(
            "button_press_event", lambda event, var_type=str_filetype, var_file_short=str_filename_short:
            self.ma_add_interval_to_diagram(var_type, var_file_short, event))
    #
    def ma_show_time_ratio_diagram(self, var_file, var_type):
        parts = var_file.split("/")
        var_file_short = parts[-1]

        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]

            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass

        try:
            resultsframe = self.container_helper[var_type][var_file_short]["RESULTS FRAME"]

            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass

        if var_type == "STD":
            var_srm_file = self.container_var["STD"][var_file]["SRM"].get()
            for element, value in sorted(self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                if element in self.container_lists["Measured Elements"][var_file_short]:
                    var_is = self.container_lists["Measured Elements"][var_file_short][element][0]
                break
        else:
            var_is = self.container_var[var_type][var_file]["IS Data"]["IS"].get()
        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]

        self.fig_specific_ratio = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        ax_ratio = self.fig_specific_ratio.add_subplot(label=np.random.uniform())
        self.container_helper[var_type][var_file_short]["AXES"] = {"Time-Ratio": ax_ratio}

        self.canvas_specific_ratio = FigureCanvasTkAgg(self.fig_specific_ratio, master=self.subwindow_ma_checkfile)
        self.canvas_specific_ratio.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame_specific_ratio = tk.Frame(master=self.subwindow_ma_checkfile)
        self.toolbarFrame_specific_ratio.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific_ratio = NavigationToolbar2Tk(self.canvas_specific_ratio, self.toolbarFrame_specific_ratio)
        self.toolbar_specific_ratio.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific_ratio._message_label.config(
            bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"], font="sans 12")
        self.toolbar_specific_ratio.winfo_children()[-2].config(background=self.bg_colors["Very Light"])

        self.container_helper[var_type][var_file_short]["FIGURE RATIO"] = self.fig_specific_ratio
        self.container_helper[var_type][var_file_short]["CANVAS RATIO"] = self.canvas_specific_ratio
        self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"] = self.toolbarFrame_specific_ratio

        if self.file_loaded == False:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
        else:
            df_data = self.container_measurements["Dataframe"][var_file_short]

        self.dataset_time = list(DE().get_times(dataframe=df_data))
        x_max = max(self.dataset_time)
        if var_is != "Select IS":
            icp_measurements = np.array(
                [[df_data[isotope]/df_data[var_is] for isotope in self.container_lists["ISOTOPES"]]])
            y_max = np.amax(icp_measurements)

            var_lw = float(self.container_var["General Settings"]["Line width"].get())
            if var_lw < 0:
                var_lw = 0.5
            elif var_lw > 2.5:
                var_lw = 2.5

            for isotope in self.container_lists["ISOTOPES"]:
                ln_raw = ax_ratio.plot(self.dataset_time, df_data[isotope]/df_data[var_is], label=isotope,
                                       color=self.isotope_colors[isotope], linewidth=var_lw, visible=True)

            ax_ratio.grid(True)
            ax_ratio.set_yscale("log")
            ax_ratio.set_xlim(left=0, right=x_max)
            ax_ratio.set_xticks(np.arange(0, x_max, 20))
            ax_ratio.set_ylim(bottom=10**(-5), top=1.5*y_max)
            ax_ratio.grid(which="major", linestyle="-", linewidth=1)
            ax_ratio.minorticks_on()
            ax_ratio.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            ax_ratio.set_axisbelow(True)
            ax_ratio.set_title(var_file_short, fontsize=9)
            ax_ratio.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
            ax_ratio.set_ylabel("Signal Intensity Ratio $I$ (cps/cps)", labelpad=0.5, fontsize=8)
            ax_ratio.xaxis.set_tick_params(labelsize=8)
            ax_ratio.yaxis.set_tick_params(labelsize=8)

            self.canvas_specific_ratio.draw()

    def ma_show_quick_results(self, var_file, var_type):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass
        #
        try:
            canvas_ratio = self.container_helper[var_type][var_file_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass

        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]

        ## FRAMES
        frm_quick = SE(
            parent=self.subwindow_ma_checkfile, row_id=0, column_id=14, n_rows=30, n_columns=39,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)

        self.container_helper[var_type][var_file_short]["RESULTS FRAME"] = frm_quick

        ## TREEVIEWS
        list_categories = ["Category"]
        if var_type == "STD":
            var_srm_file = self.container_var["STD"][var_file]["SRM"].get()
            for element, value in sorted(self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                if element in self.container_lists["Measured Elements"][var_file_short]:
                    var_is = self.container_lists["Measured Elements"][var_file_short][element][0]
                break
            list_considered_isotopes = []
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_srm_i = self.container_var["SRM"][isotope].get()
                if var_srm_i == var_srm_file:
                    list_considered_isotopes.append(isotope)
            list_categories.extend(list_considered_isotopes)

            key_element_is = re.search("(\D+)(\d+)", var_is)
            element_is = key_element_is.group(1)
            stop_calculation = False
            if element_is in self.srm_actual[var_srm_file]:
                stop_calculation = False
            else:
                stop_calculation = True
        else:
            var_is = self.container_var[var_type][var_file]["IS Data"]["IS"].get()
            list_considered_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            list_categories.extend(list_considered_isotopes)
            stop_calculation = False
        list_width = list(85*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 175

        n_intervals_bg = len(self.container_helper[var_type][var_file_short]["BG"]["Content"])
        n_intervals_mat = len(self.container_helper[var_type][var_file_short]["MAT"]["Content"])
        n_intervals_incl = 1

        if self.pysills_mode != "MA":
            n_intervals_incl = len(self.container_helper[var_type][var_file_short]["INCL"]["Content"])

        if len(list_categories) > 1 and stop_calculation == False:
            self.tv_results_quick = SE(
                parent=self.subwindow_ma_checkfile, row_id=0, column_id=14, n_rows=18, n_columns=38,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
                n_categories=len(list_categories), text_n=list_categories,
                width_n=list_width, individual=True)

            scb_v = ttk.Scrollbar(self.subwindow_ma_checkfile, orient="vertical")
            scb_h = ttk.Scrollbar(self.subwindow_ma_checkfile, orient="horizontal")
            self.tv_results_quick.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
            scb_v.config(command=self.tv_results_quick.yview)
            scb_h.config(command=self.tv_results_quick.xview)
            scb_v.grid(row=0, column=52, rowspan=18, columnspan=1, sticky="ns")
            scb_h.grid(row=18, column=14, rowspan=1, columnspan=38, sticky="ew")

            if var_is != "Select IS" and n_intervals_bg > 0 and n_intervals_mat > 0 and n_intervals_incl > 0:
                ## INITIALIZATION
                # Intensity-related parameters
                if var_type == "STD":
                    self.get_condensed_intervals_of_file(filetype=var_type, filename_short=var_file_short)
                    self.get_intensity(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
                    self.ma_get_concentration(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                else:
                    var_srm_file = None
                    for index, file_std_short in enumerate(self.container_lists["STD"]["Short"]):
                        self.get_condensed_intervals_of_file(filetype="STD", filename_short=file_std_short)
                        self.get_intensity(
                            var_filetype="STD", var_datatype="RAW", var_file_short=file_std_short, mode="Specific")

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        str_averagetype = "arithmetic mean"
                    else:
                        str_averagetype = "median"
                    IQ(dataframe=None, project_type=self.pysills_mode,
                       results_container=self.container_intensity_corrected["STD"]["RAW"]).get_averaged_intensities(
                        data_container=self.container_intensity_corrected["STD"]["RAW"], average_type=str_averagetype)

                    self.get_intensity(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")

                    self.ma_get_intensity_ratio(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file, var_focus="MAT")
                # Sensitivity-related parameters
                self.get_analytical_sensitivity(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                results_is = self.determine_possible_is(filetype="ALL")
                # Intensity Ratio
                IQ(dataframe=None, project_type=self.pysills_mode,
                   results_container=self.container_intensity_ratio[var_type]["RAW"]).get_intensity_ratio(
                    data_container=self.container_intensity_corrected[var_type]["RAW"], dict_is=results_is,
                    filename_short=var_file_short)

                if var_type == "SMPL":
                    self.ma_get_rsf(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file)
                # Concentration-related parameters
                self.ma_get_concentration(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                # Normalized Sensitivity
                SQ(dataframe_01=self.container_intensity_corrected[var_type]["RAW"][var_file_short],
                   dataframe_02=self.container_concentration[var_type]["RAW"][var_file_short],
                   results_container=self.container_normalized_sensitivity[var_type]["RAW"]).get_normalized_sensitivity(
                    filename_short=var_file_short, filetype=var_type,
                    data_sensitivity=self.container_analytical_sensitivity[var_type]["RAW"][var_file_short],
                    dict_is=results_is)

                if var_type == "SMPL":
                    self.ma_get_concentration_ratio(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file)

                self.ma_get_lod(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)

                entries_intensity_bg_i = ["Intensity BG"]
                entries_intensity_mat_i = ["Intensity SMPL"]
                entries_intensity_mat_sigma_i = ["Intensity 1 SIGMA SMPL"]
                entries_intensity_ratio_i = ["Intensity SMPL Ratio"]
                entries_analytical_sensitivity_i = ["Analytical Sensitivity"]
                entries_normalized_sensitivity_i = ["Normalized Sensitivity"]
                entries_rsf_i = ["Relative Sensitivity Factor"]
                entries_concentration_i = ["Concentration"]
                entries_concentration_sigma_i = ["Concentration 1 SIGMA SMPL"]
                entries_concentration_ratio_i = ["Concentration Ratio"]
                entries_lod_i = ["Limit of Detection"]
                entries_empty = [""]

                for isotope in list_considered_isotopes:
                    entries_empty.append("")
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    # Intensity Results
                    intensity_bg_i = self.container_intensity[var_type]["RAW"][var_file_short]["BG"][isotope]
                    intensity_mat_i = self.container_intensity_corrected[var_type]["RAW"][var_file_short]["MAT"][
                        isotope]
                    intensity_mat_sigma_i = self.container_intensity[var_type]["RAW"][var_file_short][
                        "1 SIGMA MAT"][isotope]

                    if isinstance(intensity_bg_i, np.floating) == False:
                        print(var_file_short, isotope, "BG:", intensity_bg_i)

                    if isinstance(intensity_mat_i, np.floating) == False:
                        print(var_file_short, isotope, "MAT:", intensity_mat_i)

                    if isinstance(intensity_mat_sigma_i, np.floating) == False:
                        print(var_file_short, isotope, "MAT:", intensity_mat_sigma_i)

                    # Sensitivity Results
                    analytical_sensitivity_i = self.container_analytical_sensitivity[var_type]["RAW"][var_file_short][
                        "MAT"][isotope]
                    normalized_sensitivity_i = self.container_normalized_sensitivity[var_type]["RAW"][var_file_short][
                        "MAT"][isotope]
                    # Concentration Results
                    concentration_i = self.container_concentration[var_type]["RAW"][var_file_short]["MAT"][isotope]
                    concentration_sigma_i = self.container_concentration[var_type]["RAW"][var_file_short][
                        "1 SIGMA MAT"][isotope]
                    lod_i = self.container_lod[var_type]["RAW"][var_file_short]["MAT"][isotope]

                    if var_type == "SMPL":
                        intensity_ratio_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short]["MAT"][
                            isotope]
                        rsf_i = self.container_rsf[var_type]["RAW"][var_file_short]["MAT"][isotope]
                        concentration_ratio_i = self.container_concentration_ratio[var_type]["RAW"][var_file_short][
                            "MAT"][isotope]
                    else:
                        intensity_ratio_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short]["MAT"][
                            isotope]

                    if var_srm_file == None or var_srm_file == var_srm_i:
                        entries_intensity_bg_i.append(f"{intensity_bg_i:.{4}f}")
                        entries_intensity_mat_i.append(f"{intensity_mat_i:.{4}f}")
                        entries_intensity_mat_sigma_i.append(f"{intensity_mat_sigma_i:.{4}f}")
                        entries_intensity_ratio_i.append(f"{intensity_ratio_i:.{4}E}")
                        entries_analytical_sensitivity_i.append(f"{analytical_sensitivity_i:.{4}f}")
                        entries_normalized_sensitivity_i.append(f"{normalized_sensitivity_i:.{4}f}")
                        if var_type == "SMPL":
                            entries_concentration_i.append(f"{concentration_i:.{4}f}")
                            entries_concentration_sigma_i.append(f"{concentration_sigma_i:.{4}f}")
                        else:
                            entries_concentration_i.append(f"{concentration_i:.{1}f}")
                            entries_concentration_sigma_i.append(f"{concentration_sigma_i:.{1}f}")
                        entries_lod_i.append(f"{lod_i:.{4}f}")
                    else:
                        entries_intensity_bg_i.append("---")
                        entries_intensity_mat_i.append("---")
                        entries_intensity_mat_sigma_i.append("---")
                        entries_analytical_sensitivity_i.append("---")
                        entries_normalized_sensitivity_i.append("---")
                        entries_concentration_i.append("---")
                        entries_concentration_sigma_i.append("---")
                        entries_lod_i.append("---")

                    if var_type == "SMPL":
                        entries_concentration_ratio_i.append(f"{concentration_ratio_i:.{4}E}")
                        entries_rsf_i.append(f"{rsf_i:.{4}f}")

                self.tv_results_quick.insert("", tk.END, values=entries_intensity_bg_i)
                self.tv_results_quick.insert("", tk.END, values=entries_intensity_mat_i)
                self.tv_results_quick.insert("", tk.END, values=entries_intensity_mat_sigma_i)
                self.tv_results_quick.insert("", tk.END, values=entries_intensity_ratio_i)
                self.tv_results_quick.insert("", tk.END, values=entries_empty)
                self.tv_results_quick.insert("", tk.END, values=entries_analytical_sensitivity_i)
                self.tv_results_quick.insert("", tk.END, values=entries_normalized_sensitivity_i)

                if var_type == "SMPL":
                    self.tv_results_quick.insert("", tk.END, values=entries_rsf_i)

                self.tv_results_quick.insert("", tk.END, values=entries_empty)
                self.tv_results_quick.insert("", tk.END, values=entries_concentration_i)
                self.tv_results_quick.insert("", tk.END, values=entries_concentration_sigma_i)

                if var_type == "SMPL":
                    self.tv_results_quick.insert("", tk.END, values=entries_concentration_ratio_i)

                self.tv_results_quick.insert("", tk.END, values=entries_lod_i)

    def ma_show_all_lines(self, var_type, var_file_short):
        if self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "RAW"][0].set_visible(True)
                self.container_var["ma_setting"]["Display RAW"][var_type][var_file_short][isotope].set(1)
        elif self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "SMOOTHED"][0].set_visible(True)
                self.container_var["ma_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(1)
        #
        self.canvas_specific.draw()

    #
    def ma_hide_all_lines(self, var_type, var_file_short):
        if self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "RAW"][0].set_visible(False)
                self.container_var["ma_setting"]["Display RAW"][var_type][var_file_short][isotope].set(0)
        elif self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "SMOOTHED"][0].set_visible(False)
                self.container_var["ma_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(0)
        #
        self.canvas_specific.draw()

    #
    def ma_change_line_visibility(self, var_type, var_file_short, var_datatype, var_isotope):
        var_key = "Display " + str(var_datatype)
        if self.container_var["ma_setting"][var_key][var_type][var_file_short][var_isotope].get() == 1:
            self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                var_datatype][
                0].set_visible(True)
        elif self.container_var["ma_setting"][var_key][var_type][var_file_short][var_isotope].get() == 0:
            self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                var_datatype][
                0].set_visible(False)
        #
        self.canvas_specific.draw()
    #
    def ma_add_interval_to_diagram(self, var_type, var_file_short, event):
        if self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:  # BG
            var_key = "BG"
            var_color = self.colors_intervals[var_key]
        elif self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1:  # MAT
            var_key = "MAT"
            var_color = self.colors_intervals[var_key]

        if self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() in [0, 1, 2]:
            x_nearest = min(self.dataset_time, key=lambda x: abs(x - event.xdata))

            if len(self.helper_intervals[var_key]) < 1:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
            else:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
                key_id = self.container_helper[var_type][var_file_short][var_key]["ID"] + 1
                time_0 = self.helper_intervals[var_key][0][0]
                time_1 = self.helper_intervals[var_key][1][0]
                index_0 = self.helper_intervals[var_key][0][1]
                index_1 = self.helper_intervals[var_key][1][1]

                box_key = self.container_helper[var_type][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.35, color=var_color)
                self.canvas_specific.draw()

                self.container_helper[var_type][var_file_short][var_key]["Content"][key_id] = {
                    "Times": [time_0, time_1], "Indices": [index_0, index_1], "Object": box_key}

                self.container_helper[var_type][var_file_short][var_key]["Listbox"].insert(
                    tk.END, var_key + str(key_id) + " [" + str(self.helper_intervals[var_key][0][0]) + "-" +
                            str(self.helper_intervals[var_key][1][0]) + "]")

                self.helper_intervals[var_key].clear()
                self.container_helper[var_type][var_file_short][var_key]["ID"] = key_id
                self.container_helper[var_type][var_file_short][var_key]["Indices"].append(key_id)

                self.canvas_specific.draw()

    def ma_change_interval_visibility(self, var_key, var_type, var_file_short):
        if self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
            var_key].get() == 0:
            var_state = False
        else:
            var_state = True
        #
        for var_id, var_content in self.container_helper[var_type][var_file_short][var_key]["Content"].items():
            var_content["Object"].set_visible(var_state)
        #
        self.canvas_specific.draw()
    #
    def ma_remove_interval(self, var_type, var_file_short):
        if self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:
            var_key = "BG"
        elif self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1:
            var_key = "MAT"
        #
        var_lb = self.container_helper[var_type][var_file_short][var_key]["Listbox"]
        #
        item = self.container_helper[var_type][var_file_short][var_key]["Listbox"].curselection()[0]
        value = var_lb.get(item)
        value_parts = value.split(" ")
        key_id = re.search("(\D+)(\d+)", value_parts[0])
        var_id = int(key_id.group(2))

        self.container_helper[var_type][var_file_short][var_key]["Indices"].remove(var_id)
        var_lb.delete(tk.ANCHOR)
        self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]["Object"].set_visible(False)
        del self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]
        #
        self.canvas_specific.draw()
    #
    def ma_set_bg_interval(self, var_entr, var_key, mode, var_interval, event):
        if mode == "default":
            time = var_entr.get()
            time = time.replace(",", ".")
            if self.pysills_mode in ["FI", "MI"]:
                if var_interval == "MAT":
                    list_filetypes = ["STD"]
                else:
                    list_filetypes = ["STD", "SMPL"]
            else:
                list_filetypes = ["STD", "SMPL"]
            for var_type in list_filetypes:
                for var_file in self.container_lists[var_type]["Long"]:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_data = DE(filename_long=var_file).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_data = DE(filename_long=var_file).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                    dataset_time = list(DE().get_times(dataframe=df_data))
                    var_file_short = var_file.split("/")[-1]

                    if 1 not in self.container_helper[var_type][var_file_short][var_interval]["Content"]:
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1] = {
                            "Times": [None, None], "Indices": [None, None], "Object": None}
                        self.container_helper[var_type][var_file_short][var_interval]["ID"] += 1
                        self.container_helper[var_type][var_file_short][var_interval]["Indices"].append(1)

                    x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
                    if var_key == "Start":
                        var_entr.set("Start value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Times"][
                            0] = var_time
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Indices"][
                            0] = var_index
                    elif var_key == "End":
                        var_entr.set("End value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)

                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Times"][
                            1] = var_time
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Indices"][
                            1] = var_index
                        if self.pysills_mode == "MA":
                            self.temp_lines_checkup2[var_type][var_file_short] = 0
                            self.show_time_signal_diagram_checker(var_setting_key="ma_setting")
                        elif self.pysills_mode == "FI":
                            self.temp_lines_checkup2[var_type][var_file_short] = 0
                            self.show_time_signal_diagram_checker(var_setting_key="fi_setting")
                        elif self.pysills_mode == "MI":
                            self.temp_lines_checkup2[var_type][var_file_short] = 0
                            self.show_time_signal_diagram_checker(var_setting_key="mi_setting")
                        # self.temp_lines_checkup2[var_type][var_file_short] = 0
                        # self.show_time_signal_diagram_checker(var_setting_key=var_setting_key)
        elif mode in self.container_lists["STD"]["Long"]:
            var_file = mode
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
            dataset_time = list(DE().get_times(dataframe=df_data))
            var_file_short = var_file.split("/")[-1]

            if self.container_var["ma_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["ma_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 1:
                var_category = "MAT"

            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)

            current_id = self.container_helper["STD"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["STD"][var_file_short][var_category]["Content"]:
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["STD"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["STD"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    0] = var_index
            elif var_key == "End":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    1] = var_index
                #
                time_0 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["STD"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["STD"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
            #
        elif mode in self.container_lists["SMPL"]["Long"]:
            var_file = mode
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
            dataset_time = list(DE().get_times(dataframe=df_data))
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 1:
                var_category = "MAT"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["SMPL"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["SMPL"][var_file_short][var_category]["Content"]:
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["SMPL"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["SMPL"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][
                    0] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    0] = var_index
            elif var_key == "End":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][
                    1] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    1] = var_index
                #
                time_0 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["SMPL"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["SMPL"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
    #
    def ma_datareduction_tables(self, init=False): # MA - data reduction tables #######################
        ## Initialization
        if init == True:
            for var_filetype in ["STD", "SMPL"]:
                for var_file_short in self.container_lists[var_filetype]["Short"]:
                    self.get_condensed_intervals_of_file(filetype=var_filetype, filename_short=var_file_short)
            var_filetype = "None"
            var_file_short = "None"
            var_file_long = "None"
            var_focus = "None"
            self.var_init_ma_datareduction = True

            list_is = {"STD": [], "SMPL": []}
            for str_filename_long in self.container_lists["SMPL"]["Long"]:
                str_is = self.container_var["SMPL"][str_filename_long]["IS Data"]["IS"].get()
                if str_is not in list_is["SMPL"]:
                    list_is["SMPL"].append(str_is)

            for var_datatype in ["RAW", "SMOOTHED"]:
                # Intensity Analysis
                self.get_intensity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_focus=var_focus, mode="All")

                if self.container_var["General Settings"]["Desired Average"].get() == 1:
                    str_averagetype = "arithmetic mean"
                else:
                    str_averagetype = "median"

                IQ(dataframe=None, project_type=self.pysills_mode,
                   results_container=self.container_intensity_corrected["STD"][var_datatype]).get_averaged_intensities(
                    data_container=self.container_intensity_corrected["STD"][var_datatype],
                    average_type=str_averagetype)

                self.ma_get_intensity_ratio(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                # Sensitivity Analysis
                self.get_analytical_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                results_is = self.determine_possible_is(filetype="ALL")
                IQ(dataframe=None, project_type=self.pysills_mode,
                   results_container=self.container_intensity_ratio).get_intensity_ratio(
                    data_container=self.container_intensity_corrected, dict_is=results_is, datatype=var_datatype)
                self.ma_get_rsf(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                # Compositional Analysis
                self.ma_get_concentration(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                SQ(dataframe_01=self.container_intensity_corrected, dataframe_02=self.container_concentration,
                       results_container=self.container_normalized_sensitivity).get_normalized_sensitivity(
                    datatype=var_datatype, data_sensitivity=self.container_analytical_sensitivity, dict_is=results_is)
                self.ma_get_concentration_ratio(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.ma_get_lod(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")

        if self.container_var["ma_datareduction_files"]["File Type"].get() == 0:
            var_filetype = "STD"
            self.rb_conc_ratio.configure(state="disabled")
            self.rb_int_ratio.configure(state="disabled")
            self.rb_rsf.configure(state="disabled")
            self.rb_lod.configure(state="disabled")
            if self.container_var["ma_datareduction_files"]["Result Category"].get() not in [0, 3, 5, 6]:
                self.container_var["ma_datareduction_files"]["Result Category"].set(0)
        elif self.container_var["ma_datareduction_files"]["File Type"].get() == 1:
            var_filetype = "SMPL"
            self.rb_conc_ratio.configure(state="normal")
            self.rb_int_ratio.configure(state="normal")
            self.rb_rsf.configure(state="normal")
            self.rb_lod.configure(state="normal")

        if self.container_var["ma_datareduction_files"]["Data Type"].get() == 0:
            var_datatype = "RAW"
        elif self.container_var["ma_datareduction_files"]["Data Type"].get() == 1:
            var_datatype = "SMOOTHED"

        if self.container_var["ma_datareduction_files"]["Focus"].get() == 0:
            var_focus = "MAT"

        var_id = self.container_var["ID"]["Results Files"].get()

        if len(self.tv_results_files.get_children()) > 0:
            for item in self.tv_results_files.get_children():
                self.tv_results_files.delete(item)

        helper_values = {}
        helper_separator = ["-"]
        for isotope in self.container_lists["ISOTOPES"]:
            if isotope not in helper_values:
                helper_values[isotope] = []
                helper_separator.append("-")
        #
        if self.container_var["ma_datareduction_files"]["Result Category"].get() == 0:  # Concentrations
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                try:
                                    value = self.container_concentration[var_filetype][var_datatype][file_short][
                                        var_focus][isotope]
                                    value_lod_i = self.container_lod[var_filetype][var_datatype][file_short][var_focus][
                                        isotope]

                                    if value >= value_lod_i:
                                        if var_filetype == "SMPL":
                                            n_digits = self.ma_determine_ndigits(var_value=value)
                                        else:
                                            n_digits = 1
                                        entries_category.append(f"{value:.{n_digits}f}")
                                        helper_values[isotope].append(value)
                                    else:
                                        entries_category.append("< LoD")
                                except:
                                    entries_category.append(None)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 1:  # Concentration Ratios
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_concentration_ratio[var_filetype][var_datatype][file_short][
                                    var_focus][isotope]
                                entries_category.append(f"{value:.{4}E}")
                                helper_values[isotope].append(value)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values, ratio=True)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 2:  # LoDs
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_lod[var_filetype][var_datatype][file_short][var_focus][isotope]
                                n_digits = self.ma_determine_ndigits(var_value=value)
                                entries_category.append(f"{value:.{n_digits}f}")
                                helper_values[isotope].append(value)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 3:  # Intensities (corrected)
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_intensity_corrected[var_filetype][var_datatype][file_short][
                                    var_focus][isotope]
                                n_digits = self.ma_determine_ndigits(var_value=value)
                                entries_category.append(f"{value:.{n_digits}f}")
                                helper_values[isotope].append(value)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 4:  # Intensity Ratios
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_intensity_ratio[var_filetype][var_datatype][file_short][
                                    var_focus][isotope]
                                entries_category.append(f"{value:.{4}E}")
                                helper_values[isotope].append(value)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values, ratio=True)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 5:  # Analytical Sensitivities
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                        var_is_file = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var[var_filetype][var_file_long]["SRM"].get()
                        var_is_file = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_analytical_sensitivity[var_filetype][var_datatype][file_short][
                                    var_focus][isotope]
                                n_digits = self.ma_determine_ndigits(var_value=value)
                                entries_category.append(f"{value:.{n_digits}f}")
                                helper_values[isotope].append(value)
                            else:
                                value_is = self.container_analytical_sensitivity["STD"][var_datatype][file_short][
                                    "MAT"][isotope]
                                if value_is == 1:
                                    value = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                        file_short][var_focus][isotope]
                                    n_digits = self.ma_determine_ndigits(var_value=value)
                                    entries_category.append(f"{value:.{n_digits}f}")
                                    helper_values[isotope].append(value)
                                else:
                                    entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 6:  # Normalized Sensitivities
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short][
                                    var_focus][isotope]
                                n_digits = self.ma_determine_ndigits(var_value=value)
                                entries_category.append(f"{value:.{n_digits}f}")
                                helper_values[isotope].append(value)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 7:  # RSFs
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                        var_srm_file = None
                    else:
                        var_id_i = None
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_file == None or var_srm_file == var_srm_i:
                                value = self.container_rsf[var_filetype][var_datatype][file_short][var_focus][isotope]
                                entries_category.append(f"{value:.{4}E}")
                                helper_values[isotope].append(value)
                            else:
                                entries_category.append("---")

                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values, ratio=True)

    def determine_possible_is(self, filetype="SMPL"):
        """ Collect the file-specific information about the internal standard (IS).
        -------
        Parameters
        filetype : str
            The file category, e.g. STD
        -------
        Returns
        helper_is : dict
            A dictionary that contains the file-specific information about the internal standard.
        -------
        """
        helper_is = {"STD": {}, "SMPL": {}}

        if filetype == "STD":
            for index, filename_long in enumerate(self.container_lists[filetype]["Long"]):
                filename_short = self.container_lists[filetype]["Short"][index]
                isotope_is = self.container_var[filetype][filename_long]["IS Data"]["IS"].get()
                helper_is[filetype][filename_short] = isotope_is
        elif filetype == "SMPL":
            for index, filename_long in enumerate(self.container_lists[filetype]["Long"]):
                filename_short = self.container_lists[filetype]["Short"][index]
                isotope_is = self.container_var[filetype][filename_long]["IS Data"]["IS"].get()
                helper_is[filetype][filename_short] = isotope_is
        elif filetype == "ALL":
            for filetype_key in ["STD", "SMPL"]:
                for index, filename_long in enumerate(self.container_lists[filetype_key]["Long"]):
                    filename_short = self.container_lists[filetype_key]["Short"][index]
                    isotope_is = self.container_var[filetype_key][filename_long]["IS Data"]["IS"].get()
                    helper_is[filetype_key][filename_short] = isotope_is

        return helper_is

    def ma_determine_ndigits(self, var_value):
        trunc_value = math.trunc(var_value)

        if len(str(trunc_value)) >= 9:
            n_digits = 0
        elif len(str(trunc_value)) >= 8:
            n_digits = 1
        elif len(str(trunc_value)) >= 7:
            n_digits = 2
        elif len(str(trunc_value)) >= 6:
            n_digits = 3
        else:
            n_digits = 4

        return n_digits

    def ma_calculate_statistics_table(self, var_data, ratio=False):
        entries_mean = ["Arithmetic Mean"]
        entries_std = ["Standard Deviation"]
        entries_chrg = ["Charge"]
        for isotope in self.container_lists["Measured Isotopes"]["All"]:
            if self.container_var["General Settings"]["Desired Average"].get() == 1:
                value = np.mean(var_data[isotope])
            else:
                value = np.median(var_data[isotope])

            var_charge_complete = self.container_var["charge"][isotope]["textvar"].get()
            var_charge = var_charge_complete[:2]
            if len(var_data[isotope]) > 1:
                value_std = np.std(var_data[isotope], ddof=1)
            else:
                value_std = 0.0
            if len(var_data[isotope]) > 0:
                n_digits = self.ma_determine_ndigits(var_value=value)
                n_digits_std = self.ma_determine_ndigits(var_value=value_std)
                #
                if ratio == False:
                    entries_mean.append(f"{value:.{n_digits}f}")
                    entries_std.append(f"{value_std:.{n_digits_std}f}")
                else:
                    entries_mean.append(f"{value:.{4}E}")
                    entries_std.append(f"{value_std:.{4}E}")
                entries_chrg.append(var_charge)
            else:
                entries_mean.append("---")
                entries_std.append("---")
                entries_chrg.append("---")
            #
        self.tv_results_files.insert("", tk.END, values=entries_mean)
        self.tv_results_files.insert("", tk.END, values=entries_std)
        self.tv_results_files.insert("", tk.END, values=entries_chrg)

    ####################
    ## Data Reduction ##
    ####################

    def get_intensity(self, var_filetype, var_datatype, var_file_short, var_focus=None, mode="Specific", check=False):
        """ Collect the signal intensities from all defined calculation intervals.
        -------
        Parameters
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_focus : str
            The signal section of interest, e.g. the background or inclusion signal
        mode : str
            It specifies if the data reduction has to be done for all files or only one specific file
        check : boolean
            It defines if a check-up has to be run after the data reduction
        -------
        Returns
        -------
        """
        if mode == "Specific" and var_focus == None:
            self.get_condensed_intervals_of_file(filetype=var_filetype, filename_short=var_file_short)
            condensed_intervals_bg = self.container_var[var_filetype][var_file_short]["Intervals"]["BG"]
            condensed_intervals_mat = self.container_var[var_filetype][var_file_short]["Intervals"]["MAT"]
            str_datakey = "Data " + str(var_datatype)

            if self.pysills_mode in ["FI", "MI"]:
                condensed_intervals_incl = self.container_var[var_filetype][var_file_short]["Intervals"]["INCL"]
            else:
                condensed_intervals_incl = None

            if self.container_var["General Settings"]["Desired Average"].get() == 1:
                str_averagetype = "arithmetic mean"
            else:
                str_averagetype = "median"

            if self.container_var["General Settings"]["Interval Processing"].get() == 1:
                bool_intervalstack = False
            else:
                bool_intervalstack = True

            IQ(dataframe=self.container_spikes[var_file_short], project_type=self.pysills_mode,
               results_container=self.container_intensity[var_filetype][var_datatype][
                   var_file_short]).get_intensity(
                interval_bg=condensed_intervals_bg, interval_min=condensed_intervals_mat,
                interval_incl=condensed_intervals_incl, data_key=str_datakey, average_type=str_averagetype,
                stack_intervals=bool_intervalstack)

            if self.pysills_mode == "FI":
                mode_id = self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get()
                if var_filetype == "SMPL":
                    var_index = self.container_lists[var_filetype]["Short"].index(var_file_short)
                    var_file_long = self.container_lists[var_filetype]["Long"][var_index]

                    if self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                        var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                    elif self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                        var_t = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
                    elif self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                        var_t = self.container_var["Halter2002"]["Name"].get()
                    elif self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                        var_t = self.container_var["Borisova2021"]["Name"].get()

                    IQ(dataframe=None, project_type=self.pysills_mode,
                       results_container=self.container_intensity_corrected[var_filetype][var_datatype][
                           var_file_short]).get_intensity_corrected(
                        data_container=self.container_intensity[var_filetype][var_datatype][var_file_short],
                        mode=mode_id, isotope_t=var_t)
            elif self.pysills_mode == "MI":
                mode_id = self.container_var["mi_setting"]["Inclusion Intensity Calculation"].get()

                if var_filetype == "SMPL":
                    var_index = self.container_lists[var_filetype]["Short"].index(var_file_short)
                    var_file_long = self.container_lists[var_filetype]["Long"][var_index]

                    if self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                        var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                    elif self.container_var["mi_setting"][
                        "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                        var_t = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
                    elif self.container_var["mi_setting"][
                        "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                        var_t = self.container_var["Halter2002"]["Name"].get()
                    elif self.container_var["mi_setting"][
                        "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                        var_t = self.container_var["Borisova2021"]["Name"].get()

                    IQ(dataframe=None, project_type=self.pysills_mode,
                       results_container=self.container_intensity_corrected[var_filetype][var_datatype][
                           var_file_short]).get_intensity_corrected(
                        data_container=self.container_intensity[var_filetype][var_datatype][var_file_short],
                        mode=mode_id, isotope_t=var_t)
            else:
                IQ(dataframe=None, project_type=self.pysills_mode,
                   results_container=self.container_intensity_corrected[var_filetype][var_datatype][
                       var_file_short]).get_intensity_corrected(
                    data_container=self.container_intensity[var_filetype][var_datatype][var_file_short])
        else:
            # Alternative
            time_start = datetime.datetime.now()

            if var_focus == "STD":
                list_filetypes = ["STD"]
            elif var_focus == "SMPL":
                list_filetypes = ["SMPL"]
            else:
                list_filetypes = ["STD", "SMPL"]

            for var_filetype in list_filetypes:
                for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                    if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                        var_file_short = self.container_lists[var_filetype]["Short"][index]

                        self.get_condensed_intervals_of_file(filetype=var_filetype, filename_short=var_file_short)
                        condensed_intervals_bg = self.container_var[var_filetype][var_file_short]["Intervals"]["BG"]
                        condensed_intervals_mat = self.container_var[var_filetype][var_file_short]["Intervals"]["MAT"]

                        if var_filetype == "SMPL":
                            var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                            var_id_selected = self.container_var["ID"]["Results Files"].get()
                            if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                condensed_intervals_bg = self.container_var[var_filetype][var_file_short]["Intervals"][
                                    "BG"]
                                condensed_intervals_mat = self.container_var[var_filetype][var_file_short]["Intervals"][
                                    "MAT"]
                                str_datakey = "Data " + str(var_datatype)

                                if self.pysills_mode in ["FI", "MI"]:
                                    condensed_intervals_incl = self.container_var[var_filetype][var_file_short][
                                        "Intervals"]["INCL"]
                                else:
                                    condensed_intervals_incl = None

                                if self.container_var["General Settings"]["Desired Average"].get() == 1:
                                    str_averagetype = "arithmetic mean"
                                else:
                                    str_averagetype = "median"

                                if self.container_var["General Settings"]["Interval Processing"].get() == 1:
                                    bool_intervalstack = False
                                else:
                                    bool_intervalstack = True

                                IQ(dataframe=self.container_spikes[var_file_short], project_type=self.pysills_mode,
                                   results_container=self.container_intensity[var_filetype][var_datatype][
                                       var_file_short]).get_intensity(
                                    interval_bg=condensed_intervals_bg, interval_min=condensed_intervals_mat,
                                    interval_incl=condensed_intervals_incl, data_key=str_datakey,
                                    average_type=str_averagetype,
                                    stack_intervals=bool_intervalstack)
                        else:
                            condensed_intervals_bg = self.container_var[var_filetype][var_file_short]["Intervals"][
                                "BG"]
                            condensed_intervals_mat = self.container_var[var_filetype][var_file_short]["Intervals"][
                                "MAT"]
                            str_datakey = "Data " + str(var_datatype)

                            if self.pysills_mode in ["FI", "MI"]:
                                condensed_intervals_incl = self.container_var[var_filetype][var_file_short][
                                    "Intervals"]["INCL"]
                            else:
                                condensed_intervals_incl = None

                            if self.container_var["General Settings"]["Desired Average"].get() == 1:
                                str_averagetype = "arithmetic mean"
                            else:
                                str_averagetype = "median"

                            if self.container_var["General Settings"]["Interval Processing"].get() == 1:
                                bool_intervalstack = False
                            else:
                                bool_intervalstack = True

                            IQ(dataframe=self.container_spikes[var_file_short], project_type=self.pysills_mode,
                               results_container=self.container_intensity[var_filetype][var_datatype][
                                   var_file_short]).get_intensity(
                                interval_bg=condensed_intervals_bg, interval_min=condensed_intervals_mat,
                                interval_incl=condensed_intervals_incl, data_key=str_datakey,
                                average_type=str_averagetype,
                                stack_intervals=bool_intervalstack)

                        if self.pysills_mode == "FI":
                            mode_id = self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get()
                            if var_filetype == "SMPL":
                                var_index = self.container_lists[var_filetype]["Short"].index(var_file_short)
                                var_file_long = self.container_lists[var_filetype]["Long"][var_index]

                                if self.container_var["fi_setting"][
                                    "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                                    var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                                elif self.container_var["fi_setting"][
                                    "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                                    var_t = self.container_var["SMPL"][var_file_long]["Second Internal Standard"][
                                        "Name"].get()
                                elif self.container_var["fi_setting"][
                                    "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                                    var_t = self.container_var["Halter2002"]["Name"].get()
                                elif self.container_var["fi_setting"][
                                    "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                                    var_t = self.container_var["Borisova2021"]["Name"].get()

                                IQ(dataframe=None, project_type=self.pysills_mode,
                                   results_container=self.container_intensity_corrected[var_filetype][var_datatype][
                                       var_file_short]).get_intensity_corrected(
                                    data_container=self.container_intensity[var_filetype][var_datatype][var_file_short],
                                    mode=mode_id, isotope_t=var_t)
                        elif self.pysills_mode == "MI":
                            mode_id = self.container_var["mi_setting"]["Inclusion Intensity Calculation"].get()

                            if var_filetype == "SMPL":
                                var_index = self.container_lists[var_filetype]["Short"].index(var_file_short)
                                var_file_long = self.container_lists[var_filetype]["Long"][var_index]

                                if self.container_var["fi_setting"][
                                    "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                                    var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                                elif self.container_var["mi_setting"][
                                    "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                                    var_t = self.container_var["SMPL"][var_file_long]["Second Internal Standard"][
                                        "Name"].get()
                                elif self.container_var["mi_setting"][
                                    "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                                    var_t = self.container_var["Halter2002"]["Name"].get()
                                elif self.container_var["mi_setting"][
                                    "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                                    var_t = self.container_var["Borisova2021"]["Name"].get()

                                IQ(dataframe=None, project_type=self.pysills_mode,
                                   results_container=self.container_intensity_corrected[var_filetype][var_datatype][
                                       var_file_short]).get_intensity_corrected(
                                    data_container=self.container_intensity[var_filetype][var_datatype][var_file_short],
                                    mode=mode_id, isotope_t=var_t)
                        else:
                            IQ(dataframe=None, project_type=self.pysills_mode,
                               results_container=self.container_intensity_corrected[var_filetype][var_datatype][
                                   var_file_short]).get_intensity_corrected(
                                data_container=self.container_intensity[var_filetype][var_datatype][var_file_short])

            time_end = datetime.datetime.now()
            time_delta = (time_end - time_start)*1000
            print(f"Taken time: {time_delta.total_seconds()} ms")

        ## CHECK
        if check == True:
            for key_01, item_01 in self.container_intensity.items():
                print("Filetype:", key_01)
                for key_02, item_02 in item_01.items():
                    print("Datatype:", key_02)
                    print(item_02)

    def get_condensed_intervals_of_file(self, filetype, filename_short):
        """ Collect the valid and condensed intervals for BG, MAT and INCL of a file.
        -------
        Parameters
        filetype : str
            The file category, e.g. STD
        filename_short : str
            The file as a short version (without the complete filepath)
        -------
        Returns
        -------
        """
        if self.pysills_mode == "MA":
            list_focus = ["BG", "MAT"]
        else:
            list_focus = ["BG", "MAT", "INCL"]

        for focus in list_focus:
            condensed_intervals = IQ(dataframe=None).combine_all_intervals(
                interval_set=self.container_helper[filetype][filename_short][focus]["Content"])

            if filename_short not in self.container_var[filetype]:
                self.container_var[filetype][filename_short] = {}

            if "Intervals" not in self.container_var[filetype][filename_short]:
                self.container_var[filetype][filename_short]["Intervals"] = {}

            if focus not in self.container_var[filetype][filename_short]["Intervals"]:
                self.container_var[filetype][filename_short]["Intervals"][focus] = None

            self.container_var[filetype][filename_short]["Intervals"][focus] = condensed_intervals

    def ma_get_intensity_corrected(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

            for isotope in file_isotopes:
                var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][isotope]
                var_intensity_mat_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope]
                var_result = var_intensity_mat_i - var_intensity_bg_i

                if var_result < 0:
                    var_result = 0.0
                self.container_intensity_corrected[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope] = var_result

        elif mode == "only STD":
            for var_filetype in ["STD"]:
                for var_focus in ["MAT"]:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}

                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        var_srm_i = self.container_var["SRM"][isotope].get()

                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()

                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

                                if isotope in file_isotopes and var_srm_i == var_srm_file:
                                    self.ma_get_intensity_corrected(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)

                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

                                if isotope in file_isotopes:
                                    if var_filetype == "SMPL":
                                        var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                        var_id_selected = self.container_var["ID"]["Results Files"].get()

                                        if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                            self.ma_get_intensity_corrected(
                                                var_filetype=var_filetype, var_datatype=var_datatype,
                                                var_file_short=var_file_short, var_file_long=var_file_long)
                                            var_result_i = self.container_intensity_corrected[var_filetype][
                                                var_datatype][var_file_short][var_focus][isotope]
                                            helper_results.append(var_result_i)

                                    else:
                                        self.ma_get_intensity_corrected(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short,
                                            var_file_long=var_file_long)
                                        var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                            var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i

    def ma_get_intensity_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus, 
                                    mode="Specific"):
        if mode == "Specific":
            if var_filetype == "STD":
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            elif var_filetype == "SMPL":
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()

            if var_focus == "MAT":
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            else:
                var_intensity_is = self.container_intensity[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]

            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                if var_focus == "MAT":
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                else:
                    var_intensity_i = self.container_intensity[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]

                var_result = var_intensity_i/var_intensity_is
                self.container_intensity_ratio[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result

        else:
            for var_filetype in ["SMPL"]:
                for var_focus in ["BG", "MAT"]:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []

                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    if var_filetype == "SMPL":
                                        var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                        var_id_selected = self.container_var["ID"]["Results Files"].get()

                                        if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                            self.ma_get_intensity_ratio(
                                                var_filetype=var_filetype, var_datatype=var_datatype,
                                                var_file_short=var_file_short, var_file_long=var_file_long,
                                                var_focus=var_focus)
                                            var_result_i = self.container_intensity_ratio[var_filetype][var_datatype][
                                                var_file_short][var_focus][isotope]
                                            helper_results.append(var_result_i)
                                    else:
                                        self.ma_get_intensity_ratio(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long, var_focus=var_focus)
                                        var_result_i = self.container_intensity_ratio[var_filetype][var_datatype][
                                            var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)

                        self.container_intensity_ratio[var_filetype][var_datatype][isotope] = var_result_i

    def ma_get_normalized_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long,
                                           mode="Specific"):
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                if var_filetype == "STD":
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element in self.srm_actual[var_srm_i]:
                        var_concentration_i = self.srm_actual[var_srm_i][element]
                        var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        var_result_i = var_intensity_i/var_concentration_i
                    else:
                        var_result_i = 0.0
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                else:
                    sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                 "Concentration"].get())
                    var_result_i = sensitivity_i*(intensity_is/concentration_is)
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []

                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    if var_filetype == "SMPL":
                                        var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                        var_id_selected = self.container_var["ID"]["Results Files"].get()

                                        if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                            self.ma_get_normalized_sensitivity(
                                                var_filetype=var_filetype, var_datatype=var_datatype,
                                                var_file_short=var_file_short, var_file_long=var_file_long)
                                            var_result_i = self.container_normalized_sensitivity[var_filetype][
                                                var_datatype][var_file_short][var_focus][isotope]
                                            helper_results.append(var_result_i)
                                    else:
                                        self.ma_get_normalized_sensitivity(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_normalized_sensitivity[var_filetype][
                                            var_datatype][var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_normalized_sensitivity[var_filetype][var_datatype][isotope] = var_result_i
    #
    def get_analytical_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific",
                                      var_is_smpl=None):
        """ Calculates the analytical sensitivity of isotope i with respect to the internal standard IS.
        -------
        Parameters
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as a long version (including the complete filepath)
        var_focus : str
            The signal section of interest, e.g. the background or inclusion signal
        mode : str
            It specifies if the data reduction has to be done for all files or only one specific file
        var_is_smpl : str
            It defines the internal standard of a sample file
        -------
        Returns
        -------
        """
        if mode == "Specific":
            if var_filetype == "STD":
                var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                if var_is_smpl == None:
                    for element, value in sorted(
                            self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                        if element in self.container_lists["Measured Elements"][var_file_short]:
                            var_is = self.container_lists["Measured Elements"][var_file_short][element][0]
                        break
                else:
                    var_is = var_is_smpl
                key_element_is = re.search("(\D+)(\d+)", var_is)
                element_is = key_element_is.group(1)
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].set(var_is)

                for isotope in file_isotopes:
                    var_srm_i = self.container_var["SRM"][isotope].get()

                    if var_srm_i == var_srm_file:
                        if element_is in self.srm_actual[var_srm_i]:
                            var_concentration_is = self.srm_actual[var_srm_i][element_is]
                        else:
                            var_concentration_is = 0.0

                        key_element = re.search("(\D+)(\d+)", isotope)
                        element = key_element.group(1)
                        if element in self.srm_actual[var_srm_i]:
                            var_concentration_i = self.srm_actual[var_srm_i][element]
                            var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_result_i = (var_intensity_i/var_intensity_is)*(var_concentration_is/var_concentration_i)
                        else:
                            var_result_i = 0.0
                        self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
                        if var_is_smpl != None:
                            var_result_is = 1.0
                            self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                                var_is] = var_result_is
            else:
                self.calculate_acquisition_time_deltas()
                xi_opt = {}
                xi_std_helper = {}
                list_valid_std = []
                list_valid_isotopes = []
                var_is_smpl = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                file_isotopes_smpl = self.container_lists["Measured Isotopes"][var_file_short]

                list_delta_std_i = []
                list_xi_std_i = {}
                for index, file_std in enumerate(self.container_lists["STD"]["Long"]):
                    file_std_short = self.container_lists["STD"]["Short"][index]
                    file_isotopes = self.container_lists["Measured Isotopes"][file_std_short]
                    var_srm_file = self.container_var["STD"][file_std]["SRM"].get()
                    if self.container_var["STD"][file_std]["Checkbox"].get() == 1:
                        self.get_analytical_sensitivity(
                            var_filetype="STD", var_datatype=var_datatype, var_file_short=file_std_short,
                            var_file_long=file_std, var_is_smpl=var_is_smpl)
                        xi_std_helper[file_std_short] = {}
                        delta_std_i = self.container_lists["Acquisition Times Delta"][file_std_short]
                        list_delta_std_i.append(delta_std_i)

                        for isotope in file_isotopes:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if isotope not in list_xi_std_i:
                                list_xi_std_i[isotope] = []
                            if var_srm_i == var_srm_file:
                                if isotope not in list_valid_isotopes:
                                    list_valid_isotopes.append(isotope)

                                if file_std_short not in list_valid_std:
                                    list_valid_std.append(file_std_short)

                                if isotope not in xi_opt:
                                    xi_opt[isotope] = []

                                #if isotope not in list_xi_std_i:
                                #    list_xi_std_i[isotope] = []

                                sensitivity_i = self.container_analytical_sensitivity["STD"][var_datatype][
                                    file_std_short]["MAT"][isotope]
                                list_xi_std_i[isotope].append(sensitivity_i)

                                xi_std_helper[file_std_short][isotope] = [delta_std_i, sensitivity_i]
                            else:
                                list_xi_std_i[isotope].append(None)

                for isotope in file_isotopes_smpl:
                    a_i, b_i = self.calculate_linar_regression(
                        x_values=list_delta_std_i, y_values=list_xi_std_i[isotope])
                    a_i = round(a_i, 12)
                    b_i = round(b_i, 12)
                    xi_regr = [b_i, a_i]
                    # xi_regr = self.calculate_regression(
                    #     data=xi_std_helper, isotope=isotope, file_data=list_valid_std)
                    xi_opt[isotope].extend(xi_regr)

                delta_i = self.container_lists["Acquisition Times Delta"][var_file_short]

                for isotope in file_isotopes_smpl:
                    var_result_i = xi_opt[isotope][0]*delta_i + xi_opt[isotope][1]
                    self.container_lists["Analytical Sensitivity Regression"][isotope] = {
                        "a": xi_opt[isotope][0], "b": xi_opt[isotope][1]}
                    if var_datatype == "RAW":
                        self.container_lists["Analytical Sensitivity Regression RAW"][isotope] = {
                            "a": xi_opt[isotope][0], "b": xi_opt[isotope][1]}
                    elif var_datatype == "SMOOTHED":
                        self.container_lists["Analytical Sensitivity Regression SMOOTHED"][isotope] = {
                            "a": xi_opt[isotope][0], "b": xi_opt[isotope][1]}
                    self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        var_srm_i = self.container_var["SRM"][isotope].get()
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                var_id_selected = self.container_var["ID"]["Results Files"].get()
                                if (self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1
                                        and var_id ==var_id_selected):
                                    if var_filetype == "STD":
                                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                                        if var_srm_i == var_srm_file or self.var_init_ma_datareduction == True:
                                            self.get_analytical_sensitivity(
                                                var_filetype=var_filetype, var_datatype=var_datatype,
                                                var_file_short=var_file_short, var_file_long=var_file_long,
                                                var_is_smpl=var_is_smpl)
                                            var_result_i = self.container_analytical_sensitivity[var_filetype][
                                                var_datatype][var_file_short][var_focus][isotope]
                                            helper_results.append(var_result_i)
                                    else:
                                        self.get_analytical_sensitivity(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                            var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)

                        self.container_analytical_sensitivity[var_filetype][var_datatype][isotope] = var_result_i

    def ma_get_rsf(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the Relative Sensitivity Factor, RSF, based on the following two equations:
        1) Standard Files:  RSF_i = sensitivity_i*(concentration_std_i/intensity_std_i)*
                                    (intensity_std_is/concentration_std_is) = 1
        2) Sample Files:    RSF_i = sensitivity_i*(concentration_std_i/intensity_std_i)*
                                    (intensity_smpl_is/concentration_smpl_is)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        if mode == "Specific":
            if var_filetype == "STD":
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                for isotope in file_isotopes:
                    var_result_i = 1
                    self.container_rsf[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
            elif var_filetype == "SMPL":
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                var_concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                 "Concentration"].get())
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                for isotope in file_isotopes:
                    var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                        var_file_short]["MAT"][isotope]
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element in self.srm_actual[var_srm_i]:
                        var_concentration_i = self.srm_actual[var_srm_i][element]
                    else:
                        var_concentration_i = 0.0
                    var_intensity_i = self.container_intensity_corrected["STD"][var_datatype][isotope]

                    var_result_i = var_sensitivity_i*(var_concentration_i/var_intensity_i)*\
                                   (var_intensity_is/var_concentration_is)
                    self.container_rsf[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                if var_filetype == "SMPL":
                                    var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                    var_id_selected = self.container_var["ID"]["Results Files"].get()
                                    #
                                    if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                        self.ma_get_rsf(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_rsf[var_filetype][var_datatype][var_file_short][
                                            "MAT"][isotope]
                                        helper_results.append(var_result_i)
                                else:
                                    self.ma_get_rsf(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_rsf[var_filetype][var_datatype][var_file_short][
                                        "MAT"][isotope]
                                    helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)

                    self.container_rsf[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_concentration(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the concentration, C, based on the following two equations:
        1) Standard Files:  C_i = SRM_dataset(element)
        2) Sample Files:    C_i = (intensity_smpl_i/intensity_smpl_is)*(concentration_smpl_is/sensitivity_i)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        if self.pysills_mode == "MA":
            var_setting_key = "ma_setting"
        elif self.pysills_mode == "FI":
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_setting_key = "mi_setting"

        if mode == "Specific":
            if var_filetype == "STD":
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                for isotope in file_isotopes:
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element in self.srm_actual[var_srm_i]:
                        var_result_i = self.srm_actual[var_srm_i][element]
                    else:
                        var_result_i = 0.0
                    self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                    self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                        isotope] = var_result_i
            elif var_filetype == "SMPL":
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                if self.container_var["Quantification Mineral"]["Method"].get() == "Internal Standard":
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    key_element = re.search("(\D+)(\d+)", var_is)
                    is_element = key_element.group(1)
                    max_amount_is = self.maximum_amounts[is_element]
                    var_concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                     "Concentration"].get())

                    for isotope in file_isotopes:
                        if var_concentration_is <= max_amount_is:
                            correction_factor_i = 1
                            var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_is]
                            var_intensity_sigma_i = self.container_intensity[var_filetype][var_datatype][
                                var_file_short]["1 SIGMA MAT"][isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]

                            if var_sensitivity_i > 0 and var_intensity_is > 0 and var_intensity_i > 0:
                                var_result_i = ((var_intensity_i/var_intensity_is)*
                                                (var_concentration_is/var_sensitivity_i))
                                var_result_sigma_i = (var_intensity_sigma_i/var_intensity_i)*var_result_i
                            else:
                                var_result_i = 0.0
                                var_result_sigma_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                                isotope] = var_result_sigma_i

                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            max_amount_i = self.maximum_amounts[element]

                            if var_result_i > max_amount_i:
                                correction_factor_i = max_amount_i/var_result_i
                                break
                        else:
                            var_concentration_is = max_amount_is
                            correction_factor_i = 1
                            var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_is]
                            var_intensity_sigma_i = self.container_intensity[var_filetype][var_datatype][
                                var_file_short]["1 SIGMA MAT"][isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]

                            if var_sensitivity_i > 0 and var_intensity_is > 0 and var_intensity_i > 0:
                                var_result_i = ((var_intensity_i/var_intensity_is)*
                                                (var_concentration_is/var_sensitivity_i))
                                var_result_sigma_i = (var_intensity_sigma_i/var_intensity_i)*var_result_i
                            else:
                                var_result_i = 0.0
                                var_result_sigma_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                                isotope] = var_result_sigma_i

                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            max_amount_i = self.maximum_amounts[element]

                            if var_result_i > max_amount_i:
                                correction_factor_i = max_amount_i/var_result_i
                                break

                    if correction_factor_i != 1:
                        for isotope in file_isotopes:
                            var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_is]
                            var_intensity_sigma_i = self.container_intensity[var_filetype][var_datatype][
                                var_file_short]["1 SIGMA MAT"][isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]

                            if var_sensitivity_i > 0 and var_intensity_is > 0 and var_intensity_i > 0:
                                var_result_i = (correction_factor_i*(var_intensity_i/var_intensity_is)*
                                                (var_concentration_is/var_sensitivity_i))
                                var_result_sigma_i = (correction_factor_i*(var_intensity_sigma_i/var_intensity_i)*
                                                      var_result_i)
                            else:
                                var_result_i = 0.0
                                var_result_sigma_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                                isotope] = var_result_sigma_i
                else:
                    var_ref = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    key_element = re.search("(\D+)(\d+)", var_ref)
                    ref_element = key_element.group(1)
                    var_ref_oxide = self.container_var["SMPL"][var_file_long]["Matrix Setup"]["Oxide"]["Name"].get()
                    conversion_factor_ref = self.conversion_factors[var_ref_oxide]
                    conversion_factor_to_ppm = 10**6
                    amount_total_oxides = float(
                        self.container_var["Oxides Quantification"]["Total Amounts"][var_file_short].get())/100
                    lower_term = 1
                    for isotope in file_isotopes:
                        var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        var_intensity_ref = self.container_intensity_corrected[var_filetype][var_datatype][
                            var_file_short]["MAT"][var_ref]
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]

                        if var_sensitivity_i > 0 and var_intensity_ref > 0 and isotope != var_ref:
                            lower_term += (var_intensity_i/var_intensity_ref)/var_sensitivity_i

                    var_amount_ref = 1/lower_term
                    var_concentration_ref = (amount_total_oxides*(var_amount_ref/conversion_factor_ref)*
                                             conversion_factor_to_ppm)
                    var_concentration_ref = var_amount_ref*conversion_factor_to_ppm
                    max_amount_ref = self.maximum_amounts[ref_element]

                    if var_concentration_ref <= max_amount_ref:
                        correction_factor_i = 1
                        for isotope in file_isotopes:
                            var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_intensity_ref = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_ref]
                            var_intensity_sigma_i = self.container_intensity[var_filetype][var_datatype][
                                var_file_short]["1 SIGMA MAT"][isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]

                            if var_sensitivity_i > 0 and var_intensity_ref > 0 and var_intensity_i > 0:
                                var_result_i = ((var_intensity_i/var_intensity_ref)*
                                                (var_concentration_ref/var_sensitivity_i))
                                var_result_sigma_i = (var_intensity_sigma_i/var_intensity_i)*var_result_i
                            else:
                                var_result_i = 0.0
                                var_result_sigma_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                                isotope] = var_result_sigma_i

                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            max_amount_i = self.maximum_amounts[element]

                            if var_result_i > max_amount_i:
                                correction_factor_i = max_amount_i/var_result_i
                                break

                        if correction_factor_i != 1:
                            for isotope in file_isotopes:
                                var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short]["MAT"][isotope]
                                var_intensity_ref = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short]["MAT"][var_ref]
                                var_intensity_sigma_i = self.container_intensity[var_filetype][var_datatype][
                                    var_file_short]["1 SIGMA MAT"][isotope]
                                var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                    var_file_short]["MAT"][isotope]

                                if var_sensitivity_i > 0 and var_intensity_ref > 0 and var_intensity_i > 0:
                                    var_result_i = correction_factor_i*(var_intensity_i/var_intensity_ref)*(
                                            var_concentration_ref/var_sensitivity_i)
                                    var_result_sigma_i = (correction_factor_i*(var_intensity_sigma_i/var_intensity_i)*
                                                          var_result_i)
                                else:
                                    var_result_i = 0.0
                                    var_result_sigma_i = 0.0

                                self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                                    isotope] = var_result_i
                                self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                                    isotope] = var_result_sigma_i
                    else:
                        correction_factor = max_amount_ref/var_concentration_ref
                        var_concentration_ref = correction_factor*var_concentration_ref
                        for isotope in file_isotopes:
                            var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_intensity_ref = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_ref]
                            var_intensity_sigma_i = self.container_intensity[var_filetype][var_datatype][
                                var_file_short]["1 SIGMA MAT"][isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]

                            if var_sensitivity_i > 0 and var_intensity_ref > 0 and var_intensity_i > 0:
                                var_result_i = (var_intensity_i/var_intensity_ref)*(
                                            var_concentration_ref/var_sensitivity_i)
                                var_result_sigma_i = (var_intensity_sigma_i/var_intensity_i)*var_result_i
                            else:
                                var_result_i = 0.0
                                var_result_sigma_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["1 SIGMA MAT"][
                                isotope] = var_result_sigma_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                if var_filetype == "SMPL":
                                    var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                    var_id_selected = self.container_var["ID"]["Results Files"].get()
                                    if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                        self.ma_get_concentration(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_concentration[var_filetype][var_datatype][
                                            var_file_short]["MAT"][isotope]
                                        helper_results.append(var_result_i)
                                else:
                                    self.ma_get_concentration(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_concentration[var_filetype][var_datatype][
                                        var_file_short]["MAT"][isotope]
                                    helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)

                    self.container_concentration[var_filetype][var_datatype][isotope] = var_result_i

    def ma_get_concentration_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long,
                                        mode="Specific"):
        """ Calculates the concentration ratio, C_i/C_is, based on the following two equations:
                1) Standard Files:  C_i = C_std_i/C_std_is
                2) Sample Files:    C_i = C_smpl_i/C_smpl_is

                Parameters
                ----------
                var_filetype : str
                    The file category, e.g. STD
                var_datatype : str
                    The data category, e.g. RAW
                var_file_short : str
                    The file as a short version (without the complete filepath)
                var_file_long : str
                    The file as the long version (with the complete filepath)

                Returns
                -------
                """
        if mode == "Specific":
            var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                var_is]
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope]
                var_result_i = var_concentration_i/var_concentration_is
                self.container_concentration_ratio[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                if var_filetype == "SMPL":
                                    var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                    var_id_selected = self.container_var["ID"]["Results Files"].get()
                                    #
                                    if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                        self.ma_get_concentration_ratio(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_concentration_ratio[var_filetype][var_datatype][
                                            var_file_short]["MAT"][isotope]
                                        helper_results.append(var_result_i)
                                else:
                                    self.ma_get_concentration_ratio(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_concentration_ratio[var_filetype][var_datatype][
                                        var_file_short]["MAT"][isotope]
                                    helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)

                    self.container_concentration_ratio[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_lod(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the Limit of Detection, LoD, based on the following two equations:
        1) Standard Files:  C_i = C_std_i/C_std_is
        2) Sample Files:    C_i = C_smpl_i/C_smpl_is

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        if mode == "Specific":
            if var_filetype == "STD":
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                for index, isotope in enumerate(file_isotopes):
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []

                    if index == 0:
                        condensed_intervals = IQ(dataframe=None).combine_all_intervals(
                            interval_set=self.container_helper[var_filetype][var_file_short]["BG"]["Content"])
                    for key, items in condensed_intervals.items():
                        var_indices = items
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))

                    if index == 0:
                        condensed_intervals = IQ(dataframe=None).combine_all_intervals(
                            interval_set=self.container_helper[var_filetype][var_file_short]["MAT"]["Content"])
                    for key, items in condensed_intervals.items():
                        var_indices = items
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_mat += len(var_data)

                    var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]

                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        parameter_list = [var_n_bg, var_n_mat, var_tau_i, var_intensity_i]
                        if any(v == 0 for v in parameter_list) == False:
                            var_result_i = (3.29*(
                                    var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                    var_n_mat*var_tau_i)*(var_concentration_i/var_intensity_i)
                        else:
                            var_result_i = 0.0
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i

                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_sigma_bg_i = np.mean(helper_sigma_i)
                        else:
                            var_sigma_bg_i = np.median(helper_sigma_i)

                        var_result_i = (3*var_sigma_bg_i*var_concentration_i)/(var_intensity_i)*(
                                1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i

            elif var_filetype == "SMPL":
                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                for index, isotope in enumerate(file_isotopes):
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []

                    if index == 0:
                        condensed_intervals = IQ(dataframe=None).combine_all_intervals(
                            interval_set=self.container_helper[var_filetype][var_file_short]["BG"]["Content"])
                    for key, items in condensed_intervals.items():
                        var_indices = items
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))

                    if index == 0:
                        condensed_intervals = IQ(dataframe=None).combine_all_intervals(
                            interval_set=self.container_helper[var_filetype][var_file_short]["MAT"]["Content"])
                    for key, items in condensed_intervals.items():
                        var_indices = items
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_mat += len(var_data)

                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]

                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        var_sensitivity_i = \
                        self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                            "MAT"][isotope]
                        if var_sensitivity_i > 0:
                            var_result_i = (3.29*(
                                    var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                    var_n_mat*var_tau_i*var_sensitivity_i)*(var_concentration_is/var_intensity_is)
                        else:
                            var_result_i = 0.0
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i

                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_sigma_bg_i = np.mean(helper_sigma_i)
                        else:
                            var_sigma_bg_i = np.median(helper_sigma_i)

                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]

                        var_result_i = (3*var_sigma_bg_i*var_concentration_is)/(var_sensitivity_i*var_intensity_is)*(
                                1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                if var_filetype == "SMPL":
                                    var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                    var_id_selected = self.container_var["ID"]["Results Files"].get()
                                    if var_id == var_id_selected or self.var_init_ma_datareduction == True:
                                        self.ma_get_lod(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_lod[var_filetype][var_datatype][var_file_short][
                                            "MAT"][isotope]
                                        helper_results.append(var_result_i)
                                else:
                                    self.ma_get_lod(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_lod[var_filetype][var_datatype][var_file_short][
                                        "MAT"][isotope]
                                    helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)

                    self.container_lod[var_filetype][var_datatype][isotope] = var_result_i

    def ma_datareduction_files(self):  # MA - DATAREDUCTION FILES ######################################################
        ## Window Settings
        window_width = 1260
        window_heigth = 625
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_ma_datareduction_files = tk.Toplevel(self.parent)
        self.subwindow_ma_datareduction_files.title("MINERAL ANALYSIS - Data Reduction")
        self.subwindow_ma_datareduction_files.geometry(var_geometry)
        self.subwindow_ma_datareduction_files.resizable(False, False)
        self.subwindow_ma_datareduction_files["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_datareduction_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_datareduction_files, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_datareduction_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_datareduction_files.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Data Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Focus Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 10, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Result Selection", relief=tk.FLAT, fontsize="sans 10 bold")

        ## RADIOBUTTONS
        rb_01a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["File Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Standard Files", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_01b = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["File Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Sample Files", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        rb_02a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Data Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="RAW Data", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_02b = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Data Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="SMOOTHED Data", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        rb_04a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Focus"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mineral/Glass", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        rb_05a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 11, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        self.rb_conc_ratio = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration Ratio", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        self.rb_lod = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 13, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=2,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Limit of Detection", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05d = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 14, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        self.rb_int_ratio = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=4,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity Ratio", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05f = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 16, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=5,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Analytical Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05g = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 17, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=6,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Normalized Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.ma_datareduction_tables)
        self.rb_rsf = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 18, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=7,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Relative Sensitivity Factor",
            sticky="nesw", relief=tk.FLAT, command=self.ma_datareduction_tables)

        ## OPTION MENUS
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"

        list_id_found = []
        for var_file_long in self.container_lists["SMPL"]["Long"]:
            var_id_i = self.container_var["SMPL"][var_file_long]["ID"].get()
            if var_id_i not in list_id_found:
                list_id_found.append(var_id_i)

        if len(list_id_found) > 0:
            opt_03a = SE(
                parent=self.subwindow_ma_datareduction_files, row_id=start_row + 7, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=self.container_var["ID"]["Results Files"], option_list=list_id_found,
                text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.red_dark,
                command=lambda var_opt=self.container_var["ID"]["Results Files"]: self.change_id_results(var_opt))
            opt_03a["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_03a.config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, highlightthickness=0)

        ## BUTTONS
        btn_06a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 20, column_id=start_column, n_rows=2,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Export Results", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.calculation_report_setup)

        self.var_rb_01 = tk.IntVar()
        self.var_rb_01.set(1)
        self.var_rb_02 = tk.IntVar()
        self.var_rb_02.set(0)
        self.var_rb_03 = tk.IntVar()
        self.var_rb_03.set(0)

        btn_07c = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 23, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Sensitivity Drift", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.show_diagrams_sensitivity)
        btn_07d = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 22, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Detailed Data Analysis", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.detailed_data_analysis)

        ## FRAMES
        frm_a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row, column_id=start_column + 11,
            n_rows=n_rows, n_columns=n_columns - 11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)

        ## TREEVIEWS
        list_categories = ["Files"]
        list_categories.extend(self.container_lists["Measured Isotopes"]["All"])
        list_width = list(75*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 125

        if len(list_categories) > 1:
            self.tv_results_files = SE(
                parent=self.subwindow_ma_datareduction_files, row_id=0, column_id=11, n_rows=24, n_columns=51,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
                n_categories=len(list_categories), text_n=list_categories,
                width_n=list_width, individual=True)

            scb_v = ttk.Scrollbar(self.subwindow_ma_datareduction_files, orient="vertical")
            scb_h = ttk.Scrollbar(self.subwindow_ma_datareduction_files, orient="horizontal")
            self.tv_results_files.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
            scb_v.config(command=self.tv_results_files.yview)
            scb_h.config(command=self.tv_results_files.xview)
            scb_v.grid(row=0, column=62, rowspan=24, columnspan=1, sticky="ns")
            scb_h.grid(row=24, column=11, rowspan=1, columnspan=51, sticky="ew")

            ## INITIALIZATION
            self.ma_datareduction_tables(init=True)
        else:
            rb_01a.configure(state="disabled")
            rb_01b.configure(state="disabled")
            rb_02a.configure(state="disabled")
            rb_02b.configure(state="disabled")
            rb_04a.configure(state="disabled")
            rb_05a.configure(state="disabled")
            self.rb_conc_ratio.configure(state="disabled")
            self.rb_lod.configure(state="disabled")
            rb_05d.configure(state="disabled")
            self.rb_int_ratio.configure(state="disabled")
            rb_05f.configure(state="disabled")
            rb_05g.configure(state="disabled")
            self.rb_rsf.configure(state="disabled")

            btn_06a.configure(state="disabled")
            btn_07c.configure(state="disabled")
            btn_07d.configure(state="disabled")

    def detailed_data_analysis(self):
        if self.pysills_mode == "MA":
            str_title_window = "MINERAL ANALYSIS - Detailed Data Analysis"
        elif self.pysills_mode == "FI":
            str_title_window = "FLUID INCLUSION ANALYSIS - Detailed Data Analysis"
        elif self.pysills_mode == "MI":
            str_title_window = "MELT INCLUSION ANALYSIS - Detailed Data Analysis"

        ## Window Settings
        window_width = 900
        window_heigth = 600
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_detailed_data_analysis = tk.Toplevel(self.parent)
        self.subwindow_detailed_data_analysis.title(str_title_window)
        self.subwindow_detailed_data_analysis.geometry(var_geometry)
        self.subwindow_detailed_data_analysis.resizable(False, False)
        self.subwindow_detailed_data_analysis["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_detailed_data_analysis, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_detailed_data_analysis, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_detailed_data_analysis.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_detailed_data_analysis.grid_columnconfigure(i, minsize=column_min)

        ################################################################################################################

        start_row = 0
        start_column = 0

        # LABELS
        lbl_01 = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Filename", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Experimental Data", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Experimental Focus", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 11, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Intensity Results", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 13, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sensitivity Results", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Composition Results", relief=tk.FLAT, fontsize="sans 10 bold")

        # RADIOBUTTONS
        rb_02a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["Detailed Data Analysis"]["Datatype"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Original Data", sticky="nesw",
            relief=tk.FLAT, command=lambda var_rb=self.container_var["Detailed Data Analysis"]["Datatype"]:
            self.detailed_analysis_change_datatype(var_rb))
        rb_02b = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["Detailed Data Analysis"]["Datatype"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Smoothed Data", sticky="nesw",
            relief=tk.FLAT, command=lambda var_rb=self.container_var["Detailed Data Analysis"]["Datatype"]:
            self.detailed_analysis_change_datatype(var_rb))

        rb_03a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 7, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["Detailed Data Analysis"]["Focus"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Background", sticky="nesw",
            relief=tk.FLAT, command=lambda var_rb=self.container_var["Detailed Data Analysis"]["Focus"]:
            self.detailed_analysis_change_focus(var_rb))
        rb_03b = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["Detailed Data Analysis"]["Focus"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mineral / Matrix", sticky="nesw",
            relief=tk.FLAT, command=lambda var_rb=self.container_var["Detailed Data Analysis"]["Focus"]:
            self.detailed_analysis_change_focus(var_rb))
        rb_03c = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["Detailed Data Analysis"]["Focus"], value_rb=2,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Inclusion", sticky="nesw",
            relief=tk.FLAT, command=lambda var_rb=self.container_var["Detailed Data Analysis"]["Focus"]:
            self.detailed_analysis_change_focus(var_rb))
        rb_03d = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 10, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["Detailed Data Analysis"]["Focus"], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixed Signal", sticky="nesw",
            relief=tk.FLAT, command=lambda var_rb=self.container_var["Detailed Data Analysis"]["Focus"]:
            self.detailed_analysis_change_focus(var_rb))

        # OPTION MENUS
        list_files_std = self.container_lists["STD"]["Short"]
        str_default_std = "Select Standard File"

        opt_01a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Detailed Data Analysis"]["Filename STD"], option_list=list_files_std,
            text_set=str_default_std, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Detailed Data Analysis"]["Filename STD"]:
            self.detailed_analysis_select_file(var_opt))
        opt_01a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_01a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        list_files_smpl = self.container_lists["SMPL"]["Short"]
        str_default_smpl = "Select Sample File"
        opt_01b = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Detailed Data Analysis"]["Filename SMPL"], option_list=list_files_smpl,
            text_set=str_default_smpl, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Detailed Data Analysis"]["Filename SMPL"]:
            self.detailed_analysis_select_file(var_opt))
        opt_01b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_01b.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        list_intensity_parameter = ["Measured Intensity", "Intensity", "Intensity Ratio", "Intensity Noise",
                                    "\u03C3 Intensity"]
        str_default_intensity = "Select Parameter"
        opt_04a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Detailed Data Analysis"]["Intensity Results"],
            option_list=list_intensity_parameter, text_set=str_default_intensity, fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Detailed Data Analysis"]["Intensity Results"]:
            self.detailed_analysis_select_focus(var_opt))
        opt_04a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_04a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        list_sensitivity_parameter = ["Analytical Sensitivity", "Normalized Sensitivity", "Relative Sensitivity Factor"]
        str_default_sensitivity = "Select Parameter"
        opt_05a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 14, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Detailed Data Analysis"]["Sensitivity Results"],
            option_list=list_sensitivity_parameter, text_set=str_default_sensitivity,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Detailed Data Analysis"]["Sensitivity Results"]:
            self.detailed_analysis_select_focus(var_opt))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        list_concentration_parameter = ["Concentration", "Concentration Ratio", "Concentration Noise",
                                        "Limit of Detection", "\u03C3 Concentration"]
        str_default_concentration = "Select Parameter"
        opt_05a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row + 16, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Detailed Data Analysis"]["Concentration Results"],
            option_list=list_concentration_parameter, text_set=str_default_concentration,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Detailed Data Analysis"]["Concentration Results"]:
            self.detailed_analysis_select_focus(var_opt))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        # FRAMES
        frm_a = SE(
            parent=self.subwindow_detailed_data_analysis, row_id=start_row, column_id=start_column + 11,
            n_rows=n_rows, n_columns=n_columns - 11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)

        # TREEVIEW
        list_categories = ["Isotope", "Value"]
        list_width = list(130*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 90

        if len(list_categories) > 1:
            self.tv_results_detailed = SE(
                parent=self.subwindow_detailed_data_analysis, row_id=start_row, column_id=start_column + 11,
                n_rows=n_rows - 1, n_columns=11, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["White"]).create_treeview(
                n_categories=len(list_categories), text_n=list_categories,
                width_n=list_width, individual=True)

            scb_v = ttk.Scrollbar(self.subwindow_detailed_data_analysis, orient="vertical")
            scb_h = ttk.Scrollbar(self.subwindow_detailed_data_analysis, orient="horizontal")
            self.tv_results_detailed.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
            scb_v.config(command=self.tv_results_detailed.yview)
            scb_h.config(command=self.tv_results_detailed.xview)
            scb_v.grid(row=0, column=22, rowspan=n_rows - 1, columnspan=1, sticky="ns")
            scb_h.grid(row=n_rows - 1, column=11, rowspan=1, columnspan=11, sticky="ew")

        # INITIALIZATION
        self.last_category_parameter = "No"
        if self.pysills_mode == "MA":
            rb_03c.configure(state="disabled")
            rb_03d.configure(state="disabled")

        for isotope in self.container_lists["Measured Isotopes"]["All"]:
            entries_i = [isotope, 0.000]
            self.tv_results_detailed.insert("", tk.END, values=entries_i)

    def detailed_analysis_select_file(self, var_opt):
        self.container_var["Detailed Data Analysis"]["Datatype"].set(0)
        self.container_var["Detailed Data Analysis"]["Focus"].set(1)

        if var_opt in self.container_lists["STD"]["Short"]:
            self.container_var["Detailed Data Analysis"]["Filename SMPL"].set("Select Sample File")
        elif var_opt in self.container_lists["SMPL"]["Short"]:
            self.container_var["Detailed Data Analysis"]["Filename STD"].set("Select Standard File")

        str_last_category = self.last_category_parameter + " Results"
        if str_last_category in ["Intensity Results", "Sensitivity Results", "Concentration Results"]:
            self.detailed_analysis_select_focus(var_opt=self.container_var["Detailed Data Analysis"][str_last_category])
        else:
            self.container_var["Detailed Data Analysis"]["Intensity Results"].set("Select Parameter")
            self.container_var["Detailed Data Analysis"]["Sensitivity Results"].set("Select Parameter")
            self.container_var["Detailed Data Analysis"]["Concentration Results"].set("Select Parameter")

    def detailed_analysis_change_datatype(self, var_rb):
        if var_rb.get() == 0:
            str_datatype = "RAW"
        else:
            str_datatype = "SMOOTHED"

        str_last_category = self.last_category_parameter + " Results"
        self.detailed_analysis_select_focus(
            var_opt=self.container_var["Detailed Data Analysis"][str_last_category], var_datatype=str_datatype)

    def detailed_analysis_change_focus(self, var_rb):
        if var_rb.get() == 0:
            str_focus = "BG"
        elif var_rb.get() == 1:
            str_focus = "MAT"
        elif var_rb.get() == 2:
            str_focus = "INCL"
        else:
            str_focus = "MIX"

        str_last_category = self.last_category_parameter + " Results"
        self.detailed_analysis_select_focus(
            var_opt=self.container_var["Detailed Data Analysis"][str_last_category], var_focus=str_focus)

    def detailed_analysis_select_focus(self, var_opt, var_datatype=None, var_focus=None):
        # Cleaning
        if len(self.tv_results_detailed.get_children()) > 0:
            for item in self.tv_results_detailed.get_children():
                self.tv_results_detailed.delete(item)

        # Initialization
        str_filename_std_short = self.container_var["Detailed Data Analysis"]["Filename STD"].get()
        str_filename_smpl_short = self.container_var["Detailed Data Analysis"]["Filename SMPL"].get()

        if str_filename_std_short != "Select Standard File":
            str_filename_short = str_filename_std_short
            str_filetype = "STD"
        else:
            str_filename_short = str_filename_smpl_short
            str_filetype = "SMPL"

        file_isotopes = self.container_lists["Measured Isotopes"][str_filename_short]

        if var_datatype == None:
            if self.container_var["Detailed Data Analysis"]["Datatype"].get() == 0:
                str_datatype = "RAW"
            else:
                str_datatype = "SMOOTHED"
        else:
            str_datatype = var_datatype

        if var_focus == None:
            if self.container_var["Detailed Data Analysis"]["Focus"].get() == 0:
                str_focus = "BG"
            elif self.container_var["Detailed Data Analysis"]["Focus"].get() == 1:
                str_focus = "MAT"
            elif self.container_var["Detailed Data Analysis"]["Focus"].get() == 2:
                str_focus = "INCL"
            else:
                str_focus = "MIX"
        else:
            str_focus = var_focus

        if type(var_opt) != str:
            var_opt = var_opt.get()

        # Algorithm
        if var_opt in ["Measured Intensity", "Intensity", "Intensity Ratio", "Intensity Noise", "\u03C3 Intensity"]:
            self.container_var["Detailed Data Analysis"]["Sensitivity Results"].set("Select Parameter")
            self.container_var["Detailed Data Analysis"]["Concentration Results"].set("Select Parameter")
            self.last_category_parameter = "Intensity"

            if var_opt == "Measured Intensity":
                for isotope in file_isotopes:
                    value_i = self.container_intensity[str_filetype][str_datatype][str_filename_short][str_focus][
                        isotope]
                    entries_i = [isotope, round(value_i, 4)]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Intensity":
                for isotope in file_isotopes:
                    value_i = self.container_intensity_corrected[str_filetype][str_datatype][str_filename_short][
                        str_focus][isotope]
                    entries_i = [isotope, round(value_i, 4)]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Intensity Ratio":
                for isotope in file_isotopes:
                    value_i = self.container_intensity_ratio[str_filetype][str_datatype][str_filename_short][
                        str_focus][isotope]
                    entries_i = [isotope, f"{value_i:.{4}E}"]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Intensity Noise":
                pass
            elif var_opt == "\u03C3 Intensity":
                pass
        elif var_opt in ["Analytical Sensitivity", "Normalized Sensitivity", "Relative Sensitivity Factor"]:
            self.container_var["Detailed Data Analysis"]["Intensity Results"].set("Select Parameter")
            self.container_var["Detailed Data Analysis"]["Concentration Results"].set("Select Parameter")
            self.last_category_parameter = "Sensitivity"

            if var_opt == "Analytical Sensitivity":
                for isotope in file_isotopes:
                    value_i = self.container_analytical_sensitivity[str_filetype][str_datatype][str_filename_short][
                        str_focus][isotope]
                    entries_i = [isotope, round(value_i, 4)]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Normalized Sensitivity":
                for isotope in file_isotopes:
                    value_i = self.container_normalized_sensitivity[str_filetype][str_datatype][str_filename_short][
                        str_focus][isotope]
                    entries_i = [isotope, round(value_i, 4)]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Relative Sensitivity Factor":
                for isotope in file_isotopes:
                    value_i = self.container_rsf[str_filetype][str_datatype][str_filename_short][str_focus][isotope]
                    entries_i = [isotope, f"{value_i:.{4}E}"]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
        elif var_opt in ["Concentration", "Concentration Ratio", "Concentration Noise", "Limit of Detection",
                         "\u03C3 Concentration"]:
            self.container_var["Detailed Data Analysis"]["Intensity Results"].set("Select Parameter")
            self.container_var["Detailed Data Analysis"]["Sensitivity Results"].set("Select Parameter")
            self.last_category_parameter = "Concentration"

            if var_opt == "Concentration":
                for isotope in file_isotopes:
                    value_i = self.container_concentration[str_filetype][str_datatype][str_filename_short][
                        str_focus][isotope]
                    lod_i = self.container_lod[str_filetype][str_datatype][str_filename_short][str_focus][isotope]
                    if value_i >= lod_i:
                        entries_i = [isotope, round(value_i, 4)]
                    else:
                        entries_i = [isotope, str(round(value_i, 4)) + " < LoD"]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Concentration Ratio":
                for isotope in file_isotopes:
                    value_i = self.container_concentration_ratio[str_filetype][str_datatype][str_filename_short][
                        str_focus][isotope]
                    entries_i = [isotope, f"{value_i:.{4}E}"]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "Concentration Noise":
                pass
            elif var_opt == "Limit of Detection":
                for isotope in file_isotopes:
                    value_i = self.container_lod[str_filetype][str_datatype][str_filename_short][str_focus][isotope]
                    entries_i = [isotope, round(value_i, 4)]
                    self.tv_results_detailed.insert("", tk.END, values=entries_i)
            elif var_opt == "\u03C3 Concentration":
                pass

    def about_pysills(self):
        ## Window Settings
        window_width = 620
        window_heigth = 550
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_about_pysills = tk.Toplevel(self.parent)
        self.subwindow_about_pysills.title("PySILLS - About")
        self.subwindow_about_pysills.geometry(var_geometry)
        self.subwindow_about_pysills.resizable(False, False)
        self.subwindow_about_pysills["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_about_pysills, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_about_pysills, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_about_pysills.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_about_pysills.grid_columnconfigure(i, minsize=column_min)

        ################################################################################################################

        start_row = 0
        start_column = 0

        # LABELS
        str_lbl_01 = self.language_dict["Development"][self.var_language]
        str_lbl_02 = self.language_dict["Additional Information"][self.var_language]
        str_lbl_03 = self.language_dict["Citation"][self.var_language]
        str_lbl_04 = self.language_dict["References"][self.var_language]

        lbl_01 = SE(
            parent=self.subwindow_about_pysills, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text=str_lbl_01, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_about_pysills, row_id=start_row, column_id=start_column + 10, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Maximilian A. Beeskow", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01b = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 2, column_id=start_column + 10, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Thomas Wagner", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01c = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 3, column_id=start_column + 10, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Tobias Fusswinkel", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001a = SE(
            parent=self.subwindow_about_pysills, row_id=start_row, column_id=start_column + 20, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="RWTH Aachen University", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001b = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 2, column_id=start_column + 20, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="RWTH Aachen University", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_001b = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 3, column_id=start_column + 20, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="RWTH Aachen University", relief=tk.FLAT, fontsize="sans 10 bold")

        lbl_02 = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text=str_lbl_02, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02a = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 5, column_id=start_column + 11, n_rows=1,
            n_columns=10, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="PySILLS on GitHub", relief=tk.FLAT, fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_02b = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 6, column_id=start_column + 11, n_rows=1,
            n_columns=10, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="PySILLS on ReadTheDocs", relief=tk.FLAT, fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_02c = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 7, column_id=start_column + 11, n_rows=1,
            n_columns=10, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="PySILLS on YouTube", relief=tk.FLAT, fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_02d = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 8, column_id=start_column + 11, n_rows=1,
            n_columns=10, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="PySILLS on Blogger", relief=tk.FLAT, fontsize="sans 10 bold underline", link=True, anchor=tk.W)

        lbl_02a.bind("<Button-1>", self.callback_github)
        lbl_02b.bind("<Button-1>", self.callback_readthedocs)
        lbl_02c.bind("<Button-1>", self.callback_youtube)
        lbl_02d.bind("<Button-1>", self.callback_readthedocs)

        lbl_03 = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 10, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text=str_lbl_03, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03a = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 10, column_id=start_column + 11, n_rows=1,
            n_columns=20, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="If you use PySILLS for your work, please cite the following", relief=tk.FLAT,
            fontsize="sans 10 bold", anchor=tk.W)
        lbl_03b = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 11, column_id=start_column + 11, n_rows=1,
            n_columns=20, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="journal article:", relief=tk.FLAT,
            fontsize="sans 10 bold", anchor=tk.W)
        lbl_03cb = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 12, column_id=start_column + 11, n_rows=1,
            n_columns=20, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Placeholder Journal Article", relief=tk.FLAT,
            fontsize="sans 10 bold", anchor=tk.W)

        lbl_04 = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 14, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text=str_lbl_04, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 14, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="SILLS Equation Summary", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04b = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 15, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Guillong et al. (2008)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04c = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 16, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Heinrich et al. (2003)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04d = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 17, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Longerich et al. (1996)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04e = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 18, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Pettke et al. (2012)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04f = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 19, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Halter et al. (2002)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04g = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 20, column_id=start_column + 11, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Borisova et al. (2021)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)
        lbl_04h = SE(
            parent=self.subwindow_about_pysills, row_id=start_row + 14, column_id=start_column + 21, n_rows=1,
            n_columns=9, fg=self.accent_color, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Liu et al. (2024)", relief=tk.FLAT,
            fontsize="sans 10 bold underline", link=True, anchor=tk.W)

        lbl_04a.bind("<Button-1>", self.callback_sills)
        lbl_04b.bind("<Button-1>", self.callback_guillong2008)
        lbl_04c.bind("<Button-1>", self.callback_heinrich2003)
        lbl_04d.bind("<Button-1>", self.callback_longerich1996)
        lbl_04e.bind("<Button-1>", self.callback_pettke2012)
        lbl_04f.bind("<Button-1>", self.callback_halter2002)
        lbl_04g.bind("<Button-1>", self.callback_borisova2021)
        lbl_04h.bind("<Button-1>", self.callback_liu2024)

    def callback_github(self, event):
        webbrowser.open_new(r"https://github.com/MABeeskow/PySILLS")

    def callback_readthedocs(self, event):
        webbrowser.open_new(r"https://pysills.readthedocs.io/en/latest/")

    def callback_youtube(self, event):
        webbrowser.open_new(r"https://www.youtube.com/@PySILLS")

    def callback_blogger(self, event):
        webbrowser.open_new(r"https://pysills.blogspot.com/")

    def callback_sills(self, event):
        webbrowser.open_new(r"https://mineralsystems.ethz.ch/software/sills.html")

    def callback_guillong2008(self, event):
        webbrowser.open_new(r"https://www.semanticscholar.org/paper/SILLS%3A-A-MATLAB-based-program-for-the-reduction-"
                            r"of-Guillong-Meier/1949b62d2282894b842ec5e94f7f6c759dd89865")

    def callback_heinrich2003(self, event):
        webbrowser.open_new(r"https://www.sciencedirect.com/science/article/pii/S001670370300084X")

    def callback_longerich1996(self, event):
        webbrowser.open_new(r"https://pubs.rsc.org/en/content/articlelanding/1996/ja/ja9961100899")

    def callback_pettke2012(self, event):
        webbrowser.open_new(r"https://www.sciencedirect.com/science/article/pii/S016913681100134X")

    def callback_halter2002(self, event):
        webbrowser.open_new(r"https://www.sciencedirect.com/science/article/pii/S0009254101003722")

    def callback_borisova2021(self, event):
        webbrowser.open_new(r"https://ejm.copernicus.org/articles/33/305/2021/")

    def callback_liu2024(self, event):
        webbrowser.open_new(r"https://www.sciencedirect.com/science/article/pii/S0009254123005648?via%3Dihub")

    def change_id_results(self, var_opt, mode="MA"):
        if mode == "MA":
            self.ma_datareduction_tables()
        elif mode == "FI":
            self.fi_datareduction_tables()

    def calculation_report_setup(self):
        ## Window Settings
        window_width = 260
        window_heigth = 225
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_report_setup = tk.Toplevel(self.parent)
        subwindow_report_setup.title("Calculation Report - Setup")
        subwindow_report_setup.geometry(var_geometry)
        subwindow_report_setup.resizable(False, False)
        subwindow_report_setup["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_report_setup, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_report_setup, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_report_setup.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_report_setup.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=subwindow_report_setup, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Calculation Report Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_report_setup, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Results sorted by ...", relief=tk.FLAT, fontsize="sans 10 bold", anchor=tk.W)

        ## RADIOBUTTONS
        rb_01a = SE(
            parent=subwindow_report_setup, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.rb_report, value_rb=0, color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"],
            text="All results in one file", sticky="nesw", relief=tk.FLAT)
        rb_01b = SE(
            parent=subwindow_report_setup, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.rb_report, value_rb=1, color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"],
            text="file type (STD / SMPL)", sticky="nesw", relief=tk.FLAT)
        rb_01c = SE(
            parent=subwindow_report_setup, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.rb_report, value_rb=2, color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"],
            text="data type (RAW / SMOOTHED)", sticky="nesw", relief=tk.FLAT)

        ## BUTTONS
        if self.pysills_mode == "MA":
            btn_06a = SE(
                parent=subwindow_report_setup, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=12,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Export Results", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.ma_export_calculation_report)
        elif self.pysills_mode == "FI":
            btn_06a = SE(
                parent=subwindow_report_setup, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=12,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Export Results", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=self.fi_export_calculation_report)
        elif self.pysills_mode == "MI":
            pass
        elif self.pysills_mode == "OA":
            pass
#
########################################################################################################################
# FLUID INCLUSION ANALYSIS #############################################################################################
########################################################################################################################
    def fi_settings(self):
        if self.file_system_need_update == True:
            path = os.getcwd()
            parent = os.path.dirname(path)
            if self.demo_mode == True:
                self.var_opt_icp.set("Agilent 7900s")
                self.select_icp_ms(var_opt=self.var_opt_icp)
                fi_demo_files = {"ALL": [], "STD": [], "SMPL": []}
                demo_files = os.listdir(path=path + str("/demo_files/"))
                for file in demo_files:
                    if file.startswith("demo_fi"):
                        path_complete = os.path.join(path + str("/demo_files/"), file)
                        if "_copy" not in  path_complete:
                            path_raw = pathlib.PureWindowsPath(path_complete)
                            fi_demo_files["ALL"].append(str(path_raw.as_posix()))
                fi_demo_files["ALL"].sort()
                fi_demo_files["STD"].extend(fi_demo_files["ALL"][:4])
                fi_demo_files["STD"].extend(fi_demo_files["ALL"][-4:])
                fi_demo_files["SMPL"].extend(fi_demo_files["ALL"][4:-4])

                self.list_std = fi_demo_files["STD"]
                self.list_smpl = fi_demo_files["SMPL"]

            self.fi_current_file_std = self.list_std[0]
            self.fi_current_file_smpl = self.list_smpl[0]

            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if file_std not in self.container_lists["STD"]["Long"]:
                    self.container_lists["STD"]["Long"].append(file_std)
                    self.container_lists["STD"]["Short"].append(file_parts[-1])
                if self.demo_mode == True:
                    self.lb_std.insert(tk.END, file_parts[-1])

                for item in ["Quickview", "File Setup", "Results Intensity", "Results Concentration",
                             "Results Sensitivity", "SE STD", "SE SMPL"]:
                    self.container_var["Subwindows"][self.pysills_mode][item] = {}

            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if file_smpl not in self.container_lists["SMPL"]["Long"]:
                    self.container_lists["SMPL"]["Long"].append(file_smpl)
                    self.container_lists["SMPL"]["Short"].append(file_parts[-1])
                if self.demo_mode == True:
                    self.lb_smpl.insert(tk.END, file_parts[-1])

            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_exmpl = DE(filename_long=file_std).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_exmpl = DE(filename_long=file_std).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    file_parts = file_std.split("/")
                    df_exmpl = self.container_measurements["Dataframe"][file_parts[-1]]

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["ISOTOPES"] = df_isotopes
                self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
                self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]

            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_exmpl = DE(filename_long=file_smpl).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_exmpl = DE(filename_long=file_smpl).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    file_parts = file_smpl .split("/")
                    df_exmpl = self.container_measurements["Dataframe"][file_parts[-1]]

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["ISOTOPES"] = df_isotopes
                self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
                self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]


            for isotope in self.container_lists["Measured Isotopes"]["All"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if element not in self.container_lists["Measured Elements"]["All"]:
                    self.container_lists["Measured Elements"]["All"].append(element)

            for filename_short in self.container_lists["STD"]["Short"]:
                self.container_lists["Measured Elements"][filename_short] = {}
                self.container_lists["Measured Isotopes"][filename_short] = df_isotopes
                for isotope in self.container_lists["Measured Isotopes"][filename_short]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element not in self.container_lists["Measured Elements"][filename_short]:
                        self.container_lists["Measured Elements"][filename_short][element] = [isotope]
                    else:
                        if isotope not in self.container_lists["Measured Elements"][filename_short][element]:
                            self.container_lists["Measured Elements"][filename_short][element].append(isotope)

            for filename_short in self.container_lists["SMPL"]["Short"]:
                self.container_lists["Measured Elements"][filename_short] = {}
                self.container_lists["Measured Isotopes"][filename_short] = df_isotopes
                for isotope in self.container_lists["Measured Isotopes"][filename_short]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element not in self.container_lists["Measured Elements"][filename_short]:
                        self.container_lists["Measured Elements"][filename_short][element] = [isotope]
                    else:
                        if isotope not in self.container_lists["Measured Elements"][filename_short][element]:
                            self.container_lists["Measured Elements"][filename_short][element].append(isotope)

            self.define_isotope_colors()
        else:
            self.fi_current_file_std = self.container_lists["STD"]["Long"][0]
            self.fi_current_file_smpl = self.container_lists["SMPL"]["Long"][0]
            self.define_isotope_colors()

        ## Window Settings
        window_width = 1260
        window_heigth = 1000
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_settings = tk.Toplevel(self.parent)
        self.subwindow_fi_settings.title("FLUID INCLUSION ANALYSIS - Setup")
        self.subwindow_fi_settings.geometry(var_geometry)
        self.subwindow_fi_settings.resizable(False, False)
        self.subwindow_fi_settings["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_settings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_settings, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_settings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_settings.grid_columnconfigure(i, minsize=column_min)
        #
        ## INITIALIZATION
        for isotope in self.container_lists["ISOTOPES"]:
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            #
            if element not in self.container_lists["Elements"]:
                self.container_lists["Elements"].append(element)

        ## Static
        # Build section 'Project Information'
        var_project_information = {"Row start": 0, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_project_information(var_geometry_info=var_project_information)
        # Build section 'Standard Reference Material'
        var_standard_reference_material = {"Row start": 3, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_standard_reference_material(var_geometry_info=var_standard_reference_material)
        # Build section 'Matrix Settings'
        var_sample_settings = {"Row start": 6, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_sample_settings(var_geometry_info=var_sample_settings)
        # Build section 'Quantification Method'
        var_quantification_method = {"Row start": 8, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_quantification_method(var_geometry_info=var_quantification_method)
        # Build section 'Assemblage Setup'
        var_assemblage_setup = {"Row start": 12, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_assemblage_setup(var_geometry_info=var_assemblage_setup)
        # Build section 'Dwell Time Setup'
        var_dwell_time_setup = {"Row start": 14, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_dwell_time_setup(var_geometry_info=var_dwell_time_setup)
        # Build section 'Calculation Window (Background) Setup'
        var_calculation_window_bg_setup = {"Row start": 16, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_calculation_window_bg(var_geometry_info=var_calculation_window_bg_setup)
        # Build section 'Calculation Window (Matrix) Setup'
        var_calculation_window_mat_setup = {"Row start": 20, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_calculation_window_smpl(var_geometry_info=var_calculation_window_mat_setup)
        # Build section 'Spike Elimination Setup'
        var_spike_elimination_setup = {"Row start": 24, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_spike_elimination_setup(var_geometry_info=var_spike_elimination_setup)
        # Build section 'Check-Up'
        var_checkup = {"Row start": 31, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_checkup_feature(var_geometry_info=var_checkup)
        # Build section 'Acquisition Times'
        var_acquisition_times_check = {"Row start": 18, "Column start": 44, "N rows": 1, "N columns": 18}
        self.place_acquisition_times_check(var_geometry_info=var_acquisition_times_check)
        # Build section 'Standard Files'
        var_standard_files = {"Row start": 0, "Column start": 19, "N rows": 16, "N columns": 24}
        self.place_standard_files_table(var_geometry_info=var_standard_files)
        # Build section 'Sample Files'
        var_sample_files = {"Row start": 18, "Column start": 19, "N rows": 19, "N columns": 24}
        self.place_sample_files_table(var_geometry_info=var_sample_files)
        # Build section 'Time-Signal Diagram Checker'
        self.define_isotope_colors()
        var_time_signal_diagram_check = {"Row start": 26, "Column start": 44, "N rows": 1, "N columns": 18}
        self.place_time_signal_plot_checker(var_geometry_info=var_time_signal_diagram_check)
        # Build section 'Measured Isotopes'
        var_measured_isotopes = {"Row start": 1, "Column start": 44, "N rows": 16, "N columns": 18}
        self.place_measured_isotopes_overview(var_geometry_info=var_measured_isotopes)

        ## INITIALIZATION
        self.select_spike_elimination(
            var_opt=self.container_var["Spike Elimination Method"].get(),
            start_row=var_spike_elimination_setup["Row start"], mode="FI")

        if self.file_loaded == False:
            self.fi_select_is_default(var_opt=self.container_var["IS"]["Default STD"].get())
            self.fi_select_id_default(var_opt=self.container_var["ID"]["Default SMPL"].get())
            self.fi_select_srm_default(var_opt=self.container_var["SRM"]["default"][0].get())
            self.fi_select_srm_default(var_opt=self.container_var["SRM"]["default"][1].get(), mode="ISOTOPES")
            #
        else:
            self.fi_select_srm_initialization()
        #
        for filetype in ["STD", "SMPL"]:
            if self.container_var["Spike Elimination"][filetype]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                    #
                    self.spike_elimination_all(filetype=filetype, algorithm=var_method)

        self.build_srm_database()
        self.file_system_need_update = False

        self.select_opt_inclusion_is_quantification(var_opt="Mass Balance", dict_geometry_info=var_quantification_method)
        self.select_opt_inclusion_quantification(
            var_opt="Matrix-only Tracer (SILLS)", dict_geometry_info=var_quantification_method)

########################################################################################################################
### MELT INCLUSIONS ####################################################################################################
########################################################################################################################

    def mi_settings(self):
        if self.file_system_need_update == True:
            path = os.getcwd()
            parent = os.path.dirname(path)
            if self.demo_mode == True:
                self.var_opt_icp.set("PerkinElmer Syngistix")
                self.select_icp_ms(var_opt=self.var_opt_icp)
                mi_demo_files = {"ALL": [], "STD": [], "SMPL": []}
                demo_files = os.listdir(path=path + str("/demo_files/"))
                for file in demo_files:
                    if file.startswith("demo_mi"):
                        path_complete = os.path.join(path + str("/demo_files/"), file)
                        if "_copy" not in  path_complete:
                            path_raw = pathlib.PureWindowsPath(path_complete)
                            mi_demo_files["ALL"].append(str(path_raw.as_posix()))
                mi_demo_files["ALL"].sort()
                mi_demo_files["STD"].extend(mi_demo_files["ALL"][:2])
                mi_demo_files["STD"].extend(mi_demo_files["ALL"][-2:])
                mi_demo_files["SMPL"].extend(mi_demo_files["ALL"][2:-2])

                self.list_std = mi_demo_files["STD"]
                self.list_smpl = mi_demo_files["SMPL"]

            self.mi_current_file_std = self.list_std[0]
            self.mi_current_file_smpl = self.list_smpl[0]

            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if file_std not in self.container_lists["STD"]["Long"]:
                    self.container_lists["STD"]["Long"].append(file_std)
                    self.container_lists["STD"]["Short"].append(file_parts[-1])
                if self.demo_mode == True:
                    self.lb_std.insert(tk.END, file_parts[-1])

                for item in ["Quickview", "File Setup", "Results Intensity", "Results Concentration",
                             "Results Sensitivity", "SE STD", "SE SMPL"]:
                    self.container_var["Subwindows"][self.pysills_mode][item] = {}

            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if file_smpl not in self.container_lists["SMPL"]["Long"]:
                    self.container_lists["SMPL"]["Long"].append(file_smpl)
                    self.container_lists["SMPL"]["Short"].append(file_parts[-1])
                if self.demo_mode == True:
                    self.lb_smpl.insert(tk.END, file_parts[-1])

            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_exmpl = DE(filename_long=file_std).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_exmpl = DE(filename_long=file_std).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    file_parts = file_std.split("/")
                    df_exmpl = self.container_measurements["Dataframe"][file_parts[-1]]

                if (self.container_icpms["name"] != None and
                        self.container_icpms["name"] not in ["PerkinElmer Syngistix"]):
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    var_timestamp = self.container_icpms["timestamp"]
                    var_icpms = self.container_icpms["name"]

                    dates, times = Data(filename=file_std).import_as_list(
                        skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp,
                        icpms=var_icpms)
                elif self.container_icpms["name"] == "PerkinElmer Syngistix":
                    var_os = sys.platform
                    if var_os not in ["linux", "darwin"]:
                        create_time = os.path.getctime(file_std)
                    else:
                        create_time = os.path.getmtime(file_std)

                    create_date = datetime.datetime.fromtimestamp(create_time)
                    hour = create_date.strftime("%H")
                    minute = create_date.strftime("%M")
                    second = create_date.strftime("%S")
                    year = create_date.strftime("%Y")
                    month = create_date.strftime("%m")
                    day = create_date.strftime("%d")
                    times = [[str(hour), str(minute), str(second)]]
                    dates = [str(year), str(month), str(day)]
                else:
                    dates, times = Data(filename=file_std).import_as_list(
                        skip_header=3, skip_footer=1, timestamp=2,
                        icpms="Agilent 7900s")

                if file_parts[-1] not in self.container_var["acquisition times"]["STD"]:
                    self.container_var["acquisition times"]["STD"][file_parts[-1]] = tk.StringVar()
                self.container_var["acquisition times"]["STD"][file_parts[-1]].set(
                    times[0][0] + ":" + times[0][1] + ":" + times[0][2])

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["ISOTOPES"] = df_isotopes
                self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
                self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]

            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if self.file_loaded == False:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_exmpl = DE(filename_long=file_smpl).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_exmpl = DE(filename_long=file_smpl).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                else:
                    file_parts = file_smpl .split("/")
                    df_exmpl = self.container_measurements["Dataframe"][file_parts[-1]]

                if (self.container_icpms["name"] != None and
                        self.container_icpms["name"] not in ["PerkinElmer Syngistix"]):
                    var_skipheader = self.container_icpms["skipheader"]
                    var_skipfooter = self.container_icpms["skipfooter"]
                    var_timestamp = self.container_icpms["timestamp"]
                    var_icpms = self.container_icpms["name"]

                    dates, times = Data(filename=file_smpl).import_as_list(
                        skip_header=var_skipheader, skip_footer=var_skipfooter, timestamp=var_timestamp,
                        icpms=var_icpms)
                elif self.container_icpms["name"] == "PerkinElmer Syngistix":
                    var_os = sys.platform
                    if var_os not in ["linux", "darwin"]:
                        create_time = os.path.getctime(file_smpl)
                    else:
                        create_time = os.path.getmtime(file_smpl)

                    create_date = datetime.datetime.fromtimestamp(create_time)
                    hour = create_date.strftime("%H")
                    minute = create_date.strftime("%M")
                    second = create_date.strftime("%S")
                    year = create_date.strftime("%Y")
                    month = create_date.strftime("%m")
                    day = create_date.strftime("%d")
                    times = [[str(hour), str(minute), str(second)]]
                    dates = [str(year), str(month), str(day)]
                else:
                    dates, times = Data(filename=file_smpl).import_as_list(
                        skip_header=3, skip_footer=1, timestamp=2,
                        icpms="Agilent 7900s")

                if file_parts[-1] not in self.container_var["acquisition times"]["SMPL"]:
                    self.container_var["acquisition times"]["SMPL"][file_parts[-1]] = tk.StringVar()
                self.container_var["acquisition times"]["SMPL"][file_parts[-1]].set(
                    times[0][0] + ":" + times[0][1] + ":" + times[0][2])

                self.times = DE().get_times(dataframe=df_exmpl)
                df_isotopes = DE().get_isotopes(dataframe=df_exmpl)
                self.container_lists["ISOTOPES"] = df_isotopes
                self.container_lists["Measured Isotopes"][file_parts[-1]] = df_isotopes
                self.container_lists["Measured Isotopes"]["All"] = self.container_lists["ISOTOPES"]


            for isotope in self.container_lists["Measured Isotopes"]["All"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if element not in self.container_lists["Measured Elements"]["All"]:
                    self.container_lists["Measured Elements"]["All"].append(element)

            for filename_short in self.container_lists["STD"]["Short"]:
                self.container_lists["Measured Elements"][filename_short] = {}
                self.container_lists["Measured Isotopes"][filename_short] = df_isotopes
                for isotope in self.container_lists["Measured Isotopes"][filename_short]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element not in self.container_lists["Measured Elements"][filename_short]:
                        self.container_lists["Measured Elements"][filename_short][element] = [isotope]
                    else:
                        if isotope not in self.container_lists["Measured Elements"][filename_short][element]:
                            self.container_lists["Measured Elements"][filename_short][element].append(isotope)

            for filename_short in self.container_lists["SMPL"]["Short"]:
                self.container_lists["Measured Elements"][filename_short] = {}
                self.container_lists["Measured Isotopes"][filename_short] = df_isotopes
                for isotope in self.container_lists["Measured Isotopes"][filename_short]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element not in self.container_lists["Measured Elements"][filename_short]:
                        self.container_lists["Measured Elements"][filename_short][element] = [isotope]
                    else:
                        if isotope not in self.container_lists["Measured Elements"][filename_short][element]:
                            self.container_lists["Measured Elements"][filename_short][element].append(isotope)

            self.define_isotope_colors()
        else:
            self.mi_current_file_std = self.container_lists["STD"]["Long"][0]
            self.mi_current_file_smpl = self.container_lists["SMPL"]["Long"][0]
            self.define_isotope_colors()

        ## Window Settings
        window_width = 1260
        window_heigth = 1000
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_mi_settings = tk.Toplevel(self.parent)
        self.subwindow_mi_settings.title("MELT INCLUSION ANALYSIS - Setup")
        self.subwindow_mi_settings.geometry(var_geometry)
        self.subwindow_mi_settings.resizable(False, False)
        self.subwindow_mi_settings["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_mi_settings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_mi_settings, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_mi_settings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_mi_settings.grid_columnconfigure(i, minsize=column_min)
        #
        ## INITIALIZATION
        for isotope in self.container_lists["ISOTOPES"]:
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            #
            if element not in self.container_lists["Elements"]:
                self.container_lists["Elements"].append(element)

        ## Static
        # Build section 'Project Information'
        var_project_information = {"Row start": 0, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_project_information(var_geometry_info=var_project_information)
        # Build section 'Standard Reference Material'
        var_standard_reference_material = {"Row start": 3, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_standard_reference_material(var_geometry_info=var_standard_reference_material)
        # Build section 'Matrix Settings'
        var_sample_settings = {"Row start": 6, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_sample_settings(var_geometry_info=var_sample_settings)
        # Build section 'Quantification Method'
        var_quantification_method = {"Row start": 8, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_quantification_method(var_geometry_info=var_quantification_method)
        # Build section 'Assemblage Setup'
        var_assemblage_setup = {"Row start": 12, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_assemblage_setup(var_geometry_info=var_assemblage_setup)
        # Build section 'Dwell Time Setup'
        var_dwell_time_setup = {"Row start": 14, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_dwell_time_setup(var_geometry_info=var_dwell_time_setup)
        # Build section 'Calculation Window (Background) Setup'
        var_calculation_window_bg_setup = {"Row start": 16, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_calculation_window_bg(var_geometry_info=var_calculation_window_bg_setup)
        # Build section 'Spike Elimination Setup'
        var_spike_elimination_setup = {"Row start": 20, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_spike_elimination_setup(var_geometry_info=var_spike_elimination_setup)
        # Build section 'Check-Up'
        var_checkup = {"Row start": 27, "Column start": 0, "N rows": 1, "N columns": 18}
        self.place_checkup_feature(var_geometry_info=var_checkup)
        # Build section 'Acquisition Times'
        var_acquisition_times_check = {"Row start": 18, "Column start": 44, "N rows": 1, "N columns": 18}
        self.place_acquisition_times_check(var_geometry_info=var_acquisition_times_check)
        # Build section 'Standard Files'
        var_standard_files = {"Row start": 0, "Column start": 19, "N rows": 16, "N columns": 24}
        self.place_standard_files_table(var_geometry_info=var_standard_files)
        # Build section 'Sample Files'
        var_sample_files = {"Row start": 18, "Column start": 19, "N rows": 19, "N columns": 24}
        self.place_sample_files_table(var_geometry_info=var_sample_files)
        # Build section 'Time-Signal Diagram Checker'
        self.define_isotope_colors()
        var_time_signal_diagram_check = {"Row start": 26, "Column start": 44, "N rows": 1, "N columns": 18}
        self.place_time_signal_plot_checker(var_geometry_info=var_time_signal_diagram_check)
        # Build section 'Measured Isotopes'
        var_measured_isotopes = {"Row start": 1, "Column start": 44, "N rows": 16, "N columns": 18}
        self.place_measured_isotopes_overview(var_geometry_info=var_measured_isotopes)

        ## INITIALIZATION
        self.select_spike_elimination(
            var_opt=self.container_var["Spike Elimination Method"].get(),
            start_row=var_spike_elimination_setup["Row start"], mode="FI")

        if self.file_loaded == False:
            self.select_is_default(var_opt=self.container_var["IS"]["Default STD"].get())
            self.select_id_default(var_opt=self.container_var["ID"]["Default SMPL"].get())
            self.select_srm_default(var_opt=self.container_var["SRM"]["default"][0].get())
            self.select_srm_default(var_opt=self.container_var["SRM"]["default"][1].get(), mode="ISOTOPES")
            #
        else:
            self.select_srm_initialization()
        #
        for filetype in ["STD", "SMPL"]:
            if self.container_var["Spike Elimination"][filetype]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                    #
                    self.spike_elimination_all(filetype=filetype, algorithm=var_method)

        self.build_srm_database()
        self.file_system_need_update = False

        self.select_opt_inclusion_is_quantification(var_opt="Mass Balance", dict_geometry_info=var_quantification_method)
        self.select_opt_inclusion_quantification(
            var_opt="Matrix-only Tracer (SILLS)", dict_geometry_info=var_quantification_method)

    def change_rb_inclusion_setup(self):
        if self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 1:
            self.btn_setup_massbalance.configure(state="normal")
            self.btn_setup_chargebalance.configure(state="disabled")
            self.btn_setup_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 2:
            self.btn_setup_massbalance.configure(state="disabled")
            self.btn_setup_chargebalance.configure(state="normal")
            self.btn_setup_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 3:
            self.btn_setup_massbalance.configure(state="disabled")
            self.btn_setup_chargebalance.configure(state="disabled")
            self.btn_setup_plugin.configure(state="normal")
    #
    def change_rb_quantification_setup(self):
        if self.pysills_mode == "FI":
            var_setting_key = "fi_setting"
        elif self.pysills_mode == "MI":
            var_setting_key = "mi_setting"

        if self.container_var[var_setting_key]["Quantification Method"].get() == 1:
            self.btn_setup_quantification_matrixonly.configure(state="normal")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            if self.pysills_mode == "FI":
                self.btn_setup_quantification_plugin.configure(state="disabled")
            elif self.pysills_mode == "MI":
                self.btn_setup_quantification_halter.configure(state="disabled")
                self.btn_setup_quantification_borisova.configure(state="disabled")
        elif self.container_var[var_setting_key]["Quantification Method"].get() == 2:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="normal")
            if self.pysills_mode == "FI":
                self.btn_setup_quantification_plugin.configure(state="disabled")
            elif self.pysills_mode == "MI":
                self.btn_setup_quantification_halter.configure(state="disabled")
                self.btn_setup_quantification_borisova.configure(state="disabled")
        elif self.container_var[var_setting_key]["Quantification Method"].get() == 3:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            if self.pysills_mode == "FI":
                self.btn_setup_quantification_plugin.configure(state="normal")
            elif self.pysills_mode == "MI":
                self.btn_setup_quantification_halter.configure(state="normal")
                self.btn_setup_quantification_borisova.configure(state="disabled")
        elif self.container_var[var_setting_key]["Quantification Method"].get() == 4:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            self.btn_setup_quantification_halter.configure(state="disabled")
            self.btn_setup_quantification_borisova.configure(state="normal")

    #########################
    ## Calculation Methods ##
    #########################
    def fi_get_intensity_mix(self, var_filetype, var_datatype, var_file_short, mode="Specific"):
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_intensity_incl_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["INCL"][
                            isotope]
                var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]

                var_result_i = var_intensity_incl_i - var_intensity_bg_i

                if var_result_i < 0:
                    var_result_i = 0.0

                self.container_intensity_mix[var_filetype][var_datatype][var_file_short][isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                self.fi_get_intensity_mix(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short)
                                var_result_i = self.container_intensity_mix[var_filetype][var_datatype][var_file_short][
                                    isotope]
                                helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)
                    self.container_intensity_mix[var_filetype][var_datatype][isotope] = var_result_i

    def fi_get_intensity_corrected(self, var_filetype, var_datatype, var_file_short, var_focus, mode="Specific"):
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                    isotope]
                var_intensity_mat_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope]
                if var_focus == "MAT":
                    var_result = var_intensity_mat_i - var_intensity_bg_i
                elif var_focus == "INCL":
                    var_index = self.container_lists[var_filetype]["Short"].index(var_file_short)
                    var_file_long = self.container_lists[var_filetype]["Long"][var_index]

                    if self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                        var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                    elif self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                        var_t = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
                    elif self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                        var_t = self.container_var["Halter2002"]["Name"].get()
                    elif self.container_var["fi_setting"][
                        "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                        var_t = self.container_var["Borisova2021"]["Name"].get()

                    var_intensity_incl_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["INCL"][
                        isotope]
                    var_intensity_bg_t = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                        var_t]
                    var_intensity_mat_t = self.container_intensity[var_filetype][var_datatype][var_file_short]["MAT"][
                        var_t]
                    var_intensity_incl_t = self.container_intensity[var_filetype][var_datatype][var_file_short]["INCL"][
                        var_t]

                    var_intensity_host_i = abs(var_intensity_mat_i - var_intensity_bg_i)
                    var_intensity_mix_i = var_intensity_incl_i - var_intensity_bg_i
                    var_intensity_host_t = var_intensity_mat_t - var_intensity_bg_t
                    var_intensity_incl_host_t = var_intensity_incl_t - var_intensity_bg_t
                    var_intensity_mix_t = var_intensity_incl_host_t
                    var_intensity_incl_host_i = (var_intensity_incl_host_t/var_intensity_host_t)*var_intensity_host_i

                    if self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get() == 0:
                        # Heinrich (2003)
                        var_result = round(self.calculate_intensity_incl_heinrich(
                            intensity_mix_i=var_intensity_mix_i, intensity_mix_t=var_intensity_mix_t,
                            intensity_mat_i=var_intensity_host_i, intensity_mat_t=var_intensity_host_t), 6)
                    elif self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get() == 1:
                        # SILLS Equation Sheet
                        ## without R
                        var_result = round(self.calculate_intensity_incl_sills(
                            intensity_mix_i=var_intensity_mix_i, intensity_incl_mat_i=var_intensity_incl_host_i), 6)
                    elif self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get() == 2:
                        # SILLS Equation Sheet
                        ## with R
                        var_result = round(self.calculate_intensity_incl_sills(
                            intensity_mix_i=var_intensity_mix_i, intensity_incl_mat_i=var_intensity_incl_host_i,
                            intensity_mat_i=var_intensity_host_i, with_r=True), 6)
                    elif self.container_var["fi_setting"]["Inclusion Intensity Calculation"].get() == 3:
                        # Theory
                        var_result = round(self.calculate_intensity_incl_theory(
                            intensity_incl_total_i=var_intensity_incl_i, intensity_bg_i=var_intensity_bg_i,
                            intensity_incl_mat_i=var_intensity_incl_host_i), 6)

                elif var_focus == "BG":
                    var_result = var_intensity_bg_i

                if var_result < 0:
                    var_result = 0.0

                self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result
        elif mode == "All":
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["BG", "MAT"]
                else:
                    focus_set = ["BG", "MAT", "INCL"]
                for var_focus in focus_set:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_intensity_corrected(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_focus=var_focus)
                                    var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
        elif mode == "only STD":
            for var_filetype in ["STD"]:
                for var_focus in ["MAT"]:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_intensity_corrected(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_focus=var_focus)
                                    var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
        elif mode == "only SMPL":
            for var_filetype in ["SMPL"]:
                for var_focus in ["MAT", "INCL"]:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_intensity_corrected(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_focus=var_focus)
                                    var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i

    def calculate_intensity_incl_heinrich(self, intensity_mix_i, intensity_mix_t, intensity_mat_i, intensity_mat_t):
        intensity_incl_i = intensity_mix_i - intensity_mix_t*(intensity_mat_i/intensity_mat_t)
        return intensity_incl_i

    def calculate_intensity_incl_sills(self, intensity_mix_i, intensity_incl_mat_i, intensity_mat_i=None, with_r=False):
        if with_r == False:
            intensity_incl_i = intensity_mix_i - intensity_incl_mat_i
        else:
            factor_r = intensity_incl_mat_i/intensity_mat_i
            intensity_incl_i = intensity_mix_i - factor_r*intensity_mat_i
        return intensity_incl_i

    def calculate_intensity_incl_theory(self, intensity_incl_total_i, intensity_bg_i, intensity_incl_mat_i):
        intensity_incl_i = intensity_incl_total_i - intensity_bg_i - intensity_incl_mat_i
        return intensity_incl_i

    def fi_get_intensity_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus,
                                    mode="Specific"):
        if mode == "Specific":
            if var_filetype == "STD":
                var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                for element, value in sorted(
                        self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                    if element in self.container_lists["Measured Elements"][var_file_short]:
                        var_is = self.container_lists["Measured Elements"][var_file_short][element][0]
                    break
            else:
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            if var_focus in ["MAT", "INCL"]:
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            else:
                var_intensity_is = self.container_intensity[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            for isotope in file_isotopes:
                if var_focus in ["MAT", "INCL"]:
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                else:
                    var_intensity_i = self.container_intensity[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                #
                var_result = var_intensity_i/var_intensity_is
                self.container_intensity_ratio[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["BG", "MAT", "INCL"]:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_intensity_ratio(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long, var_focus=var_focus)
                                    var_result_i = self.container_intensity_ratio[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_intensity_ratio[var_filetype][var_datatype][isotope] = var_result_i

    def fi_get_normalized_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                if var_filetype == "STD":
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    #
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_concentration_i = self.srm_actual[var_srm_i][element]
                    #
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    #
                    var_result_i = var_intensity_i/var_concentration_i
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                    #
                else:
                    sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        var_is]

                    intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]

                    var_result_i = sensitivity_i*(intensity_is/concentration_is)
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_normalized_sensitivity(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_normalized_sensitivity[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_normalized_sensitivity[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_rsf(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus, mode="Specific"):
        """ Calculates the Relative Sensitivity Factor, RSF, based on the following two equations:
        1) Standard Files:  RSF_i = 1
        2) Sample Files:    RSF_i = sensitivity_i*(concentration_std_i/intensity_std_i)*
                                    (intensity_smpl_is/concentration_smpl_is)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)
        var_focus : str
            The focus category, e.g. MAT

        Returns
        -------
        """
        #
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            if var_filetype == "STD":
                for isotope in file_isotopes:
                    var_result_i = 1
                    self.container_rsf[var_filetype][var_datatype][var_file_short][var_focus][isotope] = var_result_i
            elif var_filetype == "SMPL":
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                var_concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                 "Concentration"].get())
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
                for isotope in file_isotopes:
                    var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                        var_file_short]["MAT"][isotope]
                    #
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_concentration_i = self.srm_actual[var_srm_i][element]
                    #
                    var_intensity_i = self.container_intensity_corrected["STD"][var_datatype]["MAT"][isotope]
                    #
                    if var_concentration_is > 0 and var_intensity_i > 0:
                        var_result_i = var_sensitivity_i*(var_concentration_i/var_intensity_i)*\
                                       (var_intensity_is/var_concentration_is)
                    else:
                        var_result_i = 0
                    #
                    self.container_rsf[var_filetype][var_datatype][var_file_short][var_focus][isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]
                #
                for var_focus in focus_set:
                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_rsf(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long, var_focus=var_focus)
                                    var_result_i = self.container_rsf[var_filetype][var_datatype][var_file_short][
                                        var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_rsf[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_concentration(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus="MAT",
                             mode="Specific", pypitzer=False):
        """ Calculates the concentration, C, based on the following two equations:
        1) Standard Files:  C_i = SRM_dataset(element)
        2) Sample Files:    C_i = (intensity_smpl_i/intensity_smpl_is)*(concentration_smpl_is/sensitivity_i)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            if var_filetype == "STD":
                for isotope in file_isotopes:
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_result_i = self.srm_actual[var_srm_i][element]
                    self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
            elif var_filetype == "SMPL":
                #if self.pypitzer_performed == False:
                var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()

                if self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                    var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                    var_concentration_host_t = float(self.container_var["SMPL"][var_file_long]["Host Only Tracer"][
                                                         "Value"].get())
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                    var_t = self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Name"].get()
                    var_concentration_host_t = float(
                        self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Concentration"].get())
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                    var_t = self.container_var["Halter2002"]["Name"].get()
                    var_concentration_host_t = float(
                        self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Concentration"].get())
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                    var_t = self.container_var["Borisova2021"]["Name"].get()
                    var_concentration_host_t = float(
                        self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Concentration"].get())

                var_intensity_host_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]
                var_intensity_host_t = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_t]
                var_sensitivity_t = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_t]

                var_concentration_host_is = (var_intensity_host_is*var_sensitivity_t*var_concentration_host_t)/\
                                            (var_intensity_host_t)

                for index, isotope in enumerate(file_isotopes):
                    if var_focus == "MAT":
                        # Classical Mineral Analysis
                        var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]

                        if var_intensity_host_is > 0 and var_sensitivity_i > 0:
                            var_result_i = (var_intensity_i/var_intensity_host_is)*\
                                           (var_concentration_host_is/var_sensitivity_i)
                        else:
                            var_result_i = 0.0

                        self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
                    else:
                        # Matrix-only Tracer Method
                        if self.container_var["fi_setting"][
                            "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                            if self.container_var["fi_setting"]["Inclusion Concentration Calculation"].get() == 0:
                                # Simple Signals (SILLS)
                                var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()

                                if pypitzer == False:
                                    if self.pypitzer_performed == False:
                                        var_concentration_incl_is = float(
                                            self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].get())
                                    else:
                                        var_concentration_incl_is = float(
                                            self.container_var["SMPL"][var_file_long]["IS Data"][var_datatype][
                                                "Concentration"].get())
                                else:
                                    var_concentration_incl_is = 10000

                                var_intensity_incl_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short]["INCL"][isotope]
                                var_intensity_incl_is = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short]["INCL"][var_is]
                                var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                    var_file_short]["MAT"][isotope]

                                ## Inclusion concentration
                                var_result_i = (var_intensity_incl_i/var_intensity_incl_is)*(
                                        var_concentration_incl_is/var_sensitivity_i)
                            else:
                                # Using x
                                var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()

                                var_intensity_mix_t = self.container_intensity_mix["SMPL"][var_datatype][
                                    var_file_short][var_t]
                                var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][
                                    var_file_short][var_is]
                                var_sensitivity_t = self.container_analytical_sensitivity["SMPL"][var_datatype][
                                    var_file_short]["MAT"][var_t]

                                ## Mixed concentration ratio a
                                var_a = self.calculate_mixed_concentration_ratio(
                                    intensity_mix_i=var_intensity_mix_t, intensity_mix_IS=var_intensity_mix_is,
                                    sensitivity_IS_i=var_sensitivity_t)

                                var_concentration_host_t = self.container_concentration["SMPL"][var_datatype][
                                    var_file_short]["MAT"][var_t]
                                var_concentration_host_is = self.container_concentration["SMPL"][var_datatype][
                                    var_file_short]["MAT"][var_is]

                                if pypitzer == False:
                                    var_concentration_incl_is = float(
                                        self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].get())
                                else:
                                    var_concentration_incl_is = 10000

                                ## Mixing ratio x
                                var_x = self.calculate_mixing_ratio(
                                    factor_a=var_a, concentration_mat_i=var_concentration_host_t,
                                    concentration_mat_IS=var_concentration_host_is, concentraton_incl_i=0,
                                    concentration_incl_IS=var_concentration_incl_is)

                                var_concentration_mix_is = ((1 - var_x)*var_concentration_host_is + var_x*
                                                            var_concentration_incl_is)

                                var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][
                                    var_file_short][isotope]
                                var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][
                                    var_file_short][var_is]
                                var_intensity_host_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short]["MAT"][isotope]
                                var_intensity_host_is = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short]["MAT"][var_is]
                                var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][
                                    var_file_short]["MAT"][isotope]

                                ## Inclusion concentration
                                var_result_i = (1/(var_x*var_sensitivity_i))*(
                                        (var_concentration_mix_is/var_intensity_mix_is)*var_intensity_mix_i +
                                        (var_x - 1)*(var_concentration_host_is/var_intensity_host_is)*
                                        var_intensity_host_i)

                            if var_result_i < 0:
                                var_result_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["INCL"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["Matrix-Only"][
                                isotope] = var_result_i
                        # Second Internal Standard
                        elif self.container_var["fi_setting"][
                            "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                            var_is1 = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
                            var_is2 = self.container_var["SMPL"][var_file_long]["Second Internal Standard"][
                                "Name"].get()

                            ## Mixed concentration ratio a
                            var_intensity_mix_is1 = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                var_is1]
                            var_intensity_mix_is2 = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                var_is2]
                            var_sensitivity_is2 = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_is2]

                            var_a = self.calculate_mixed_concentration_ratio(
                                intensity_mix_i=var_intensity_mix_is2, intensity_mix_IS=var_intensity_mix_is1,
                                sensitivity_IS_i=var_sensitivity_is2)

                            ## Mixing ratio x
                            var_concentration_host_is1 = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][var_is1]
                            var_concentration_host_is2 = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][var_is2]

                            if pypitzer == False:
                                var_concentration_incl_is1 = float(
                                    self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].get())
                            else:
                                var_concentration_incl_is1 = 10000

                            var_concentration_incl_is2 = float(self.container_var["SMPL"][var_file_long][
                                "Second Internal Standard"]["Value"].get())

                            var_x = self.calculate_mixing_ratio(
                                factor_a=var_a, concentration_mat_i=var_concentration_host_is2,
                                concentration_mat_IS=var_concentration_host_is1,
                                concentraton_incl_i=var_concentration_incl_is2,
                                concentration_incl_IS=var_concentration_incl_is1)

                            ## Mixed Concentration IS1
                            var_concentration_mix_is1 = ((1 - var_x)*var_concentration_host_is1 +
                                                         var_x*var_concentration_incl_is1)

                            ## Mixed Concentrations
                            var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]

                            var_concentration_mix_i = (var_intensity_mix_i/var_intensity_mix_is1)*(
                                    var_concentration_mix_is1/var_sensitivity_i)
                            var_concentration_host_i = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][isotope]
                            ## Inclusion Concentrations
                            var_result_i = (var_concentration_mix_i - (1 - var_x)*var_concentration_host_i)/var_x

                            if var_result_i < 0:
                                var_result_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["INCL"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["Second-Internal"][
                                isotope] = var_result_i
                        elif self.container_var["fi_setting"][
                            "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                            # Mixing ratio x
                            if index == 0:
                                var_x, var_concentration_mix_is = self.estimate_x_halter2002(
                                    datatype=var_datatype, filename_long=var_file_long, filename_short=var_file_short)
                            var_concentration_host_i = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                isotope]
                            var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                var_is]
                            var_concentration_mix_i =(var_intensity_mix_i/var_intensity_mix_is)*(
                                    var_concentration_mix_is/var_sensitivity_i)

                            var_result_i = (var_concentration_mix_i + (var_x - 1)*var_concentration_host_i)/var_x

                            if var_result_i < 0:
                                var_result_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["INCL"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["Halter2002"][
                                isotope] = var_result_i
                        elif self.container_var["fi_setting"][
                            "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                            var_concentration_host_is = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][var_is]
                            var_rho_host_i = float(self.container_var["SMPL"][var_file_long]["Borisova2021"][
                                                       "rho(host)"].get())
                            var_rho_incl_i = float(self.container_var["SMPL"][var_file_long]["Borisova2021"][
                                                       "rho(incl)"].get())
                            var_radius_host_i = float(self.container_var["SMPL"][var_file_long]["Borisova2021"][
                                                          "R(host)"].get())
                            var_radius_incl_i = float(self.container_var["SMPL"][var_file_long]["Borisova2021"][
                                                          "R(incl)"].get())
                            var_normalized_sensitivity_i = self.container_normalized_sensitivity["SMPL"][var_datatype][
                                var_file_short]["MAT"][isotope]
                            var_normalized_sensitivity_is = self.container_normalized_sensitivity["SMPL"][var_datatype][
                                var_file_short]["MAT"][var_is]
                            var_intensity_incl_i = self.container_intensity_corrected["SMPL"][var_datatype][
                                var_file_short]["INCL"][isotope]
                            var_intensity_incl_is = self.container_intensity_corrected["SMPL"][var_datatype][
                                var_file_short]["INCL"][var_is]

                            if pypitzer == False:
                                var_concentration_incl_is = float(
                                    self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].get())
                            else:
                                var_concentration_incl_is = 10000

                            var_factor_s_i = var_normalized_sensitivity_is/var_normalized_sensitivity_i
                            var_factor_k_i = ((var_rho_incl_i/var_rho_host_i)*
                                              (var_intensity_incl_i/var_intensity_incl_is)*
                                              (var_concentration_incl_is/var_concentration_host_is)*
                                              (var_radius_incl_i**2)/(1.5*var_radius_host_i**2 - var_radius_incl_i**2))

                            # Inclusion Concentration
                            var_result_i = (var_concentration_host_is*(var_rho_host_i/var_rho_incl_i)*var_factor_s_i*
                                            var_factor_k_i*(1.5*var_radius_host_i**2 - var_radius_incl_i**2)/(
                                                    var_radius_incl_i**2))

                            if var_result_i < 0:
                                var_result_i = 0.0

                            self.container_concentration[var_filetype][var_datatype][var_file_short]["INCL"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["Borisova2021"][
                                isotope] = var_result_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]

                for var_focus in focus_set:
                    if var_focus not in self.container_concentration[var_filetype][var_datatype]:
                        self.container_concentration[var_filetype][var_datatype][var_focus] = {}

                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []

                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

                                if isotope in file_isotopes:
                                    self.fi_get_concentration(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long, var_focus=var_focus,
                                        pypitzer=pypitzer)
                                    var_result_i = self.container_concentration[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_concentration[var_filetype][var_datatype][var_focus][isotope] = var_result_i

    def calculate_mixed_concentration_ratio(self, intensity_mix_i, intensity_mix_IS, sensitivity_IS_i):
        """ Calculates the mixed concentration ratio a.
        1) Matrix-only-Tracer:      a = C_t^MIX/C_IS^MIX    - i = t
        2) 2nd Internal Standard:   a = C_IS2^MIX/C_IS1^MIX - i = IS2, IS=IS1

        Parameters
        ----------
        intensity_mix_i : float
            The mixed intensity of i
        intensity_mix_IS : float
            The mixed intensity of IS
        sensitivity_IS_i : float
            The analytical sensitivity of i with respect to IS
        Returns
        -------
        """
        val_a = intensity_mix_i/(intensity_mix_IS*sensitivity_IS_i)
        return val_a

    def calculate_mixing_ratio_geometric_approach(self, filename_long):
        """ Calculates the mixing ratio x.
        Parameters
        ----------
        filename_long : string
            The long version of the filename (whole path)
        Returns
        -------
        val_x : float
            The mixing ratio
        """
        str_filename_long = filename_long

        val_a = float(self.container_var["SMPL"][str_filename_long]["Halter2002"]["a"].get())
        val_b = float(self.container_var["SMPL"][str_filename_long]["Halter2002"]["b"].get())
        val_rho_incl = float(self.container_var["SMPL"][str_filename_long]["Halter2002"]["rho(incl)"].get())
        val_rho_host = float(self.container_var["SMPL"][str_filename_long]["Halter2002"]["rho(host)"].get())
        val_radius = float(self.container_var["SMPL"][str_filename_long]["Halter2002"]["R"].get())

        upper_term = (4/3)*np.pi*val_a*val_b*val_rho_incl
        lower_term = ((2*np.pi*val_radius**2 - (4/3)*np.pi*val_a*val_b)*val_rho_host + (4/3)*np.pi*val_a*val_b*
                      val_rho_incl)
        val_x = upper_term/lower_term

        return val_x

    def calculate_mixing_ratio(self, factor_a, concentration_mat_i, concentration_mat_IS, concentraton_incl_i,
                               concentration_incl_IS):
        """ Calculates the mixing ratio x.
        1) Matrix-only-Tracer:      i = t
        2) 2nd Internal Standard:   i = IS2, IS=IS1
        Parameters
        ----------
        factor_a : float
            The mixed concentration ratio
        concentration_mat_i : float
            The matrix concentration of i
        concentration_mat_IS : float
            The matrix concentration of IS
        concentraton_incl_i : float
            The inclusion concentration of i
        concentration_incl_IS : float
            The inclusion concentration of IS
        Returns
        -------
        val_x : float
            The mixing ratio
        """
        upper_term = concentration_mat_i - factor_a*concentration_mat_IS
        lower_term = concentration_mat_i - concentraton_incl_i - factor_a*(concentration_mat_IS - concentration_incl_IS)
        val_x = upper_term/lower_term
        return val_x

    def fi_get_mixed_concentration_ratio(self, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the mixed concentration ratio a.
        1) Matrix-only-Tracer:      a = C_t^MIX/C_IS^MIX
        2) 2nd Internal Standard:   a = C_IS2^MIX/C_IS1^MIX

        Parameters
        ----------
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)
        mode : str
            The calculation mode, e.g. "Specific"

        Returns
        -------
        """
        if mode == "Specific":
            var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

            if self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                var_mo = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                var_mo = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                var_mo = self.container_var["Halter2002"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                var_mo = self.container_var["Borisova2021"]["Name"].get()

            for isotope in file_isotopes:
                if self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                    var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_mo]
                    var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                    var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_mo]
                    var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                    var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_mo]
                    var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                    var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_mo]
                    var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]

                var_result_i = var_intensity_mix_i/(var_intensity_mix_is*var_sensitivity_i)
                self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                self.fi_get_mixed_concentration_ratio(
                                    var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long)
                                var_result_i = self.container_mixed_concentration_ratio[var_filetype][var_datatype][
                                    var_file_short][isotope]
                                helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)
                    self.container_mixed_concentration_ratio[var_filetype][var_datatype][isotope] = var_result_i

    def fi_get_mixing_ratio(self, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

            if self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                var_mo = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                var_is1 = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
                var_is2 = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                var_mo = self.container_var["Halter2002"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                var_mo = self.container_var["Borisova2021"]["Name"].get()

            for isotope in file_isotopes:
                if self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                    var_a = self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope]
                    var_concentration_host_mo = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                    var_concentration_host_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_concentration_incl_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "INCL"][var_is]

                    upper_term = var_concentration_host_mo - var_a*var_concentration_host_is
                    lower_term = var_concentration_host_mo - var_a*(
                            var_concentration_host_is - var_concentration_incl_is)
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                    var_a = self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope]
                    var_concentration_host_is1 = self.container_concentration["SMPL"][var_datatype][
                        var_file_short]["MAT"][var_is1]
                    var_concentration_host_is2 = self.container_concentration["SMPL"][var_datatype][
                        var_file_short]["MAT"][var_is2]
                    var_concentration_incl_is1 = float(self.container_var["SMPL"][var_file_long]["IS Data"][
                                                           "Concentration"].get())
                    var_concentration_incl_is2 = float(self.container_var["SMPL"][var_file_long][
                                                           "Second Internal Standard"]["Value"].get())

                    upper_term = var_concentration_host_is2 - var_a*var_concentration_host_is1
                    lower_term = var_concentration_host_is2 - var_concentration_incl_is2 - var_a*(
                            var_concentration_host_is1 - var_concentration_incl_is1)
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Geometric Approach (Halter et al. 2002)":
                    var_a = self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope]
                    var_concentration_host_mo = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                    var_concentration_host_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_concentration_incl_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "INCL"][var_is]

                    upper_term = var_concentration_host_mo - var_a*var_concentration_host_is
                    lower_term = var_concentration_host_mo - var_a*(
                            var_concentration_host_is - var_concentration_incl_is)
                elif self.container_var["fi_setting"][
                    "Quantification Method Option"].get() == "Geometric Approach (Borisova et al. 2021)":
                    var_a = self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope]
                    var_concentration_host_mo = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                    var_concentration_host_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_concentration_incl_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "INCL"][var_is]

                    upper_term = var_concentration_host_mo - var_a*var_concentration_host_is
                    lower_term = var_concentration_host_mo - var_a*(
                            var_concentration_host_is - var_concentration_incl_is)

                if lower_term != 0:
                    var_result_i = upper_term/lower_term
                else:
                    var_result_i = 0

                self.container_mixing_ratio["SMPL"][var_datatype][var_file_short][isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                self.fi_get_mixing_ratio(
                                    var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long)
                                var_result_i = self.container_mixing_ratio[var_filetype][var_datatype][var_file_short][
                                    isotope]
                                helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)
                    self.container_mixing_ratio["SMPL"][var_datatype][isotope] = var_result_i

    def fi_get_concentration_mixed(self, var_datatype, var_file_short, mode="Specific"):
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_x = self.container_mixing_ratio["SMPL"][var_datatype][var_file_short][isotope]
                var_concentration_host_i = self.container_concentration["SMPL"][var_datatype][var_file_short]["MAT"][
                    isotope]
                var_concentration_incl_i = self.container_concentration["SMPL"][var_datatype][var_file_short]["INCL"][
                    isotope]
                var_result_i = (1 - var_x)*var_concentration_host_i + var_x*var_concentration_incl_i
                self.container_mixed_concentration["SMPL"][var_datatype][var_file_short][isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["Measured Isotopes"]["All"]:
                    helper_results = []
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                            if isotope in file_isotopes:
                                self.fi_get_concentration_mixed(
                                    var_datatype=var_datatype, var_file_short=var_file_short)
                                var_result_i = self.container_mixed_concentration[var_filetype][var_datatype][
                                    var_file_short][isotope]
                                helper_results.append(var_result_i)

                    if self.container_var["General Settings"]["Desired Average"].get() == 1:
                        var_result_i = np.mean(helper_results)
                    else:
                        var_result_i = np.median(helper_results)
                    self.container_mixed_concentration[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_concentration_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus,
                                   mode="Specific"):
        """ Calculates the concentration ratio, C_i/C_is, based on the following two equations:
                1) Standard Files:  C_i = C_std_i/C_std_is
                2) Sample Files:    C_i = C_smpl_i/C_smpl_is

                Parameters
                ----------
                var_filetype : str
                    The file category, e.g. STD
                var_datatype : str
                    The data category, e.g. RAW
                var_file_short : str
                    The file as a short version (without the complete filepath)
                var_file_long : str
                    The file as the long version (with the complete filepath)
                var_focus : str
                    The focus category, e.g. MAT

                Returns
                -------
                """
        if mode == "Specific":
            if var_filetype == "STD":
                var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                for element, value in sorted(
                        self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                    if element in self.container_lists["Measured Elements"][var_file_short]:
                        var_is = self.container_lists["Measured Elements"][var_file_short][element][0]
                    break
            else:
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short][var_focus][
                var_is]
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short][
                    var_focus][isotope]

                if var_concentration_is > 0:
                    var_result_i = var_concentration_i/var_concentration_is
                else:
                    var_result_i = 0

                self.container_concentration_ratio[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result_i
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]

                for var_focus in focus_set:
                    if var_focus not in self.container_concentration_ratio[var_filetype][var_datatype]:
                        self.container_concentration_ratio[var_filetype][var_datatype][var_focus] = {}

                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_concentration_ratio(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long, var_focus=var_focus)
                                    var_result_i = self.container_concentration_ratio[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_concentration_ratio[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
    #
    def fi_get_lod(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus, mode="Specific"):
        """ Calculates the Limit of Detection, LoD, based on the following two equations:
        1) Standard Files:  C_i = C_std_i/C_std_is
        2) Sample Files:    C_i = C_smpl_i/C_smpl_is

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        if mode == "Specific":
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            if var_filetype == "STD":
                for isotope in file_isotopes:
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []

                    for key, items in self.container_helper[var_filetype][var_file_short]["BG"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1]]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))

                    for key, items in self.container_helper[var_filetype][var_file_short]["MAT"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1]]
                        var_n_mat += len(var_data)

                    var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope]
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]

                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())

                        if var_n_bg > 0 and var_intensity_i > 0:
                            var_result_i = (3.29*(
                                    var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                                   var_n_mat*var_tau_i)*(var_concentration_i/var_intensity_i)
                        else:
                            var_result_i = 0.0

                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i

                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_sigma_bg_i = np.mean(helper_sigma_i)
                        else:
                            var_sigma_bg_i = np.median(helper_sigma_i)

                        var_result_i = (3*var_sigma_bg_i*var_concentration_i)/(var_intensity_i)*(
                                1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i

            elif var_filetype == "SMPL":
                for isotope in file_isotopes:
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short]["BG"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short][var_focus]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_mat += len(var_data)
                    #
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short][
                        var_focus][var_is]
                    var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        var_focus][var_is]
                    #
                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        #
                        var_result_i = (3.29*(
                                var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                               var_n_mat*var_tau_i*var_sensitivity_i)*(
                                                   var_concentration_is/var_intensity_is)
                        self.container_lod[var_filetype][var_datatype][var_file_short][var_focus][
                            isotope] = var_result_i
                        #
                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_sigma_bg_i = np.mean(helper_sigma_i)
                        else:
                            var_sigma_bg_i = np.median(helper_sigma_i)
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        #
                        var_result_i = (3*var_sigma_bg_i*var_concentration_is)/(
                                    var_sensitivity_i*var_intensity_is)*(
                                               1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short][var_focus][
                            isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]

                for var_focus in focus_set:
                    if var_focus not in self.container_lod[var_filetype][var_datatype]:
                        self.container_lod[var_filetype][var_datatype][var_focus] = {}

                    for isotope in self.container_lists["Measured Isotopes"]["All"]:
                        helper_results = []
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
                                if isotope in file_isotopes:
                                    self.fi_get_lod(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long, var_focus=var_focus)
                                    var_result_i = self.container_lod[var_filetype][var_datatype][var_file_short][
                                        var_focus][isotope]
                                    helper_results.append(var_result_i)

                        if self.container_var["General Settings"]["Desired Average"].get() == 1:
                            var_result_i = np.mean(helper_results)
                        else:
                            var_result_i = np.median(helper_results)
                        self.container_lod[var_filetype][var_datatype][var_focus][isotope] = var_result_i
    #
    ####################################################################################################################
    #
    def fi_datareduction_tables(self, init=False):
        ## Initialization
        if init == True:
            for var_filetype in ["STD", "SMPL"]:
                for var_file_short in self.container_lists[var_filetype]["Short"]:
                    self.get_condensed_intervals_of_file(filetype=var_filetype, filename_short=var_file_short)
            var_filetype = "None"
            var_file_short = "None"
            var_file_long = "None"
            var_focus = "None"
            #
            for var_datatype in ["RAW", "SMOOTHED"]:
                # Intensity Results
                self.get_intensity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_focus=var_focus, mode="All")
                self.fi_get_intensity_corrected(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_focus=var_focus, mode="All")
                self.fi_get_intensity_mix(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short, mode="All")
                # Sensitivity Results
                self.get_analytical_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                results_is = self.determine_possible_is(filetype="ALL")
                IQ(dataframe=None, project_type=self.pysills_mode,
                   results_container=self.container_intensity_ratio).get_intensity_ratio(
                    data_container=self.container_intensity_corrected, dict_is=results_is, datatype=var_datatype)
                self.fi_get_rsf(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                # Concentration Results
                self.fi_get_concentration(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                self.fi_get_normalized_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.fi_get_concentration_ratio(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                self.fi_get_lod(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                self.fi_get_mixed_concentration_ratio(
                    var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long, mode="All")
                self.fi_get_mixing_ratio(
                    var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long, mode="All")
                self.fi_get_concentration_mixed(var_datatype=var_datatype, var_file_short=var_file_short, mode="All")

        if self.container_var["fi_datareduction_files"]["File Type"].get() == 0:
            var_filetype = "STD"

            self.rb_04b.configure(state="disabled") # Inclusion
            self.rb_05d.configure(state="disabled") # Mixing Ratio a
            self.rb_05e.configure(state="disabled") # Mixing Ratio x
            self.rb_05f.configure(state="disabled") # Mixed Concentration
            self.rb_05h.configure(state="disabled") # Intensity Mix

            if self.container_var["fi_datareduction_files"]["Result Category"].get() not in [0, 1, 2, 6, 8, 9, 10]:
                self.container_var["fi_datareduction_files"]["Result Category"].set(0)
        elif self.container_var["fi_datareduction_files"]["File Type"].get() == 1:
            var_filetype = "SMPL"

            self.rb_04b.configure(state="normal") # Inclusion
            self.rb_05d.configure(state="normal") # Mixing Ratio a
            self.rb_05e.configure(state="normal") # Mixing Ratio x
            self.rb_05f.configure(state="normal") # Mixed Concentration
            self.rb_05h.configure(state="normal") # Intensity Mix

        if self.container_var["fi_datareduction_files"]["Data Type"].get() == 0:
            var_datatype = "RAW"
        elif self.container_var["fi_datareduction_files"]["Data Type"].get() == 1:
            var_datatype = "SMOOTHED"

        if self.container_var["fi_datareduction_files"]["Focus"].get() == 0:
            var_focus = "MAT"

            self.rb_01a.configure(state="normal") # Standard Files
            self.rb_05d.configure(state="disabled") # Mixing Ratio a
            self.rb_05e.configure(state="disabled") # Mixing Ratio x
            self.rb_05f.configure(state="disabled") # Mixed Concentration
            self.rb_05h.configure(state="disabled") # Intensity Mix

        elif self.container_var["fi_datareduction_files"]["Focus"].get() == 1:
            var_focus = "INCL"

            self.rb_01a.configure(state="disabled") # Standard Files
            self.rb_05d.configure(state="normal") # Mixing Ratio a
            self.rb_05e.configure(state="normal") # Mixing Ratio x
            self.rb_05f.configure(state="normal") # Mixed Concentration
            self.rb_05h.configure(state="normal") # Intensity Mix

        if len(self.tv_results_files.get_children()) > 0:
            for item in self.tv_results_files.get_children():
                self.tv_results_files.delete(item)

        var_id = self.container_var["ID"]["Results Files"].get()
        helper_values = {}
        helper_separator = ["-"]
        for isotope in self.container_lists["ISOTOPES"]:
            if isotope not in helper_values:
                helper_values[isotope] = []
                helper_separator.append("-")

        if self.container_var["fi_datareduction_files"]["Result Category"].get() == 0:  # Concentration
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_concentration[var_filetype][var_datatype][var_file][var_focus][
                                isotope]
                            value_lod = self.container_lod[var_filetype][var_datatype][var_file][var_focus][isotope]

                            if var_filetype == "SMPL":
                                n_digits = self.ma_determine_ndigits(var_value=value)
                            else:
                                n_digits = 1

                            if value >= value_lod or var_filetype == "STD":
                                entries_container.append(f"{value:.{n_digits}f}")
                                helper_values[isotope].append(value)
                            else:
                                entries_container.append("< LoD")

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 1:    # Concentration Ratio
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_concentration_ratio[var_filetype][var_datatype][var_focus][isotope]

                            entries_container.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 2:    # Limit of Detection
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_lod[var_filetype][var_datatype][var_file][var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 3:    # Mixing Ratio a
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_mixed_concentration_ratio[var_filetype][var_datatype][var_file][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)

                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 4:    # Mixing Ratio x
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_mixing_ratio[var_filetype][var_datatype][var_file][isotope]
                            #
                            entries_container.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 5:    # Mixed Concentration
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_mixed_concentration[var_filetype][var_datatype][var_file][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 6:    # Intensity
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_intensity_corrected[var_filetype][var_datatype][var_file][var_focus][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 7:    # Intensity Mix
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_intensity_mix[var_filetype][var_datatype][var_file][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)

                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 8:    # Analytical Sensitivity
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        str_is = None
                        for isotope in file_isotopes:
                            value = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                                isotope]

                            if value == 1.00:
                                str_is = isotope

                            if value != None:
                                n_digits = self.ma_determine_ndigits(var_value=value)
                                entries_container.append(f"{value:.{n_digits}f}")
                            else:
                                if str_is == None:
                                    for isotope_2 in file_isotopes:
                                        value = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                            var_file]["MAT"][isotope_2]

                                        if value == 1.00:
                                            str_is = isotope_2
                                            break

                                value_s_i = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file][
                                    "MAT"][isotope]
                                value_s_is = self.container_normalized_sensitivity[var_filetype][var_datatype][
                                    var_file]["MAT"][str_is]
                                value = value_s_i/value_s_is
                                n_digits = self.ma_determine_ndigits(var_value=value)
                                entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 9:    # Normalized Sensitivity
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 10:   # RSF
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][var_file]

                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None

                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]

                        for isotope in file_isotopes:
                            value = self.container_rsf[var_filetype][var_datatype][var_file]["MAT"][isotope]
                            entries_container.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)

                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in file_isotopes:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")

            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)

    def fi_show_diagrams_intensity(self):
        pass
    #
    def show_diagrams_sensitivity(self):
        ## Window Settings
        window_width = 900
        window_heigth = 800
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_graphical_sensitivity = tk.Toplevel(self.parent)
        if self.pysills_mode == "MA":
            self.subwindow_fi_graphical_sensitivity.title("MINERAL ANALYSIS - Sensitivity Results")
        elif self.pysills_mode == "FI":
            self.subwindow_fi_graphical_sensitivity.title("FLUID INCLUSION ANALYSIS - Sensitivity Results")
        elif self.pysills_mode == "MI":
            self.subwindow_fi_graphical_sensitivity.title("MELT INCLUSION ANALYSIS - Sensitivity Results")
        self.subwindow_fi_graphical_sensitivity.geometry(var_geometry)
        self.subwindow_fi_graphical_sensitivity.resizable(False, False)
        self.subwindow_fi_graphical_sensitivity["bg"] = self.bg_colors["Very Light"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_graphical_sensitivity, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_graphical_sensitivity, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_graphical_sensitivity.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_graphical_sensitivity.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row, column_id=start_column,
            n_rows=n_rows, n_columns=11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Super Dark"]).create_frame(relief=tk.FLAT)
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File Type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Data Type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Diagram Type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 10, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Primary Isotope", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Secondary Isotope", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## RADIOBUTTONS
        self.var_opt_iso_04 = tk.StringVar()
        self.var_opt_iso_04.set(self.container_lists["ISOTOPES"][0])
        self.var_opt_iso_05 = tk.StringVar()
        self.var_opt_iso_05.set(self.container_lists["ISOTOPES"][1])
        #
        rb_01a = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_01, value_rb=0, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Standard Files", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        rb_01b = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_01, value_rb=1, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Sample Files", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        #
        rb_02a = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_02, value_rb=0, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="RAW Data", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        rb_02b = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_02, value_rb=1, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="SMOOTHED Data", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        #
        rb_03a = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 7, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_03, value_rb=0, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Analytical Sensitivity Drift", sticky="nesw", relief=tk.FLAT)
        rb_03b = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_03, value_rb=1, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Histograms", sticky="nesw", relief=tk.FLAT)
        rb_03c = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_03, value_rb=2, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Box Plots", sticky="nesw", relief=tk.FLAT)
        rb_03b.configure(state="disabled")
        rb_03c.configure(state="disabled")
        #
        ## OPTION MENUS
        opt_04a = SE(
                parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 11, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.var_opt_iso_04, option_list=self.container_lists["ISOTOPES"],
            text_set=self.var_opt_iso_04.get(), fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=self.fi_change_sensitivity_drift_diagram)
        opt_04a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_04a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        opt_05a = SE(
                parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 13, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.var_opt_iso_05, option_list=self.container_lists["ISOTOPES"],
            text_set=self.var_opt_iso_05.get(), fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=self.change_normalized_sensitivity_scatter)
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## INITIALIZATION
        self.show_sensitivity_drift_diagram()
        self.show_normalized_sensitivity_scatter()
        #
    def show_sensitivity_drift_diagram(self, mode=None):
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        #
        self.fig_sensitivity_03a = Figure(
            figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_sensitivity_03a = FigureCanvasTkAgg(
            self.fig_sensitivity_03a, master=self.subwindow_fi_graphical_sensitivity)
        self.canvas_sensitivity_03a.get_tk_widget().grid(row=0, column=11, rowspan=16, columnspan=34, sticky="nesw")
        self.ax_sensitivity_03a = self.fig_sensitivity_03a.add_subplot(label=np.random.uniform())
        #
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift"][
            "FIG"] = self.fig_sensitivity_03a
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift"][
            "CANVAS"] = self.canvas_sensitivity_03a
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift"][
            "AX"] = self.ax_sensitivity_03a
        #
        x_values = []
        y_values = []
        #
        for key, value in self.container_lists["Acquisition Times Delta"].items():
            var_file = key
            #
            if var_file in self.container_lists["STD"]["Short"]:
                var_filetype_2 = "STD"
            elif var_file in self.container_lists["SMPL"]["Short"]:
                var_filetype_2 = "SMPL"
            var_index = self.container_lists[var_filetype_2]["Short"].index(var_file)
            var_file_long = self.container_lists[var_filetype_2]["Long"][var_index]
            #
            if self.container_var[var_filetype_2][var_file_long]["Checkbox"].get() == 1:
                if var_filetype == "STD" and var_file in self.container_lists[var_filetype]["Short"]:
                    var_srm_isotope = self.container_var["SRM"][var_iso_01].get()
                    var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_srm_isotope == var_srm_file:
                        x_value = value
                        y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        x_values.append(x_value)
                        self.ax_sensitivity_03a.scatter(
                            x=x_value, y=y_value, color=self.bg_colors["Dark"], edgecolor="black", s=80, marker="o")
                elif var_filetype == "SMPL":
                    #x_value = value
                    #x_values.append(x_value)
                    if (var_file in self.container_analytical_sensitivity["STD"][var_datatype]
                            and var_file in self.container_lists["STD"]["Short"]):
                        var_srm_isotope = self.container_var["SRM"][var_iso_01].get()
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                        if var_srm_isotope == var_srm_file:
                            x_value = value
                            x_values.append(x_value)
                            y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                                var_iso_01]
                            dot_color = self.bg_colors["Dark"]
                            self.ax_sensitivity_03a.scatter(
                                x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                    elif (var_file in self.container_analytical_sensitivity["SMPL"][var_datatype]
                          and var_file in self.container_lists["SMPL"]["Short"]):
                        x_value = value
                        x_values.append(x_value)
                        y_value = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        dot_color = self.bg_colors["Light"]
                        self.ax_sensitivity_03a.scatter(
                            x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="D")
                if var_file in self.container_lists["SMPL"]["Short"]:
                    if var_datatype == "RAW":
                        y_value = self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01]["a"]*x_value + \
                                  self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01]["b"]
                    elif var_datatype == "SMOOTHED":
                        y_value = self.container_lists["Analytical Sensitivity Regression SMOOTHED"][var_iso_01]["a"]*x_value + \
                                  self.container_lists["Analytical Sensitivity Regression SMOOTHED"][var_iso_01]["b"]
                    y_values.append(y_value)
                else:
                    if var_srm_isotope == var_srm_file:
                        if var_datatype == "RAW":
                            y_value = self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01][
                                          "a"]*x_value + \
                                      self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01]["b"]
                        elif var_datatype == "SMOOTHED":
                            y_value = self.container_lists["Analytical Sensitivity Regression SMOOTHED"][var_iso_01][
                                          "a"]*x_value + \
                                      self.container_lists["Analytical Sensitivity Regression SMOOTHED"][var_iso_01][
                                          "b"]
                        y_values.append(y_value)

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        if var_file in self.container_lists["SMPL"]["Short"]:
            zipped_lists = zip(x_values, y_values)
            sorted_zipped_lists = sorted(zipped_lists)
            x_data = []
            y_data = []
            for element in sorted_zipped_lists:
                x_data.append(element[0])
                y_data.append(element[1])
            #
            self.ax_sensitivity_03a.plot(x_data, y_data, color=self.accent_color, linewidth=var_lw, linestyle="dashed")
        else:
            if var_srm_isotope == var_srm_file:
                zipped_lists = zip(x_values, y_values)
                sorted_zipped_lists = sorted(zipped_lists)
                x_data = []
                y_data = []
                for element in sorted_zipped_lists:
                    x_data.append(element[0])
                    y_data.append(element[1])
                #
                self.ax_sensitivity_03a.plot(
                    x_data, y_data, color=self.accent_color, linewidth=var_lw, linestyle="dashed")
        #
        self.ax_sensitivity_03a.grid(True)
        self.ax_sensitivity_03a.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a.minorticks_on()
        self.ax_sensitivity_03a.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a.set_axisbelow(True)
        self.ax_sensitivity_03a.set_title("Analytical Sensitivity Drift", fontsize=9)
        self.ax_sensitivity_03a.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.set_ylabel(
            "Analytical Sensitivity $\\xi$ of "+str(var_iso_01)+" (1)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a.draw()
    #
    def fi_change_sensitivity_drift_diagram(self, mode=None):
        try:
            self.ax_sensitivity_03a.clear()
        except AttributeError:
            pass
        #
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        x_values = []
        y_values = []
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        #
        for key, value in self.container_lists["Acquisition Times Delta"].items():
            var_file = key
            #
            if var_file in self.container_lists["STD"]["Short"]:
                var_filetype_2 = "STD"
            elif var_file in self.container_lists["SMPL"]["Short"]:
                var_filetype_2 = "SMPL"
            #
            var_index = self.container_lists[var_filetype_2]["Short"].index(var_file)
            var_file_long = self.container_lists[var_filetype_2]["Long"][var_index]
            #
            if self.container_var[var_filetype_2][var_file_long]["Checkbox"].get() == 1:
                if var_filetype == "STD" and var_file in self.container_lists[var_filetype]["Short"]:
                    var_srm_isotope = self.container_var["SRM"][var_iso_01].get()
                    var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_srm_isotope == var_srm_file:
                        x_value_std = value
                        y_value_std = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                                var_iso_01]
                        self.ax_sensitivity_03a.scatter(
                            x=x_value_std, y=y_value_std, color=self.bg_colors["Dark"], edgecolor="black", s=80, marker="o")
                        x_value = value
                        if var_datatype == "RAW":
                            y_value = (self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01]["a"]*
                                       x_value + self.container_lists["Analytical Sensitivity Regression RAW"][
                                           var_iso_01]["b"])
                        elif var_datatype == "SMOOTHED":
                            y_value = self.container_lists["Analytical Sensitivity Regression SMOOTHED"][var_iso_01][
                                          "a"]*x_value + self.container_lists[
                                "Analytical Sensitivity Regression SMOOTHED"][var_iso_01]["b"]
                        x_values.append(x_value)
                        y_values.append(y_value)
                elif var_filetype == "SMPL":
                    #x_value = value
                    if (var_file in self.container_analytical_sensitivity["STD"][var_datatype]
                            and var_file in self.container_lists["STD"]["Short"]):
                        var_srm_isotope = self.container_var["SRM"][var_iso_01].get()
                        var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                        if var_srm_isotope == var_srm_file:
                            x_value = value
                            y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                                var_iso_01]
                            dot_color = self.bg_colors["Dark"]
                            self.ax_sensitivity_03a.scatter(
                                x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                    elif (var_file in self.container_analytical_sensitivity["SMPL"][var_datatype]
                          and var_file in self.container_lists["SMPL"]["Short"]):
                        x_value = value
                        y_value = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        dot_color = self.bg_colors["Light"]
                        self.ax_sensitivity_03a.scatter(
                            x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="D")
                    if var_file in self.container_lists["SMPL"]["Short"]:
                        if var_datatype == "RAW":
                            y_value = (self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01]["a"]*
                                       x_value + self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01][
                                           "b"])
                        elif var_datatype == "SMOOTHED":
                            y_value = (self.container_lists["Analytical Sensitivity Regression SMOOTHED"][var_iso_01]["a"]*
                                       x_value + self.container_lists["Analytical Sensitivity Regression SMOOTHED"][
                                           var_iso_01]["b"])
                        x_values.append(x_value)
                        y_values.append(y_value)
                    else:
                        if var_srm_isotope == var_srm_file:
                            if var_datatype == "RAW":
                                y_value = (self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01][
                                               "a"]*
                                           x_value +
                                           self.container_lists["Analytical Sensitivity Regression RAW"][var_iso_01][
                                               "b"])
                            elif var_datatype == "SMOOTHED":
                                y_value = (self.container_lists["Analytical Sensitivity Regression SMOOTHED"][
                                               var_iso_01]["a"]*
                                           x_value + self.container_lists["Analytical Sensitivity Regression SMOOTHED"][
                                               var_iso_01]["b"])
                            x_values.append(x_value)
                            y_values.append(y_value)

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        if var_file in self.container_lists["SMPL"]["Short"]:
            zipped_lists = zip(x_values, y_values)
            sorted_zipped_lists = sorted(zipped_lists)
            x_data = []
            y_data = []
            for element in sorted_zipped_lists:
                x_data.append(element[0])
                y_data.append(element[1])
            #
            self.ax_sensitivity_03a.plot(x_data, y_data, color=self.accent_color, linewidth=var_lw, linestyle="dashed")
        else:
            if var_srm_isotope == var_srm_file:
                zipped_lists = zip(x_values, y_values)
                sorted_zipped_lists = sorted(zipped_lists)
                x_data = []
                y_data = []
                for element in sorted_zipped_lists:
                    x_data.append(element[0])
                    y_data.append(element[1])
                #
                self.ax_sensitivity_03a.plot(
                    x_data, y_data, color=self.accent_color, linewidth=var_lw, linestyle="dashed")
        #
        self.ax_sensitivity_03a.grid(True)
        self.ax_sensitivity_03a.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a.minorticks_on()
        self.ax_sensitivity_03a.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a.set_axisbelow(True)
        self.ax_sensitivity_03a.set_title("Analytical Sensitivity Drift", fontsize=9)
        self.ax_sensitivity_03a.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.set_ylabel(
            "Analytical Sensitivity $\\xi$ of " + str(var_iso_01) + " (1)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a.draw()
        #
        self.change_normalized_sensitivity_scatter()
    #
    def show_normalized_sensitivity_scatter(self, mode=None):
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        try:
            var_iso_02 = self.var_opt_iso_05.get()
        except:
            var_iso_02 = self.var_opt_iso_05
        #
        self.fig_sensitivity_03a2 = Figure(
            figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_sensitivity_03a2 = FigureCanvasTkAgg(
            self.fig_sensitivity_03a2, master=self.subwindow_fi_graphical_sensitivity)
        self.canvas_sensitivity_03a2.get_tk_widget().grid(row=16, column=11, rowspan=16, columnspan=34, sticky="nesw")
        self.ax_sensitivity_03a2 = self.fig_sensitivity_03a2.add_subplot(label=np.random.uniform())
        #
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift Change"][
            "FIG"] = self.fig_sensitivity_03a2
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift Change"][
            "CANVAS"] = self.canvas_sensitivity_03a2
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift Change"][
            "AX"] = self.ax_sensitivity_03a2
        #
        x_all = []
        y_all = []

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
            var_file_long = self.container_lists[var_filetype]["Long"][index]
            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                if var_filetype == "SMPL":
                    x_values_02 = [0]
                    y_values_02 = [0]
                    dot_color = self.bg_colors["Dark"]
                    x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                        var_iso_01]
                    y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                        var_iso_02]
                    #
                    x_values_02.append(x_value)
                    y_values_02.append(y_value)
                    x_all.append(x_value)
                    y_all.append(y_value)
                    #
                    self.ax_sensitivity_03a2.scatter(
                        x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                    self.ax_sensitivity_03a2.plot(
                        x_values_02, y_values_02, color=self.accent_color, linewidth=var_lw, linestyle="--")
                else:
                    var_srm_isotope_01 = self.container_var["SRM"][var_iso_01].get()
                    var_srm_isotope_02 = self.container_var["SRM"][var_iso_02].get()
                    var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_srm_isotope_01 == var_srm_file and var_srm_isotope_02 == var_srm_file:
                        x_values_02 = [0]
                        y_values_02 = [0]
                        dot_color = self.bg_colors["Dark"]
                        x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                            var_iso_02]
                        #
                        x_values_02.append(x_value)
                        y_values_02.append(y_value)
                        x_all.append(x_value)
                        y_all.append(y_value)
                        #
                        self.ax_sensitivity_03a2.scatter(
                            x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                        self.ax_sensitivity_03a2.plot(
                            x_values_02, y_values_02, color=self.accent_color, linewidth=var_lw, linestyle="--")
        #
        self.ax_sensitivity_03a2.grid(True)
        self.ax_sensitivity_03a2.set_xlim(left=0, right=1.1*max(x_all))
        self.ax_sensitivity_03a2.set_ylim(bottom=0, top=1.1*max(y_all))
        self.ax_sensitivity_03a2.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a2.minorticks_on()
        self.ax_sensitivity_03a2.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a2.set_axisbelow(True)
        self.ax_sensitivity_03a2.set_title("Analytical Sensitivity", fontsize=9)
        self.ax_sensitivity_03a2.set_xlabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_01) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.set_ylabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_02) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a2.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a2.draw()
    #
    def change_normalized_sensitivity_scatter(self, mode=None):
        try:
            self.ax_sensitivity_03a2.clear()
        except AttributeError:
            pass
        #
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        x_all = []
        y_all = []
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        try:
            var_iso_02 = self.var_opt_iso_05.get()
        except:
            var_iso_02 = self.var_opt_iso_05

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
            var_file_long = self.container_lists[var_filetype]["Long"][index]
            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                if var_filetype == "SMPL":
                    x_values_02 = [0]
                    y_values_02 = [0]
                    dot_color = self.bg_colors["Dark"]
                    x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                        var_iso_01]
                    y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                        var_iso_02]
                    #
                    x_values_02.append(x_value)
                    y_values_02.append(y_value)
                    x_all.append(x_value)
                    y_all.append(y_value)
                    #
                    self.ax_sensitivity_03a2.scatter(
                        x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                    self.ax_sensitivity_03a2.plot(
                        x_values_02, y_values_02, color=self.accent_color, linewidth=var_lw, linestyle="--")
                else:
                    var_srm_isotope_01 = self.container_var["SRM"][var_iso_01].get()
                    var_srm_isotope_02 = self.container_var["SRM"][var_iso_02].get()
                    var_srm_file = self.container_var["STD"][var_file_long]["SRM"].get()
                    if var_srm_isotope_02 == var_srm_file:
                        x_values_02 = [0]
                        y_values_02 = [0]
                        dot_color = self.bg_colors["Dark"]
                        x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                            var_iso_02]

                        x_values_02.append(x_value)
                        y_values_02.append(y_value)
                        x_all.append(x_value)
                        y_all.append(y_value)

                        self.ax_sensitivity_03a2.scatter(
                            x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                        self.ax_sensitivity_03a2.plot(
                            x_values_02, y_values_02, color=self.accent_color, linewidth=var_lw, linestyle="--")
        #
        self.ax_sensitivity_03a2.grid(True)
        self.ax_sensitivity_03a2.set_xlim(left=0, right=1.1*max(x_all))
        self.ax_sensitivity_03a2.set_ylim(bottom=0, top=1.1*max(y_all))
        self.ax_sensitivity_03a2.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a2.minorticks_on()
        self.ax_sensitivity_03a2.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a2.set_axisbelow(True)
        self.ax_sensitivity_03a2.set_title("Analytical Sensitivity", fontsize=9)
        self.ax_sensitivity_03a2.set_xlabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_01) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.set_ylabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_02) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a2.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a2.draw()
    #
    def fi_show_diagrams_concentration(self):
        pass

    def fi_datareduction_files(self):   # FI - DATAREDUCTION FILES #####################################################
        ## Window Settings
        window_width = 1260
        window_heigth = 725
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_datareduction_files = tk.Toplevel(self.parent)
        self.subwindow_fi_datareduction_files.title("FLUID INCLUSION ANALYSIS - Data Reduction (Files)")
        self.subwindow_fi_datareduction_files.geometry(var_geometry)
        self.subwindow_fi_datareduction_files.resizable(False, False)
        self.subwindow_fi_datareduction_files["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_datareduction_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_datareduction_files, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_datareduction_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_datareduction_files.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Data Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Focus Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 11, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Result Selection", relief=tk.FLAT, fontsize="sans 10 bold")

        ## RADIOBUTTONS
        self.rb_01a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["File Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Standard Files", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_01b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["File Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Sample Files", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        rb_02a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Data Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="RAW Data", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_02b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Data Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="SMOOTHED Data", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        rb_04a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Focus"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Matrix", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_04b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 10, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Focus"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Inclusion", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        self.rb_05a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 13, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration Ratio",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05c = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 14, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=2,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Limit of Detection", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05d = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixing Ratio a",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05e = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 16, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=4,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixing Ratio x",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05f = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 17, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=5,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixed Concentration",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05g = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 18, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=6,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05h = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 19, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=7,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity Mix", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05f = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 20, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=8,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Analytical Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05g = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 21, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=9,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Normalized Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05h = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 22, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=10,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Relative Sensitivity Factor",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        ## OPTION MENUS
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"
        #
        list_id_found = []
        for var_file_long in self.container_lists["SMPL"]["Long"]:
            var_id_i = self.container_var["SMPL"][var_file_long]["ID"].get()
            if var_id_i not in list_id_found:
                list_id_found.append(var_id_i)
        #
        opt_03a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 7, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Dark"]).create_option_isotope(
            var_iso=self.container_var["ID"]["Results Files"], option_list=list_id_found, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["ID"]["Results Files"], mode="FI":
            self.change_id_results(var_opt, mode))
        opt_03a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_03a.config(
            bg=self.bg_colors["Dark"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        ## BUTTONS
        btn_06a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 24, column_id=start_column, n_rows=2,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Export Results", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_export_calculation_report)

        self.var_rb_01 = tk.IntVar()
        self.var_rb_01.set(1)
        self.var_rb_02 = tk.IntVar()
        self.var_rb_02.set(0)
        self.var_rb_03 = tk.IntVar()
        self.var_rb_03.set(0)

        btn_07c = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 27, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Sensitivity Drift", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.show_diagrams_sensitivity)
        btn_07c = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 26, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Detailed Data Analysis", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.detailed_data_analysis)

        ## FRAMES
        frm_a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row, column_id=start_column + 11,
            n_rows=n_rows, n_columns=n_columns - 11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## TREEVIEW
        list_categories = ["Files"]
        list_categories.extend(self.container_lists["Measured Isotopes"]["All"])
        list_width = list(75*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 125

        self.tv_results_files = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=0, column_id=11, n_rows=28, n_columns=51,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(list_categories), text_n=list_categories,
            width_n=list_width, individual=True)

        scb_v = ttk.Scrollbar(self.subwindow_fi_datareduction_files, orient="vertical")
        scb_h = ttk.Scrollbar(self.subwindow_fi_datareduction_files, orient="horizontal")
        self.tv_results_files.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_results_files.yview)
        scb_h.config(command=self.tv_results_files.xview)
        scb_v.grid(row=0, column=62, rowspan=28, columnspan=1, sticky="ns")
        scb_h.grid(row=28, column=11, rowspan=1, columnspan=51, sticky="ew")

        ## INITIALIZATION
        self.fi_datareduction_tables(init=True)

    def fi_select_srm_initialization(self):
        for isotope in self.container_lists["ISOTOPES"]:
            var_srm_i = self.container_var["SRM"][isotope].get()

            if var_srm_i not in self.srm_actual:
                self.srm_actual[var_srm_i] = {}
                ESRM().place_srm_values(srm_name=var_srm_i, srm_dict=self.srm_actual)

            self.fill_srm_values(var_srm=var_srm_i)

    def select_srm_initialization(self):
        for isotope in self.container_lists["ISOTOPES"]:
            var_srm_i = self.container_var["SRM"][isotope].get()

            if var_srm_i not in self.srm_actual:
                self.srm_actual[var_srm_i] = {}
                ESRM().place_srm_values(srm_name=var_srm_i, srm_dict=self.srm_actual)

            self.fill_srm_values(var_srm=var_srm_i)

    def fi_select_srm_default(self, var_opt, mode="STD"):
        if mode == "STD":
            for file_std in self.list_std:
                parts = file_std.split("/")
                self.container_var["STD"][file_std]["SRM"].set(var_opt)
                #self.container_var["SRM"][file_std].set(var_opt)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["SRM"][isotope].set(var_opt)
                self.container_files["SRM"][isotope].set(var_opt)
        #
        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
        #
        self.fill_srm_values(var_srm=var_opt)

    def select_srm_default(self, var_opt, mode="STD"):
        if mode == "STD":
            for file_std in self.list_std:
                parts = file_std.split("/")
                self.container_var["STD"][file_std]["SRM"].set(var_opt)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["SRM"][isotope].set(var_opt)
                self.container_files["SRM"][isotope].set(var_opt)

        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)

        self.fill_srm_values(var_srm=var_opt)

    def fi_change_srm_individual(self, var_opt, var_indiv, mode="STD"):
        if mode == "STD":
            parts = var_indiv.split("/")
            #
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["SRM"][var_indiv].set(var_opt)
        #
        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
        #
        self.fill_srm_values(var_srm=var_opt)

    def ma_select_is_default(self, var_opt, mode="STD"):
        if mode == "STD":
            var_is = var_opt
            if var_is != "Select IS":
                var_srm_is = self.container_var["SRM"][var_is].get()
                key_element = re.search("(\D+)(\d+)", var_is)
                element = key_element.group(1)
                var_concentration_is = self.srm_actual[var_srm_is][element]
            for file_std in self.container_lists["STD"]["Long"]:
                self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)
                if var_is != "Select IS":
                    self.container_var["STD"][file_std]["IS Data"]["Concentration"].set(var_concentration_is)
        elif mode == "SMPL":
            var_is = var_opt
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is)

            if self.container_var["IS"]["Default STD"].get() == "Select IS":
                self.container_var["IS"]["Default STD"].set(var_is)
                for file_std in self.container_lists["STD"]["Long"]:
                    self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)

    def fi_select_is_default(self, var_opt, mode="STD"):
        if mode == "STD":
            var_is = var_opt
            for file_std in self.list_std:
                self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)

    def select_is_default(self, var_opt, mode="STD"):
        if mode == "STD":
            var_is = var_opt
            for file_std in self.list_std:
                self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)

    def fi_select_id_default(self, var_opt):
        var_id = var_opt
        for file_smpl in self.list_smpl:
            self.container_var["SMPL"][file_smpl]["ID"].set(var_id)

    def select_id_default(self, var_opt):
        var_id = var_opt
        for file_smpl in self.list_smpl:
            self.container_var["SMPL"][file_smpl]["ID"].set(var_id)

    ## GENERAL CALCULATIONS ############################################################################################

    def calculate_regression(self, data, isotope, file_data):
        x_data = []
        y_data = []
        for file in file_data:
            if file in data:
                if isotope in data[file]:
                    x_data.append(data[file][isotope][0])
                    y_data.append(data[file][isotope][1])
        #
        A = np.vstack([x_data, np.ones(len(x_data))]).T
        m, c = np.linalg.lstsq(A, y_data, rcond=None)[0]  # m*x + c
        results = [m, c]
        #
        return results

    def define_setup_halter2002(self):
        ## Window Settings
        window_width = 680
        window_heigth = 600
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_quantification_setup_halter2002 = tk.Toplevel(self.parent)
        self.subwindow_quantification_setup_halter2002.title(
            "Quantification Setup - Geometric Approach (Halter et al. 2002)")
        self.subwindow_quantification_setup_halter2002.geometry(var_geometry)
        self.subwindow_quantification_setup_halter2002.resizable(False, False)
        self.subwindow_quantification_setup_halter2002["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_quantification_setup_halter2002, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_quantification_setup_halter2002, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_quantification_setup_halter2002.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_quantification_setup_halter2002.grid_columnconfigure(i, minsize=column_min)

        start_row = 0
        start_column = 0

        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Settings", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_002 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 1, column_id=start_column,
            n_rows=1, n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Inclusion Dimensions (\u03bcm)", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_002a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 2, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Length of semi-axis a", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_002b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 3, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Length of semi-axis b", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_003 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 4, column_id=start_column,
            n_rows=1, n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Sample Densities (g/cm3)", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_003a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 5, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Host Density", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_003b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 6, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Inclusion Density", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_004 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 7, column_id=start_column,
            n_rows=1, n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Laser Setup (\u03bcm)", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_004a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 8, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Ablation Radius / Pit Size", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_005 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 10, column_id=start_column,
            n_rows=1, n_columns=33, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold", anchor=tk.W)
        lbl_006 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Inclusion Intensity Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_006a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 1, column_id=start_column + 19,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix-only Tracer", relief=tk.FLAT, fontsize="sans 10 bold")

        # OPTION MENUS
        list_isotopes_all = self.container_lists["Measured Isotopes"]["All"]
        opt_03a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 1, column_id=start_column + 27,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Halter2002"]["Name"], option_list=list_isotopes_all,
            text_set=self.container_var["Halter2002"]["Name"].get(), fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color)
        opt_03a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_03a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        ## BUTTONS
        btn_001 = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 9, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Apply to all", bg_active=self.accent_color, fg_active=self.bg_colors["Light Font"],
            command=self.change_values_halter2002_all)

        # RADIOBUTTONS
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 2, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Heinrich et al. (2003)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 3, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (without R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 4, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (with R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 5, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=3,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Theory (simple intensity composition)", sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        ## ENTRIES
        entr_002a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 2, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Halter2002"]["Dimension a"],
            text_default=self.container_var["Halter2002"]["Dimension a"].get(),
            command=lambda event, entr=self.container_var["Halter2002"]["Dimension a"], mode="a":
            self.change_values_halter2002(entr, mode, event))
        entr_002b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 3, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Halter2002"]["Dimension b"],
            text_default=self.container_var["Halter2002"]["Dimension b"].get(),
            command=lambda event, entr=self.container_var["Halter2002"]["Dimension b"], mode="b":
            self.change_values_halter2002(entr, mode, event))
        entr_003a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 5, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Halter2002"]["Rho(Host)"],
            text_default=self.container_var["Halter2002"]["Rho(Host)"].get(),
            command=lambda event, entr=self.container_var["Halter2002"]["Rho(Host)"], mode="rho(host)":
            self.change_values_halter2002(entr, mode, event))
        entr_003b = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 6, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Halter2002"]["Rho(Incl)"],
            text_default=self.container_var["Halter2002"]["Rho(Incl)"].get(),
            command=lambda event, entr=self.container_var["Halter2002"]["Rho(Incl)"], mode="rho(incl)":
            self.change_values_halter2002(entr, mode, event))
        entr_004a = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 8, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Halter2002"]["Laser Radius"],
            text_default=self.container_var["Halter2002"]["Laser Radius"].get(),
            command=lambda event, entr=self.container_var["Halter2002"]["Laser Radius"], mode="R":
            self.change_values_halter2002(entr, mode, event))

        ## TREEVIEWS
        frm_smpl = SE(
            parent=self.subwindow_quantification_setup_halter2002, row_id=start_row + 11, column_id=start_column,
            n_rows=12, n_columns=33, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=25, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)

        lbl_file = tk.Label(frm_smpl, text="Filename", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_file)
        text_smpl.insert("end", "\t")
        lbl_a = tk.Label(frm_smpl, text="Semi-Axis a", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_a)
        text_smpl.insert("end", "\t")
        lbl_b = tk.Label(frm_smpl, text="Semi-Axis b", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_b)
        text_smpl.insert("end", "\t")
        lbl_rhohost = tk.Label(
            frm_smpl, text="Host Density", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_rhohost)
        text_smpl.insert("end", "\t")
        lbl_rhoincl = tk.Label(
            frm_smpl, text="Inclusion Density", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_rhoincl)
        text_smpl.insert("end", "\t")
        lbl_ablationradius = tk.Label(
            frm_smpl, text="Ablation Radius", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_ablationradius)
        text_smpl.insert("end", "\n")

        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")

            entr_1_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Halter2002"]["a"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_1_i)
            text_smpl.insert("end", "\t")

            entr_2_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Halter2002"]["b"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_2_i)
            text_smpl.insert("end", "\t")

            entr_3_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Halter2002"]["rho(host)"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_3_i)
            text_smpl.insert("end", "\t")

            entr_4_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Halter2002"]["rho(incl)"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_4_i)
            text_smpl.insert("end", "\t")

            entr_5_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Halter2002"]["R"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_5_i)
            text_smpl.insert("end", "\n")

    def change_values_halter2002(self, entr, mode, event):
        val_default = entr.get()
        if mode == "a":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["a"].set(val_default)
        elif mode == "b":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["b"].set(val_default)
        elif mode == "rho(host)":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["rho(host)"].set(val_default)
        elif mode == "rho(incl)":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["rho(incl)"].set(val_default)
        elif mode == "R":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["R"].set(val_default)

    def change_values_halter2002_all(self):
        val_default_a = self.container_var["Halter2002"]["Dimension a"].get()
        val_default_b = self.container_var["Halter2002"]["Dimension b"].get()
        val_default_rho_host = self.container_var["Halter2002"]["Rho(Host)"].get()
        val_default_rho_incl = self.container_var["Halter2002"]["Rho(Incl)"].get()
        val_default_r = self.container_var["Halter2002"]["Laser Radius"].get()
        for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["a"].set(val_default_a)
            self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["b"].set(val_default_b)
            self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["rho(host)"].set(val_default_rho_host)
            self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["rho(incl)"].set(val_default_rho_incl)
            self.container_var["SMPL"][filename_smpl_long]["Halter2002"]["R"].set(val_default_r)

    def estimate_x_halter2002(self, datatype, filename_long, filename_short):
        # Initial conditions
        x_star = self.calculate_mixing_ratio_geometric_approach(filename_long=filename_long)
        #x_star = 0.5
        x_low = 0.0
        x_high = 1.0
        x_min = 0.0001
        x_max = 1.0
        var_is = self.container_var["SMPL"][filename_long]["IS Data"]["IS"].get()
        var_t = self.container_var["Halter2002"]["Name"].get()

        var_intensity_mix_is = self.container_intensity_mix["SMPL"][datatype][filename_short][var_is]
        var_concentration_host_t = self.container_concentration["SMPL"][datatype][filename_short]["MAT"][var_t]
        var_intensity_mix_t = self.container_intensity_mix["SMPL"][datatype][filename_short][var_t]
        var_sensitivity_t = self.container_analytical_sensitivity["SMPL"][datatype][filename_short]["MAT"][var_t]

        # Calculate C(MIX,IS)*
        var_concentration_incl_is = float(self.container_var["SMPL"][filename_long]["IS Data"]["Concentration"].get())

        var_concentration_mix_is_star_min = self.helper_calculate_concentration_mix_is_star_alternative(
            x_now=x_min, concentration_host_t=var_concentration_host_t, intensity_mix_t=var_intensity_mix_t,
            intensity_mix_is=var_intensity_mix_is, sensitivity_t=var_sensitivity_t)
        var_concentration_mix_is_star_max = self.helper_calculate_concentration_mix_is_star_alternative(
            x_now=x_max, concentration_host_t=var_concentration_host_t, intensity_mix_t=var_intensity_mix_t,
            intensity_mix_is=var_intensity_mix_is, sensitivity_t=var_sensitivity_t)
        # Calculate C(INCL,i)*
        var_concentration_host_is = self.container_concentration["SMPL"][datatype][filename_short]["MAT"][var_is]

        var_concentration_incl_is_star_min = self.helper_calculate_concentration_incl_i_star(
            x_now=x_min, concentration_host_i=var_concentration_host_is,
            concentration_mix_i=var_concentration_mix_is_star_min)
        var_concentration_incl_is_star_max = self.helper_calculate_concentration_incl_i_star(
            x_now=x_max, concentration_host_i=var_concentration_host_is,
            concentration_mix_i=var_concentration_mix_is_star_max)
        # Determine slope
        if var_concentration_incl_is_star_min < var_concentration_incl_is_star_max:
            var_slope = 1
        else:
            var_slope = -1
        # Test run
        # Calculate C(MIX,IS)*
        var_concentration_mix_is_star = self.helper_calculate_concentration_mix_is_star_alternative(
            x_now=x_star, concentration_host_t=var_concentration_host_t, intensity_mix_t=var_intensity_mix_t,
            intensity_mix_is=var_intensity_mix_is, sensitivity_t=var_sensitivity_t)
        # Calculate C(INCL,IS)*
        var_concentration_incl_is_star = self.helper_calculate_concentration_incl_i_star(
            x_now=x_star, concentration_host_i=var_concentration_host_is,
            concentration_mix_i=var_concentration_mix_is_star)

        magicnumber_star = abs((var_concentration_incl_is_star - var_concentration_incl_is)/var_concentration_incl_is)
        # Determine x
        index = 0
        magicnumber = 0.0001
        if magicnumber_star > magicnumber:
            while magicnumber_star > magicnumber and index < 100:
                # Calculate C(MIX,IS)*
                var_concentration_mix_is_star = self.helper_calculate_concentration_mix_is_star_alternative(
                    x_now=x_star, concentration_host_t=var_concentration_host_t, intensity_mix_t=var_intensity_mix_t,
                    intensity_mix_is=var_intensity_mix_is, sensitivity_t=var_sensitivity_t)
                # Calculate C(INCL,IS)*
                var_concentration_incl_is_star = self.helper_calculate_concentration_incl_i_star(
                    x_now=x_star, concentration_host_i=var_concentration_host_is,
                    concentration_mix_i=var_concentration_mix_is_star)
                # Update x_star
                if var_slope == 1:
                    if var_concentration_incl_is_star < var_concentration_incl_is:
                        x_low = x_star
                    else:
                        x_high = x_star
                else:
                    if var_concentration_incl_is_star < var_concentration_incl_is:
                        x_high = x_star
                    else:
                        x_low = x_star

                x_star = (x_low + x_high)/2
                magicnumber_star = abs((var_concentration_incl_is_star - var_concentration_incl_is)/
                                       var_concentration_incl_is)

                index += 1

        return x_star, var_concentration_mix_is_star

    def helper_calculate_concentration_mix_is_star_alternative(self, x_now, concentration_host_t, intensity_mix_t,
                                                               intensity_mix_is, sensitivity_t):
        var_concentration_mix_is_star = ((1 - x_now)*concentration_host_t*(intensity_mix_is/intensity_mix_t)*
                                         sensitivity_t)
        return var_concentration_mix_is_star

    def helper_calculate_concentration_mix_is_star(self, x_now, concentration_host_is, concentration_incl_is):
        var_concentration_mix_is_star = (1 - x_now)*concentration_host_is + x_now*concentration_incl_is
        return var_concentration_mix_is_star

    def helper_calculate_concentration_mix_i_star(self, intensity_mix_i, intensity_mix_is, concentration_mix_is_star,
                                                  sensitivity_i):
        var_concentration_mix_i = (intensity_mix_i/intensity_mix_is)*(concentration_mix_is_star/sensitivity_i)
        return var_concentration_mix_i

    def helper_calculate_concentration_incl_i_star(self, x_now, concentration_host_i, concentration_mix_i):
        var_concentration_incl_i_star = concentration_host_i - (concentration_host_i - concentration_mix_i)/x_now
        return var_concentration_incl_i_star

    def define_setup_borisova2021(self):
        ## Window Settings
        window_width = 680
        window_heigth = 550
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_quantification_setup_borisova2021 = tk.Toplevel(self.parent)
        self.subwindow_quantification_setup_borisova2021.title(
            "Quantification Setup - Geometric Approach (Borisova et al. 2021)")
        self.subwindow_quantification_setup_borisova2021.geometry(var_geometry)
        self.subwindow_quantification_setup_borisova2021.resizable(False, False)
        self.subwindow_quantification_setup_borisova2021["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_quantification_setup_borisova2021, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_quantification_setup_borisova2021, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_quantification_setup_borisova2021.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_quantification_setup_borisova2021.grid_columnconfigure(i, minsize=column_min)

        start_row = 0
        start_column = 0

        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Settings", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_002 = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 1, column_id=start_column,
            n_rows=1, n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Sample Dimensions (\u03bcm)", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_002a = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 2, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Inclusion Radius", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_002b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 3, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Ablation Radius / Pit Size", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_003 = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 4, column_id=start_column,
            n_rows=1, n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Sample Densities (g/cm3)", relief=tk.FLAT,
            fontsize="sans 10 bold")
        lbl_003a = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 5, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Host Density", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_003b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 6, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Inclusion Density", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_005 = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 8, column_id=start_column,
            n_rows=1, n_columns=18, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_006 = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Inclusion Intensity Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_006a = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 1, column_id=start_column + 19,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix-only Tracer", relief=tk.FLAT, fontsize="sans 10 bold")

        # OPTION MENUS
        list_isotopes_all = self.container_lists["Measured Isotopes"]["All"]
        opt_03a = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 1, column_id=start_column + 27,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["Borisova2021"]["Name"], option_list=list_isotopes_all,
            text_set=self.container_var["Borisova2021"]["Name"].get(), fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color)
        opt_03a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_03a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        ## BUTTONS
        btn_001 = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 7, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Apply to all", bg_active=self.accent_color, fg_active=self.bg_colors["Light Font"],
            command=self.change_values_borisova2021_all)

        # RADIOBUTTONS
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 2, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Heinrich et al. (2003)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 3, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (without R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 4, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (with R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 5, column_id=start_column + 19,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=3,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Theory (simple intensity composition)", sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        ## ENTRIES
        entr_002a = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 2, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Borisova2021"]["Radius Inclusion"],
            text_default=self.container_var["Borisova2021"]["Radius Inclusion"].get(),
            command=lambda event, entr=self.container_var["Borisova2021"]["Radius Inclusion"], mode="R(incl)":
            self.change_values_borisova2021(entr, mode, event))
        entr_002b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 3, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Borisova2021"]["Radius Host"],
            text_default=self.container_var["Borisova2021"]["Radius Host"].get(),
            command=lambda event, entr=self.container_var["Borisova2021"]["Radius Host"], mode="R(host)":
            self.change_values_borisova2021(entr, mode, event))
        entr_003a = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 5, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Borisova2021"]["Rho(Host)"],
            text_default=self.container_var["Borisova2021"]["Rho(Host)"].get(),
            command=lambda event, entr=self.container_var["Borisova2021"]["Rho(Host)"], mode="rho(host)":
            self.change_values_borisova2021(entr, mode, event))
        entr_003b = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 6, column_id=start_column + 10,
            n_rows=1, n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["Borisova2021"]["Rho(Incl)"],
            text_default=self.container_var["Borisova2021"]["Rho(Incl)"].get(),
            command=lambda event, entr=self.container_var["Borisova2021"]["Rho(Incl)"], mode="rho(incl)":
            self.change_values_borisova2021(entr, mode, event))

        ## TREEVIEWS
        frm_smpl = SE(
            parent=self.subwindow_quantification_setup_borisova2021, row_id=start_row + 9, column_id=start_column,
            n_rows=12, n_columns=33, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=25, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)

        lbl_file = tk.Label(frm_smpl, text="Filename", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_file)
        text_smpl.insert("end", "\t")
        lbl_a = tk.Label(
            frm_smpl, text="Inclusion Radius ", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_a)
        text_smpl.insert("end", "\t")
        lbl_b = tk.Label(
            frm_smpl, text="Ablation Radius", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_b)
        text_smpl.insert("end", "\t")
        lbl_rhohost = tk.Label(
            frm_smpl, text="Host Density", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_rhohost)
        text_smpl.insert("end", "\t")
        lbl_rhoincl = tk.Label(
            frm_smpl, text="Inclusion Density", bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
        text_smpl.window_create("end", window=lbl_rhoincl)
        text_smpl.insert("end", "\n")

        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")

            entr_2_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Borisova2021"]["R(incl)"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_2_i)
            text_smpl.insert("end", "\t")

            entr_3_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Borisova2021"]["R(host)"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_3_i)
            text_smpl.insert("end", "\t")

            entr_4_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Borisova2021"]["rho(host)"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_4_i)
            text_smpl.insert("end", "\t")

            entr_5_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Borisova2021"]["rho(incl)"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_5_i)
            text_smpl.insert("end", "\n")

    def change_values_borisova2021(self, entr, mode, event):
        val_default = entr.get()
        if mode == "R(host)":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["R(host)"].set(val_default)
        elif mode == "R(incl)":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["R(incl)"].set(val_default)
        elif mode == "rho(host)":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["rho(host)"].set(val_default)
        elif mode == "rho(incl)":
            for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["rho(incl)"].set(val_default)

    def change_values_borisova2021_all(self):
        val_default_r_host = self.container_var["Borisova2021"]["Radius Host"].get()
        val_default_r_incl = self.container_var["Borisova2021"]["Radius Inclusion"].get()
        val_default_rho_host = self.container_var["Borisova2021"]["Rho(Host)"].get()
        val_default_rho_incl = self.container_var["Borisova2021"]["Rho(Incl)"].get()
        for filename_smpl_long in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["R(host)"].set(val_default_r_host)
            self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["R(incl)"].set(val_default_r_incl)
            self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["rho(host)"].set(val_default_rho_host)
            self.container_var["SMPL"][filename_smpl_long]["Borisova2021"]["rho(incl)"].set(val_default_rho_incl)

    def fi_setup_matrix_only_tracer(self):
        ## Window Settings
        window_width = 820
        window_heigth = 375
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_setup_matrixonlytracer = tk.Toplevel(self.parent)
        self.subwindow_fi_setup_matrixonlytracer.title("FI - Quantification Setup")
        self.subwindow_fi_setup_matrixonlytracer.geometry(var_geometry)
        self.subwindow_fi_setup_matrixonlytracer.resizable(False, False)
        self.subwindow_fi_setup_matrixonlytracer["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_setup_matrixonlytracer, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_setup_matrixonlytracer, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_setup_matrixonlytracer.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_setup_matrixonlytracer.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=25, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Settings - Matrix-Only Tracer", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix Amount", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01c = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix-Only Tracer", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01d = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Concentration (ppm)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=25, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row, column_id=start_column + 26, n_rows=1,
            n_columns=14, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Inclusion Intensity Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 5, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Inclusion Concentration Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## ENTRIES
        entr_01a = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 1, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Matrix Amount Default"],
            text_default=self.container_var["fi_setting"]["Matrix Amount Default"].get(),
            command=lambda var_entr=self.container_var["fi_setting"]["Matrix Amount Default"]:
            self.fi_change_default_matrix_amount(var_entr))
        entr_01d = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 4, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Matrix-Only Concentration Default"],
            text_default=self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get(),
            command=lambda var_entr=self.container_var["fi_setting"]["Matrix-Only Concentration Default"]:
            self.fi_change_default_matrixonly_is_concentration(var_entr))

        # RADIOBUTTONS
        rb_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 1, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Heinrich et al. (2003)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 2, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (without R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 3, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (with R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 4, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=3,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Theory (simple intensity composition)", sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 6, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Concentration Calculation"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="without x", sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 7, column_id=start_column + 26,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Concentration Calculation"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="with x", sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        ## OPTION MENUES
        var_text_01b = self.container_var["fi_setting"]["Oxide"].get()
        opt_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 2, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Oxide"], option_list=self.container_lists["Oxides"],
            text_set=var_text_01b, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Oxide"], var_file=None, state_default=True,
                           matrix_only=True:
            self.fi_change_matrix_compound(var_opt, var_file, state_default, matrix_only))
        opt_01b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_01b.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        var_text_01c = self.container_var["fi_setting"]["Host Only"].get()
        self.opt_01c = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 3, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Host Only"], option_list=self.container_lists["ISOTOPES"],
            text_set=var_text_01c, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Host Only"], var_file=None, state_default=True:
            self.change_matrix_only_tracer(var_opt, var_file, state_default))
        self.opt_01c["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        self.opt_01c.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## TREEVIEWS
        frm_smpl = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 6, column_id=start_column,
            n_rows=n_rows - 7, n_columns=25, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=25, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            entr_1_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Amount"],
                width=8, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            entr_1_i.bind(
                "<Return>", lambda event, var_file=file_smpl_long: self.change_specific_matrix_amount(var_file, event))
            text_smpl.window_create("insert", window=entr_1_i)
            text_smpl.insert("end", "\t")
            #
            opt_1_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Matrix"],
                *np.sort(self.container_lists["Oxides"]))
            opt_1_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_1_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_1_i)
            text_smpl.insert("end", "\t")
            #
            opt_2_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Name"],
                *np.sort(self.container_lists["ISOTOPES"]))
            opt_2_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_2_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_2_i)
            text_smpl.insert("end", "\t")
            #
            entr_2_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Value"],
                width=15, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_2_i)
            text_smpl.insert("end", "\n")
    #
    def fi_setup_second_internal_standard(self):
        ## Window Settings
        window_width = 720
        window_heigth = 375
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_setup_secondinternalstandard = tk.Toplevel(self.parent)
        self.subwindow_fi_setup_secondinternalstandard.title(
            "FI - Quantification Setup")
        self.subwindow_fi_setup_secondinternalstandard.geometry(var_geometry)
        self.subwindow_fi_setup_secondinternalstandard.resizable(False, False)
        self.subwindow_fi_setup_secondinternalstandard["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_setup_secondinternalstandard, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_setup_secondinternalstandard, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_setup_secondinternalstandard.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_setup_secondinternalstandard.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=20, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Settings - Second Internal Standard", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 1, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Second Internal Standard", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 2, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Concentration (ppm)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 3, column_id=start_column,
            n_rows=1, n_columns=20, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row, column_id=start_column + 21,
            n_rows=1, n_columns=14, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Inclusion Intensity Calculation", relief=tk.FLAT, fontsize="sans 10 bold")

        ## OPTION MENUES
        var_text = self.container_var["fi_setting"]["2nd Internal"].get()
        opt_01a = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 1, column_id=start_column + 10,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["2nd Internal"], option_list=self.container_lists["ISOTOPES"],
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["2nd Internal"]:
            self.fi_change_default_2nd_is(var_opt))
        opt_01a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_01a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        # RADIOBUTTONS
        rb_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 1, column_id=start_column + 21,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Heinrich et al. (2003)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 2, column_id=start_column + 21,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (without R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 3, column_id=start_column + 21,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS (with R)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 4, column_id=start_column + 21,
            n_rows=1, n_columns=14, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Intensity Calculation"], value_rb=3,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Theory (simple intensity composition)", sticky="nesw", relief=tk.FLAT, font="sans 10 bold")

        ## ENTRIES
        entr_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 2, column_id=start_column + 10,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["2nd Internal Concentration Default"],
            text_default=self.container_var["fi_setting"]["2nd Internal Concentration Default"].get(),
            command=lambda var_entr=self.container_var["fi_setting"]["2nd Internal Concentration Default"]:
            self.fi_change_default_2nd_is_concentration(var_entr))
        #
        ## TREEVIEWS
        frm_smpl = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 4, column_id=start_column,
            n_rows=10, n_columns=20, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            opt_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl_long]["Second Internal Standard"]["Name"],
                *np.sort(self.container_lists["ISOTOPES"]))
            opt_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_i)
            text_smpl.insert("end", "\t")
            #
            entr_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Second Internal Standard"]["Value"],
                width=15, highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
    #
    def fi_change_default_2nd_is(self, var_opt):
        var_opt_default = self.container_var["fi_setting"]["2nd Internal"].get()
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Name"].set(var_opt_default)
    #
    def fi_change_default_2nd_is_concentration(self, var_entr):
        var_entr_default = self.container_var["fi_setting"]["2nd Internal Concentration Default"].get()
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Value"].set(var_entr_default)
    #
    def fi_change_default_matrixonly_is_concentration(self, var_entr):
        var_entr_default = float(self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get())
        var_entr_default_amount = (float(self.container_var["fi_setting"]["Matrix Amount Default"].get()))/100
        #
        if var_entr_default > 1000000:
            var_entr_default = 1000000
            self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set(1000000)
        elif var_entr_default < 0:
            var_entr_default = 0
            self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set(0)
        #
        if var_entr_default_amount > 1.0:
            var_entr_default_amount = 1.0
            self.container_var["fi_setting"]["Matrix Amount Default"].set(100)
        #
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set(
                var_entr_default_amount*var_entr_default)
    #
    def fi_change_default_matrix_amount(self, var_entr):
        var_entr_default = round(float(self.container_var["fi_setting"]["Matrix Amount Default"].get())/100, 1)
        #
        if var_entr_default > 1.0:
            var_entr_default = 1.0
            self.container_var["fi_setting"]["Matrix Amount Default"].set(100)
        elif var_entr_default < 0.0:
            var_entr_default = 0.0
            self.container_var["fi_setting"]["Matrix Amount Default"].set(0)
        #
        var_entr_conc_default = float(self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get())
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Amount"].set(round(var_entr_default*100, 1))
            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set(
                var_entr_default*var_entr_conc_default)
    #
    ## FILE-SPECIFIC ANALYSIS ##########################################################################################
    #
    def fi_check_specific_file(self, var_file, var_type="STD", checkup_mode=False):
        if self.pysills_mode == "FI":
            key_setting = "fi_setting"
        elif self.pysills_mode == "MI":
            key_setting = "mi_setting"

        str_filename_long = var_file
        str_filetype = var_type

        if checkup_mode == True:
            if str_filetype == "STD":
                str_filename_long = self.fi_current_file_std
            elif str_filetype == "SMPL":
                str_filename_long = self.fi_current_file_smpl

        ## INPUT
        parts = str_filename_long.split("/")
        str_filename_short = parts[-1]
        self.helper_intervals = {"BG": [], "MAT": [], "INCL": []}

        ## Window Settings
        window_width = 1060
        window_heigth = 750
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        self.subwindow_fi_checkfile = tk.Toplevel(self.parent)
        self.subwindow_fi_checkfile.title("FLUID INCLUSION ANALYSIS - File Analysis of " + str(str_filename_short))
        self.subwindow_fi_checkfile.geometry(var_geometry)
        self.subwindow_fi_checkfile.resizable(False, False)
        self.subwindow_fi_checkfile["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_checkfile, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_checkfile, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_checkfile.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_checkfile.grid_columnconfigure(i, minsize=column_min)

        start_row = 0
        start_column = 0

        ## FRAMES
        frm_00 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row, column_id=start_column + 14, n_rows=n_rows - 8,
            n_columns=n_columns - 11, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(
            relief=tk.SOLID)

        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 15, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Display Options", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 18, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Anaylsis Mode", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 22, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Interval Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=tk.FLAT, fontsize="sans 10 bold")

        ## BUTTONS
        btn_02a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 16, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Show All", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_type=str_filetype, var_file_short=str_filename_short: self.fi_show_all_lines(
                var_type, var_file_short,))
        btn_02b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 17, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Hide All", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_type=str_filetype, var_file_short=str_filename_short: self.fi_hide_all_lines(
                var_type, var_file_short))
        btn_04a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 25, column_id=0, n_rows=2, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Remove Interval", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_type=str_filetype, var_file_short=str_filename_short:
            self.fi_remove_interval(var_type, var_file_short))
        btn_08 = SE(
            parent=self.subwindow_fi_checkfile, row_id=n_rows - 2, column_id=0, n_rows=2, n_columns=14,
            fg=self.colors_fi["Dark Font"], bg=self.colors_fi["Medium"]).create_simple_button(
            text="Confirm and Update \nData", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_parent=self.subwindow_fi_checkfile, var_type=str_filetype,
                           var_file_long=str_filename_long:
            self.confirm_specific_file_setup(var_parent, var_type, var_file_long))

        ## RADIOBUTTONS
        rb_02a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 16, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Data Type Plot"][str_filetype][str_filename_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="RAW", sticky="nesw",
            relief=tk.FLAT)
        rb_02b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 17, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Data Type Plot"][str_filetype][str_filename_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SMOOTHED", sticky="nesw",
            relief=tk.FLAT)

        rb_03a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 19, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Analyse Mode Plot"][str_filetype][str_filename_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Signal Plot", sticky="nesw",
            relief=tk.FLAT, command=lambda var_type=str_filetype, var_file=str_filename_long, var_lb_state=False:
            self.fi_show_time_signal_diagram(var_type, var_file, var_lb_state))
        rb_03b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 20, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Analyse Mode Plot"][str_filetype][str_filename_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Ratio Plot", sticky="nesw",
            relief=tk.FLAT, command=lambda var_type=str_filetype, var_file=str_filename_long:
            self.fi_show_time_ratio_diagram(var_type, var_file))
        rb_03c = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 21, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Analyse Mode Plot"][str_filetype][str_filename_short], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Quick Analysis", sticky="nesw",
            relief=tk.FLAT, command=lambda var_type=str_filetype, var_file=str_filename_long:
            self.fi_show_quick_results(var_type, var_file))

        rb_05 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 14, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["BG"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Calculation Interval"][str_filetype][str_filename_short],
            value_rb=0, color_bg=self.colors_intervals["BG"], fg=self.bg_colors["Light Font"],
            text="Background Interval", sticky="nesw", relief=tk.FLAT)
        rb_06 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 27, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["MAT"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Calculation Interval"][str_filetype][str_filename_short],
            value_rb=1, color_bg=self.colors_intervals["MAT"], fg=self.bg_colors["Light Font"], text="Matrix Interval",
            sticky="nesw", relief=tk.FLAT)
        rb_07  = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 40, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.colors_intervals["INCL"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Calculation Interval"][str_filetype][str_filename_short],
            value_rb=2, color_bg=self.colors_intervals["INCL"], fg=self.bg_colors["Dark Font"],
            text="Inclusion Interval", sticky="nesw", relief=tk.FLAT)
        rb_08 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 22, column_id=start_column + 14, n_rows=1,
            n_columns=39, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var[key_setting]["Calculation Interval"][str_filetype][str_filename_short],
            value_rb=3, color_bg=self.bg_colors["Super Dark"], fg=self.bg_colors["Light Font"], text="No Selection",
            sticky="nesw", relief=tk.FLAT)

        ## CHECKBOXES
        if "BG" not in self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][
            str_filename_short]:
            self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][str_filename_short] = {
                "BG": tk.IntVar(), "MAT": tk.IntVar(), "INCL": tk.IntVar()}
            self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][str_filename_short][
                "BG"].set(1)
            self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][str_filename_short][
                "MAT"].set(1)
            self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][str_filename_short][
                "INCL"].set(1)

        cb_bg = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 25,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["BG"]).create_simple_checkbox(
            var_cb=self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][
                str_filename_short]["BG"], text="", set_sticky="", own_color=True,
            command=lambda var_key="BG", var_type=str_filetype, var_file_short=str_filename_short:
            self.fi_change_interval_visibility(var_key, var_type, var_file_short))
        cb_mat = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 38,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["MAT"]).create_simple_checkbox(
            var_cb=self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][
                str_filename_short]["MAT"], text="", set_sticky="", own_color=True,
            command=lambda var_key="MAT", var_type=str_filetype, var_file_short=str_filename_short:
            self.fi_change_interval_visibility(var_key, var_type, var_file_short))
        cb_incl = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 51,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["INCL"]).create_simple_checkbox(
            var_cb=self.container_var[key_setting]["Calculation Interval Visibility"][str_filetype][
                str_filename_short]["INCL"], text="", set_sticky="", own_color=True,
            command=lambda var_key="INCL", var_type=str_filetype, var_file_short=str_filename_short:
            self.fi_change_interval_visibility(var_key, var_type, var_file_short))

        if str_filetype == "STD":
            rb_07.configure(state=tk.DISABLED)
            cb_incl.deselect()
            cb_incl.configure(state=tk.DISABLED)

        ## ENTRIES
        var_entr_start = tk.StringVar()
        var_entr_start.set("Set start value")
        var_entr_end = tk.StringVar()
        var_entr_end.set("Set end value")
        self.helper_time_entries = {"Start": var_entr_start, "End": var_entr_end}

        entr_04a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=var_entr_start, text_default=var_entr_start.get(),
            command=lambda event, var_entr=var_entr_start, var_key="Start", mode=str_filename_long:
            self.fi_set_bg_interval(var_entr, var_key, mode, event))
        entr_04b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=var_entr_end, text_default=var_entr_end.get(),
            command=lambda event, var_entr=var_entr_end, var_key="End", mode=str_filename_long:
            self.fi_set_bg_interval(var_entr, var_key, mode, event))

        ## MEASURED ISOTOPES
        frm_iso = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 1, column_id=start_column, n_rows=14, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = ttk.Scrollbar(master=frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)

        file_isotopes = self.container_lists["Measured Isotopes"][str_filename_short]

        for index, isotope in enumerate(file_isotopes):
            frm_i = tk.Frame(frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")

            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")

            if isotope not in self.container_var[key_setting]["Display RAW"][str_filetype][str_filename_short]:
                self.container_var[key_setting]["Display RAW"][str_filetype][str_filename_short][
                    isotope] = tk.IntVar()

            cb_raw_i = tk.Checkbutton(
                frm_iso, variable=self.container_var[key_setting]["Display RAW"][str_filetype][str_filename_short][
                    isotope], text="RAW", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"],
                fg=self.bg_colors["Dark Font"], command=lambda var_type=str_filetype, var_file_short=str_filename_short,
                                                               var_datatype="RAW", var_isotope=isotope:
                self.fi_change_line_visibility(var_type, var_file_short, var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_raw_i)
            text_iso.insert("end", "\t")

            if isotope not in self.container_var[key_setting]["Display SMOOTHED"][str_filetype][str_filename_short]:
                self.container_var[key_setting]["Display SMOOTHED"][str_filetype][str_filename_short][
                    isotope] = tk.IntVar()

            cb_smoothed_i = tk.Checkbutton(
                frm_iso, variable=self.container_var[key_setting]["Display SMOOTHED"][str_filetype][
                    str_filename_short][isotope], text="SMOOTHED", onvalue=1, offvalue=0,
                bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"],
                command=lambda var_type=str_filetype, var_file_short=str_filename_short, var_datatype="SMOOTHED",
                               var_isotope=isotope: self.fi_change_line_visibility(
                    var_type, var_file_short, var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_smoothed_i)
            text_iso.insert("end", "\n")

        ## BACKGROUND INTERVAL
        lb_bg, scrollbar_bg_y = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column + 14, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"], bg=self.colors_intervals["BG LB"]).create_simple_listbox_grid(
            include_scrb_x=False)
        self.container_helper[str_filetype][str_filename_short]["BG"]["Listbox"] = lb_bg

        ## MATRIX INTERVAL
        lb_mat, scrollbar_mat_y = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column + 27, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["MAT LB"]).create_simple_listbox_grid(include_scrb_x=False)
        self.container_helper[str_filetype][str_filename_short]["MAT"]["Listbox"] = lb_mat

        ## INCLUSION INTERVAL
        lb_incl, scrollbar_incl_y = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column + 40, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["INCL LB"]).create_simple_listbox_grid(include_scrb_x=False)
        self.container_helper[str_filetype][str_filename_short]["INCL"]["Listbox"] = lb_incl

        ## INITIALIZATION
        self.container_var[key_setting]["Analyse Mode Plot"][str_filetype][str_filename_short].set(0)
        self.fi_show_time_signal_diagram(var_type=str_filetype, var_file=str_filename_long)

    def fi_show_time_signal_diagram(self, var_type, var_file, var_lb_state=True):
        if self.pysills_mode == "FI":
            key_setting = "fi_setting"
        elif self.pysills_mode == "MI":
            key_setting = "mi_setting"

        str_filename_long = var_file
        str_filetype = var_type
        parts = str_filename_long.split("/")
        str_filename_short = parts[-1]
        file_isotopes = self.container_lists["Measured Isotopes"][str_filename_short]

        ## Cleaning
        try:
            canvas_ratio = self.container_helper[str_filetype][str_filename_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[str_filetype][str_filename_short]["TOOLBARFRAME RATIO"]
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass

        try:
            resultsframe = self.container_helper[str_filetype][str_filename_short]["RESULTS FRAME"]
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass

        self.fig_specific = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_specific = FigureCanvasTkAgg(self.fig_specific, master=self.subwindow_fi_checkfile)
        self.canvas_specific.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame = tk.Frame(master=self.subwindow_fi_checkfile)
        self.toolbarFrame.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific = NavigationToolbar2Tk(self.canvas_specific, self.toolbarFrame)
        self.toolbar_specific.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific._message_label.config(
            background=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"], font="sans 12")
        self.toolbar_specific.winfo_children()[-2].config(background=self.bg_colors["Very Light"])

        self.container_helper[str_filetype][str_filename_short]["FIGURE"] = self.fig_specific
        self.container_helper[str_filetype][str_filename_short]["CANVAS"] = self.canvas_specific
        self.container_helper[str_filetype][str_filename_short]["TOOLBARFRAME"] = self.toolbarFrame

        if self.file_loaded == False:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=str_filename_long).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=str_filename_long).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
        else:
            df_data = self.container_measurements["Dataframe"][str_filename_short]

        self.dataset_time = list(DE().get_times(dataframe=df_data))
        x_max = max(self.dataset_time)
        icp_measurements = np.array([[df_data[isotope] for isotope in file_isotopes]])
        y_max = np.amax(icp_measurements)

        var_lw = float(self.container_var["General Settings"]["Line width"].get())
        if var_lw < 0:
            var_lw = 0.5
        elif var_lw > 2.5:
            var_lw = 2.5

        ## DIAGRAMS
        ax = self.fig_specific.add_subplot(label=np.random.uniform())
        self.container_helper[str_filetype][str_filename_short]["AXES"] = {"Time-Signal": ax}
        for isotope in file_isotopes:
            ln_raw = ax.plot(self.dataset_time, df_data[isotope], label=isotope,
                             color=self.isotope_colors[isotope], linewidth=var_lw, visible=True)
            self.container_var[key_setting]["Time-Signal Lines"][str_filetype][str_filename_short][isotope][
                "RAW"] = ln_raw

            if "Uncut" in self.container_measurements["EDITED"][str_filename_short][isotope]:
                ln_smoothed = ax.plot(
                    self.dataset_time, self.container_measurements["EDITED"][str_filename_short][isotope]["Uncut"],
                    label=isotope, color=self.isotope_colors[isotope], linewidth=var_lw, visible=True)
                self.container_var[key_setting]["Time-Signal Lines"][str_filetype][str_filename_short][isotope][
                    "SMOOTHED"] = ln_smoothed
                self.container_var[key_setting]["Display SMOOTHED"][str_filetype][str_filename_short][isotope].set(1)

        if self.pysills_mode in ["FI", "MI"]:
            var_check_bg = self.container_helper[str_filetype][str_filename_short]["BG"]["Content"]
        else:
            var_check_bg = self.container_helper[str_filetype][str_filename_short]["BG"]

        if len(var_check_bg) > 0:
            if self.pysills_mode in ["FI", "MI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short]["BG"][
                    "Content"].items():
                    times_bg = var_content["Times"]
                    box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                    var_content["Object"] = box_bg

                    if var_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["BG"]["Listbox"].insert(
                            tk.END, "BG" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
            else:
                times_bg = self.container_helper[str_filetype][str_filename_short]["BG"][1]["Times"]
                box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                self.container_helper[str_filetype][str_filename_short]["BG"][1]["Object"] = box_bg

        if self.pysills_mode == "MA":
            signal_key = "SIG"
            var_check_sig = self.container_helper[str_filetype][str_filename_short][signal_key]
        else:
            signal_key = "MAT"
            var_check_sig = self.container_helper[str_filetype][str_filename_short][signal_key]["Content"]

        if len(var_check_sig) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][signal_key][
                    "Content"].items():
                    times_sig = var_content["Times"]
                    var_color = self.colors_intervals["MAT"]

                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat

                    if var_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][signal_key][
                    "Content"].items():
                    times_sig = self.container_helper[str_filetype][str_filename_short][signal_key]["Content"][1][
                        "Times"]
                    var_color = self.colors_intervals["MAT"]

                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat

                    if var_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
            else:
                times_sig = times_sig = self.container_helper[str_filetype][str_filename_short][signal_key][1]["Times"]
                var_color = self.colors_intervals["SIG"]

                box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                var_content["Object"] = box_sig

        if self.pysills_mode == "MA":
            inclusion_key = "INCL"
            var_check_incl = []
        else:
            inclusion_key = "INCL"
            var_check_incl = self.container_helper[str_filetype][str_filename_short][inclusion_key]["Content"]

        if len(var_check_incl) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][inclusion_key][
                    "Content"].items():
                    times_incl = var_content["Times"]

                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35, color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl

                    if var_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")

            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[str_filetype][str_filename_short][inclusion_key][
                    "Content"].items():
                    times_incl = self.container_helper[str_filetype][str_filename_short][inclusion_key]["Content"][1][
                        "Times"]

                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35, color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl

                    if var_lb_state == True:
                        self.container_helper[str_filetype][str_filename_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")

        ax.grid(True)
        ax.set_yscale("log")
        ax.set_xlim(left=0, right=x_max)
        ax.set_xticks(np.arange(0, x_max, 20))
        ax.set_ylim(bottom=100, top=1.5*y_max)
        ax.grid(which="major", linestyle="-", linewidth=1)
        ax.minorticks_on()
        ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        ax.set_axisbelow(True)
        ax.set_title(str_filename_short, fontsize=9)
        ax.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        ax.set_ylabel("Signal Intensity $I$ (cps)", labelpad=0.5, fontsize=8)
        ax.xaxis.set_tick_params(labelsize=8)
        ax.yaxis.set_tick_params(labelsize=8)

        self.canvas_specific.draw()

        self.canvas_specific.mpl_connect(
            "button_press_event",
            lambda event, var_type=str_filetype, var_file_short=str_filename_short, var_file_long=str_filename_long:
            self.fi_add_interval_to_diagram(var_type, var_file_short, var_file_long, event))

    def fi_show_time_ratio_diagram(self, var_type, var_file):
        if self.pysills_mode == "FI":
            key_setting = "fi_setting"
        elif self.pysills_mode == "MI":
            key_setting = "mi_setting"

        parts = var_file.split("/")
        var_file_short = parts[-1]
        file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]

        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass

        try:
            resultsframe = self.container_helper[var_type][var_file_short]["RESULTS FRAME"]
            #
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass

        if var_type == "STD":
            var_srm_file = self.container_var["STD"][var_file]["SRM"].get()
            for element, value in sorted(self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                if element in self.container_lists["Measured Elements"][var_file_short]:
                    var_key_isotope = self.container_lists["Measured Elements"][var_file_short][element][0]
                break
        else:
            if self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Matrix-only Tracer (SILLS)":
                var_key_isotope = self.container_var["SMPL"][var_file]["Host Only Tracer"]["Name"].get()
            elif self.container_var["fi_setting"][
                "Quantification Method Option"].get() == "Second Internal Standard (SILLS)":
                var_key_isotope = self.container_var["SMPL"][var_file]["Second Internal Standard"]["Name"].get()

        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]

        self.fig_specific_ratio = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        ax_ratio = self.fig_specific_ratio.add_subplot(label=np.random.uniform())
        self.container_helper[var_type][var_file_short]["AXES"] = {"Time-Ratio": ax_ratio}

        self.canvas_specific_ratio = FigureCanvasTkAgg(self.fig_specific_ratio, master=self.subwindow_fi_checkfile)
        self.canvas_specific_ratio.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame_specific_ratio = tk.Frame(master=self.subwindow_fi_checkfile)
        self.toolbarFrame_specific_ratio.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific_ratio = NavigationToolbar2Tk(self.canvas_specific_ratio, self.toolbarFrame_specific_ratio)
        self.toolbar_specific_ratio.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific_ratio._message_label.config(
            background=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"], font="sans 12")
        self.toolbar_specific_ratio.winfo_children()[-2].config(background=self.bg_colors["Very Light"])

        self.container_helper[var_type][var_file_short]["FIGURE RATIO"] = self.fig_specific_ratio
        self.container_helper[var_type][var_file_short]["CANVAS RATIO"] = self.canvas_specific_ratio
        self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"] = self.toolbarFrame_specific_ratio

        if self.file_loaded == False:
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
        else:
            df_data = self.container_measurements["Dataframe"][var_file_short]

        self.dataset_time = list(DE().get_times(dataframe=df_data))
        x_max = max(self.dataset_time)
        if var_key_isotope != "Select Isotope":
            icp_measurements = np.array(
                [[df_data[isotope]/df_data[var_key_isotope] for isotope in file_isotopes]])
            y_max = np.amax(icp_measurements)

            var_lw = float(self.container_var["General Settings"]["Line width"].get())
            if var_lw < 0:
                var_lw = 0.5
            elif var_lw > 2.5:
                var_lw = 2.5

            for isotope in file_isotopes:
                ln_raw = ax_ratio.plot(
                    self.dataset_time, df_data[isotope]/df_data[var_key_isotope], label=isotope,
                    color=self.isotope_colors[isotope], linewidth=var_lw, visible=True)
                self.container_var[key_setting]["Time-Ratio Lines"][var_type][var_file_short][isotope]["RAW"] = ln_raw

            ax_ratio.grid(True)
            ax_ratio.set_yscale("log")
            ax_ratio.set_xlim(left=0, right=x_max)
            ax_ratio.set_xticks(np.arange(0, x_max, 20))
            ax_ratio.set_ylim(bottom=10**(-5), top=1.5*y_max)
            ax_ratio.grid(which="major", linestyle="-", linewidth=1)
            ax_ratio.minorticks_on()
            ax_ratio.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            ax_ratio.set_axisbelow(True)
            ax_ratio.set_title(var_file_short, fontsize=9)
            ax_ratio.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
            ax_ratio.set_ylabel("Signal Intensity Ratio $I$ (cps/cps)", labelpad=0.5, fontsize=8)
            ax_ratio.xaxis.set_tick_params(labelsize=8)
            ax_ratio.yaxis.set_tick_params(labelsize=8)

            self.canvas_specific_ratio.draw()

    def fi_show_quick_results(self, var_type, var_file):
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass
        #
        try:
            canvas_ratio = self.container_helper[var_type][var_file_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass
        #
        ##
        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]
        #
        ## FRAMES
        frm_quick = SE(
            parent=self.subwindow_fi_checkfile, row_id=0, column_id=14, n_rows=30, n_columns=39,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        self.container_helper[var_type][var_file_short]["RESULTS FRAME"] = frm_quick
        #
        ## TREEVIEWS
        list_categories = ["Category"]
        if var_type == "STD":
            var_srm_file = self.container_var["STD"][var_file]["SRM"].get()
            for element, value in sorted(self.srm_actual[var_srm_file].items(), key=lambda item: item[1], reverse=True):
                if element in self.container_lists["Measured Elements"][var_file_short]:
                    var_is = self.container_lists["Measured Elements"][var_file_short][element][0]
                break
            list_considered_isotopes = []
            file_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for isotope in file_isotopes:
                var_srm_i = self.container_var["SRM"][isotope].get()
                if var_srm_i == var_srm_file:
                    list_considered_isotopes.append(isotope)
            list_categories.extend(list_considered_isotopes)

            key_element_is = re.search("(\D+)(\d+)", var_is)
            element_is = key_element_is.group(1)
            stop_calculation = False
            if element_is in self.srm_actual[var_srm_file]:
                stop_calculation = False
            else:
                stop_calculation = True
        else:
            var_is = self.container_var[var_type][var_file]["IS Data"]["IS"].get()
            list_considered_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            list_categories.extend(list_considered_isotopes)
            stop_calculation = False
        list_width = list(85*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 200

        n_intervals_bg = len(self.container_helper[var_type][var_file_short]["BG"]["Content"])
        n_intervals_mat = len(self.container_helper[var_type][var_file_short]["MAT"]["Content"])
        if var_type == "STD":
            n_intervals_incl = 1
        else:
            n_intervals_incl = len(self.container_helper[var_type][var_file_short]["INCL"]["Content"])

        if len(list_categories) > 1 and stop_calculation == False:
            self.tv_results_quick = SE(
                parent=self.subwindow_fi_checkfile, row_id=0, column_id=14, n_rows=18, n_columns=38,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
                n_categories=len(list_categories), text_n=list_categories,
                width_n=list_width, individual=True)

            scb_v = ttk.Scrollbar(self.subwindow_fi_checkfile, orient="vertical")
            scb_h = ttk.Scrollbar(self.subwindow_fi_checkfile, orient="horizontal")
            self.tv_results_quick.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
            scb_v.config(command=self.tv_results_quick.yview)
            scb_h.config(command=self.tv_results_quick.xview)
            scb_v.grid(row=0, column=52, rowspan=18, columnspan=1, sticky="ns")
            scb_h.grid(row=18, column=14, rowspan=1, columnspan=38, sticky="ew")

            if var_is != "Select IS" and n_intervals_bg > 0 and n_intervals_mat > 0 and n_intervals_incl > 0:
                ## INITIALIZATION
                if var_type == "STD":
                    # Intensity analysis
                    self.get_intensity(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
                    self.fi_get_intensity_corrected(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="MAT",
                        mode="Specific")
                else:
                    # Intensity analysis
                    for file_std_short in self.container_lists["STD"]["Short"]:
                        self.get_intensity(
                            var_filetype="STD", var_datatype="RAW", var_file_short=file_std_short, mode="Specific")

                    self.fi_get_intensity_corrected(
                        var_filetype="STD", var_datatype="RAW", var_file_short=None, var_focus="MAT", mode="only STD")

                    self.get_intensity(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
                    self.fi_get_intensity_corrected(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="MAT",
                        mode="Specific")
                    self.fi_get_intensity_corrected(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="INCL",
                        mode="Specific")
                    self.fi_get_intensity_ratio(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file, var_focus="INCL")
                    self.fi_get_intensity_mix(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
                    #
                self.fi_get_intensity_ratio(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                    var_focus="MAT")
                # Sensitivity analysis
                self.get_analytical_sensitivity(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                results_is = self.determine_possible_is(filetype="ALL")

                IQ(dataframe=None, project_type=self.pysills_mode,
                   results_container=self.container_intensity_ratio[var_type]["RAW"]).get_intensity_ratio(
                    data_container=self.container_intensity_corrected[var_type]["RAW"], dict_is=results_is,
                    filename_short=var_file_short)
                # self.fi_get_normalized_sensitivity(
                #     var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                self.fi_get_rsf(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                    var_focus="MAT")
                # Concentration analysis
                self.fi_get_concentration(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                # Normalized Sensitivity
                SQ(dataframe_01=self.container_intensity_corrected[var_type]["RAW"][var_file_short],
                   dataframe_02=self.container_concentration[var_type]["RAW"][var_file_short],
                   results_container=self.container_normalized_sensitivity[var_type]["RAW"]).get_normalized_sensitivity(
                    filename_short=var_file_short, filetype=var_type,
                    data_sensitivity=self.container_analytical_sensitivity[var_type]["RAW"][var_file_short],
                    dict_is=results_is)
                self.fi_get_concentration_ratio(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                    var_focus="MAT")
                self.fi_get_lod(
                    var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                    var_focus="MAT")
                #
                if var_type == "SMPL":
                    self.fi_get_concentration(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file, var_focus="INCL")
                    self.fi_get_concentration_ratio(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file, var_focus="INCL")
                    self.fi_get_lod(
                        var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short,
                        var_file_long=var_file, var_focus="INCL")
                    self.fi_get_mixed_concentration_ratio(
                        var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                    self.fi_get_mixing_ratio(
                        var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
                    self.fi_get_concentration_mixed(var_datatype="RAW", var_file_short=var_file_short)
                #
                entries_intensity_bg_i = ["Intensity BG"]
                entries_intensity_mat_i = ["Intensity MAT"]
                entries_intensity_incl_i = ["Intensity INCL"]
                entries_intensity_mix_i = ["Intensity MIX"]
                entries_intensity_ratio_i = ["Intensity Ratio MAT"]
                entries_analytical_sensitivity_i = ["Analytical Sensitivity MAT"]
                entries_normalized_sensitivity_i = ["Normalized Sensitivity MAT"]
                entries_rsf_i = ["Relative Sensitivity Factor MAT"]
                entries_concentration_i = ["Concentration MAT"]
                entries_concentration_ratio_i = ["Concentration Ratio MAT"]
                entries_lod_i = ["Limit of Detection MAT"]
                entries_empty = [""]

                if var_type == "SMPL":
                    entries_intensity_incl_i = ["Intensity INCL"]
                    entries_intensity_ratio_incl_i = ["Intensity Ratio INCL"]
                    entries_concentration_incl_i = ["Concentration INCL"]
                    entries_concentration_mix_i = ["Concentration MIX"]
                    entries_a_i = ["Mixed Concentration Ratio"]
                    entries_x_i = ["Mixing Ratio"]
                    entries_lod_incl_i = ["Limit of Detection INCL"]

                for isotope in list_considered_isotopes:
                    entries_empty.append("")
                    # Intensity Results
                    intensity_bg_i = self.container_intensity[var_type]["RAW"][var_file_short]["BG"][isotope]
                    intensity_mat_i = self.container_intensity_corrected[var_type]["RAW"][var_file_short]["MAT"][
                        isotope]
                    intensity_ratio_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short]["MAT"][isotope]
                    #
                    if var_type == "SMPL":
                        intensity_incl_i = self.container_intensity_corrected[var_type]["RAW"][var_file_short]["INCL"][
                            isotope]
                        intensity_mix_i = self.container_intensity_mix[var_type]["RAW"][var_file_short][isotope]
                        intensity_ratio_incl_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short][
                            "INCL"][isotope]
                    #
                    # Sensitivity Results
                    analytical_sensitivity_i = self.container_analytical_sensitivity[var_type]["RAW"][var_file_short][
                        "MAT"][isotope]
                    normalized_sensitivity_i = self.container_normalized_sensitivity[var_type]["RAW"][var_file_short][
                        "MAT"][isotope]
                    rsf_i = self.container_rsf[var_type]["RAW"][var_file_short]["MAT"][isotope]
                    # Concentration Results
                    concentration_i = self.container_concentration[var_type]["RAW"][var_file_short]["MAT"][isotope]
                    concentration_ratio_i = self.container_concentration_ratio[var_type]["RAW"][var_file_short]["MAT"][
                        isotope]
                    lod_i = self.container_lod[var_type]["RAW"][var_file_short]["MAT"][isotope]
                    #
                    if var_type == "SMPL":
                        concentration_incl_i = self.container_concentration[var_type]["RAW"][var_file_short]["INCL"][
                            isotope]
                        concentration_mix_i = self.container_mixed_concentration["SMPL"]["RAW"][var_file_short][isotope]
                        lod_incl_i = self.container_lod[var_type]["RAW"][var_file_short]["INCL"][isotope]
                        a_i = self.container_mixed_concentration_ratio[var_type]["RAW"][var_file_short][isotope]
                        x_i = self.container_mixing_ratio[var_type]["RAW"][var_file_short][isotope]

                    # Filling results container
                    entries_intensity_bg_i.append(f"{intensity_bg_i:.{4}f}")
                    entries_intensity_mat_i.append(f"{intensity_mat_i:.{4}f}")

                    if var_type == "SMPL":
                        entries_intensity_ratio_i.append(f"{intensity_ratio_i:.{4}E}")
                        entries_intensity_incl_i.append(f"{intensity_incl_i:.{4}f}")
                        entries_intensity_mix_i.append(f"{intensity_mix_i:.{4}f}")
                        entries_intensity_ratio_incl_i.append(f"{intensity_ratio_incl_i:.{4}E}")

                    entries_analytical_sensitivity_i.append(f"{analytical_sensitivity_i:.{4}f}")
                    entries_normalized_sensitivity_i.append(f"{normalized_sensitivity_i:.{4}f}")

                    if var_type == "SMPL":
                        entries_rsf_i.append(f"{rsf_i:.{4}E}")

                    entries_concentration_i.append(f"{concentration_i:.{4}f}")

                    if var_type == "SMPL":
                        entries_concentration_ratio_i.append(f"{concentration_ratio_i:.{4}E}")
                        entries_lod_i.append(f"{lod_i:.{4}f}")
                        entries_concentration_incl_i.append(f"{concentration_incl_i:.{4}f}")
                        entries_concentration_mix_i.append(f"{concentration_mix_i:.{4}f}")
                        entries_a_i.append(f"{a_i:.{4}f}")
                        entries_x_i.append(f"{x_i:.{4}E}")
                        entries_lod_incl_i.append(f"{lod_incl_i:.{4}f}")

                # Intensity Results
                self.tv_results_quick.insert("", tk.END, values=entries_intensity_bg_i)
                self.tv_results_quick.insert("", tk.END, values=entries_intensity_mat_i)

                if var_type == "SMPL":
                    self.tv_results_quick.insert("", tk.END, values=entries_intensity_ratio_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_intensity_incl_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_intensity_ratio_incl_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_intensity_mix_i)

                self.tv_results_quick.insert("", tk.END, values=entries_empty)

                # Sensitivity Results
                self.tv_results_quick.insert("", tk.END, values=entries_analytical_sensitivity_i)
                self.tv_results_quick.insert("", tk.END, values=entries_normalized_sensitivity_i)

                if var_type == "SMPL":
                    self.tv_results_quick.insert("", tk.END, values=entries_rsf_i)

                self.tv_results_quick.insert("", tk.END, values=entries_empty)

                # Concentration Results
                self.tv_results_quick.insert("", tk.END, values=entries_concentration_i)

                if var_type == "SMPL":
                    self.tv_results_quick.insert("", tk.END, values=entries_concentration_ratio_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_lod_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_concentration_incl_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_concentration_mix_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_lod_incl_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_a_i)
                    self.tv_results_quick.insert("", tk.END, values=entries_x_i)
    #
    def fi_show_all_lines(self, var_type, var_file_short):
        if self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "RAW"][0].set_visible(True)
                    #
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "RAW"][0].set_visible(True)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display RAW"][var_type][var_file_short][isotope].set(1)
        elif self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "SMOOTHED"][0].set_visible(True)
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "SMOOTHED"][0].set_visible(True)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(1)
        #
        if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
            self.canvas_specific.draw()
        elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
            self.canvas_specific_ratio.draw()

    #
    def fi_hide_all_lines(self, var_type, var_file_short):
        if self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "RAW"][0].set_visible(False)
                    #
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "RAW"][0].set_visible(False)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display RAW"][var_type][var_file_short][isotope].set(0)
        elif self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "SMOOTHED"][0].set_visible(False)
                    #
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "SMOOTHED"][0].set_visible(False)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(0)
        #
        if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
            self.canvas_specific.draw()
        elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
            self.canvas_specific_ratio.draw()
    #
    def fi_change_line_visibility(self, var_type, var_file_short, var_datatype, var_isotope):
        var_key = "Display "+str(var_datatype)
        if self.container_var["fi_setting"][var_key][var_type][var_file_short][var_isotope].get() == 1:
            if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(True)
            else:
                self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(True)
        elif self.container_var["fi_setting"][var_key][var_type][var_file_short][var_isotope].get() == 0:
            if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(False)
            else:
                self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(False)
        #
        if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
            self.canvas_specific.draw()
        elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
            self.canvas_specific_ratio.draw()
    #
    def fi_add_interval_to_diagram(self, var_type, var_file_short, var_file_long, event):
        if self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:   # BG
            var_key = "BG"
            var_color = self.colors_intervals[var_key]
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1: # MAT
            var_key = "MAT"
            var_color = self.colors_intervals[var_key]
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 2: # INCL
            var_key = "INCL"
            var_color = self.colors_intervals[var_key]
        #
        if self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() in [0, 1, 2]:
            x_nearest = min(self.dataset_time, key=lambda x: abs(x - event.xdata))
            #
            if len(self.helper_intervals[var_key]) < 1:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
            else:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
                #
                key_id = self.container_helper[var_type][var_file_short][var_key]["ID"] + 1
                #key_id = len(self.container_helper[var_type][var_file_short][var_key]["Content"]) + 1
                time_0 = self.helper_intervals[var_key][0][0]
                time_1 = self.helper_intervals[var_key][1][0]
                index_0 = self.helper_intervals[var_key][0][1]
                index_1 = self.helper_intervals[var_key][1][1]
                #
                box_key = self.container_helper[var_type][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.35, color=var_color)
                self.canvas_specific.draw()
                #
                self.container_helper[var_type][var_file_short][var_key]["Content"][key_id] = {
                    "Times": [time_0, time_1], "Indices": [index_0, index_1], "Object": box_key}
                #
                self.container_helper[var_type][var_file_short][var_key]["Listbox"].insert(
                    tk.END, var_key + str(key_id) + " [" + str(self.helper_intervals[var_key][0][0]) + "-" +
                            str(self.helper_intervals[var_key][1][0]) + "]")
                #
                self.helper_intervals[var_key].clear()
                self.container_helper[var_type][var_file_short][var_key]["ID"] = key_id
                self.container_helper[var_type][var_file_short][var_key]["Indices"].append(key_id)
                #
                self.canvas_specific.draw()
        #
        if var_type == "STD":
            if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) + \
                    len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) < 2:
                self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
                self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_yellow)
            else:
                if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) > 0 and \
                        len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) > 0:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_green, bd=1)
                    self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_green)
                else:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
                    self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_yellow)
            #
        else:
            if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) + \
                    len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) + \
                    len(self.container_helper[var_type][var_file_short]["INCL"]["Content"]) < 3:
                self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
                self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_yellow)
            else:
                if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) > 0 and \
                        len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) > 0 and \
                        len(self.container_helper[var_type][var_file_short]["INCL"]["Content"]) > 0:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_green, bd=1)
                    self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_green)
                else:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
                    self.container_var[var_type][var_file_long]["Sign Color"].set(self.sign_yellow)
    #
    def fi_change_interval_visibility(self, var_key, var_type, var_file_short):
        if self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
            var_key].get() == 0:
            var_state = False
        else:
            var_state = True
        #
        for var_id, var_content in self.container_helper[var_type][var_file_short][var_key]["Content"].items():
            var_content["Object"].set_visible(var_state)
        #
        self.canvas_specific.draw()
    #
    def fi_remove_interval(self, var_type, var_file_short):
        if self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:
            var_key = "BG"
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1:
            var_key = "MAT"
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 2:
            var_key = "INCL"
        #
        var_lb = self.container_helper[var_type][var_file_short][var_key]["Listbox"]
        #
        item = self.container_helper[var_type][var_file_short][var_key]["Listbox"].curselection()[0]
        value = var_lb.get(item)
        value_parts = value.split(" ")
        key_id = re.search("(\D+)(\d+)", value_parts[0])
        var_id = int(key_id.group(2))
        #
        self.container_helper[var_type][var_file_short][var_key]["Indices"].remove(var_id)
        var_lb.delete(tk.ANCHOR)
        self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]["Object"].set_visible(False)
        del self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]
        #
        self.canvas_specific.draw()
    #
    def fi_set_bg_interval(self, var_entr, var_key, mode, event):
        if mode == "default":
            time = var_entr.get()
            time = time.replace(",", ".")
            #
            for var_type in ["STD", "SMPL"]:
                for var_file in self.container_lists[var_type]["Long"]:
                    if self.container_icpms["name"] != None:
                        var_skipheader = self.container_icpms["skipheader"]
                        var_skipfooter = self.container_icpms["skipfooter"]
                        df_data = DE(filename_long=var_file).get_measurements(
                            delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
                    else:
                        df_data = DE(filename_long=var_file).get_measurements(
                            delimiter=",", skip_header=3, skip_footer=1)
                    dataset_time = list(DE().get_times(dataframe=df_data))
                    var_file_short = var_file.split("/")[-1]
                    #
                    if 1 not in self.container_helper[var_type][var_file_short]["BG"]["Content"]:
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1] = {
                            "Times": [None, None], "Indices": [None, None], "Object": None}
                        self.container_helper[var_type][var_file_short]["BG"]["ID"] += 1
                        self.container_helper[var_type][var_file_short]["BG"]["Indices"].append(1)
                    #
                    x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
                    if var_key == "Start":
                        var_entr.set("Start value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Times"][0] = var_time
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Indices"][0] = var_index
                    elif var_key == "End":
                        var_entr.set("End value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Times"][1] = var_time
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Indices"][1] = var_index
                    #
        elif mode in self.container_lists["STD"]["Long"]:
            var_file = mode
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
            dataset_time = list(DE().get_times(dataframe=df_data))
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["fi_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["fi_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 1:
                var_category = "MAT"
            elif self.container_var["fi_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 2:
                var_category = "INCL"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["STD"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["STD"][var_file_short][var_category]["Content"]:
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["STD"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["STD"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][0] = var_index
            elif var_key == "End":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][1] = var_index
                #
                time_0 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["STD"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["STD"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
            #
        elif mode in self.container_lists["SMPL"]["Long"]:
            var_file = mode
            if self.container_icpms["name"] != None:
                var_skipheader = self.container_icpms["skipheader"]
                var_skipfooter = self.container_icpms["skipfooter"]
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=var_skipheader, skip_footer=var_skipfooter)
            else:
                df_data = DE(filename_long=var_file).get_measurements(
                    delimiter=",", skip_header=3, skip_footer=1)
            dataset_time = list(DE().get_times(dataframe=df_data))
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 1:
                var_category = "MAT"
            elif self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 2:
                var_category = "INCL"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["SMPL"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["SMPL"][var_file_short][var_category]["Content"]:
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["SMPL"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["SMPL"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][0] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][0] = var_index
            elif var_key == "End":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][1] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][1] = var_index
                #
                time_0 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["SMPL"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["SMPL"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
    #
    ## MATRIX SETTINGS
    #
    def fi_matrix_concentration_setup(self):
        ## Window Settings
        window_width = 700
        window_heigth = 450
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_matrix_concentration = tk.Toplevel(self.parent)
        subwindow_fi_matrix_concentration.title("FLUID INCLUSION ANALYSIS - Matrix Concentration Setup")
        subwindow_fi_matrix_concentration.geometry(var_geometry)
        subwindow_fi_matrix_concentration.resizable(False, False)
        subwindow_fi_matrix_concentration["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_matrix_concentration, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_matrix_concentration, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_matrix_concentration.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_matrix_concentration.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row, column_id=start_column, n_rows=1, n_columns=24,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Default Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## OPTION MENUS
        if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:
            list_elements = []
            var_list_comp = []
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for oxide in self.container_lists["Oxides"]:
                key = re.search("(\D+)(\d*)(\D+)(\d*)", oxide)
                element_oxide = key.group(1)
                if element_oxide in list_elements:
                    if oxide not in var_list_comp:
                        var_list_comp.append(oxide)
            #var_list_comp = self.container_lists["Oxides"]
            var_list_is = self.container_lists["ISOTOPES"]
            var_opt_default_comp = self.container_var["fi_setting"]["Oxide"]
            var_opt_default_is = self.container_var["fi_setting"]["IS MAT Default"]
            var_entr_default = self.container_var["fi_setting"]["Oxide Concentration"]
            var_entr_default_is = self.container_var["fi_setting"]["IS MAT Default Concentration"]
            #
            if self.container_var["fi_setting"]["Oxide"].get() != "Select Oxide":
                var_opt_default_text = self.container_var["fi_setting"]["Oxide"].get()
            else:
                var_opt_default_text = "Select Oxide"
            #
            if self.container_var["fi_setting"]["Oxide Concentration"].get() != "0.0":
                var_entr_default_text = self.container_var["fi_setting"]["Oxide Concentration"].get()
            else:
                var_entr_default_text = "0.0"
            #
            if self.container_var["fi_setting"]["IS MAT Default"].get() != "Select IS":
                var_opt_default_is_text = self.container_var["fi_setting"]["IS MAT Default"].get()
            else:
                var_opt_default_is_text = "Select IS"
            #
            if self.container_var["fi_setting"]["IS MAT Default Concentration"].get() != "1000000":
                var_entr_default_is_text = self.container_var["fi_setting"]["IS MAT Default Concentration"].get()
            else:
                var_entr_default_is_text = "1000000"
            #
        elif self.container_var["fi_setting"]["Host Setup Selection"].get() == 2:
            list_elements = []
            var_list_comp = []
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for element in self.container_lists["Elements"]:
                if element in list_elements:
                    if element not in var_list_comp:
                        var_list_comp.append(element)
            #var_list_comp = self.container_lists["Elements"]
            var_list_is = self.container_lists["ISOTOPES"]
            var_opt_default_comp = self.container_var["fi_setting"]["Element"]
            var_opt_default_is = self.container_var["fi_setting"]["IS MAT Default"]
            var_entr_default = self.container_var["fi_setting"]["Element Concentration"]
            var_entr_default_is = self.container_var["fi_setting"]["IS MAT Default Concentration"]
            #
            if self.container_var["fi_setting"]["Element"].get() != "Select Element":
                var_opt_default_text = self.container_var["fi_setting"]["Element"].get()
            else:
                var_opt_default_text = "Select Element"
            #
            if self.container_var["fi_setting"]["Element Concentration"].get() != "1000000":
                var_entr_default_text = self.container_var["fi_setting"]["Element Concentration"].get()
            else:
                var_entr_default_text = "1000000"
            #
            if self.container_var["fi_setting"]["IS MAT Default"].get() != "Select IS":
                var_opt_default_is_text = self.container_var["fi_setting"]["IS MAT Default"].get()
            else:
                var_opt_default_is_text = "Select IS"
            #
            if self.container_var["fi_setting"]["IS MAT Default Concentration"].get() != "1000000":
                var_entr_default_is_text = self.container_var["fi_setting"]["IS MAT Default Concentration"].get()
            else:
                var_entr_default_is_text = "1000000"
        #
        opt_02a = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 1, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=var_opt_default_comp, option_list=var_list_comp, text_set=var_opt_default_text,
            fg_active=self.colors_fi["Light Font"], bg_active=self.colors_fi["Dark"],
            command=lambda var_opt=var_opt_default_comp, var_file=None, state_default=True:
            self.fi_change_matrix_compound(var_opt, var_file, state_default))
        opt_02a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_02a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_02b = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 2, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=var_opt_default_is, option_list=var_list_is, text_set=var_opt_default_is_text,
            fg_active=self.colors_fi["Light Font"], bg_active=self.colors_fi["Dark"],
            command=lambda var_opt=var_opt_default_is, var_file=None, state_default=True:
            self.fi_change_matrix_compound(var_opt, var_file, state_default))
        self.opt_02b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        self.opt_02b.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        ## ENTRIES
        entr_02b = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 3, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=var_entr_default_is, text_default=var_entr_default_is_text,
            command=lambda event, var_entr=var_entr_default_is, var_file=None, state_default=True:
            self.fi_change_matrix_concentration(var_entr, var_file, state_default, event))
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 1, column_id=start_column, n_rows=16,
            n_columns=24, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:     # Oxide Selection
                var_list_is = self.container_lists["ISOTOPES"]
                var_opt_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get() != "Select IS":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get()
                else:
                    var_opt_i_default = "Select IS"
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].get() != "1000000":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "1000000"
            elif self.container_var["fi_setting"]["Host Setup Selection"].get() == 2:   # Element Selection
                var_list_is = self.container_lists["ISOTOPES"]
                var_opt_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get() != "Select IS":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get()
                else:
                    var_opt_i_default = "Select IS"
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].get() != "1000000":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "1000000"
            #
            var_opt_i.set(var_opt_i_default)
            #
            opt_is_i = tk.OptionMenu(
                frm_smpl, var_opt_i, *var_list_is,
                command=lambda var_opt=var_opt_i, var_file=file_smpl, state_default=False:
                self.fi_change_matrix_is(var_opt, var_file, state_default))
            opt_is_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_is_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            var_entr_i.set(var_entr_i_default)
            #
            entr_i = tk.Entry(frm_smpl, textvariable=var_entr_i)
            entr_i.bind(
                "<Return>", lambda event, var_entr=var_entr_i, var_file=file_smpl, state_default=False:
                self.fi_change_matrix_concentration(var_entr, var_file, state_default, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
    def fi_change_matrix_compound(self, var_opt, var_file=None, state_default=False, matrix_only=False):
        if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].set(var_opt)
                #
                if matrix_only == True:
                    self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Matrix"].set(var_opt)
            #
            self.container_var["fi_setting"]["IS MAT Default Concentration"].set(1000000)
            if var_key == "Oxide":
                key = re.search("(\D+)(\d*)(\D+)(\d*)", var_opt)
                var_opt_element = key.group(1)
            else:
                var_opt_element = var_opt
            possible_is = []
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_02 = re.search("(\D+)(\d+)", isotope)
                element = key_02.group(1)
                if element == var_opt_element:
                    possible_is.append(isotope)
            #
            self.container_var["fi_setting"]["IS MAT Default"].set("Select IS")
            for index, isotope in enumerate(possible_is):
                if matrix_only == True:
                    if index == 0:
                        self.opt_01c["menu"].delete(0, "end")
                    #
                    self.opt_01c["menu"].add_command(
                        label=isotope, command=lambda var_opt=isotope, var_file=None, state_default=True:
                        self.change_matrix_only_tracer(var_opt, var_file, state_default))
                else:
                    if index == 0:
                        self.opt_02b["menu"].delete(0, "end")
                    #
                    self.opt_02b["menu"].add_command(
                        label=isotope, command=lambda var_opt=isotope, var_file=None, state_default=True:
                        self.fi_change_matrix_is(var_opt, var_file, state_default))
            #
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"][var_key]["Name"].set(var_opt)
    #
    def change_matrix_only_tracer(self, var_opt, var_file, state_default):
        if state_default == True:
            self.container_var["fi_setting"]["Host Only"].set(var_opt)
            #
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Name"].set(var_opt)
                #
                var_oxide = self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Matrix"].get()
                key = re.search("(\D+)(\d*)(\D+)(\d*)", var_oxide)
                list_elements = []
                list_amounts = []
                list_fraction = {}
                #
                for index, item in enumerate(key.groups()):
                    if index in [0, 2]:
                        list_elements.append(item)
                    else:
                        if item == "":
                            list_amounts.append(1)
                        else:
                            list_amounts.append(int(item))
                #
                mass_total = 0
                for index, element in enumerate(list_elements):
                    if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                        mass_total += list_amounts[index]*self.chemistry_data[element]
                    else:
                        mass_total += list_amounts[index]*self.chemistry_data_sills[element]
                #
                for index, element in enumerate(list_elements):
                    if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                        list_fraction[element] = (list_amounts[index]*self.chemistry_data[element])/mass_total
                    else:
                        list_fraction[element] = (list_amounts[index]*self.chemistry_data_sills[element])/mass_total
                    #
                    if index == 0:
                        oxide_weight = float(
                            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Amount"].get())/100
                        is_concentration = round(list_fraction[element]*10**6, 4)
                        self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set(round(
                            oxide_weight*is_concentration, 4))
            #
            oxide_weight = float(self.container_var["fi_setting"]["Matrix Amount Default"].get())/100
            self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set(round(
                            oxide_weight*is_concentration, 4))
            #
        else:
            self.container_var["SMPL"][var_file]["Host Only Tracer"]["Name"].set(var_opt)
    #
    def change_specific_matrix_amount(self, var_file, event):
        var_amount = float(self.container_var["SMPL"][var_file]["Host Only Tracer"]["Amount"].get())/100
        var_concentration_before = float(self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get())
        #
        var_concentration = var_amount*var_concentration_before
        #
        self.container_var["SMPL"][var_file]["Host Only Tracer"]["Value"].set(round(var_concentration, 4))
    #
    def fi_change_matrix_is(self, var_opt, var_file, state_default):
        if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        self.container_var["fi_setting"]["IS MAT Default"].set(var_opt)
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].set(var_opt)
                #
                if var_key == "Oxide":
                    var_oxide = self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].get()
                    key = re.search("(\D+)(\d*)(\D+)(\d*)", var_oxide)
                    list_elements = []
                    list_amounts = []
                    list_fraction = {}
                    #
                    for index, item in enumerate(key.groups()):
                        if index in [0, 2]:
                            list_elements.append(item)
                        else:
                            if item == "":
                                list_amounts.append(1)
                            else:
                                list_amounts.append(int(item))
                    #
                    mass_total = 0
                    for index, element in enumerate(list_elements):
                        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                            mass_total += list_amounts[index]*self.chemistry_data[element]
                        else:
                            mass_total += list_amounts[index]*self.chemistry_data_sills[element]
                    #
                    for index, element in enumerate(list_elements):
                        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                            list_fraction[element] = (list_amounts[index]*self.chemistry_data[element])/mass_total
                        else:
                            list_fraction[element] = (list_amounts[index]*self.chemistry_data_sills[element])/mass_total
                        #
                        if index == 0:
                            oxide_weight = 1
                            is_concentration = round(list_fraction[element]*10**6, 4)
                            self.container_var["fi_setting"]["IS MAT Default Concentration"].set(is_concentration)
                            self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set(round(
                                oxide_weight*is_concentration, 4))
                else:
                    oxide_weight = 1
                    is_concentration = round(1*10**6, 4)
                    self.container_var["fi_setting"]["IS MAT Default Concentration"].set(is_concentration)
                    self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set(round(
                        oxide_weight*is_concentration, 4))
                #
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Name"].set(var_opt)
    #
    def fi_change_matrix_concentration(self, var_entr, var_file, state_default, event):
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set(var_entr.get())
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Concentration"].set(var_entr.get())
    #
    ## INCLUSION SETUP #################################################################################################

    def fi_change_is_default(self, var_isotope, var_key):
        for file_long in self.container_lists[var_key]["Long"]:
            self.container_var["SMPL"][file_long]["IS Data"]["IS"].set(var_isotope)

        self.container_var["fi_setting"]["Salt Correction"]["Default IS"].set(var_isotope)

    def fi_change_is_specific(self, var_isotope, var_file, var_key):
        #self.container_var[var_key][var_file]["IS"].set(var_isotope)
        self.container_var[var_key][var_file]["IS Data"]["IS"].set(var_isotope)
    #
    def fi_check_elements_checkbutton(self):
        self.container_lists["Possible IS SMPL"].clear()
        self.container_lists["Selected Salts"].clear()
        for category in ["Chlorides", "Carbonates", "Sulfates"]:
            for salt, values in self.container_var["fi_setting"]["Salt Correction"][category].items():
                if category == "Chlorides":
                    parts_salt = re.search("([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)", salt)
                elif category == "Carbonates":
                    parts_salt = re.search("([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)"
                                           "([A-Z]{,1}[a-z]{,1})(\d*)", salt)
                else:
                    parts_salt = re.search(
                        "([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)", salt)
                if values["State"].get() == 1:
                    self.container_lists["Salt Chemistry"][salt] = {}
                    self.container_lists["Selected Salts"].append(salt)
                    for isotope in self.container_lists["ISOTOPES"]:
                        key = re.search("(\D+)(\d+)", isotope)
                        for item in parts_salt.groups():
                            if item == "":
                                item = str(1)
                            #
                            if item.isalpha():
                                last_letter = item
                                if item == key.group(1):
                                    if isotope not in self.container_lists["Possible IS SMPL"]:
                                        self.container_lists["Possible IS SMPL"].append(isotope)
                            if item.isnumeric():
                                last_number = item
                                self.container_lists["Salt Chemistry"][salt][last_letter] = last_number
        #
        self.opt_is_smpl_def["menu"].delete(0, "end")
        #
        for file_smpl, gui_opt in self.container_optionmenu["SMPL"]["IS"].items():
            gui_opt["menu"].delete(0, "end")
        #
        for isotope in self.container_lists["Possible IS SMPL"]:
            self.opt_is_smpl_def["menu"].add_command(
                label=isotope, command=lambda var_isotope=isotope, var_key="SMPL":
                self.fi_change_is_default(var_isotope, var_key))
            #
            for file_smpl, gui_opt in self.container_optionmenu["SMPL"]["IS"].items():
                gui_opt["menu"].add_command(
                    label=isotope, command=lambda var_isotope=isotope, var_file=file_smpl, var_key="SMPL":
                    self.fi_change_is_specific(var_isotope, var_file, var_key))

    def calculate_fluid_data(self):
        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
            elements_masses = {
                "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06, "Cl": 35.45,
                "K": 39.098, "Ca": 40.078, "Fe": 55.845}
        else:
            elements_masses = {
                "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070, "Cl": 35.45,
                "K": 39.100, "Ca": 40.080, "Fe": 55.850}

        for fluid in ["H2O"]:
            if fluid not in self.molar_masses_compounds:
                self.molar_masses_compounds[fluid] = {}
                if fluid == "H2O":
                    total = round(2*elements_masses["H"] + elements_masses["O"], 3)
                    self.molar_masses_compounds[fluid]["H"] = round((2*elements_masses["H"])/total, 3)
                    self.molar_masses_compounds[fluid]["O"] = round((elements_masses["O"])/total, 3)
                    self.molar_masses_compounds[fluid]["Total"] = total
                    self.molar_masses_compounds[fluid]["Cation"] = "H"

    def calculate_chloride_data(self):
        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
            elements_masses = {
                "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06, "Cl": 35.45,
                "K": 39.098, "Ca": 40.078, "Fe": 55.845}
        else:
            elements_masses = {
                "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070, "Cl": 35.45,
                "K": 39.100, "Ca": 40.080, "Fe": 55.850}

        for salt in list(self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].keys()):
            if salt not in self.molar_masses_compounds:
                self.molar_masses_compounds[salt] = {}
                if salt == "NaCl":
                    total = round(elements_masses["Na"] + elements_masses["Cl"], 3)
                    self.molar_masses_compounds[salt]["Na"] = round((elements_masses["Na"])/total, 3)
                    self.molar_masses_compounds[salt]["Cl"] = round((elements_masses["Cl"])/total, 3)
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Na"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 1
                elif salt == "KCl":
                    total = round(elements_masses["K"] + elements_masses["Cl"], 3)
                    self.molar_masses_compounds[salt]["K"] = round((elements_masses["K"])/total, 3)
                    self.molar_masses_compounds[salt]["Cl"] = round((elements_masses["Cl"])/total, 3)
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "K"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 1
                elif salt == "LiCl":
                    total = round(elements_masses["Li"] + elements_masses["Cl"], 3)
                    self.molar_masses_compounds[salt]["Li"] = round((elements_masses["Li"])/total, 3)
                    self.molar_masses_compounds[salt]["Cl"] = round((elements_masses["Cl"])/total, 3)
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Li"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 1
                elif salt == "MgCl2":
                    total = round(elements_masses["Mg"] + 2*elements_masses["Cl"], 3)
                    self.molar_masses_compounds[salt]["Mg"] = round((elements_masses["Mg"])/total, 3)
                    self.molar_masses_compounds[salt]["Cl"] = round((2*elements_masses["Cl"])/total, 3)
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Mg"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 2
                elif salt == "CaCl2":
                    total = round(elements_masses["Ca"] + 2*elements_masses["Cl"], 3)
                    self.molar_masses_compounds[salt]["Ca"] = round((elements_masses["Ca"])/total, 3)
                    self.molar_masses_compounds[salt]["Cl"] = round((2*elements_masses["Cl"])/total, 3)
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Ca"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 2
                elif salt == "FeCl2":
                    total = round(elements_masses["Fe"] + 2*elements_masses["Cl"], 3)
                    self.molar_masses_compounds[salt]["Fe"] = round((elements_masses["Fe"])/total, 3)
                    self.molar_masses_compounds[salt]["Cl"] = round((2*elements_masses["Cl"])/total, 3)
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Fe"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 2

    def prepare_nacl_equivalents(self, amount_fluid, amount_nacl_equiv, total_ppm):
        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
            elements_masses = {
                "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06, "Cl": 35.45,
                "K": 39.098, "Ca": 40.078, "Fe": 55.845}
        else:
            elements_masses = {
                "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070, "Cl": 35.45,
                "K": 39.100, "Ca": 40.080, "Fe": 55.850}

        self.helper_nacl_equivalents = {}

        for element in list(elements_masses.keys()):
            self.helper_nacl_equivalents[element] = 0

        for salt in self.molar_masses_compounds:
            if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                var_class = "Chlorides"
            else:
                continue

            for element in list(elements_masses.keys()):
                if self.container_var["fi_setting"]["Salt Correction"][var_class][salt]["State"].get() != 0:
                    if element in self.molar_masses_compounds[salt]:
                        salt_weight = float(
                            self.container_var["fi_setting"]["Salt Correction"][var_class][salt]["Weight"].get())
                        self.helper_nacl_equivalents[element] += int(round(
                            amount_nacl_equiv*salt_weight*self.molar_masses_compounds[salt][element]*total_ppm, 0))

        for fluid in self.molar_masses_compounds:
            if fluid in ["H2O"]:
                for element in list(elements_masses.keys()):
                    if element in self.molar_masses_compounds[fluid]:
                        self.helper_nacl_equivalents[element] += int(round(
                            amount_fluid*self.molar_masses_compounds[fluid][element]*total_ppm, 0))

    def fi_calculate_chargebalance(self, var_entr, mode, var_file, event):
        condition_std, condition_smpl = self.check_file_flags()
        self.pypitzer_performed = False

        if condition_std == True and condition_smpl == True:
            amount_fluid = (100 - float(var_entr.get()))/100
            amount_nacl_equiv = float(var_entr.get())/100
            total_ppm = 10**6

            # Calculate fluid data
            self.calculate_fluid_data()
            # Calculate chloride data
            self.calculate_chloride_data()
            # Prepare NaCl equivalents  calculation
            self.prepare_nacl_equivalents(
                amount_fluid=amount_fluid, amount_nacl_equiv=amount_nacl_equiv, total_ppm=total_ppm)

            if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                elements_masses = {
                    "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06,
                    "Cl": 35.45, "K": 39.098, "Ca": 40.078, "Fe": 55.845}
            else:
                elements_masses = {
                    "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070,
                    "Cl": 35.45, "K": 39.100, "Ca": 40.080, "Fe": 55.850}

            if self.init_fi_chargebalance == False:
                var_filetype = "None"
                var_file_short = "None"
                var_file_long = "None"
                var_focus = "None"
                if (self.container_var["Spike Elimination"]["STD"]["State"] == False and
                        self.container_var["Spike Elimination"]["SMPL"]["State"] == False):
                    list_datatype = ["RAW"]
                else:
                    list_datatype = ["RAW", "SMOOTHED"]

                for var_datatype in list_datatype:
                    # Intensity Analysis
                    self.get_intensity(
                        var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                        var_focus=var_focus, mode="All")
                    self.fi_get_intensity_corrected(
                        var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                        var_focus=var_focus, mode="All")
                    # Sensitivity Results
                    self.get_analytical_sensitivity(
                        var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                        var_file_long=var_file_long, mode="All")

                self.init_fi_chargebalance = True

            if mode == "demonstration":
                helper = []
                for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                    file_smpl = self.container_lists["SMPL"]["Long"][index]
                    var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                    var_nacl_equiv = amount_nacl_equiv*total_ppm
                    var_na_true_base = var_nacl_equiv*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"][
                        "Total"])
                    file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]
                    salt_factor = 1
                    for salt in self.container_lists["Selected Salts"]:
                        if salt != "NaCl":
                            molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                            element = self.molar_masses_compounds[salt]["Cation"]
                            charge_i = self.molar_masses_compounds[salt]["Cation Charge"]
                            molar_mass_na = elements_masses["Na"]

                            for isotope in file_isotopes:
                                key_isotope = re.search("(\D+)(\d+)", isotope)
                                isotope_atom = key_isotope.group(1)

                                if element == isotope_atom:
                                    molar_mass_element = elements_masses[element]
                                    try:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["MAT"][isotope]
                                    except:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                            file_smpl_short]["MAT"][isotope]

                                    salt_factor += (charge_i/var_sensitivity_i)*(var_intensity_i/var_intensity_na)* \
                                                   (molar_mass_na/molar_mass_element)
                        else:
                            salt_factor += 0

                    var_na_true_final = var_na_true_base/salt_factor

                    var_concentration_is = round(var_na_true_final, 4)
                    helper.append(var_concentration_is)

                try:
                    for row in self.tv_salt_cb.get_children():
                        self.tv_salt_cb.delete(row)
                except:
                    pass

                if self.container_var["General Settings"]["Desired Average"].get() == 1:
                    self.tv_salt_cb.insert("", tk.END, values=[str("Na"), round(np.mean(helper), 4)])
                else:
                    self.tv_salt_cb.insert("", tk.END, values=[str("Na"), round(np.median(helper), 4)])

            elif mode == "default":
                helper = []
                for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                    file_smpl = self.container_lists["SMPL"]["Long"][index]
                    var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                    var_nacl_equiv = amount_nacl_equiv*total_ppm
                    var_na_true_base = var_nacl_equiv*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"][
                        "Total"])
                    file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]
                    salt_factor = 1
                    for salt in self.container_lists["Selected Salts"]:
                        if salt != "NaCl":
                            molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                            element = self.molar_masses_compounds[salt]["Cation"]
                            charge_i = self.molar_masses_compounds[salt]["Cation Charge"]
                            molar_mass_na = elements_masses["Na"]
                            #
                            for isotope in file_isotopes:
                                key_isotope = re.search("(\D+)(\d+)", isotope)
                                isotope_atom = key_isotope.group(1)

                                if element == isotope_atom:
                                    molar_mass_element = elements_masses[element]
                                    try:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["MAT"][isotope]
                                    except:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                            file_smpl_short]["MAT"][isotope]

                                    salt_factor += (charge_i/var_sensitivity_i)*(var_intensity_i/var_intensity_na)*\
                                                   (molar_mass_na/molar_mass_element)
                        else:
                            salt_factor += 0

                    var_na_true_final = var_na_true_base/salt_factor

                    var_concentration_is = round(var_na_true_final, 4)
                    helper.append(var_concentration_is)

                    self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
                        var_entr.get())

                    self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
                    if file_smpl_short in self.container_files["SMPL"]:
                        self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)

                if self.container_var["General Settings"]["Desired Average"].get() == 1:
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(
                        round(np.mean(helper), 4))
                else:
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(
                        round(np.median(helper), 4))
            elif mode == "specific":
                file_smpl = var_file
                file_smpl_short = file_smpl.split("/")[-1]
                var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                var_nacl_equiv = amount_nacl_equiv*total_ppm
                var_na_true_base = var_nacl_equiv*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"])
                file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]
                salt_factor = 1
                for salt in self.container_lists["Selected Salts"]:
                    if salt != "NaCl":
                        molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                        element = self.molar_masses_compounds[salt]["Cation"]
                        charge_i = self.molar_masses_compounds[salt]["Cation Charge"]
                        molar_mass_na = elements_masses["Na"]
                        for isotope in file_isotopes:
                            key_isotope = re.search("(\D+)(\d+)", isotope)
                            isotope_atom = key_isotope.group(1)

                            if element == isotope_atom:
                                molar_mass_element = elements_masses[element]
                                try:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["MAT"][isotope]
                                except:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                        file_smpl_short]["MAT"][isotope]

                                salt_factor += (charge_i/var_sensitivity_i)*(var_intensity_i/var_intensity_na)*\
                                               (molar_mass_na/molar_mass_element)
                    else:
                        salt_factor += 0

                var_na_true_final = var_na_true_base/salt_factor

                var_concentration_is = round(var_na_true_final, 4)

                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
                if file_smpl_short in self.container_files["SMPL"]:
                    self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)

    def check_file_flags(self):
        helper_flags = {"STD": {"Total": 0, "Currently": 0}, "SMPL": {"Total": 0, "Currently": 0}}
        for str_filetype in ["STD", "SMPL"]:
            helper_flags[str_filetype]["Total"] = len(self.container_lists[str_filetype]["Long"])
            for str_filename_long in self.container_lists[str_filetype]["Long"]:
                str_color = self.container_var[str_filetype][str_filename_long]["Sign Color"].get()
                if str_color == "#B0D8A4":
                    helper_flags[str_filetype]["Currently"] += 1

        condition_std = False
        condition_smpl = False

        if helper_flags["STD"]["Total"] == helper_flags["STD"]["Currently"]:
            condition_std = True

        if helper_flags["SMPL"]["Total"] == helper_flags["SMPL"]["Currently"]:
            condition_smpl = True

        return condition_std, condition_smpl

    def fi_calculate_massbalance(self, var_entr, mode, var_file, event):
        condition_std, condition_smpl = self.check_file_flags()
        self.pypitzer_performed = False

        if condition_std == True and condition_smpl == True:
            amount_fluid = (100 - float(var_entr.get()))/100
            amount_nacl_equiv = float(var_entr.get())/100
            total_ppm = 10**6

            # Calculate fluid data
            self.calculate_fluid_data()
            # Calculate chloride data
            self.calculate_chloride_data()
            # Prepare NaCl equivalents  calculation
            self.prepare_nacl_equivalents(
                amount_fluid=amount_fluid, amount_nacl_equiv=amount_nacl_equiv, total_ppm=total_ppm)

            if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                elements_masses = {
                    "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06,
                    "Cl": 35.45, "K": 39.098, "Ca": 40.078, "Fe": 55.845}
            else:
                elements_masses = {
                    "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070,
                    "Cl": 35.45, "K": 39.100, "Ca": 40.080, "Fe": 55.850}

            if self.init_fi_massbalance == False:
                var_filetype = "None"
                var_file_short = "None"
                var_file_long = "None"
                var_focus = "None"
                if (self.container_var["Spike Elimination"]["STD"]["State"] == False and
                        self.container_var["Spike Elimination"]["SMPL"]["State"] == False):
                    list_datatype = ["RAW"]
                else:
                    list_datatype = ["RAW", "SMOOTHED"]

                for var_datatype in list_datatype:
                    # Intensity Analysis
                    self.get_intensity(
                        var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                        var_focus=var_focus, mode="All")
                    self.fi_get_intensity_corrected(
                        var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                        var_focus=var_focus, mode="All")
                    # Sensitivity Results
                    self.get_analytical_sensitivity(
                        var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                        var_file_long=var_file_long, mode="All")

                self.init_fi_massbalance = True

            if mode == "demonstration":
                helper = []
                for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                    file_smpl = self.container_lists["SMPL"]["Long"][index]
                    var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                    var_na_equiv = self.molar_masses_compounds["NaCl"]["Na"]*amount_nacl_equiv*total_ppm
                    var_na_true_base = var_na_equiv
                    var_salt_contribution = 0
                    file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]
                    for salt in self.container_lists["Selected Salts"]:
                        if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                            var_weigth = float(
                                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].get())
                            var_weight_sum = var_weigth*elements_masses["Na"]/self.molar_masses_compounds["NaCl"][
                                "Total"]

                        if salt != "NaCl":
                            molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                            element = self.molar_masses_compounds[salt]["Cation"]
                            for isotope in file_isotopes:
                                key_isotope = re.search("(\D+)(\d+)", isotope)
                                isotope_atom = key_isotope.group(1)

                                if element == isotope_atom:
                                    molar_mass_element = elements_masses[element]
                                    try:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["MAT"][isotope]
                                    except:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                            file_smpl_short]["MAT"][isotope]
                                    try:
                                        var_salt_contribution += var_weight_sum*(var_intensity_i/var_intensity_na)*(
                                                1/var_sensitivity_i)*(molar_mass_salt/molar_mass_element)
                                    except:
                                        print("Error Mass Balance:", var_weight_sum, var_intensity_i, var_intensity_na,
                                              var_sensitivity_i, molar_mass_salt, molar_mass_element)
                        else:
                            var_na_true_base *= 1

                    var_salt_contribution_final = var_salt_contribution + 1
                    var_concentration_is = var_na_true_base/var_salt_contribution_final
                    helper.append(var_concentration_is)

                try:
                    for row in self.tv_salt.get_children():
                        self.tv_salt.delete(row)
                except:
                    pass

                if self.container_var["General Settings"]["Desired Average"].get() == 1:
                    self.tv_salt.insert("", tk.END, values=[str("Na"), round(np.mean(helper), 4)])
                else:
                    self.tv_salt.insert("", tk.END, values=[str("Na"), round(np.median(helper), 4)])

            elif mode == "default":
                helper = []
                for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                    file_smpl = self.container_lists["SMPL"]["Long"][index]
                    var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                    var_na_equiv = self.molar_masses_compounds["NaCl"]["Na"]*amount_nacl_equiv*total_ppm
                    var_na_true_base = var_na_equiv
                    var_salt_contribution = 0
                    file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]
                    for salt in self.container_lists["Selected Salts"]:
                        if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                            var_weigth = float(
                                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].get())
                            var_weight_sum = var_weigth*elements_masses["Na"]/self.molar_masses_compounds["NaCl"][
                                "Total"]

                        if salt != "NaCl":
                            molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                            element = self.molar_masses_compounds[salt]["Cation"]
                            for isotope in file_isotopes:
                                key_isotope = re.search("(\D+)(\d+)", isotope)
                                isotope_atom = key_isotope.group(1)

                                if element == isotope_atom:
                                    molar_mass_element = elements_masses[element]
                                    try:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                            file_smpl_short]["MAT"][isotope] # SMOOTHED
                                    except:
                                        var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][isotope]
                                        var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                            file_smpl_short]["INCL"][var_is_i]
                                        var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                            file_smpl_short]["MAT"][isotope]

                                    var_salt_contribution += var_weight_sum*(var_intensity_i/var_intensity_na)* \
                                                             (1/var_sensitivity_i)*(molar_mass_salt/molar_mass_element)
                        else:
                            var_na_true_base *= 1

                    var_salt_contribution_final = var_salt_contribution + 1
                    var_concentration_is = round(var_na_true_base/var_salt_contribution_final, 4)
                    #var_concentration_is = var_na_true_base
                    helper.append(var_concentration_is)

                    self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
                        var_entr.get())
                    self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is_i)
                    self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
                    if file_smpl_short in self.container_files["SMPL"]:
                        self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)

                if self.container_var["General Settings"]["Desired Average"].get() == 1:
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(
                        round(np.mean(helper), 4))
                else:
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(
                        round(np.median(helper), 4))
            elif mode == "specific":
                file_smpl = var_file
                file_smpl_short = file_smpl.split("/")[-1]
                var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                var_na_equiv = self.molar_masses_compounds["NaCl"]["Na"]*amount_nacl_equiv*total_ppm
                var_na_true_base = var_na_equiv
                var_salt_contribution = 0
                file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]
                for salt in self.container_lists["Selected Salts"]:
                    if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                        var_weigth = float(
                            self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].get())
                        var_weight_sum = var_weigth*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"])

                    if salt != "NaCl":
                        molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                        element = self.molar_masses_compounds[salt]["Cation"]

                        for isotope in file_isotopes:
                            key_isotope = re.search("(\D+)(\d+)", isotope)
                            isotope_atom = key_isotope.group(1)

                            if element == isotope_atom:
                                molar_mass_element = elements_masses[element]
                                try:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["MAT"][isotope]
                                except:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                        file_smpl_short]["MAT"][isotope]

                                var_salt_contribution += var_weight_sum*(var_intensity_i/var_intensity_na)*\
                                                         (1/var_sensitivity_i)*(molar_mass_salt/molar_mass_element)

                    else:
                        var_na_true_base *= 1

                var_salt_contribution_final = var_salt_contribution + 1

                var_concentration_is = round(var_na_true_base/var_salt_contribution_final, 4)

                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
                if file_smpl_short in self.container_files["SMPL"]:
                    self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)

    def fi_set_concentration_is_massbalance(self, event):
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set("unknown")
            self.container_var["SMPL"][file_smpl_long]["IS Data"]["Concentration"].set(
                self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())
            if file_smpl_short in self.container_files["SMPL"]:
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())
    #
    def fi_set_concentration_is_chargebalance(self, event):
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set("unknown")
            self.container_var["SMPL"][file_smpl_long]["IS Data"]["Concentration"].set(
                self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())
            if file_smpl_short in self.container_files["SMPL"]:
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())

    def fi_pypitzer(self):
        ## Window Settings
        window_width = 1200
        window_heigth = 500
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)

        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)

        subwindow_fi_inclusion_pypitzer = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_pypitzer.title("FLUID INCLUSION ANALYSIS - PyPitzer")
        subwindow_fi_inclusion_pypitzer.geometry(var_geometry)
        subwindow_fi_inclusion_pypitzer.resizable(False, False)
        subwindow_fi_inclusion_pypitzer["bg"] = self.bg_colors["Very Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_pypitzer, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_pypitzer, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_pypitzer.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_pypitzer.grid_columnconfigure(i, minsize=column_min)

        # --------------------------------------------------------------------------------------------------------------

        if "IS" not in self.container_optionmenu["SMPL"]:
            self.container_optionmenu["SMPL"]["IS"] = {}

        start_row = 0
        start_column = 0

        ## LABELS
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row, column_id=start_column, n_rows=1, n_columns=7,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Fluid composition", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row, column_id=start_column + 8, n_rows=1, n_columns=7,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Isotope selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=7, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Cations", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=7, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Anions", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row, column_id=start_column + 16, n_rows=1,
            n_columns=24, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Melting temperature of the last solid (in °C)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 1, column_id=start_column + 16, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Last solid (default)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 2, column_id=start_column + 16, n_rows=1,
            n_columns=12, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Melting temperature (default)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row, column_id=start_column + 41, n_rows=1,
            n_columns=18, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Internal standard concentration", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 1, column_id=start_column + 41, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Internal standard (default)", relief=tk.FLAT, fontsize="sans 10 bold")

        ## BUTTONS
        btn_00c = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 3, column_id=start_column + 34, n_rows=1,
            n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Import Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        btn_00c.configure(state="disabled")
        btn_00d = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=n_rows - 2, column_id=start_column + 51, n_rows=1,
            n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Run calculation", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.run_pypitzer)

        ## OPTION MENUS
        var_list_last_compound = [
            "Ice H2O", "Halite NaCl","Hydrohalite NaCl*2H2O", "Sylvite KCl", "Antarcticite CaCl2*6H2O",
            "Bischofite MgCl2*6H2O", "MgCl2*8H2O", "MgCl2*12H2O", "Carnallite KCl*MgCl2*6H2O",
            "Tachyhydrite CaMg2Cl6*12H2O", "Mirabilite Na2SO4*10H2O", "Thenardite Na2SO4", "Hexahydrite MgSO4*6H2O",
            "Epsomite MgSO4*7H2O", "Arcanite K2SO4", "Picromerite K2Mg(SO4)2*6H2O", "LiCl", "LiCl*H2O", "LiCl*2H2O",
            "LiCl*3H2O", "LiCl*5H2O", "FeCl2*4H2O", "FeCl2*6H2O", "FeSO4*H2O", "FeSO4*7H2O"]

        var_list_last_compound_simple = [
            "H2O", "NaCl", "NaCl*2H2O", "KCl", "CaCl2*6H2O", "MgCl2*6H2O", "MgCl2*8H2O", "MgCl2*12H2O",
            "KCl*MgCl2*6H2O", "CaMg2Cl6*12H2O", "Na2SO4*10H2O", "Na2SO4", "MgSO4*6H2O", "MgSO4*7H2O", "K2SO4",
            "K2Mg(SO4)2*6H2O", "LiCl", "LiCl*H2O", "LiCl*2H2O", "LiCl*3H2O", "LiCl*5H2O", "FeCl2*4H2O", "FeCl2*6H2O",
            "FeSO4*H2O", "FeSO4*7H2O"]

        opt_last_solid_default = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 1, column_id=start_column + 28, n_rows=1,
            n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Last solid"], option_list=var_list_last_compound,
            text_set=self.container_var["fi_setting"]["Last solid"].get(), fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color, command=lambda opt=self.container_var["fi_setting"]["Last solid"]:
            self.change_last_solid_default(opt))
        opt_last_solid_default["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_last_solid_default.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        opt_is_default = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 1, column_id=start_column + 51, n_rows=1,
            n_columns=8, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
            option_list=self.container_lists["Measured Isotopes"]["All"],
            text_set=self.container_var["fi_setting"]["Salt Correction"]["Default IS"].get(),
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
                           var_key="SMPL":
            self.fi_change_is_default(var_opt, var_key))
        opt_is_default["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_is_default.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)

        ## ENTRIES
        var_entr = tk.StringVar()
        var_entr.set("0.0")

        entr_00 = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 2, column_id=start_column + 28, n_rows=1,
            n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=var_entr, text_default=var_entr.get(), command=lambda event, entr=var_entr:
            self.default_melting_temperature(entr, event))

        ## TREEVIEWS
        frm_cations = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 2, column_id=start_column, n_rows=10,
            n_columns=7, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_frame()
        vsb_cations = ttk.Scrollbar(master=frm_cations, orient="vertical")
        text_cations = tk.Text(
            master=frm_cations, width=30, height=25, yscrollcommand=vsb_cations.set,
            bg=self.bg_colors["Very Light"])
        vsb_cations.config(command=text_cations.yview)
        vsb_cations.pack(side="right", fill="y")
        text_cations.pack(side="left", fill="both", expand=True)

        #self.temp_checkbuttons_pypitzer = {}
        #self.helper_checkbuttons = {"Isotopes": {}, "On": [], "Off": []}
        list_anions = []
        for var_cation in self.container_lists["Measured Elements"]["All"]:
            if var_cation not in ["Cl", "S", "Br", "I"]:
                if var_cation == "Na":
                    if var_cation not in self.temp_checkbuttons_pypitzer:
                        self.temp_checkbuttons_pypitzer[var_cation] = tk.IntVar(value=1)
                        self.container_lists["Selected Cations"].append(var_cation)
                        self.container_lists["Possible Cations"].append(var_cation)
                else:
                    if var_cation not in self.temp_checkbuttons_pypitzer:
                        self.temp_checkbuttons_pypitzer[var_cation] = tk.IntVar(value=0)

                if var_cation in ["Na", "K", "Mg", "Ca", "Fe", "Cs", "Sr"]:
                    if var_cation not in self.container_lists["Possible Cations"]:
                        self.container_lists["Possible Cations"].append(var_cation)
                    cb_i = tk.Checkbutton(
                        master=frm_cations, text=var_cation, fg=self.bg_colors["Dark Font"],
                        bg=self.bg_colors["Very Light"], variable=self.temp_checkbuttons_pypitzer[var_cation],
                        command=lambda cation=var_cation: self.select_cation(cation))
                    text_cations.window_create("end", window=cb_i)
                    text_cations.insert("end", "\n")
            else:
                list_anions.append(var_cation)

        frm_anions = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 13, column_id=start_column,
            n_rows=6, n_columns=7, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_frame()
        vsb_anions = ttk.Scrollbar(master=frm_anions, orient="vertical")
        text_anions = tk.Text(
            master=frm_anions, width=30, height=25, yscrollcommand=vsb_anions.set,
            bg=self.bg_colors["Very Light"])
        vsb_anions.config(command=text_anions.yview)
        vsb_anions.pack(side="right", fill="y")
        text_anions.pack(side="left", fill="both", expand=True)

        for var_anion in list_anions:
            if var_anion not in self.temp_checkbuttons_pypitzer:
                self.temp_checkbuttons_pypitzer[var_anion] = tk.IntVar(value=1)

            if var_anion == "S":
                var_anion_ext = "S (SO4-2)"
            else:
                var_anion_ext = var_anion

            if var_anion in ["Cl", "S"]:
                cb_i = tk.Checkbutton(
                    master=frm_anions, text=var_anion_ext, fg=self.bg_colors["Dark Font"],
                    bg=self.bg_colors["Very Light"], variable=self.temp_checkbuttons_pypitzer[var_anion])
                text_anions.window_create("end", window=cb_i)
                text_anions.insert("end", "\n")

                if var_anion != "Cl":
                    self.container_lists["Selected Anions"].append(var_anion)
                    self.container_lists["Possible Anions"].append(var_anion)

                if var_anion == "Cl":
                    cb_i.configure(state="disabled")

        frm_isotopes = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 1, column_id=start_column + 8,
            n_rows=18, n_columns=7, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_frame()
        vsb_isotopes = ttk.Scrollbar(master=frm_isotopes, orient="vertical")
        text_isotopes = tk.Text(
            master=frm_isotopes, width=30, height=25, yscrollcommand=vsb_isotopes.set,
            bg=self.bg_colors["Very Light"])
        vsb_isotopes.config(command=text_isotopes.yview)
        vsb_isotopes.pack(side="right", fill="y")
        text_isotopes.pack(side="left", fill="both", expand=True)

        for var_isotope in self.container_lists["Measured Isotopes"]["All"]:
            key_element_i = re.search("(\D+)(\d+)", var_isotope)
            element_i = key_element_i.group(1)
            if element_i in self.container_lists["Possible Cations"] or element_i in self.container_lists[
                "Possible Anions"]:
                if element_i != "Cl":
                    if element_i in ["Na", "S"]:
                        if element_i not in self.helper_checkbuttons["Isotopes"]:
                            self.helper_checkbuttons["Isotopes"][var_isotope] = tk.IntVar(value=1)
                    else:
                        if element_i not in self.helper_checkbuttons["Isotopes"]:
                            self.helper_checkbuttons["Isotopes"][var_isotope] = tk.IntVar(value=0)

                    cb_i = tk.Checkbutton(
                        master=frm_isotopes, text=var_isotope, fg=self.bg_colors["Dark Font"],
                        bg=self.bg_colors["Very Light"], variable=self.helper_checkbuttons["Isotopes"][var_isotope],
                        command=lambda isotope=var_isotope: self.select_isotope(isotope))
                    text_isotopes.window_create("end", window=cb_i)
                    text_isotopes.insert("end", "\n")

        frm_temperatures = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 4, column_id=start_column + 16,
            n_rows=n_rows - 5, n_columns=24, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_frame()
        vsb_temperatures = ttk.Scrollbar(master=frm_temperatures, orient="vertical")
        text_temperatures = tk.Text(
            master=frm_temperatures, width=30, height=25, yscrollcommand=vsb_temperatures.set,
            bg=self.bg_colors["Very Light"])
        vsb_temperatures.config(command=text_temperatures.yview)
        vsb_temperatures.pack(side="right", fill="y")
        text_temperatures.pack(side="left", fill="both", expand=True)

        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            var_opt_i = self.container_var["SMPL"][file_smpl_long]["Last compound"]

            lbl_i = tk.Label(
                frm_temperatures, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_temperatures.window_create("end", window=lbl_i)
            text_temperatures.insert("end", "\t")

            entr_i = tk.Entry(
                frm_temperatures, textvariable=self.container_var["SMPL"][file_smpl_long]["Melting temperature"],
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0, width=8)
            text_temperatures.window_create("insert", window=entr_i)
            text_temperatures.insert("end", "\t")

            opt_last_compound_i = tk.OptionMenu(
                frm_temperatures, var_opt_i, *var_list_last_compound)
            opt_last_compound_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color)
            opt_last_compound_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_temperatures.window_create("end", window=opt_last_compound_i)
            text_temperatures.insert("end", " \n")

        frm_is = SE(
            parent=subwindow_fi_inclusion_pypitzer, row_id=start_row + 2, column_id=start_column + 41,
            n_rows=n_rows - 4, n_columns=18, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_frame()
        vsb_is = ttk.Scrollbar(master=frm_is, orient="vertical")
        text_is = tk.Text(
            master=frm_is, width=30, height=25, yscrollcommand=vsb_is.set,
            bg=self.bg_colors["Very Light"])
        vsb_is.config(command=text_is.yview)
        vsb_is.pack(side="right", fill="y")
        text_is.pack(side="left", fill="both", expand=True)

        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            var_opt_is = self.container_var["SMPL"][file_smpl_long]["IS Data"]["IS"]
            file_isotopes = self.container_lists["Measured Isotopes"][file_smpl]

            lbl_i = tk.Label(
                frm_is, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_is.window_create("end", window=lbl_i)
            text_is.insert("end", "\t")

            opt_is = tk.OptionMenu(
                frm_is, var_opt_is, *file_isotopes)
            opt_is["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_is.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_is.window_create("end", window=opt_is)
            text_is.insert("end", " \t")

            entr_i = tk.Entry(
                frm_is, textvariable=self.container_var["SMPL"][file_smpl_long]["IS Data"]["Concentration"],
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"], highlightthickness=0, width=15)
            text_is.window_create("insert", window=entr_i)
            text_is.insert("end", "\n")

    def default_melting_temperature(self, entr, event):
        val_default_value = entr.get()
        for index, file_smpl_long in enumerate(self.container_lists["SMPL"]["Long"]):
            self.container_var["SMPL"][file_smpl_long]["Melting temperature"].set(val_default_value)

    def change_last_solid_default(self, opt):
        for index, file_smpl_long in enumerate(self.container_lists["SMPL"]["Long"]):
            self.container_var["SMPL"][file_smpl_long]["Last compound"].set(opt)

    def select_isotope(self, isotope):
        if self.helper_checkbuttons["Isotopes"][isotope].get() == 1:
            if isotope not in self.helper_checkbuttons["On"]:
                self.helper_checkbuttons["On"].append(isotope)
            if isotope in self.helper_checkbuttons["Off"]:
                self.helper_checkbuttons["Off"].remove(isotope)
        else:
            if isotope not in self.helper_checkbuttons["Off"]:
                self.helper_checkbuttons["Off"].append(isotope)
            if isotope in self.helper_checkbuttons["On"]:
                self.helper_checkbuttons["On"].remove(isotope)

    def select_cation(self, cation):
        if self.temp_checkbuttons_pypitzer[cation].get() == 1:
            if cation not in self.container_lists["Selected Cations"]:
                self.container_lists["Selected Cations"].append(cation)
        else:
            if cation in self.container_lists["Selected Cations"]:
                self.container_lists["Selected Cations"].remove(cation)

    def run_pypitzer(self):
        self.perform_complete_quantification(mode="PyPitzer")

        self.dict_species_pypitzer = {}
        var_list_last_compound = [
            "Ice H2O", "Halite NaCl", "Hydrohalite NaCl*2H2O", "Sylvite KCl", "Antarcticite CaCl2*6H2O",
            "Bischofite MgCl2*6H2O", "MgCl2*8H2O", "MgCl2*12H2O", "Carnallite KCl*MgCl2*6H2O",
            "Tachyhydrite CaMg2Cl6*12H2O", "Mirabilite Na2SO4*10H2O", "Thenardite Na2SO4", "Hexahydrite MgSO4*6H2O",
            "Epsomite MgSO4*7H2O", "Arcanite K2SO4", "Picromerite K2Mg(SO4)2*6H2O", "LiCl", "LiCl*H2O", "LiCl*2H2O",
            "LiCl*3H2O", "LiCl*5H2O", "FeCl2*4H2O", "FeCl2*6H2O", "FeSO4*H2O", "FeSO4*7H2O"]
        var_list_last_compound_simple = [
            "H2O(S)", "NaCl", "NaCl-2H2O", "KCl", "CaCl2-6H2O", "MgCl2-6H2O", "MgCl2-8H2O", "MgCl2-12H2O",
            "KCl-MgCl2-6H2O", "CaMg2Cl6-12H2O", "Na2SO4-10H2O", "Na2SO4", "MgSO4-6H2O", "MgSO4-7H2O", "K2SO4",
            "K2Mg(SO4)2-6H2O", "LiCl", "LiCl-H2O", "LiCl-2H2O", "LiCl-3H2O", "LiCl-5H2O", "FeCl2-4H2O", "FeCl2-6H2O",
            "FeSO4-H2O", "FeSO4-7H2O"]

        self.dict_species_helper = {}
        for cation in self.container_lists["Selected Cations"]:
            if cation in ["Li", "Na", "K", "Rb", "Cs"]:
                self.dict_species_helper[cation] = cation+"+"
            elif cation in ["Mg", "Ca", "Sr", "Fe"]:
                self.dict_species_helper[cation] = cation + "+2"
            else:
                self.dict_species_helper[cation] = cation

        for anion in self.container_lists["Selected Anions"]:
            if anion in ["F", "Br", "I", "At"]:
                self.dict_species_helper[anion] = anion+"-"
            elif anion == "S":
                self.dict_species_helper[anion] = anion+"O4-2"
            else:
                self.dict_species_helper[anion] = anion

        # Selected species (all)
        for var_datatype in ["RAW", "SMOOTHED"]:
            self.dict_species_pypitzer[var_datatype] = {}
            for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                file_smpl_long = self.container_lists["SMPL"]["Long"][index]
                self.dict_species_pypitzer[var_datatype][file_smpl_short] = {}
                self.build_species_dictionary(
                    filename_short=file_smpl_short, filename_long=file_smpl_long, datatype=var_datatype)

            self.dict_inital_guess_pypitzer = {}
            helper_molalities_na = {}
            for index, file_smpl_long in enumerate(self.container_lists["SMPL"]["Long"]):
                file_smpl_short = self.container_lists["SMPL"]["Short"][index]
                self.dict_inital_guess_pypitzer[file_smpl_short] = (1, 1)
                # Last solid
                str_last_solid_i = self.container_var["SMPL"][file_smpl_long]["Last compound"].get()
                index_last_solid_i = var_list_last_compound.index(str_last_solid_i)
                str_last_solid_i = var_list_last_compound_simple[index_last_solid_i]
                # Melting temperature of last solid
                str_melting_temperature_i = self.container_var["SMPL"][file_smpl_long]["Melting temperature"].get()

                fluid_inclusion = FluidPitzer(
                    x0=self.dict_inital_guess_pypitzer[file_smpl_short],
                    species=self.dict_species_pypitzer[var_datatype][file_smpl_short],
                    solids=[str_last_solid_i],
                    t=float(str_melting_temperature_i))

                results_pypitzer = fluid_inclusion.optimize()

                b_na = results_pypitzer.x[0]
                b_cl = results_pypitzer.x[1]
                str_is = self.container_var["SMPL"][file_smpl_long]["IS Data"]["IS"].get()
                key_element_is = re.search("(\D+)(\d+)", str_is)
                element_is = key_element_is.group(1)
                val_molar_mass_is = self.chemistry_data[element_is]
                val_molar_mass_cl = self.chemistry_data["Cl"]
                val_concentration_incl_is = round(b_na*val_molar_mass_is*1000, 4)
                val_concentration_incl_cl = round(b_cl*val_molar_mass_cl*1000, 4)
                helper_molalities_na[file_smpl_short] = {"Na": b_na, "Cl": b_cl}

                self.container_var["SMPL"][file_smpl_long]["IS Data"]["Concentration"].set(val_concentration_incl_is)

            #     print(file_smpl_short)
            #     print("Species input:", self.dict_species_pypitzer[var_datatype][file_smpl_short])
            #     print("b(INCL,IS):", b_na, "mol/(kgH2O)", ":", "b(INCL,Cl):", b_cl,
            #           "mol/(kgH2O)", ":", "Ratio:", b_cl/b_na)
            #     print("C(INCL,IS):", val_concentration_incl_is, "ppm", ":", "C(INCL,Cl):", val_concentration_incl_cl,
            #           "ppm", ":", "Ratio:", val_concentration_incl_cl/val_concentration_incl_is)
            # print("")
            # print("PyPitzer calculation successfully terminated!\n")

            for file_smpl_short in self.container_lists["SMPL"]["Short"]:
                file_smpl_long = self.container_lists["SMPL"]["Long"][index]
                file_isotopes = self.container_lists["Measured Isotopes"][file_smpl_short]

                str_is = self.container_var["SMPL"][file_smpl_long]["IS Data"]["IS"].get()
                key_element_is = re.search("(\D+)(\d+)", str_is)
                element_is = key_element_is.group(1)
                val_molar_mass_is = self.chemistry_data[element_is]

                for isotope in file_isotopes:
                    key_element_i = re.search("(\D+)(\d+)", isotope)
                    element_i = key_element_i.group(1)
                    val_molar_mass_i = self.chemistry_data[element_i]
                    val_concentration_ratio_i = self.container_concentration_ratio["SMPL"][var_datatype][
                        file_smpl_short]["INCL"][isotope]
                    ratio_mod_i = (val_molar_mass_is/val_molar_mass_i)*val_concentration_ratio_i

                    if element_i == "Na":
                        b_i = helper_molalities_na[file_smpl_short]["Na"]
                        val_molar_mass_i = self.chemistry_data["Na"]
                        val_concentration_incl_i = round(b_i*val_molar_mass_i*1000, 4)
                        self.container_var["SMPL"][file_smpl_short]["IS Data"][var_datatype]["IS"].set(isotope)
                        self.container_var["SMPL"][file_smpl_short]["IS Data"][var_datatype][
                            "Concentration"].set(val_concentration_incl_i)
                    elif element_i == "Cl":
                        b_i = helper_molalities_na[file_smpl_short][element_i]
                    else:
                        b_i = helper_molalities_na[file_smpl_short]["Na"]*ratio_mod_i

                    val_concentration_incl_i = round(b_i*val_molar_mass_i*1000, 4)
                    self.container_concentration["SMPL"][var_datatype][file_smpl_short]["INCL"][
                        isotope] = val_concentration_incl_i

        self.pypitzer_performed = True

    def perform_complete_quantification(self, mode="normal"):
        if mode == "PyPitzer":
            bool_pypitzer = True
        else:
            bool_pypitzer = False

        # Perform quantification
        for var_filetype in ["STD", "SMPL"]:
            for var_file_short in self.container_lists[var_filetype]["Short"]:
                self.get_condensed_intervals_of_file(filetype=var_filetype, filename_short=var_file_short)

        var_filetype = "None"
        var_file_short = "None"
        var_file_long = "None"
        var_focus = "None"

        for var_datatype in ["RAW", "SMOOTHED"]:
            # Intensity Results
            self.get_intensity(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_focus=var_focus, mode="All")
            self.fi_get_intensity_corrected(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_focus=var_focus, mode="All")
            self.fi_get_intensity_mix(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short, mode="All")

            # Sensitivity Results
            self.get_analytical_sensitivity(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_file_long=var_file_long, mode="All")
            results_is = self.determine_possible_is(filetype="ALL")
            IQ(dataframe=None, project_type=self.pysills_mode,
               results_container=self.container_intensity_ratio).get_intensity_ratio(
                data_container=self.container_intensity_corrected, dict_is=results_is, datatype=var_datatype)
            self.fi_get_rsf(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_file_long=var_file_long, var_focus=var_focus, mode="All")

            # Concentration Results
            self.fi_get_concentration(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_file_long=var_file_long, var_focus=var_focus, mode="All", pypitzer=bool_pypitzer)
            self.fi_get_normalized_sensitivity(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_file_long=var_file_long, mode="All")
            self.fi_get_concentration_ratio(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_file_long=var_file_long, var_focus=var_focus, mode="All")
            self.fi_get_lod(
                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                var_file_long=var_file_long, var_focus=var_focus, mode="All")
            self.fi_get_mixed_concentration_ratio(
                var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long, mode="All")
            self.fi_get_mixing_ratio(
                var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long, mode="All")
            self.fi_get_concentration_mixed(var_datatype=var_datatype, var_file_short=var_file_short, mode="All")

    def build_species_dictionary(self, filename_short, filename_long, datatype):
        dict_chemistry = self.container_lists["Measured Elements"][filename_short]
        helper_ratios = {}

        str_is = self.container_var["SMPL"][filename_long]["IS Data"]["IS"].get()
        key_element_is = re.search("(\D+)(\d+)", str_is)
        element_is = key_element_is.group(1)
        val_molar_mass_is = self.chemistry_data[element_is]

        for element, ion in self.dict_species_helper.items():
            helper_ratios[element] = {}
            list_isotopes = dict_chemistry[element]

            for isotope in list_isotopes:
                key_element_i = re.search("(\D+)(\d+)", isotope)
                element_i = key_element_i.group(1)

                if element_i in self.temp_checkbuttons_pypitzer:
                    if self.temp_checkbuttons_pypitzer[element_i].get() == 1:
                        val_molar_mass_i = self.chemistry_data[element_i]
                        val_concentration_ratio_i = self.container_concentration_ratio["SMPL"][datatype][
                            filename_short]["INCL"][isotope]
                        value_i = (val_molar_mass_is/val_molar_mass_i)*val_concentration_ratio_i

                        helper_ratios[element][isotope] = value_i
                    else:
                        del helper_ratios[element_i]

            if element in self.temp_checkbuttons_pypitzer:
                if self.temp_checkbuttons_pypitzer[element_i].get() == 1:
                    if element == element_i:
                        helper_values = []
                        for isotope, value in helper_ratios[element].items():
                            if self.helper_checkbuttons["Isotopes"][isotope].get() == 1:
                                helper_values.append(value)

                        self.dict_species_pypitzer[datatype][filename_short][ion] = np.mean(helper_values)

    def fi_charge_balance(self):
        if "IS" not in self.container_optionmenu["SMPL"]:
            self.container_optionmenu["SMPL"]["IS"] = {}
        #
        ## Window Settings
        window_width = 1020
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_chargebalance = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_chargebalance.title("FLUID INCLUSION ANALYSIS - Charge Balance")
        subwindow_fi_inclusion_chargebalance.geometry(var_geometry)
        subwindow_fi_inclusion_chargebalance.resizable(False, False)
        subwindow_fi_inclusion_chargebalance["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_chargebalance, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_chargebalance, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_chargebalance.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_chargebalance.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        start_chlorides = 1
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column,
            n_rows=n_rows - 1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_frame(relief=tk.SOLID)
        #
        ## LABELS
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Composition: H2O + ...", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_chlorides, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Chlorides", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column + 13, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="NaCl Equivalents Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 1, column_id=start_column + 13, n_rows=1,
            n_columns=7, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Salinity (in wt.%)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column + 26, n_rows=1,
            n_columns=24,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 26,
            n_rows=1, n_columns=6, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Default Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## CHECKBOXES
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].items(), start=1):
            cb_01_i = SE(
                parent=subwindow_fi_inclusion_chargebalance, row_id=start_chlorides + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            entr_01_i = SE(
                parent=subwindow_fi_inclusion_chargebalance, row_id=start_chlorides + index, column_id=start_column + 7,
                n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        ## ENTRIES
        entr_04a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 1, column_id=start_column + 20, n_rows=1,
            n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
                           mode="demonstration", var_file=None:
            self.fi_calculate_chargebalance(var_entr, mode, var_file, event))
        entr_05a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 38,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
                           mode="default", var_file=None:
            self.fi_calculate_chargebalance(var_entr, mode, var_file, event))
        entr_05b = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 44,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get(),
            command=self.fi_set_concentration_is_chargebalance)
        #
        ## OPTION MENUS
        opt_05a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 32,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
            option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_var["fi_setting"]["Salt Correction"]["Default IS"].get(),
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
                           var_key="SMPL":
            self.fi_change_is_default(var_opt, var_key))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_is_smpl_def = opt_05a
        #
        ## TREEVIEW
        n_rows_tv = n_rows - 3
        self.tv_salt_cb = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 2, column_id=start_column + 13,
            n_rows=n_rows_tv,
            n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["90", "150"], individual=True)
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 1, column_id=start_column + 26,
            n_rows=n_rows - 3, n_columns=24, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            opt_is_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"],
                *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.bg_colors["Dark Font"],
                                    activebackground=self.accent_color)
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            self.container_optionmenu["SMPL"]["IS"][file_smpl] = opt_is_i
            #
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            entr_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                    file_smpl_short], width=12, highlightthickness=0, bg=self.bg_colors["White"],
                fg=self.bg_colors["Dark Font"])
            entr_i.bind("<Return>", lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short], mode="specific", var_file=file_smpl:
            self.fi_calculate_chargebalance(var_entr, mode, var_file, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\t")
            entr_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"], width=15,
                highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
        ## INITIALIZATION
        self.fi_check_elements_checkbutton()

    def fi_mass_balance(self):
        if "IS" not in self.container_optionmenu["SMPL"]:
            self.container_optionmenu["SMPL"]["IS"] = {}

        ## Window Settings
        window_width = 1020
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_massbalance = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_massbalance.title("FLUID INCLUSION ANALYSIS - Mass Balance")
        subwindow_fi_inclusion_massbalance.geometry(var_geometry)
        subwindow_fi_inclusion_massbalance.resizable(False, False)
        subwindow_fi_inclusion_massbalance["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_massbalance, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_massbalance, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_massbalance.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_massbalance.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        start_chlorides = 1
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column,
            n_rows=n_rows - 1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_frame(relief=tk.SOLID)
        #
        ## LABELS
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Composition: H2O + ...", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_chlorides, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Chlorides", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column + 13, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="NaCl Equivalents Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 1, column_id=start_column + 13, n_rows=1,
            n_columns=7, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Salinity (in wt.%)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column + 26, n_rows=1,
            n_columns=24,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 26,
            n_rows=1, n_columns=6, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Default Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## CHECKBOXES
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].items(), start=1):
            cb_01_i = SE(
                parent=subwindow_fi_inclusion_massbalance, row_id=start_chlorides + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            entr_01_i = SE(
                parent=subwindow_fi_inclusion_massbalance, row_id=start_chlorides + index, column_id=start_column + 7,
                n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        ## ENTRIES
        entr_04a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 1, column_id=start_column + 20, n_rows=1,
            n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
                           mode="demonstration", var_file=None:
            self.fi_calculate_massbalance(var_entr, mode, var_file, event))
        entr_05a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 38,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
                           mode="default", var_file=None:
            self.fi_calculate_massbalance(var_entr, mode, var_file, event))
        entr_05b = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 44,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get(),
            command=self.fi_set_concentration_is_massbalance)
        #
        ## OPTION MENUS
        opt_05a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 32,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
            option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_var["fi_setting"]["Salt Correction"]["Default IS"].get(),
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
                           var_key="SMPL":
            self.fi_change_is_default(var_opt, var_key))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_is_smpl_def = opt_05a
        #
        ## TREEVIEW
        n_rows_tv = n_rows - 3
        self.tv_salt = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 2, column_id=start_column + 13,
            n_rows=n_rows_tv, n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["90", "150"], individual=True)
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 1, column_id=start_column + 26,
            n_rows=n_rows - 3, n_columns=24, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = ttk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            # before: self.container_var["SMPL"][file_smpl]["IS"]
            opt_is_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"],
                *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.bg_colors["Dark Font"],
                                    activebackground=self.accent_color)
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            self.container_optionmenu["SMPL"]["IS"][file_smpl] = opt_is_i
            #
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            entr_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                    file_smpl_short], width=12, highlightthickness=0, bg=self.bg_colors["White"],
                fg=self.bg_colors["Dark Font"])
            entr_i.bind("<Return>", lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short], mode="specific", var_file=file_smpl:
            self.fi_calculate_massbalance(var_entr, mode, var_file, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\t")
            # before: self.container_files["SMPL"][file_smpl_short]["IS Concentration"]
            entr_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"], width=15,
                highlightthickness=0, bg=self.bg_colors["White"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
        ## INITIALIZATION
        self.fi_check_elements_checkbutton()
    #
    def fi_inclusion_setup_plugin(self):
        ## Window Settings
        window_width = 660
        window_heigth = 280
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_plugin = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_plugin.title("FLUID INCLUSION ANALYSIS -  Plugin-based Inclusion Setup")
        subwindow_fi_inclusion_plugin.geometry(var_geometry)
        subwindow_fi_inclusion_plugin.resizable(False, False)
        subwindow_fi_inclusion_plugin["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_plugin, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_plugin, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_plugin.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_plugin.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0

        ## LABELS
        if self.str_incl_is_custom_external == "External":
            lbl_01 = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row, column_id=start_column, n_rows=1, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="LA-ICP-MS Data Export", relief=tk.FLAT, fontsize="sans 10 bold")
            lbl_02 = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row, column_id=start_column + 11, n_rows=1,
                n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Import Plugin Data", relief=tk.FLAT, fontsize="sans 10 bold")
        else:
            lbl_02 = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row, column_id=start_column, n_rows=1, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Import Plugin Data", relief=tk.FLAT, fontsize="sans 10 bold")

        if self.str_incl_is_custom_external == "External":
            ## CHECKBOXES
            var_cb_01a = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity BG"]
            var_cb_01b = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity MAT"]
            var_cb_01c = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity MIX"]
            var_cb_01d = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity INCL"]
            var_cb_01e = self.container_var["fi_setting"]["Inclusion Plugin"]["Analytical Sensitivity"]
            var_cb_01f = self.container_var["fi_setting"]["Inclusion Plugin"]["Concentration SRM"]

            cb_01a = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 1, column_id=start_column,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb_01a, text="Intensity (Background)", set_sticky="nesw", own_color=True)
            cb_01b = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 2, column_id=start_column,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb_01b, text="Intensity (Matrix)", set_sticky="nesw", own_color=True)
            cb_01c = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 3, column_id=start_column,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb_01c, text="Intensity (Mix)", set_sticky="nesw", own_color=True)
            cb_01d = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 4, column_id=start_column,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb_01d, text="Intensity (Inclusion)", set_sticky="nesw", own_color=True)
            cb_01e = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 5, column_id=start_column,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb_01e, text="Analytical Sensitivity", set_sticky="nesw", own_color=True)
            cb_01f = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 6, column_id=start_column,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb_01f, text="Concentration (SRM)", set_sticky="nesw", own_color=True)

            cb_01a.configure(font="sans 10")
            cb_01b.configure(font="sans 10")
            cb_01c.configure(font="sans 10")
            cb_01d.configure(font="sans 10")
            cb_01e.configure(font="sans 10")
            cb_01f.configure(font="sans 10")

            ## BUTTONS
            btn_01h = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 7, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Export Data", bg_active=self.accent_color, fg_active=self.colors_fi["Dark Font"],
                command=self.export_data_for_external_calculations)
            btn_02a = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 1, column_id=start_column + 11, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Import Data", bg_active=self.accent_color, fg_active=self.colors_fi["Dark Font"],
                command=lambda parent=subwindow_fi_inclusion_plugin, mode="FI": self.import_is_data(parent, mode))
        else:
            ## BUTTONS
            btn_02a = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 1, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Import Data", bg_active=self.accent_color, fg_active=self.colors_fi["Dark Font"],
                command=lambda parent=subwindow_fi_inclusion_plugin, mode="FI": self.import_is_data(parent, mode))

        if self.str_incl_is_custom_external == "External":
            ## TREEVIEWS
            frm_incl_is = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 2, column_id=start_column + 11, n_rows=8,
                n_columns=21, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
            vsb_incl_is = ttk.Scrollbar(master=frm_incl_is, orient="vertical")
        else:
            ## TREEVIEWS
            frm_incl_is = SE(
                parent=subwindow_fi_inclusion_plugin, row_id=start_row + 2, column_id=start_column, n_rows=8,
                n_columns=21, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
            vsb_incl_is = ttk.Scrollbar(master=frm_incl_is, orient="vertical")

        text_incl_is = tk.Text(
            master=frm_incl_is, width=30, height=25, yscrollcommand=vsb_incl_is.set, bg=self.bg_colors["Very Light"])
        vsb_incl_is.config(command=text_incl_is.yview)
        vsb_incl_is.pack(side="right", fill="y")
        text_incl_is.pack(side="left", fill="both", expand=True)

        var_list_is = self.container_lists["ISOTOPES"]

        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
            var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]

            lbl_i = tk.Label(frm_incl_is, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_incl_is.window_create("end", window=lbl_i)
            text_incl_is.insert("end", "\t")

            opt_is_i = tk.OptionMenu(
                frm_incl_is, var_opt_is_i, *var_list_is,
                command=lambda var_opt=var_opt_is_i, var_file=file_smpl, state_default=False:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.colors_fi["Dark Font"],
                                    activebackground=self.accent_color)
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            text_incl_is.window_create("end", window=opt_is_i)
            text_incl_is.insert("end", " \t")
            #
            entr_is_i = tk.Entry(
                frm_incl_is, textvariable=var_entr_is_i, width=15, highlightthickness=0, bg=self.bg_colors["White"],
                fg=self.bg_colors["Dark Font"])
            entr_is_i.bind(
                "<Return>", lambda event, var_entr=var_entr_is_i, var_file=file_smpl, state_default=False:
                self.ma_change_is_concentration(var_entr, var_file, state_default, event))
            text_incl_is.window_create("insert", window=entr_is_i)
            text_incl_is.insert("end", "\n")

    def calculate_linar_regression(self, x_values, y_values):
        x_values_updated = [x for x, y in zip(x_values, y_values) if y != None]
        y_values_updated = [y for y, y in zip(x_values, y_values) if y != None]

        mean_x = np.mean(x_values_updated)
        mean_y = np.mean(y_values_updated)
        helper_xy = 0
        helper_x2 = 0
        n = len(x_values_updated)

        for index, x_value in enumerate(x_values_updated):
            y_value = y_values_updated[index]
            helper_xy += x_value*y_value
            helper_x2 += x_value**2

        upper_term = helper_xy - n*mean_x*mean_y
        lower_term = helper_x2 - n*mean_x**2
        b = upper_term/lower_term
        a = mean_y - b*mean_x

        return a, b

    def export_data_for_external_calculations(self):
        filename_export = filedialog.asksaveasfile(
            mode="w", initialfile = "PySILLS_exported_results", defaultextension=".csv", filetypes=[("csv", "*.csv")])
        filename_export = filename_export.name
        with open(filename_export, "w") as file_content:
            file_content.write("EXPORTED RESULTS" + ";\n")
            file_content.write("\n")

            for key, variable in self.container_var["fi_setting"]["Inclusion Plugin"].items():
                if key == "Intensity BG" and variable.get() == 1:
                    file_content.write("Signal Intensity (Background)" + ";\n")
                    for filetype in ["SMPL", "STD"]:
                        file_content.write("File type" + ";" + str(filetype) + ";\n")
                        for datatype in ["RAW", "SMOOTHED"]:
                            str_header = "Filename" + ";"
                            file_content.write("Data type" + ";" + str(datatype) + ";\n")
                            for index, filename_short in enumerate(self.container_lists[filetype]["Short"]):
                                self.get_intensity(
                                    var_filetype=filetype, var_datatype=datatype, var_file_short=filename_short,
                                    var_focus="BG", mode="Specific")

                                str_content = ""
                                str_content += str(filename_short) + ";"
                                file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                                for isotope in file_isotopes:
                                    value_i = self.container_intensity[filetype][datatype][filename_short]["BG"][
                                        isotope]
                                    if index == 0:
                                        str_header += str(isotope) + ";"
                                    str_content += str(value_i) + ";"
                                if index == 0:
                                    str_header += "\n"
                                str_content += "\n"
                                if index == 0:
                                    file_content.write(str(str_header))
                                    file_content.write(str(str_content))
                                else:
                                    file_content.write(str(str_content))
                        file_content.write("\n")

                elif key == "Intensity MAT" and variable.get() == 1:
                    file_content.write("Signal Intensity (Matrix)" + ";\n")
                    for filetype in ["SMPL", "STD"]:
                        file_content.write("File type" + ";" + str(filetype) + ";\n")
                        for datatype in ["RAW", "SMOOTHED"]:
                            str_header = "Filename" + ";"
                            file_content.write("Data type" + ";" + str(datatype) + ";\n")
                            for index, filename_short in enumerate(self.container_lists[filetype]["Short"]):
                                self.get_intensity(
                                    var_filetype=filetype, var_datatype=datatype, var_file_short=filename_short,
                                    var_focus="MAT", mode="Specific")
                                self.fi_get_intensity_corrected(
                                    var_filetype=filetype, var_datatype=datatype, var_file_short=filename_short,
                                    var_focus="MAT", mode="Specific")

                                str_content = ""
                                str_content += str(filename_short) + ";"
                                file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                                for isotope in file_isotopes:
                                    value_i = self.container_intensity_corrected[filetype][datatype][filename_short][
                                        "MAT"][isotope]
                                    if index == 0:
                                        str_header += str(isotope) + ";"
                                    str_content += str(value_i) + ";"
                                if index == 0:
                                    str_header += "\n"
                                str_content += "\n"
                                if index == 0:
                                    file_content.write(str(str_header))
                                    file_content.write(str(str_content))
                                else:
                                    file_content.write(str(str_content))
                        file_content.write("\n")

                elif key == "Intensity MIX" and variable.get() == 1:
                    file_content.write("Signal Intensity (Mixed)" + ";\n")
                    file_content.write("File type" + ";" + str("SMPL") + ";\n")
                    for datatype in ["RAW", "SMOOTHED"]:
                        str_header = "Filename" + ";"
                        file_content.write("Data type" + ";" + str(datatype) + ";\n")
                        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
                            self.get_intensity(
                                var_filetype="SMPL", var_datatype=datatype, var_file_short=filename_short,
                                var_focus="INCL", mode="Specific")
                            self.fi_get_intensity_mix(
                                var_filetype="SMPL", var_datatype=datatype, var_file_short=filename_short)

                            str_content = ""
                            str_content += str(filename_short) + ";"
                            file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                            for isotope in file_isotopes:
                                value_i = self.container_intensity_mix["SMPL"][datatype][filename_short][isotope]
                                if index == 0:
                                    str_header += str(isotope) + ";"
                                str_content += str(value_i) + ";"
                            if index == 0:
                                str_header += "\n"
                            str_content += "\n"
                            if index == 0:
                                file_content.write(str(str_header))
                                file_content.write(str(str_content))
                            else:
                                file_content.write(str(str_content))
                    file_content.write("\n")

                elif key == "Intensity INCL" and variable.get() == 1:
                    file_content.write("Signal Intensity (Inclusion)" + ";\n")
                    file_content.write("File type" + ";" + str("SMPL") + ";\n")
                    for datatype in ["RAW", "SMOOTHED"]:
                        str_header = "Filename" + ";"
                        file_content.write("Data type" + ";" + str(datatype) + ";\n")
                        for index, filename_short in enumerate(self.container_lists["SMPL"]["Short"]):
                            self.fi_get_intensity_corrected(
                                var_filetype="SMPL", var_datatype=datatype, var_file_short=filename_short,
                                var_focus="INCL", mode="Specific")

                            str_content = ""
                            str_content += str(filename_short) + ";"
                            file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                            for isotope in file_isotopes:
                                value_i = self.container_intensity_corrected["SMPL"][datatype][filename_short][
                                    "INCL"][isotope]
                                if index == 0:
                                    str_header += str(isotope) + ";"
                                str_content += str(value_i) + ";"
                            if index == 0:
                                str_header += "\n"
                            str_content += "\n"
                            if index == 0:
                                file_content.write(str(str_header))
                                file_content.write(str(str_content))
                            else:
                                file_content.write(str(str_content))
                    file_content.write("\n")

                elif key == "Analytical Sensitivity" and variable.get() == 1:
                    file_content.write("Analytical Sensitivity" + ";\n")
                    for filetype in ["SMPL", "STD"]:
                        file_content.write("File type" + ";" + str(filetype) + ";\n")
                        for datatype in ["RAW", "SMOOTHED"]:
                            str_header = "Filename" + ";"
                            file_content.write("Data type" + ";" + str(datatype) + ";\n")
                            for index, filename_short in enumerate(self.container_lists[filetype]["Short"]):
                                filename_long = self.container_lists[filetype]["Long"][index]
                                self.get_analytical_sensitivity(
                                    var_filetype=filetype, var_datatype=datatype, var_file_short=filename_short,
                                    var_file_long=filename_long)

                                str_content = ""
                                str_content += str(filename_short) + ";"
                                file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                                for isotope in file_isotopes:
                                    value_i = self.container_analytical_sensitivity[filetype][datatype][filename_short][
                                        "MAT"][isotope]
                                    if index == 0:
                                        str_header += str(isotope) + ";"
                                    str_content += str(value_i) + ";"
                                if index == 0:
                                    str_header += "\n"
                                str_content += "\n"
                                if index == 0:
                                    file_content.write(str(str_header))
                                    file_content.write(str(str_content))
                                else:
                                    file_content.write(str(str_content))
                        file_content.write("\n")

                elif key == "Concentration SRM" and variable.get() == 1:
                    file_content.write("Concentration (Standard Reference Material)" + ";\n")
                    file_content.write("File type" + ";" + str("STD") + ";\n")
                    for datatype in ["RAW", "SMOOTHED"]:
                        str_header = "Filename" + ";"
                        file_content.write("Data type" + ";" + str(datatype) + ";\n")
                        for index, filename_short in enumerate(self.container_lists["STD"]["Short"]):
                            filename_long = self.container_lists[filetype]["Long"][index]
                            self.fi_get_concentration(
                                var_filetype="STD", var_datatype=datatype, var_file_short=filename_short,
                                var_file_long=filename_long)

                            str_content = ""
                            str_content += str(filename_short) + ";"
                            file_isotopes = self.container_lists["Measured Isotopes"][filename_short]
                            for isotope in file_isotopes:
                                value_i = self.container_concentration["STD"][datatype][filename_short]["MAT"][isotope]
                                if index == 0:
                                    str_header += str(isotope) + ";"
                                str_content += str(value_i) + ";"
                            if index == 0:
                                str_header += "\n"
                            str_content += "\n"
                            if index == 0:
                                file_content.write(str(str_header))
                                file_content.write(str(str_content))
                            else:
                                file_content.write(str(str_content))
                    file_content.write("\n")

    def clear_all_calculation_intervals(self, mode):
        if mode == "INCL":
            file_type_list = ["SMPL"]
        else:
            file_type_list = ["STD", "SMPL"]

        for var_file_type in file_type_list:
            for var_file_short in self.container_lists[var_file_type]["Short"]:
                self.container_helper[var_file_type][var_file_short][mode]["Content"].clear()

                if self.pysills_mode == "MA":
                    var_setting_key = "ma_setting"
                    self.temp_lines_checkup2[var_file_type][var_file_short] = 0
                    self.show_time_signal_diagram_checker(var_setting_key=var_setting_key)
                elif self.pysills_mode == "FI":
                    var_setting_key = "fi_setting"
                    self.temp_lines_checkup2[var_file_type][var_file_short] = 0
                    self.show_time_signal_diagram_checker(var_setting_key=var_setting_key)
                elif self.pysills_mode == "MI":
                    var_setting_key = "mi_setting"
                    self.temp_lines_checkup2[var_file_type][var_file_short] = 0
                    self.show_time_signal_diagram_checker(var_setting_key=var_setting_key)

        if mode == "BG":
            self.container_var[var_setting_key]["Time BG Start"].set("Set start time")
            self.container_var[var_setting_key]["Time BG End"].set("Set end time")
            self.autodetection_bg = False
        elif mode == "MAT":
            self.container_var[var_setting_key]["Time MAT Start"].set("Set start time")
            self.container_var[var_setting_key]["Time MAT End"].set("Set end time")
            self.autodetection_sig = False

    ## SPIKE ELIMINATION
    def select_spike_elimination(self, var_opt, start_row, var_relief=tk.FLAT, mode="FI"):
        ## COLORS
        bg_light = self.bg_colors["Very Light"]
        bg_medium = self.bg_colors["Light"]
        #
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_setting_key = "ma_setting"
            var_row_correction = -2
            var_alpha = self.container_var[var_setting_key]["SE Alpha"]
            var_threshold = self.container_var[var_setting_key]["SE Threshold"]
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_setting_key = "fi_setting"
            var_row_correction = -1
            var_alpha = self.container_var[var_setting_key]["SE Alpha"]
            var_threshold = self.container_var[var_setting_key]["SE Threshold"]
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_setting_key = "mi_setting"
            var_row_correction = -1
            var_alpha = self.container_var[var_setting_key]["SE Alpha"]
            var_threshold = self.container_var[var_setting_key]["SE Threshold"]
        #
        start_row = start_row + 1 + var_row_correction
        #
        if var_opt in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
            ## GUI
            # Labels
            lbl_09c = SE(
                parent=var_parent, row_id=start_row + 3, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
                text="Significance Level", relief=var_relief, fontsize="sans 10 bold")
            lbl_09d = SE(
                parent=var_parent, row_id=start_row + 4, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
                text="Threshold", relief=var_relief, fontsize="sans 10 bold")
            lbl_09e = SE(
                parent=var_parent, row_id=start_row + 5, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
                text="Standard Files", relief=var_relief, fontsize="sans 10 bold")
            lbl_09f = SE(
                parent=var_parent, row_id=start_row + 6, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
                text="Sample Files", relief=var_relief, fontsize="sans 10 bold")
            #
            # Entries
            var_entr_09c_default = "0.05"
            entr_09c = SE(
                parent=var_parent, row_id=start_row + 3, column_id=7, n_rows=1, n_columns=11,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_alpha, text_default=var_entr_09c_default)
            var_entr_09d_default = "1000"
            entr_09d = SE(
                parent=var_parent, row_id=start_row + 4, column_id=7, n_rows=1, n_columns=11,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_simple_entry(
                var=var_threshold, text_default=var_entr_09d_default)
            #
            # Buttons
            btn_09e1 = SE(
                parent=var_parent, row_id=start_row + 5, column_id=7, n_rows=1, n_columns=5,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Apply to all", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda filetype="STD", algorithm="Grubbs": self.spike_elimination_all(filetype, algorithm))
            btn_09e2 = SE(
                parent=var_parent, row_id=start_row + 5, column_id=12, n_rows=1, n_columns=5,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Check", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="STD": self.custom_spike_check(mode))
            btn_09f1 = SE(
                parent=var_parent, row_id=start_row + 6, column_id=7, n_rows=1, n_columns=5,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Apply to all", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda filetype="SMPL", algorithm="Grubbs": self.spike_elimination_all(filetype, algorithm))
            btn_09f2 = SE(
                parent=var_parent, row_id=start_row + 6, column_id=12, n_rows=1, n_columns=5,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Check", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="SMPL": self.custom_spike_check(mode))

            # Frames
            self.frm_spk_std = SE(
                parent=var_parent, row_id=start_row + 5, column_id=17, n_rows=1, n_columns=1,
                fg=self.bg_colors["Very Dark"], bg=self.sign_red).create_frame(relief=tk.SOLID)
            self.frm_spk_std.config(highlightbackground="black", bd=1)
            self.frm_spk_smpl = SE(
                parent=var_parent, row_id=start_row + 6, column_id=17, n_rows=1, n_columns=1,
                fg=self.bg_colors["Very Dark"], bg=self.sign_red).create_frame(relief=tk.SOLID)
            self.frm_spk_smpl.config(highlightbackground="black", bd=1)

    def custom_spike_check(self, mode="SMPL"):
        ## Window Settings
        window_width = 900
        window_heigth = 600
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth / row_min)
        column_min = 20
        n_columns = int(window_width / column_min)

        self.subwindow_spike_check = tk.Toplevel(self.parent)
        if self.pysills_mode == "MA":
            self.subwindow_spike_check.title("MINERAL ANALYSIS -  Spike Check")
        elif self.pysills_mode == "FI":
            self.subwindow_spike_check.title("FLUID INCLUSION ANALYSIS -  Spike Check")
        elif self.pysills_mode == "MI":
            self.subwindow_spike_check.title("MELT INCLUSION ANALYSIS -  Spike Check")
        self.subwindow_spike_check.geometry(var_geometry)
        self.subwindow_spike_check.resizable(False, False)
        self.subwindow_spike_check["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_spike_check, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_spike_check, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_spike_check.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_spike_check.grid_columnconfigure(i, minsize=column_min)

        start_row = 0
        start_column = 0

        var_list_files = self.container_lists[mode]["Short"]
        self.current_file_id = 0
        self.currest_file_spk = var_list_files[self.current_file_id]
        self.current_original_value = 0
        self.current_suggested_value = 0
        self.current_current_value = 0
        self.current_nspikes = 0
        list_spk_isotopes = self.check_spikes_isotope()

        ## FRAMES
        frm_smpl = SE(
            parent=self.subwindow_spike_check, row_id=start_row, column_id=start_column + 13, n_rows=n_rows,
            n_columns=n_columns - 13, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)

        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_spike_check, row_id=start_row, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File selection", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_01a = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 1, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text=self.currest_file_spk, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 3, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Isotope selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 9, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike correction", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03a1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 10, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Original value", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_03a = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 10, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_original_value, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03b1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 11, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Smoothed value", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_03b = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 11, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_suggested_value, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03c1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 12, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Current value", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_03c = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 12, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_current_value, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 5, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 6, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Number of spikes", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_04a2 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 6, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_nspikes, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 13, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Value selection", relief=tk.FLAT, fontsize="sans 10 bold")

        ## BUTTONS
        btn_01 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 2, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Before", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="Before": self.change_file_spk(mode))
        btn_02 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 2, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="Next": self.change_file_spk(mode))
        if len(list_spk_isotopes) > 0:
            btn_05a1 = SE(
                parent=self.subwindow_spike_check, row_id=start_row + 14, column_id=start_column, n_rows=1, n_columns=6,
                fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Original value", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="RAW": self.replace_spike_value(mode))
            btn_05a2 = SE(
                parent=self.subwindow_spike_check, row_id=start_row + 14, column_id=start_column + 6, n_rows=1,
                n_columns=6, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Smoothed value", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="SMOOTHED": self.replace_spike_value(mode))

        ## SCALES
        if len(list_spk_isotopes) > 0:
            self.scl_01 = tk.Scale(
                self.subwindow_spike_check, from_=1, to=10, tickinterval=1, orient=tk.HORIZONTAL,
                background=self.bg_colors["Light"], foreground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, troughcolor=self.bg_colors["Dark"], highlightthickness=0,
                command=self.change_spk_id)
            self.scl_01.grid(row=start_row + 7, column=start_column, rowspan=2, columnspan=12, sticky="nesw")

        ## OPTION MENUS
        self.var_opt_spk_iso = tk.StringVar()
        self.var_opt_spk_iso.set("Select isotope")
        if len(list_spk_isotopes) > 0:
            self.current_isotope = list_spk_isotopes[0]
        else:
            self.current_isotope = "No isotope"
        var_opt_is_default = self.current_isotope

        if len(list_spk_isotopes) > 0:
            self.opt_02a = SE(
                parent=self.subwindow_spike_check, row_id=start_row + 4, column_id=start_column, n_rows=1, n_columns=12,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=self.var_opt_spk_iso, option_list=list_spk_isotopes, text_set=var_opt_is_default,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt_iso=self.var_opt_spk_iso: self.change_spk_isotope(var_opt_iso))
            self.opt_02a["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            self.opt_02a.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        ## INITIALIZATION
        if len(list_spk_isotopes) > 0:
            self.show_spike_data(mode=mode)

    def check_spikes_isotope(self, var_file=None):
        if var_file == None:
            var_file = self.currest_file_spk
        else:
            var_file = var_file

        helper_list = []

        df_isotopes = self.container_lists["Measured Isotopes"][var_file]
        for var_isotope in df_isotopes:
            list_indices = self.container_spikes[var_file][var_isotope]["Indices"]
            if len(list_indices) > 0:
                helper_list.append(var_isotope)

        return helper_list

    def helper_spike_values(self, var_file_short, var_isotope, var_value_raw, var_value_smoothed, mode=None):
        if var_file_short not in self.container_spike_values:
            self.container_spike_values[var_file_short] = {}
        if var_isotope not in self.container_spike_values[var_file_short]:
            self.container_spike_values[var_file_short][var_isotope] = {
                "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}

        if var_value_raw not in self.container_spike_values[var_file_short][var_isotope]["RAW"]:
            self.container_spike_values[var_file_short][var_isotope]["RAW"].append(var_value_raw)
        if var_value_smoothed not in self.container_spike_values[var_file_short][var_isotope]["SMOOTHED"]:
            self.container_spike_values[var_file_short][var_isotope]["SMOOTHED"].append(var_value_smoothed)
        if var_value_smoothed not in self.container_spike_values[var_file_short][var_isotope]["Current"]:
            if len(self.container_spike_values[var_file_short][var_isotope]["Save"]) == 0 or self.file_loaded == False:
                self.container_spike_values[var_file_short][var_isotope]["Current"].append(var_value_smoothed)
            else:
                for var_id in self.container_spikes[var_file_short][var_isotope]["Indices"]:
                    var_value_saved = self.container_spike_values[var_file_short][var_isotope]["Save"][var_id]
                    self.container_spike_values[var_file_short][var_isotope]["Current"].append(var_value_saved)

        if mode != None:
            for index_file, var_file_short in enumerate(self.container_lists[mode]["Short"]):
                if var_file_short not in self.container_spike_values:
                    self.container_spike_values[var_file_short] = {}
                list_spk_isotopes = self.check_spikes_isotope(var_file=var_file_short)
                for var_isotope in list_spk_isotopes:
                    if var_isotope not in self.container_spike_values[var_file_short]:
                        self.container_spike_values[var_file_short][var_isotope] = {
                            "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
                    for var_id in self.container_spikes[var_file_short][var_isotope]["Indices"]:
                        val_id = self.container_spikes[var_file_short][var_isotope]["Data SMOOTHED"][var_id]
                        if self.file_loaded == False:
                            self.container_spike_values[var_file_short][var_isotope]["Save"][var_id] = val_id

    def helper_fill_container_spike_values(self, mode="SMPL"):
        for var_file_short in self.container_lists[mode]["Short"]:
            df_isotopes = self.container_lists["Measured Isotopes"][var_file_short]
            for var_isotope in df_isotopes:
            #for var_isotope in self.container_lists["ISOTOPES"]:
                list_indices = self.container_spikes[var_file_short][var_isotope]["Indices"]
                if len(list_indices) > 0:
                    for var_index in list_indices:
                        value_raw = self.container_spikes[var_file_short][var_isotope]["Data RAW"][var_index]
                        value_smoothed = self.container_spikes[var_file_short][var_isotope]["Data SMOOTHED"][var_index]
                        self.helper_spike_values(
                            var_file_short=var_file_short, var_isotope=var_isotope, var_value_raw=value_raw,
                            var_value_smoothed=value_smoothed, mode=mode)

    def show_spike_data(self, mode=None):
        var_isotope = self.var_opt_spk_iso.get()
        var_file = self.currest_file_spk
        self.list_indices = self.container_spikes[var_file][var_isotope]["Indices"]
        if len(self.list_indices) < 16:
            n_ticks = 1
        else:
            if len(self.list_indices) < 31:
                n_ticks = 2
            elif len(self.list_indices) < 51:
                n_ticks = 5
            else:
                n_ticks = 8
        self.scl_01.configure(to=len(self.list_indices), tickinterval=n_ticks)
        self.current_nspikes = len(self.list_indices)
        self.lbl_04a2.configure(text=self.current_nspikes)

        value_0 = self.list_indices[0]
        current_id = self.scl_01.get()
        self.current_original_value = self.container_spikes[var_file][var_isotope]["Data RAW"][value_0]
        self.current_suggested_value = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][value_0]
        val_corrected = self.current_suggested_value
        if value_0 in self.container_spike_values[var_file][var_isotope]["Save"]:
            value_current = self.container_spike_values[var_file][var_isotope]["Save"][value_0]
            self.current_current_value = value_current
            if value_current == self.current_original_value:
                self.replace_spike_value(mode="RAW")
        else:
            #self.current_current_value = self.container_spike_values[var_file][var_isotope]["Current"][value_0]
            if len(self.container_spike_values[var_file][var_isotope]["Current"]) < current_id:
                self.current_current_value = val_corrected
            else:
                self.current_current_value = self.container_spike_values[var_file][var_isotope]["Current"][
                    current_id - 1]
        self.lbl_03a.configure(text=self.current_original_value)
        self.lbl_03b.configure(text=self.current_suggested_value)
        self.lbl_03c.configure(text=self.current_current_value)

        self.helper_spike_values(
            var_file_short=var_file, var_isotope=var_isotope, var_value_raw=self.current_original_value,
            var_value_smoothed=self.current_suggested_value, mode=mode)
        self.show_spike_diagram()

    def change_spk_isotope(self, var_opt_iso):
        var_isotope = var_opt_iso
        self.var_opt_spk_iso.set(var_isotope)
        self.current_isotope = var_isotope
        self.scl_01.set(1)

        self.show_spike_data()

    def change_spk_id(self, mode=None):
        current_id = self.scl_01.get()
        var_id_real = self.list_indices[current_id - 1]
        var_file = self.currest_file_spk
        var_isotope = self.var_opt_spk_iso.get()
        val_original = self.container_spikes[var_file][var_isotope]["Data RAW"][var_id_real]
        val_corrected = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][var_id_real]

        if len(self.container_spike_values[var_file][var_isotope]["Current"]) < current_id:
            val_current = val_corrected
        else:
            val_current = self.container_spike_values[var_file][var_isotope]["Current"][current_id - 1]

        if var_file not in self.container_spike_values:
            self.container_spike_values[var_file] = {}
        if var_isotope not in self.container_spike_values[var_file]:
            self.container_spike_values[var_file][var_isotope] = {"RAW": [], "SMOOTHED": [], "Current": []}
        if val_original not in self.container_spike_values[var_file][var_isotope]["RAW"]:
            self.container_spike_values[var_file][var_isotope]["RAW"].append(val_original)
        if val_corrected not in self.container_spike_values[var_file][var_isotope]["SMOOTHED"]:
            self.container_spike_values[var_file][var_isotope]["SMOOTHED"].append(val_corrected)
        if val_corrected not in self.container_spike_values[var_file][var_isotope]["Current"]:
            self.container_spike_values[var_file][var_isotope]["Current"].append(val_current)

        self.lbl_03a.config(text=val_original)
        self.lbl_03b.config(text=val_corrected)
        self.lbl_03c.configure(text=val_current)

        self.show_spike_diagram()

    def change_file_spk(self, mode):
        if mode == "Next":
            if self.currest_file_spk in self.container_lists["STD"]["Short"]:
                var_filetype = "STD"
            else:
                var_filetype = "SMPL"

            if self.current_file_id < len(self.container_lists[var_filetype]["Short"]) - 1:
                self.current_file_id += 1
            elif self.current_file_id == len(self.container_lists[var_filetype]["Short"]) - 1:
                self.current_file_id = 0

            self.currest_file_spk = self.container_lists[var_filetype]["Short"][self.current_file_id]
            self.lbl_01a.configure(text=self.currest_file_spk)
        elif mode == "Before":
            if self.currest_file_spk in self.container_lists["STD"]["Short"]:
                var_filetype = "STD"
            else:
                var_filetype = "SMPL"

            if self.current_file_id > 0:
                self.current_file_id -= 1
            elif self.current_file_id == 0:
                self.current_file_id = len(self.container_lists[var_filetype]["Short"]) - 1

            self.currest_file_spk = self.container_lists[var_filetype]["Short"][self.current_file_id]
            self.lbl_01a.configure(text=self.currest_file_spk)

        possible_spk_isotopes = self.check_spikes_isotope()
        if len(possible_spk_isotopes) > 0:
            self.var_opt_spk_iso.set(possible_spk_isotopes[0])
            self.current_isotope = possible_spk_isotopes[0]
        else:
            self.var_opt_spk_iso.set("No isotope")
            self.current_isotope = "No isotope"
        if len(possible_spk_isotopes) > 0:
            self.scl_01.set(1)

            for index, isotope in enumerate(possible_spk_isotopes):
                if index == 0:
                    self.opt_02a["menu"].delete(0, "end")
                #
                self.opt_02a["menu"].add_command(
                    label=isotope, command=lambda var_opt_iso=isotope: self.change_spk_isotope(var_opt_iso))

            self.show_spike_data()

    def replace_spike_value(self, mode):
        current_id = self.scl_01.get()
        var_id_real = self.list_indices[current_id - 1]
        var_file = self.currest_file_spk
        var_isotope = self.current_isotope
        val_original = self.container_spike_values[var_file][var_isotope]["RAW"][current_id - 1]
        val_corrected = self.container_spike_values[var_file][var_isotope]["SMOOTHED"][current_id - 1]

        if mode == "RAW":
            val_updated = val_original
        else:
            val_updated = val_corrected

        self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][var_id_real] = val_updated
        self.container_spike_values[var_file][var_isotope]["Current"][current_id - 1] = val_updated
        self.lbl_03c.configure(text=val_updated)
        self.container_spike_values[var_file][var_isotope]["Save"][var_id_real] = val_updated

        self.show_spike_diagram()

    def show_spike_diagram(self):
        try:
            if self.canvas_spikes == None:
                self.canvas_spikes.get_tk_widget().grid_remove()
                self.toolbarFrame_spikes.grid_remove()
        except AttributeError:
            pass

        var_file = self.currest_file_spk
        var_isotope = self.current_isotope
        current_id = self.scl_01.get()
        var_id_real = self.list_indices[current_id - 1]

        ## Diagram
        self.fig_spikes = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.ax_spikes = self.fig_spikes.add_subplot(label=np.random.uniform())

        self.canvas_spikes = FigureCanvasTkAgg(self.fig_spikes, master=self.subwindow_spike_check)
        self.canvas_spikes.get_tk_widget().grid(row=0, column=12, rowspan=22, columnspan=33, sticky="nesw")
        self.toolbarFrame_spikes = tk.Frame(master=self.subwindow_spike_check)
        self.toolbarFrame_spikes.grid(row=22, column=12, rowspan=2, columnspan=33, sticky="w")
        self.toolbar_spikes = NavigationToolbar2Tk(self.canvas_spikes, self.toolbarFrame_spikes)
        self.toolbar_spikes.config(background=self.bg_colors["Very Light"])
        self.toolbar_spikes._message_label.config(
            background=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"], font="sans 12")
        self.toolbar_spikes.winfo_children()[-2].config(background=self.bg_colors["Very Light"])

        data_x = self.container_spikes[var_file][var_isotope]["Times"]
        x_max = max(data_x)
        data_y_raw = self.container_spikes[var_file][var_isotope]["Data RAW"]
        data_y_smoothed = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"]
        y_min = min(data_y_raw)
        y_max = max(data_y_raw)

        self.ax_spikes.plot(data_x, data_y_raw, color=self.bg_colors["Super Dark"], label="Original data", linewidth=2)
        self.ax_spikes.plot(data_x, data_y_smoothed, color=self.accent_color, label="Smoothed data", linewidth=2)
        self.ax_spikes.axvline(x=data_x[var_id_real], color=self.bg_colors["Medium"], label="Current spike",
                               linewidth=2, linestyle="dotted")

        self.ax_spikes.grid(True)
        self.ax_spikes.set_yscale("log")
        self.ax_spikes.set_xlim(left=0, right=x_max)
        self.ax_spikes.set_xticks(np.arange(0, x_max, 20))
        if abs(0.1*y_min) > 0:
            y_min_log = abs(0.1*y_min)
        else:
            y_min_log = 1*10**(1)
        self.ax_spikes.set_ylim(bottom=y_min_log, top=1.5*y_max)
        self.ax_spikes.grid(which="major", linestyle="-", linewidth=1)
        self.ax_spikes.minorticks_on()
        self.ax_spikes.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_spikes.set_axisbelow(True)
        self.ax_spikes.set_title(var_file, fontsize=9)
        self.ax_spikes.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_spikes.set_ylabel("Signal Intensity Ratio $I$ (cps/cps)", labelpad=0.5, fontsize=8)
        self.ax_spikes.xaxis.set_tick_params(labelsize=8)
        self.ax_spikes.yaxis.set_tick_params(labelsize=8)

        self.leg_spikes = self.fig_spikes.legend(loc="upper left", fontsize="x-small", bbox_to_anchor=(0.075, 0.925))
        self.leg_spikes.set_in_layout(False)
        self.fig_spikes.tight_layout()

        self.canvas_spikes.draw()

########################################################################################################################
# MELT INCLUSION ANALYSIS ##############################################################################################
########################################################################################################################
    #
    #
########################################################################################################################
    #
    def create_container_results(self, var_filetype, var_file_short, mode="MA"):
        ## Intensity
        if mode == "MA":
            self.container_intensity[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}, "1 SIGMA MAT": {}}
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short] = {
                "BG": {}, "MAT": {}, "1 SIGMA MAT": {}}
        else:
            self.container_intensity[var_filetype]["RAW"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}, "1 SIGMA MAT": {}, "1 SIGMA INCL": {}}
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}, "1 SIGMA MAT": {}, "1 SIGMA INCL": {}}
        ## Intensity Ratio
        if mode == "MA":
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}}
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {}}
        else:
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}}
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}}
        ## Intensity Corrected
        if mode == "MA":
            self.container_intensity_corrected[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}}
            self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {}}
        else:
            self.container_intensity_corrected[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}, "INCL": {}}
            self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {},
                                                                                            "INCL": {}}
        ## Intensity MIX
        if mode != "MA":
            self.container_intensity_mix[var_filetype]["RAW"][var_file_short] = {}
            self.container_intensity_mix[var_filetype]["SMOOTHED"][var_file_short] = {}
        ## Normalized Sensitivity
        if mode == "MA":
            self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
        ## Analytical Sensitivity
        if mode == "MA":
            self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
        ## Relative Sensitivity Factor
        if mode == "MA":
            self.container_rsf[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_rsf[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_rsf[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}, "MIX": {}}
            self.container_rsf[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}, "MIX": {}}
        ## Concentration
        if mode == "MA":
            self.container_concentration[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "1 SIGMA MAT": {}}
            self.container_concentration[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "1 SIGMA MAT": {}}
        else:
            self.container_concentration[var_filetype]["RAW"][var_file_short] = {
                "MAT": {}, "INCL": {}, "MIX": {}, "Matrix-Only": {}, "Second-Internal": {}, "1 SIGMA MAT": {},
                "1 SIGMA INCL": {}, "Halter2002": {}, "Borisova2021": {}}
            self.container_concentration[var_filetype]["SMOOTHED"][var_file_short] = {
                "MAT": {}, "INCL": {}, "MIX": {}, "Matrix-Only": {}, "Second-Internal": {}, "1 SIGMA MAT": {},
                "1 SIGMA INCL": {}, "Halter2002": {}, "Borisova2021": {}}
            #
            if var_filetype == "SMPL":
                self.container_mixed_concentration[var_filetype]["RAW"][var_file_short] = {}
                self.container_mixed_concentration[var_filetype]["SMOOTHED"][var_file_short] = {}
        ## Concentration Ratio
        if mode == "MA":
            self.container_concentration_ratio[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_concentration_ratio[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
            #
            if var_filetype == "SMPL":
                self.container_mixed_concentration_ratio[var_filetype]["RAW"][var_file_short] = {}
                self.container_mixed_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short] = {}
                self.container_mixing_ratio[var_filetype]["RAW"][var_file_short] = {}
                self.container_mixing_ratio[var_filetype]["SMOOTHED"][var_file_short] = {}
        ## Limit of Detection
        if mode == "MA":
            self.container_lod[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_lod[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_lod[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_lod[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
        #
        for isotope in self.container_lists["ISOTOPES"]:
            self.container_measurements["EDITED"][var_file_short][isotope] = {}
            self.container_measurements["EDITED"][var_file_short][isotope]["BG"] = []
            self.container_measurements["EDITED"][var_file_short][isotope]["MAT"] = []
            ## Intensity
            self.container_intensity[var_filetype]["RAW"][var_file_short]["BG"][isotope] = None
            self.container_intensity[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_intensity[var_filetype]["RAW"][var_file_short]["1 SIGMA MAT"][isotope] = None
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["BG"][isotope] = None
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["1 SIGMA MAT"][isotope] = None
            if mode != "MA":
                self.container_intensity[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
                self.container_intensity[var_filetype]["RAW"][var_file_short]["1 SIGMA INCL"][isotope] = None
                self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["1 SIGMA INCL"][isotope] = None
            ## Intensity Corrected
            self.container_intensity_corrected[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            if mode != "MA":
                self.container_intensity_corrected[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Intensity Ratio
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short]["BG"][isotope] = None
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short]["BG"][isotope] = None
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_intensity_ratio[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Intensity MIX
            if mode != "MA":
                self.container_intensity_mix[var_filetype]["RAW"][var_file_short][isotope] = None
                self.container_intensity_mix[var_filetype]["SMOOTHED"][var_file_short][isotope] = None
            ## Normalized Sensitivity
            self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Analytical Sensitivity
            self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Relative Sensitivity Factor
            self.container_rsf[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_rsf[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_rsf[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_rsf[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Concentration
            self.container_concentration[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_concentration[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
                self.container_concentration[var_filetype]["RAW"][var_file_short]["Matrix-Only"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["Matrix-Only"][isotope] = None
                self.container_concentration[var_filetype]["RAW"][var_file_short]["Second-Internal"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["Second-Internal"][
                    isotope] = None
                self.container_concentration[var_filetype]["RAW"][var_file_short]["Halter2002"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["Halter2002"][
                    isotope] = None
                self.container_concentration[var_filetype]["RAW"][var_file_short]["Borisova2021"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["Borisova2021"][
                    isotope] = None
            ## Concentration Ratio
            self.container_concentration_ratio[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_concentration_ratio[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Limit of Detection
            self.container_lod[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_lod[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_lod[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_lod[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
    #
if __name__ == "__main__":
    root = tk.Tk()
    root.title("PySILLS - LA-ICP-MS data reduction")

    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    PySILLS(parent=root, var_screen_width=screen_width, var_screen_height=screen_height)

    root.mainloop()
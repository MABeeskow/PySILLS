#!/usr/bin/env python
# -*-coding: utf-8 -*-

#-----------------------------------------------------------------------------------------------------------------------

# Name:		pysills_app.py
# Author:	Maximilian A. Beeskow
# Version:	1.0
# Date:		24.07.2023

#-----------------------------------------------------------------------------------------------------------------------

## MODULES
import os, pathlib
import re, datetime, csv, string
import sys
import tkinter as tk
from tkinter import filedialog, ttk, font
import numpy as np
from modules.gui_elements import SimpleElements as SE
from modules.spike_elimination import GrubbsTestSILLS
from modules.essential_functions import EssentialsSRM as ESRM
from modules.essential_functions import Essentials as ES
from modules.chemistry import PeriodicSystemOfElements as PSE
from modules.chemistry import PeriodicSystem
from modules.data import Data
from modules.fluid_inclusions import FluidInclusions
from modules.mineral_analysis import MineralAnalysis
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
from matplotlib.figure import Figure
import matplotlib.colors as mcolors
import seaborn as sns
import pandas as pd
import math

## GUI
class PySILLS(tk.Frame):
    #
    def __init__(self, parent, var_screen_width, var_screen_height):
        tk.Frame.__init__(self, parent)
        var_screen_width = var_screen_width
        var_screen_height = var_screen_height
        var_scaling = round(1920/var_screen_width, 2)
        if var_scaling == 1.0:
            var_scaling = 1.25
        #
        ## Colors
        self.green_dark = "#282D28"
        self.green_medium = "#616D61"
        self.green_light = "#CFD3CF"
        green_dict = {"Dark": self.green_dark, "Medium": self.green_medium, "Light": self.green_light}
        self.red_dark = "#E76F51"
        self.red_medium = "#F1A896"
        self.red_light = "#FDF0ED"
        red_dict = {"Dark": self.red_dark, "Medium": self.red_medium, "Light": self.red_light}
        self.yellow_dark = "#E9C46A"
        self.yellow_medium = "#F3DFAE"
        self.yellow_light = "#FDFAF2"
        yellow_dict = {"Dark": self.yellow_dark, "Medium": self.yellow_medium, "Light": self.yellow_light}
        self.blue_dark = "#5B828E"
        self.blue_medium = "#8CA7AF"
        self.blue_light = "#CDD9DD"
        blue_dict = {"Dark": self.blue_dark, "Medium": self.blue_medium, "Light": self.blue_light}
        self.brown_dark = "#AC7E62"
        self.brown_medium = "#C4A491"
        self.brown_light = "#EEE5DF"
        brown_dict = {"Dark": self.brown_dark, "Medium": self.brown_medium, "Light": self.brown_light}
        self.slate_grey_dark = "#6E7894"
        self.slate_grey_medium = "#9AA1B4"
        self.slate_grey_light = "#E2E4EA"
        slategrey_dict = {"Dark": self.slate_grey_dark, "Medium": self.slate_grey_medium, "Light": self.slate_grey_light}
        #
        self.bg_colors = {"Super Dark": "#2C2C2C", "Very Dark": "#3C3C3C", "Dark": "#676767", "Medium": "#909090",
                          "Light": "#BABABA", "Very Light": "#E3E3E3", "Dark Font": "#292929", "Light Font": "#F7F7F7",
                          "White": "#FFFFFF", "Black": "#000000"}
        self.accent_color = "#E76F51"
        self.colors_ma = {"Very Dark": "#2F3E46", "Dark": "#354F52", "Medium": "#52796F", "Light": "#84A98C",
                          "Very Light": "#CAD2C5", "Dark Font": "#182320", "Light Font": "#F2F6F5"}
        self.colors_fi = {"Very Dark": "#722F1C", "Dark": "#A04228", "Medium": "#D36A4D", "Light": "#E4A694",
                          "Very Light": "#F6E1DB", "Dark Font": "#411B10", "Light Font": "#FCF4F2"}
        self.colors_mi = {"Very Dark": "#013a63", "Dark": "#014f86", "Medium": "#2c7da0", "Light": "#61a5c2",
                          "Very Light": "#a9d6e5", "Dark Font": "#0D242E", "Light Font": "#EEF7FA"}
        self.colors_intervals = {"BG": "#7F4F24", "SIG": "#414833", "MAT": "#414833", "INCL": "#F4D35E",
                                 "BG LB": "#D9A578", "SIG LB": "#A4AF8E", "MAT LB": "#A4AF8E", "INCL LB": "#F9E9AE"}
        #
        self.font_dark = "#000000"
        self.font_light = "#FFFFFF"
        self.sign_red = "#E84258"
        self.sign_yellow = "#FFDE00"
        self.sign_green = "#B0D8A4"
        sign_dict = {"Green": self.sign_green, "Red": self.sign_red, "Yellow": self.sign_yellow}
        #
        ## Constants
        self.list_std = []
        self.list_smpl = []
        self.chemistry_data = {
            "O": 15.999, "Na": 22.990, "Mg": 24.305, "Al": 26.982, "Si": 28.085, "P": 30.974, "K": 39.098, "Ca": 40.078,
            "Ti": 47.867, "Cr": 51.996, "Mn": 54.938, "Fe": 55.845, "Ga": 69.723, "Ge": 72.630, "Zr": 91.224,
            "Ba": 137.33}
        self.chemistry_data_sills = {
            "O": 16.000, "Na": 22.990, "Mg": 24.300, "Al": 26.980, "Si": 28.090, "P": 30.970, "K": 39.100, "Ca": 40.080,
            "Ti": 47.870, "Cr": 52.000, "Mn": 54.940, "Fe": 55.850, "Ga": 69.720, "Ge": 72.610, "Zr": 91.220,
            "Ba": 137.300}
        #
        # General Settings
        self.parent = parent
        self.parent.tk.call("tk", "scaling", var_scaling)
        self.parent.title("PySILLS")
        var_geometry = ""
        # var_window_width = int(round(0.94*int(var_screen_width), -2))
        # if var_window_width > 1800:
        var_window_width = int(440)
        var_geometry += str(var_window_width)
        var_geometry += "x"
        # var_window_height = int(round(0.82*int(var_screen_height), -2))
        # if var_window_height > 1000:
        var_window_height = int(950)
        var_geometry += str(var_window_height)
        var_geometry += "+0+0"
        self.parent.geometry(var_geometry)
        self.parent.resizable(False, False)
        self.parent["bg"] = self.bg_colors["Very Light"]
        #
        self.list_alphabet = list(string.ascii_uppercase)
        #
        var_os = sys.platform
        #
        if var_os == "linux":
            self.defaultFont = font.nametofont("TkDefaultFont")
            default_font = font.nametofont("TkDefaultFont")
            default_font.configure(family="Ubuntu", size=10, weight=font.BOLD)
            self.parent.option_add("*Font", default_font)
            #
        elif var_os == "darwin":
            self.defaultFont = font.nametofont("TkDefaultFont")
            default_font = font.nametofont("TkDefaultFont")
            #default_font.configure(family="Helvetica", size=10, weight=font.BOLD)
            self.parent.option_add("*Font", default_font)
            #
        else:
            pass
        #
        ## Data Container
        self.container_elements = {}
        self.gui_elements = {}
        self.container_gui = {}
        self.window_created = {}
        menu_list = ["main", "SRM", "ma_setting", "ma_datareduction", "ma_dataexploration", "ma_datareduction_files",
                     "fi_setting", "fi_datareduction_isotopes", "fi_datareduction_files", "fi_datareduction",
                     "fi_dataexploration", "mi_setting", "mi_datareduction",
                     "mi_dataexploration", "plotting", "PSE", "salt_correction", "fi_method_setting",
                     "mi_method_setting", "se_method_setting", "dwell_times", "general_settings"]
        gui_categories = ["Label", "Button", "Option Menu", "Entry", "Frame", "Radiobutton", "Checkbox", "Listbox",
                          "Canvas", "Treeview"]
        for menu in menu_list:
            self.container_elements[menu] = {}
            self.container_elements[menu]["Label"] = []
            self.container_elements[menu]["Button"] = []
            self.container_elements[menu]["Option Menu"] = []
            self.container_elements[menu]["Entry"] = []
            self.container_elements[menu]["Frame"] = []
            self.container_elements[menu]["Radiobutton"] = []
            self.container_elements[menu]["Checkbox"] = []
            self.container_elements[menu]["Listbox"] = []
            self.container_elements[menu]["Canvas"] = []
            self.container_elements[menu]["Treeview"] = []
            self.container_gui[menu] = {}
            self.window_created[menu] = False
            #
            self.gui_elements[menu] = {}
            for gui_category in gui_categories:
                self.gui_elements[menu][gui_category] = {}
                self.gui_elements[menu][gui_category]["General"] = []
                self.gui_elements[menu][gui_category]["Specific"] = []
                self.container_gui[menu][gui_category] = {}
                self.container_gui[menu][gui_category]["General"] = []
                self.container_gui[menu][gui_category]["Specific"] = []
        #
        ## SUBWINDOWS
        self.gui_subwindows = {}
        main_categories = ["Mineral Analysis", "Fluid Inclusions", "Melt Inclusions"]
        sub_categories = ["Check SRM", "Check IS", "Check Intervals", "Check Files"]
        gui_elements = ["Frame", "Label", "Button", "Entry", "Checkbox", "Radiobutton", "Option Menu", "Listbox",
                        "Treeview"]
        priorities = ["Permanent", "Temporary"]
        #
        for main_category in main_categories:
            self.gui_subwindows[main_category] = {}
            for sub_category in sub_categories:
                self.gui_subwindows[main_category][sub_category] = {}
                for gui_element in gui_elements:
                    self.gui_subwindows[main_category][sub_category][gui_element] = {}
                    for priority in priorities:
                        self.gui_subwindows[main_category][sub_category][gui_element][priority] = []
        #
        ## Container (Variables)
        categories = ["main"]
        subcategories = ["Label", "Entry", "Radiobutton", "Checkbox"]
        #
        self.container_var = {}
        for category in categories:
            self.container_var[category] = {}
            for subcategory in subcategories:
                self.container_var[category][subcategory] = []
        self.container_var["SRM"] = {}
        self.container_var["SRM"]["default"] = [tk.StringVar(), tk.StringVar()]
        for variable in self.container_var["SRM"]["default"]:
            variable.set("Select SRM")
        self.container_var["isotopes"] = {}
        self.container_var["isotopes"]["default"] = tk.StringVar()
        self.container_var["acquisition times"] = {"STD": {}, "SMPL": {}}
        self.container_var["mineral"] = tk.StringVar()
        self.container_var["mineral"].set("Select Mineral")
        self.container_var["srm_window"] = {}
        self.container_var["srm_window"]["Option Menu"] = {"SRM": tk.StringVar(), "Mineral": tk.StringVar()}
        self.container_var["srm_window"]["Entry"] = {}
        self.container_var["ma_setting"] = {}
        self.container_var["ma_datareduction_isotopes"] = {}
        self.container_var["ma_datareduction_files"] = {}
        self.container_var["fi_setting"] = []
        self.container_var["mi_setting"] = []
        self.container_var["settings"] = {}
        self.container_var["fi_setting"] = {}
        self.container_var["fi_datareduction_isotopes"] = {}
        self.container_var["fi_datareduction_files"] = {}
        self.container_var["mi_setting"] = {}
        self.container_var["salt_correction"] = {}
        self.container_var["salt_correction"]["Checkboxes"] = {}
        self.container_var["salt_correction"]["Salinity"] = tk.StringVar()
        self.container_var["salt_correction"]["Salinity"].set("Set salinity")
        self.container_var["salt_correction"]["Concentration"] = {}
        self.container_var["dwell_times"] = {}
        self.container_var["dwell_times"]["Entry"] = {}
        self.container_var["dwell_times"]["Entry"]["Default"] = tk.StringVar()
        self.container_var["dwell_times"]["Entry"]["Default"].set("0.01")
        self.container_var["IS STD Default"] = tk.StringVar()
        self.container_var["IS STD Default"].set("0.0")
        self.container_var["IS SMPL Default"] = tk.StringVar()
        self.container_var["IS SMPL Default"].set("0.0")
        self.container_var["General Settings"] = {}                                 # General Settings
        self.container_var["General Settings"]["Default Author"] = tk.StringVar()
        self.container_var["General Settings"]["Default Author"].set("J. Doe")
        self.container_var["General Settings"]["Default SRM"] = tk.StringVar()
        self.container_var["General Settings"]["Default SRM"].set("Select SRM")
        self.container_var["General Settings"]["Default IS MA"] = tk.StringVar()
        self.container_var["General Settings"]["Default IS MA"].set("Select IS")
        self.container_var["General Settings"]["Default IS FI"] = tk.StringVar()
        self.container_var["General Settings"]["Default IS FI"].set("Select IS")
        self.container_var["General Settings"]["Default IS MI"] = tk.StringVar()
        self.container_var["General Settings"]["Default IS MI"].set("Select IS")
        self.container_var["General Settings"]["Accuracy Intensity"] = tk.IntVar()
        self.container_var["General Settings"]["Accuracy Intensity"].set(6)
        self.container_var["General Settings"]["Accuracy Sensitivity"] = tk.IntVar()
        self.container_var["General Settings"]["Accuracy Sensitivity"].set(4)
        self.container_var["General Settings"]["Accuracy Concentration"] = tk.IntVar()
        self.container_var["General Settings"]["Accuracy Concentration"].set(4)
        self.container_var["General Settings"]["Sensitivity Drift"] = tk.IntVar()
        self.container_var["General Settings"]["Sensitivity Drift"].set(0)
        self.container_var["General Settings"]["LOD Selection"] = tk.IntVar()
        self.container_var["General Settings"]["LOD Selection"].set(0)
        self.container_var["General Settings"]["BG Offset Start"] = tk.IntVar()
        self.container_var["General Settings"]["BG Offset Start"].set(15)
        self.container_var["General Settings"]["BG Offset End"] = tk.IntVar()
        self.container_var["General Settings"]["BG Offset End"].set(15)
        self.container_var["General Settings"]["MAT Offset Start"] = tk.IntVar()
        self.container_var["General Settings"]["MAT Offset Start"].set(15)
        self.container_var["General Settings"]["MAT Offset End"] = tk.IntVar()
        self.container_var["General Settings"]["MAT Offset End"].set(15)
        self.container_var["General Settings"]["Calculation Accuracy"] = tk.IntVar()
        self.container_var["General Settings"]["Calculation Accuracy"].set(1)
        self.container_var["Plotting"] = {"MA": {"Quickview": {}, "Time-Signal": {}, "Time-Ratio": {}},
                                          "FI": {"Quickview": {}, "Time-Signal": {}, "Time-Ratio": {}},
                                          "MI": {"Quickview": {}, "Time-Signal": {}, "Time-Ratio": {}}}
        self.container_var["Subwindows"] = {"MA": {}, "FI": {}, "MI": {}}
        self.container_var["Spike Elimination Check"] = {}
        self.container_var["Spike Elimination Check"]["RB Value STD"] = tk.IntVar()
        self.container_var["Spike Elimination Check"]["RB Value STD"].set(1)
        self.container_var["Spike Elimination Check"]["RB Value SMPL"] = tk.IntVar()
        self.container_var["Spike Elimination Check"]["RB Value SMPL"].set(1)
        #
        self.container_var["Spike Elimination"] = {"STD": {"State": False}, "SMPL": {"State": False}}
        #
        self.container_var["Initialization"] = {"STD": False, "SMPL": False, "ISOTOPES": False}
        #
        self.list_std_changed = False
        self.list_smpl_changed = False
        self.list_std_previous = []
        self.list_smpl_previous = []

        self.container_spike_values = {}
        #
        self.counter_fast_track_std = 0
        self.counter_fast_track_smpl = 0
        #
        self.container_spikes = {}
        #
        self.autodetection_bg = False
        self.autodetection_sig = False
        #
        self.init_fi_massbalance = False
        self.init_fi_chargebalance = False
        #
        self.container_checkup = {"STD": [], "SMPL": [], "Counter STD": 0, "Counter SMPL": 0}
        #
        ## ALL
        self.container_intensity = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_intensity_mix = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_intensity_corrected = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_intensity_ratio = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_normalized_sensitivity = {"STD": {"RAW": {}, "SMOOTHED": {}},
                                                 "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_analytical_sensitivity = {"STD": {"RAW": {}, "SMOOTHED": {}},
                                                 "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_rsf = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_concentration = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_mixed_concentration = {"SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_concentration_ratio = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_lod = {"STD": {"RAW": {}, "SMOOTHED": {}}, "SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_mixed_concentration_ratio = {"SMPL": {"RAW": {}, "SMOOTHED": {}}}
        self.container_mixing_ratio = {"SMPL": {"RAW": {}, "SMOOTHED": {}}}
        #
        self.container_signs = {"STD": {}, "SMPL": {}}
        #
        ## MINERAL ANALYSIS
        self.container_var["settings"]["Time BG Start"] = tk.StringVar()
        self.container_var["settings"]["Time BG Start"].set("Set start time")
        self.container_var["settings"]["Time BG End"] = tk.StringVar()
        self.container_var["settings"]["Time BG End"].set("Set end time")
        self.container_var["settings"]["Time SIG Start"] = tk.StringVar()
        self.container_var["settings"]["Time SIG Start"].set("Set start time")
        self.container_var["settings"]["Time SIG End"] = tk.StringVar()
        self.container_var["settings"]["Time SIG End"].set("Set end time")
        self.container_var["settings"]["Author"] = tk.StringVar()
        self.container_var["settings"]["Source ID"] = tk.StringVar()
        self.container_var["settings"]["Source ID"].set("RUR01")
        self.container_var["settings"]["IS Concentration"] = tk.StringVar()
        self.container_var["settings"]["IS Concentration"].set("0.0")
        self.container_var["settings"]["SE Alpha"] = tk.StringVar()
        self.container_var["settings"]["SE Alpha"].set("0.05")
        #
        self.container_var["ma_setting"]["Data Type Plot"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Analyse Mode Plot"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Display RAW"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Display SMOOTHED"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Time-Signal Lines"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Time-Ratio Lines"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Checkboxes Isotope Diagram"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Calculation Interval"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Calculation Interval Visibility"] = {"STD": {}, "SMPL": {}}
        self.container_var["ma_setting"]["Default IS STD"] = tk.StringVar()
        self.container_var["ma_setting"]["Default IS STD"].set("Select IS")
        self.container_var["ma_setting"]["Default IS SMPL"] = tk.StringVar()
        self.container_var["ma_setting"]["Default IS SMPL"].set("Select IS")
        self.container_var["ma_setting"]["Time BG Start"] = tk.StringVar()
        self.container_var["ma_setting"]["Time BG Start"].set("Set start time")
        self.container_var["ma_setting"]["Time BG End"] = tk.StringVar()
        self.container_var["ma_setting"]["Time BG End"].set("Set end time")
        self.container_var["ma_setting"]["Time MAT Start"] = tk.StringVar()
        self.container_var["ma_setting"]["Time MAT Start"].set("Set start time")
        self.container_var["ma_setting"]["Time MAT End"] = tk.StringVar()
        self.container_var["ma_setting"]["Time MAT End"].set("Set end time")
        self.container_var["ma_setting"]["Author"] = tk.StringVar()
        self.container_var["ma_setting"]["Source ID"] = tk.StringVar()
        self.container_var["ma_setting"]["Source ID"].set("RUR01")
        self.container_var["ma_setting"]["Oxide"] = tk.StringVar()
        self.container_var["ma_setting"]["Oxide"].set("Select Oxide")
        self.container_var["ma_setting"]["Oxide Concentration"] = tk.StringVar()
        self.container_var["ma_setting"]["Oxide Concentration"].set("100")
        self.container_var["ma_setting"]["Element"] = tk.StringVar()
        self.container_var["ma_setting"]["Element"].set("Select Element")
        self.container_var["ma_setting"]["Element Concentration"] = tk.StringVar()
        self.container_var["ma_setting"]["Element Concentration"].set("1000000")
        self.container_var["ma_setting"]["SE Alpha"] = tk.StringVar()
        self.container_var["ma_setting"]["SE Alpha"].set("0.05")
        self.container_var["ma_setting"]["SE Threshold"] = tk.StringVar()
        self.container_var["ma_setting"]["SE Threshold"].set("1000")
        self.container_var["ma_setting"]["Host Setup Selection"] = tk.IntVar()
        self.container_var["ma_setting"]["Host Setup Selection"].set(1)
        self.container_var["ma_setting"]["Quantification Method"] = tk.IntVar()
        self.container_var["ma_setting"]["Quantification Method"].set(1)
        #
        self.container_var["ma_datareduction_isotopes"]["File Type"] = tk.IntVar()  # e.g. Sample files
        self.container_var["ma_datareduction_isotopes"]["File Type"].set(1)
        self.container_var["ma_datareduction_isotopes"]["Data Type"] = tk.IntVar()  # e.g. RAW data
        self.container_var["ma_datareduction_isotopes"]["Data Type"].set(0)
        self.container_var["ma_datareduction_isotopes"]["Focus"] = tk.IntVar()  # e.g. Matrix
        self.container_var["ma_datareduction_isotopes"]["Focus"].set(0)
        self.container_var["ma_datareduction_isotopes"]["Result Category"] = tk.IntVar()  # e.g. Concentration
        self.container_var["ma_datareduction_isotopes"]["Result Category"].set(0)
        self.container_var["ma_datareduction_isotopes"]["Display Option"] = tk.IntVar()  # e.g. Table mode
        self.container_var["ma_datareduction_isotopes"]["Display Option"].set(0)
        #
        self.container_var["ma_datareduction_files"]["File Type"] = tk.IntVar()  # e.g. Sample files
        self.container_var["ma_datareduction_files"]["File Type"].set(1)
        self.container_var["ma_datareduction_files"]["Data Type"] = tk.IntVar()  # e.g. RAW data
        self.container_var["ma_datareduction_files"]["Data Type"].set(0)
        self.container_var["ma_datareduction_files"]["Focus"] = tk.IntVar()  # e.g. Matrix
        self.container_var["ma_datareduction_files"]["Focus"].set(0)
        self.container_var["ma_datareduction_files"]["Result Category"] = tk.IntVar()  # e.g. Concentration
        self.container_var["ma_datareduction_files"]["Result Category"].set(0)
        self.container_var["ma_datareduction_files"]["Display Option"] = tk.IntVar()  # e.g. Table mode
        self.container_var["ma_datareduction_files"]["Display Option"].set(0)
        #
        self.container_var["ma_datareduction"] = {}
        self.container_var["ma_dataexploration"] = {}
        self.container_var["ma_datareduction"]["Option ID"] = tk.StringVar()
        self.container_var["ma_datareduction"]["Option ID"].set("Select Assemblage")
        self.container_var["ma_datareduction"]["Option IS"] = tk.StringVar()
        self.container_var["ma_datareduction"]["Option Drift"] = tk.StringVar()
        #
        self.container_var["ma_dataexploration"]["Exploration Mode"] = tk.IntVar()
        self.container_var["ma_dataexploration"]["Exploration Mode"].set(0)
        self.container_var["ma_dataexploration"]["STD File"] = tk.StringVar()
        self.container_var["ma_dataexploration"]["STD File"].set("Select File")
        self.container_var["ma_dataexploration"]["SMPL File"] = tk.StringVar()
        self.container_var["ma_dataexploration"]["SMPL File"].set("Select File")
        self.container_var["ma_dataexploration"]["Isotope"] = tk.StringVar()
        self.container_var["ma_dataexploration"]["Isotope"].set("Select Isotope")
        #
        self.var_mode_ma = False
        self.var_init_ma_setting = False
        self.var_init_ma_datareduction = False
        self.var_init_ma_dataexploration = False
        #
        ## FLUID/MELT INCLUSION ANALYSIS
        self.container_var["fi_setting"]["Time BG Start"] = tk.StringVar()
        self.container_var["fi_setting"]["Time BG Start"].set("Set start time")
        self.container_var["fi_setting"]["Time BG End"] = tk.StringVar()
        self.container_var["fi_setting"]["Time BG End"].set("Set end time")
        self.container_var["fi_setting"]["Time MAT Start"] = tk.StringVar()
        self.container_var["fi_setting"]["Time MAT Start"].set("Set start time")
        self.container_var["fi_setting"]["Time MAT End"] = tk.StringVar()
        self.container_var["fi_setting"]["Time MAT End"].set("Set end time")
        self.container_var["fi_setting"]["Time INCL Start"] = tk.StringVar()
        self.container_var["fi_setting"]["Time INCL Start"].set("Set start time")
        self.container_var["fi_setting"]["Time INCL End"] = tk.StringVar()
        self.container_var["fi_setting"]["Time INCL End"].set("Set end time")
        self.container_var["fi_setting"]["Author"] = tk.StringVar()
        self.container_var["fi_setting"]["Source ID"] = tk.StringVar()
        self.container_var["fi_setting"]["Source ID"].set("RUR01")
        self.container_var["fi_setting"]["Method"] = tk.StringVar()
        self.container_var["fi_setting"]["Method"].set("Select Method")
        self.container_var["fi_setting"]["Host Setup Selection"] = tk.IntVar()
        self.container_var["fi_setting"]["Host Setup Selection"].set(1)
        self.container_var["fi_setting"]["Inclusion Setup Selection"] = tk.IntVar()
        self.container_var["fi_setting"]["Inclusion Setup Selection"].set(1)
        self.container_var["fi_setting"]["Quantification Method"] = tk.IntVar()
        self.container_var["fi_setting"]["Quantification Method"].set(1)
        self.container_var["fi_setting"]["IS MAT Default"] = tk.StringVar()
        self.container_var["fi_setting"]["IS MAT Default"].set("Select IS")
        self.container_var["fi_setting"]["IS MAT Default Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["IS MAT Default Concentration"].set("1000000")
        self.container_var["fi_setting"]["IS INCL Default"] = tk.StringVar()
        self.container_var["fi_setting"]["IS INCL Default"].set("Select IS")
        self.container_var["fi_setting"]["IS INCL Default Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["IS INCL Default Concentration"].set("1000000")
        self.container_var["fi_setting"]["Oxide"] = tk.StringVar()
        self.container_var["fi_setting"]["Oxide"].set("Select Oxide")
        self.container_var["fi_setting"]["Oxide Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["Oxide Concentration"].set("100")
        self.container_var["fi_setting"]["Element"] = tk.StringVar()
        self.container_var["fi_setting"]["Element"].set("Select Element")
        self.container_var["fi_setting"]["Element Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["Element Concentration"].set("1000000")
        self.container_var["fi_setting"]["Sulfide"] = tk.StringVar()
        self.container_var["fi_setting"]["Sulfide"].set("Select Sulfide")
        self.container_var["fi_setting"]["Sulfide Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["Sulfide Concentration"].set("1000000")
        self.container_var["fi_setting"]["Halide"] = tk.StringVar()
        self.container_var["fi_setting"]["Halide"].set("Select Halide")
        self.container_var["fi_setting"]["Halide Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["Halide Concentration"].set("100")
        self.container_var["fi_setting"]["Mineral Concentration"] = tk.StringVar()
        self.container_var["fi_setting"]["Mineral Concentration"].set("100")
        self.container_var["fi_setting"]["Host Only"] = tk.StringVar()
        self.container_var["fi_setting"]["Host Only"].set("Select Isotope")
        self.container_var["fi_setting"]["2nd Internal"] = tk.StringVar()
        self.container_var["fi_setting"]["2nd Internal"].set("Select Isotope")
        self.container_var["fi_setting"]["2nd Internal Concentration Default"] = tk.StringVar()
        self.container_var["fi_setting"]["2nd Internal Concentration Default"].set("0")
        self.container_var["fi_setting"]["Matrix-Only Concentration Default"] = tk.StringVar()
        self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set("0")
        self.container_var["fi_setting"]["Matrix Amount Default"] = tk.StringVar()
        self.container_var["fi_setting"]["Matrix Amount Default"].set("100")
        self.container_var["fi_setting"]["IS Selection"] = tk.IntVar()
        self.container_var["fi_setting"]["IS Selection"].set(1)
        self.container_var["fi_setting"]["Spike Elimination Inclusion"] = tk.IntVar()
        self.container_var["fi_setting"]["Spike Elimination Inclusion"].set(2)
        self.container_var["fi_setting"]["SE Alpha"] = tk.StringVar()
        self.container_var["fi_setting"]["SE Alpha"].set("0.05")
        self.container_var["fi_setting"]["SE Threshold"] = tk.StringVar()
        self.container_var["fi_setting"]["SE Threshold"].set("1000")
        self.container_var["fi_setting"]["Inclusion Plugin"] = {
            "Intensity BG": tk.IntVar(), "Intensity MAT": tk.IntVar(), "Intensity MIX": tk.IntVar(),
            "Intensity INCL": tk.IntVar(), "Analytical Sensitivity": tk.IntVar(), "Concentration SRM": tk.IntVar()}
        #
        for key, item in self.container_var["fi_setting"]["Inclusion Plugin"].items():
            item.set(1)
        #
        self.molar_masses_compounds = {}
        self.container_var["fi_setting"]["Salt Correction"] = {
            "Chlorides": {}, "Carbonates": {}, "Sulfates": {}, "Salinity": tk.StringVar(),
            "Default Salinity": tk.StringVar(), "Default Concentration": tk.StringVar(), "Default IS": tk.StringVar(),
            "Salinity SMPL": {}}
        self.container_var["fi_setting"]["Salt Correction"]["Salinity"].set("0.0")
        self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"].set("Set Salinity (in %)")
        self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set("0.0")
        self.container_var["fi_setting"]["Salt Correction"]["Default IS"].set("Select IS")
        salt_chlorides = ["NaCl", "KCl", "CaCl2", "MgCl2", "LiCl", "FeCl2"]
        salt_carbonates = ["Na2CO3", "K2CO3", "NaHCO3"]
        salt_sulfates = ["Na2SO4"]
        for salt in salt_chlorides:
            self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt] = {
                "State": tk.IntVar(), "Weight": tk.StringVar()}
            if salt == "NaCl":
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["State"].set(1)
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].set("1.0")
            else:
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["State"].set(0)
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].set("1.0")
        for salt in salt_carbonates:
            self.container_var["fi_setting"]["Salt Correction"]["Carbonates"][salt] = {
                "State": tk.IntVar(), "Weight": tk.StringVar()}
            self.container_var["fi_setting"]["Salt Correction"]["Carbonates"][salt]["State"].set(0)
            self.container_var["fi_setting"]["Salt Correction"]["Carbonates"][salt]["Weight"].set("1.0")
        for salt in salt_sulfates:
            self.container_var["fi_setting"]["Salt Correction"]["Sulfates"][salt] = {
                "State": tk.IntVar(), "Weight": tk.StringVar()}
            self.container_var["fi_setting"]["Salt Correction"]["Sulfates"][salt]["State"].set(0)
            self.container_var["fi_setting"]["Salt Correction"]["Sulfates"][salt]["Weight"].set("1.0")
        self.container_var["fi_setting"]["Data Type Plot"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Analyse Mode Plot"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Display RAW"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Display SMOOTHED"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Time-Signal Lines"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Time-Ratio Lines"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Checkboxes Isotope Diagram"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Calculation Interval"] = {"STD": {}, "SMPL": {}}
        self.container_var["fi_setting"]["Calculation Interval Visibility"] = {"STD": {}, "SMPL": {}}
        #
        self.container_var["fi_datareduction_isotopes"]["File Type"] = tk.IntVar()          # e.g. Sample files
        self.container_var["fi_datareduction_isotopes"]["File Type"].set(1)
        self.container_var["fi_datareduction_isotopes"]["Data Type"] = tk.IntVar()          # e.g. RAW data
        self.container_var["fi_datareduction_isotopes"]["Data Type"].set(0)
        self.container_var["fi_datareduction_isotopes"]["Focus"] = tk.IntVar()              # e.g. Inclusion
        self.container_var["fi_datareduction_isotopes"]["Focus"].set(1)
        self.container_var["fi_datareduction_isotopes"]["Result Category"] = tk.IntVar()    # e.g. Concentration
        self.container_var["fi_datareduction_isotopes"]["Result Category"].set(0)
        self.container_var["fi_datareduction_isotopes"]["Display Option"] = tk.IntVar()     # e.g. Table mode
        self.container_var["fi_datareduction_isotopes"]["Display Option"].set(0)
        self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"] = {
            "Left": {"FIG": None, "CANVAS": None, "AX": None}, "Right": {"FIG": None, "CANVAS": None, "AX": None}}
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"] = {
            "Sensitivity Drift": {"FIG": None, "CANVAS": None, "AX": None},
            "Sensitivity Drift Change": {"FIG": None, "CANVAS": None, "AX": None},
            "Histograms": {"FIG": None, "CANVAS": None, "AX": None},
            "Box Plots": {"FIG": None, "CANVAS": None, "AX": None}}
        #
        self.container_var["fi_datareduction_files"]["File Type"] = tk.IntVar()         # e.g. Sample files
        self.container_var["fi_datareduction_files"]["File Type"].set(1)
        self.container_var["fi_datareduction_files"]["Data Type"] = tk.IntVar()         # e.g. RAW data
        self.container_var["fi_datareduction_files"]["Data Type"].set(0)
        self.container_var["fi_datareduction_files"]["Focus"] = tk.IntVar()             # e.g. Inclusion
        self.container_var["fi_datareduction_files"]["Focus"].set(1)
        self.container_var["fi_datareduction_files"]["Result Category"] = tk.IntVar()   # e.g. Concentration
        self.container_var["fi_datareduction_files"]["Result Category"].set(0)
        self.container_var["fi_datareduction_files"]["Display Option"] = tk.IntVar()    # e.g. Table mode
        self.container_var["fi_datareduction_files"]["Display Option"].set(0)
        self.container_var["fi_datareduction_files"]["Isotope Left Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_files"]["Isotope Left Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_files"]["Isotope 1 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_files"]["Isotope 1 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_files"]["Isotope 2 Right Plot"] = tk.StringVar()  # e.g. Si29
        self.container_var["fi_datareduction_files"]["Isotope 2 Right Plot"].set("Select Isotope")
        self.container_var["fi_datareduction_files"]["Sensitivity Diagrams"] = {
            "Left": {"FIG": None, "CANVAS": None, "AX": None}, "Right": {"FIG": None, "CANVAS": None, "AX": None}}
        #
        self.container_var["fi_datareduction"] = {}
        self.container_var["fi_dataexploration"] = {}
        self.var_mode_fi = False
        #
        self.container_var["mi_setting"]["Time BG Start"] = tk.StringVar()
        self.container_var["mi_setting"]["Time BG Start"].set("Set start time")
        self.container_var["mi_setting"]["Time BG End"] = tk.StringVar()
        self.container_var["mi_setting"]["Time BG End"].set("Set end time")
        self.container_var["mi_setting"]["Time MAT Start"] = tk.StringVar()
        self.container_var["mi_setting"]["Time MAT Start"].set("Set start time")
        self.container_var["mi_setting"]["Time MAT End"] = tk.StringVar()
        self.container_var["mi_setting"]["Time MAT End"].set("Set end time")
        self.container_var["mi_setting"]["Time INCL Start"] = tk.StringVar()
        self.container_var["mi_setting"]["Time INCL Start"].set("Set start time")
        self.container_var["mi_setting"]["Time INCL End"] = tk.StringVar()
        self.container_var["mi_setting"]["Time INCL End"].set("Set end time")
        self.container_var["mi_setting"]["Author"] = tk.StringVar()
        self.container_var["mi_setting"]["Source ID"] = tk.StringVar()
        self.container_var["mi_setting"]["Source ID"].set("RUR01")
        self.container_var["mi_datareduction"] = {}
        self.container_var["mi_dataexploration"] = {}
        self.container_var["ma_datareduction"]["Radiobutton"] = [
            tk.IntVar(), tk.IntVar(), tk.IntVar(), tk.IntVar(), tk.IntVar()]
        for var_rb in self.container_var["ma_datareduction"]["Radiobutton"]:
            var_rb.set(0)
        self.var_mode_mi = False
        #
        self.container_var["mineralchemistry"] = []
        self.container_var["plotting"] = {}
        self.container_var["IS"] = {}
        self.container_var["IS"]["Default STD"] = tk.StringVar()
        self.container_var["IS"]["Default STD"].set("Select IS")
        self.container_var["IS"]["Default SMPL"] = tk.StringVar()
        self.container_var["IS"]["Default SMPL"].set("Select IS")
        self.container_var["IS"]["Default SMPL Concentration"] = tk.StringVar()
        self.container_var["IS"]["Default SMPL Concentration"].set("1000000")
        self.container_var["ID"] = {}
        # self.container_var["ID"]["Default STD"] = tk.StringVar()
        # self.container_var["ID"]["Default STD"].set("A")
        self.container_var["ID"]["Default SMPL"] = tk.StringVar()
        self.container_var["ID"]["Default SMPL"].set("A")
        self.container_var["ID"]["Results Isotopes"] = tk.StringVar()
        self.container_var["ID"]["Results Isotopes"].set("A")
        self.container_var["ID"]["Results Files"] = tk.StringVar()
        self.container_var["ID"]["Results Files"].set("A")
        self.container_var["STD"] = {}
        self.container_var["SMPL"] = {}
        self.container_var["LASER"] = tk.StringVar()
        self.container_var["LASER"].set("Argon")
        self.container_var["charge"] = {}
        self.container_var["Gas Energy"] = tk.StringVar()
        self.container_var["Gas Energy"].set("15.760")
        self.container_var["Spike Elimination Method"] = tk.StringVar()
        self.container_var["Spike Elimination Method"].set("Grubbs-Test")
        self.list_se_methods = ["Grubbs-Test", "Grubbs-Test (SILLS)"]
        self.list_isotopes = []
        self.srm_actual = {}
        self.container_files = {}
        self.container_files["STD"] = {}
        self.container_files["SRM"] = {}
        self.container_files["SMPL"] = {}
        self.container_optionmenu = {}
        self.container_optionmenu["STD"] = {}
        self.container_optionmenu["SMPL"] = {}
        self.container_optionmenu["ISOTOPES"] = {}
        self.container_measurements = {}
        categories_01 = ["RAW", "SELECTED", "EDITED"]
        for category_01 in categories_01:
            self.container_measurements[category_01] = {}
        #
        self.mineral_chem = {}
        self.time_ratio_data = {}
        #
        self.last_rb_setup = {}
        #
        self.container_helper = {}
        self.container_helper["STD"] = {}
        self.container_helper["SMPL"] = {}
        self.container_helper["positions"] = {}
        self.container_helper["positions"]["BG STD"] = {}
        self.container_helper["positions"]["SIG STD"] = {}
        self.container_helper["positions"]["MAT STD"] = {}
        self.container_helper["positions"]["INCL STD"] = {}
        self.container_helper["positions"]["SPK STD"] = {}
        self.container_helper["positions"]["BG SMPL"] = {}
        self.container_helper["positions"]["SIG SMPL"] = {}
        self.container_helper["positions"]["MAT SMPL"] = {}
        self.container_helper["positions"]["INCL SMPL"] = {}
        self.container_helper["positions"]["SPK SMPL"] = {}
        self.container_helper["positions"]["BG"] = {}
        self.container_helper["positions"]["SIG"] = {}
        self.container_helper["positions"]["SPK"] = {}
        self.container_helper["positions"]["MAT"] = {}
        self.container_helper["positions"]["INCL"] = {}
        self.container_helper["indices"] = {}
        self.container_helper["limits BG"] = {}
        self.container_helper["limits SIG"] = {}
        self.container_helper["limits MAT"] = {}
        self.container_helper["limits INCL"] = {}
        self.container_helper["limits SPK"] = {}
        self.container_helper["limits BG Ratio"] = {}
        self.container_helper["limits SIG Ratio"] = {}
        self.container_helper["limits MAT Ratio"] = {}
        self.container_helper["limits INCL Ratio"] = {}
        self.container_helper["limits SPK Ratio"] = {}
        self.container_helper["Default BG"] = {}
        self.container_helper["Default BG"]["Times"] = [0, 0]
        self.container_helper["Default BG"]["Positions"] = [0, 0]
        self.container_helper["Default SIG"] = {}
        self.container_helper["Default SIG"]["Times"] = [0, 0]
        self.container_helper["Default SIG"]["Positions"] = [0, 0]
        #
        self.container_lists = {}
        #
        self.container_lists["Colors PySILLS"] = {}
        categories = ["Dark", "Medium", "Light", "Sign"]
        subcategories = ["Green", "Red", "Blue", "Yellow", "Brown", "Slate Grey"]
        for category in categories:
            self.container_lists["Colors PySILLS"][category] = {}
            for subcategory in subcategories:
                if category != "Sign":
                    if subcategory == "Green":
                        self.container_lists["Colors PySILLS"][category][subcategory] = green_dict[category]
                    elif subcategory == "Red":
                        self.container_lists["Colors PySILLS"][category][subcategory] = red_dict[category]
                    elif subcategory == "Blue":
                        self.container_lists["Colors PySILLS"][category][subcategory] = blue_dict[category]
                    elif subcategory == "Yellow":
                        self.container_lists["Colors PySILLS"][category][subcategory] = yellow_dict[category]
                    elif subcategory == "Brown":
                        self.container_lists["Colors PySILLS"][category][subcategory] = brown_dict[category]
                    elif subcategory == "Slate Grey":
                        self.container_lists["Colors PySILLS"][category][subcategory] = slategrey_dict[category]
                else:
                    if subcategory in ["Red", "Yellow", "Green"]:
                        self.container_lists["Colors PySILLS"][category][subcategory] = sign_dict[subcategory]
        #
        self.container_lists["Salt Chemistry"] = {}
        self.container_lists["Selected Salts"] = []
        self.container_lists["SRM Data"] = {}
        self.container_lists["SRM"] = []
        self.container_lists["IS"] = []
        self.container_lists["ID"] = []
        self.container_lists["Possible IS"] = []
        self.container_lists["ID Files"] = {}
        self.container_lists["STD"] = {}
        self.container_lists["STD"]["Long"] = []
        self.container_lists["STD"]["Short"] = []
        self.container_lists["STD"]["Old"] = []
        self.container_lists["STD"]["SRM"] = {}
        self.container_lists["SMPL"] = {}
        self.container_lists["SMPL"]["Long"] = []
        self.container_lists["SMPL"]["Short"] = []
        self.container_lists["SMPL"]["Old"] = []
        self.container_lists["ISOTOPES"] = []
        self.container_lists["Acquisition Times Delta"] = {}
        self.container_lists["Analytical Sensitivity Regression"] = {}
        self.container_lists["Possible IS STD"] = []
        self.container_lists["Possible IS SMPL"] = []
        self.container_lists["Plugins FI"] = {} # FI = Fluid Inclusion
        self.container_lists["Plugins FI"]["Names"] = []
        self.container_lists["Plugins FI"]["Files"] = []
        self.container_lists["Plugins MI"] = {} # MI = Melt Inclusion
        self.container_lists["Plugins MI"]["Names"] = []
        self.container_lists["Plugins MI"]["Files"] = []
        self.container_lists["Plugins SE"] = {} # SE = Spike Elimination
        self.container_lists["Plugins SE"]["Names"] = []
        self.container_lists["Plugins SE"]["Files"] = []
        self.container_lists["Oxides"] = [
            "SiO2", "TiO2", "Al2O3", "Fe2O3", "Fe3O4", "FeO", "MgO", "MnO", "CaO", "BaO", "Na2O", "K2O", "P2O5",
            "Cr2O3", "ZrO2"]
        self.container_lists["Sulfides"] = [
            "FeS2", "ZnS" "PbS", "Ag2S", "Na2S", "MoS2", "CdS", "SeS2", "BaS", "BeS", "CoS", "Cu2S", "CuS", "FeS",
            "Fe2S3", "Hg2S", "HgS", "MnS", "NiS", "Tl2S", "SnS", "SnS2"]
        self.container_lists["Halides"] = [
            "NaCl", "KCl", "KI", "LiCl", "CuCl2", "AgCl", "CaCl2", "ClF", "CH3Br", "CHI3", "HCl", "HBr"]
        self.container_lists["Elements"] = []
        self.container_results = {}
        self.container_results["STD"] = {}
        self.container_results["STD"]["RAW"] = {}
        self.container_results["STD"]["SMOOTHED"] = {}
        self.container_results["SMPL"] = {}
        self.container_results["SMPL"]["RAW"] = {}
        self.container_results["SMPL"]["SMOOTHED"] = {}
        self.xi_std_time = {}
        self.xi_regr = None
        #
        self.demo_view = False
        #
        self.fast_track_std = False
        self.fast_track_smpl = False
        #
        self.file_loaded = False
        #
        self.spikes_isotopes = {}
        #
        self.diagrams_setup = {}
        categories_01 = ["STD", "SMPL"]
        for category_01 in categories_01:
            self.diagrams_setup[category_01] = {}
        #
        self.container_diagrams = {}
        self.container_listboxes = {}
        categories_01 = ["STD", "SMPL"]
        for category_01 in categories_01:
            self.container_diagrams[category_01] = {}
            self.container_listboxes[category_01] = {}
            self.spikes_isotopes[category_01] = {}
        #
        # Calculation Report
        self.container_report = {}
        categories_01 = ["Total STD", "Total SMPL"]
        categories_02 = ["intensity bg", "intensity sig corr", "intensity ratio", "sensitivity", "concentration", "RSF", "LOD"]
        for category_01 in categories_01:
            self.container_report[category_01] = {}
            self.container_report[category_01]["Mean"] = {}
            self.container_report[category_01]["Error"] = {}
            for category_02 in categories_02:
                self.container_report[category_01]["Mean"][category_02] = {}
                self.container_report[category_01]["Error"][category_02] = {}
                self.container_report[category_01]["Mean"][category_02]["filename"] = category_01
                self.container_report[category_01]["Error"][category_02]["filename"] = category_01
        #
        self.list_srm = np.array(
            [["NIST 606"], ["NIST 610"], ["NIST 610 (GeoReM)"], ["NIST 610 (Spandler)"], ["NIST 611"],
             ["NIST 611 (GeoReM)"], ["NIST 612"], ["NIST 612 (GeoReM)"], ["NIST 613"], ["NIST 613 (GeoReM)"],
             ["NIST 614"], ["NIST 614 (GeoReM)"], ["NIST 615"], ["NIST 615 (GeoReM)"], ["NIST 616"],
             ["NIST 616 (GeoReM)"], ["NIST 617"], ["NIST 617 (GeoReM)"], ["USGS BCR-2G (GeoReM)"],
             ["USGS GSD-1G (GeoReM)"], ["USGS GSE-1G (GeoReM)"], ["B6"], ["Durango Apatite"], ["Scapolite 17"],
             ["BAM-376"], ["BCR-2G"], ["BL-Q"], ["Br-Glass"], ["GSD-1G (GeoReM)"], ["GSE-1G (GeoReM)"], ["GSE-2G"],
             ["HAL-O"], ["K-Br"], ["MACS-3"], ["Po 724"], ["STDGL-2B2"]])[:, 0]
        self.srm_window_checker = tk.IntVar()
        self.srm_window_checker.set(0)
        self.previous_std_list = []
        self.list_pse = PSE().get_element_names()
        self.ionization_energies = {}
        self.ionization_energies["First"] = {}
        self.ionization_energies["Second"] = {}
        for element in self.list_pse:
            data_element = PeriodicSystem(name=element).get_data()
            if len(data_element) == 13:
                self.ionization_energies["First"][element] = data_element[-2]
                self.ionization_energies["Second"][element] = data_element[-1]
            elif len(data_element) == 12:
                self.ionization_energies["First"][element] = data_element[-1]
                self.ionization_energies["Second"][element] = 0.0
        #
        self.container_settings = {}
        categories_01 = ["MA", "FI", "MI"] # MA=Mineral Analysis, FI=Fluid Inclusions, MI=Melt Inclusions
        categories_02 = ["Start BG", "End BG", "Start SIG", "End SIG", "Start MAT", "End MAT", "Start INCL", "End INCL"]
        categories_03 = ["Deviation", "Threshold", "Author", "Source ID"]
        for category_01 in categories_01:
            self.container_settings[category_01] = {}
            for category_02 in categories_02:
                if category_01 == "MA" and category_02 in ["Start MAT", "End MAT", "Start INCL", "End INCL"]:
                    pass
                elif category_01 in ["FI", "MI"] and category_02 in ["Start SIG", "End SIG"]:
                    pass
                else:
                    self.container_settings[category_01][category_02] = tk.StringVar()
            for category_03 in categories_03:
                self.container_settings[category_01][category_03] = tk.StringVar()
        #
        self.mineral_list = ["Quartz", "Calcite", "Fluorite", "Apatite-Cl", "Apatite-F", "Apatite-OH", "Forsterite",
                             "Fayalite", "Tephroite", "Albite", "Anorthite", "Orthoclase", "Microcline", "Zircon",
                             "Enargite", "Pyrite", "Chalcopyrite", "Bornite", "Arsenopyrite", "Sphalerite", "Galena",
                             "Molybdenite", "Hematite", "Magnetite", "Chromite", "Gahnite", "Meionite", "Marialite",
                             "Strontianite", "Titanite", "Aegirine", "Diopside", "Hedenbergite", "Ferrosilite",
                             "Enstatite", "Monazite-La", "Monazite-Ce", "Monazite-Pr", "Monazite-Nd", "Monazite-Sm",
                             "Monazite-Eu", "Monazite-Gd", "Monazite-Th", "Barite", "Ilvaite"]
        self.mineral_list.sort()
        self.container_lists["Minerals"] = self.mineral_list
        #
        self.calculate_mineral_chemistry()
        self.create_srm_data_list()
        #
        window_width = var_window_width
        window_heigth = var_window_height
        row_min = 25
        row_min = int(var_window_height/40)
        n_rows = int(window_heigth/row_min)
        column_min = 20
        column_min = int(var_window_width/90)
        n_columns = int(window_width/column_min)
        row_min = 25
        self.n_rows = 38
        window_heigth = int(row_min*self.n_rows)
        column_min = 20
        self.n_columns = 22
        window_width = int(column_min*self.n_columns)
        var_geometry = str(window_width)+"x"+str(window_heigth)+"+0+0"
        self.parent.geometry(var_geometry)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.parent, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.parent, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.parent.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.parent.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        ## FRAMES
        #
        frame_01 = tk.Frame(self.parent, bg=self.bg_colors["Super Dark"], borderwidth=0, highlightthickness=0)
        frame_01.grid(row=0, column=0, rowspan=42, columnspan=22, sticky="nesw")
        frame_02 = tk.Frame(self.parent, bg=self.red_dark, borderwidth=0, highlightthickness=0)
        frame_02.grid(row=2, column=0, rowspan=1, columnspan=22, sticky="nesw")
        #
        ## USER SETTINGS
        try:
            file_usersettings = open("user_settings.txt", "r")
            for index, file_data in enumerate(file_usersettings):
                file_data_splitted = file_data.split(";")
                try:
                    self.container_var["General Settings"][file_data_splitted[0]].set(file_data_splitted[1])
                except:
                    pass
        except:
            print("There is no user_settings file!")
        #
        ## Logo
        self.path_pysills = os.getcwd()
        pysills_logo = tk.PhotoImage(file=self.path_pysills+str("/documentation/images/PySILLS_Logo.png"))
        pysills_logo = pysills_logo.subsample(1, 1)
        img = tk.Label(self.parent, image=pysills_logo, bg=self.bg_colors["Super Dark"])
        img.image = pysills_logo
        img.grid(row=0, column=0, rowspan=2, columnspan=20, sticky="nesw")
        #
        ## Radiobuttons
        self.pysills_mode = None
        self.demo_mode = True
        var_rb_main = tk.IntVar()
        var_rb_main.set(0)
        self.container_var["main"]["Radiobutton"].append(var_rb_main)
        list_mode = ["Mineral Analysis", "Fluid Inclusions", "Melt Inclusions", "Output Analysis"]
        for index, mode in enumerate(list_mode):
            rb_mode = SE(
                parent=self.parent, row_id=5 + index, column_id=11, n_rows=1, n_columns=10, fg=self.green_medium,
                bg=self.green_dark).create_radiobutton(
                var_rb=var_rb_main, value_rb=index, color_bg=self.bg_colors["Medium"], fg=self.bg_colors["Dark Font"],
                text=mode, sticky="NESW", relief=tk.FLAT, font="sans 10 bold",
                command=lambda var_rb=var_rb_main: self.select_experiment(var_rb))
            #
            if mode in ["Melt Inclusions", "Output Analysis"]:
                rb_mode.configure(state="disabled")
            #
            self.gui_elements["main"]["Radiobutton"]["General"].append(rb_mode)
        #
        ## Labels
        lbl_01 = SE(
            parent=self.parent, row_id=3, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="PySILLS", relief=tk.FLAT, fontsize="sans 16 bold")
        lbl_01 = SE(
            parent=self.parent, row_id=3, column_id=11, n_rows=2, n_columns=10, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Select Mode", relief=tk.FLAT, fontsize="sans 16 bold")
        lbl_02 = SE(
            parent=self.parent, row_id=17, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 16 bold")
        lbl_03 = SE(
            parent=self.parent, row_id=17, column_id=11, n_rows=2, n_columns=10, fg=self.bg_colors["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 16 bold")
        #
        ## Listboxes
        self.lb_std = SE(
            parent=self.parent, row_id=21, column_id=0, n_rows=16, n_columns=10, fg=self.green_dark,
            bg=self.bg_colors["Very Light"]).create_simple_listbox()
        self.lb_smpl = SE(
            parent=self.parent, row_id=21, column_id=11, n_rows=16, n_columns=10, fg=self.green_dark,
            bg=self.bg_colors["Very Light"]).create_simple_listbox()
        #
        self.quick_plot_figure_std = Figure(figsize=(10, 5), dpi=150, tight_layout=True,
                                            facecolor=self.bg_colors["Very Light"])
        self.quick_plot_figure_smpl = Figure(figsize=(10, 5), dpi=150, tight_layout=True,
                                             facecolor=self.bg_colors["Very Light"])
        self.lb_std.bind("<Double-1>", lambda event, var_filetype="STD": self.quick_plot_file(var_filetype, event))
        self.lb_smpl.bind("<Double-1>", lambda event, var_filetype="SMPL": self.quick_plot_file(var_filetype, event))
        #
        # Data Import
        SE(
            parent=self.parent, row_id=19, column_id=0, n_rows=2, n_columns=5, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Add", bg_active=self.red_dark, fg_active=self.green_dark,
            command=lambda datatype="STD": self.open_csv(datatype))
        SE(
            parent=self.parent, row_id=19, column_id=5, n_rows=2, n_columns=5, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Delete", bg_active=self.red_dark, fg_active=self.green_dark,
            command=lambda var_lb=self.lb_std, var_list=self.list_std: self.delete_csv(var_lb, var_list))
        SE(
            parent=self.parent, row_id=19, column_id=11, n_rows=2, n_columns=5, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Add", bg_active=self.red_dark, fg_active=self.green_dark,
            command=lambda datatype="SMPL": self.open_csv(datatype))
        SE(
            parent=self.parent, row_id=19, column_id=16, n_rows=2, n_columns=5, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Delete", bg_active=self.red_dark, fg_active=self.green_dark,
            command=lambda var_lb=self.lb_smpl, var_list=self.list_smpl: self.delete_csv(var_lb, var_list))
        #
        SE(
            parent=self.parent, row_id=5, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="New Project", bg_active=self.red_dark, fg_active=self.green_dark, command=self.restart_pysills)
        SE(
            parent=self.parent, row_id=7, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Load Project", bg_active=self.red_dark, fg_active=self.green_dark, command=self.open_project)
        SE(
            parent=self.parent, row_id=9, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Save Project", bg_active=self.red_dark, fg_active=self.green_dark, command=self.save_project)
        SE(
            parent=self.parent, row_id=11, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="General Settings", bg_active=self.red_dark, fg_active=self.green_dark,
            command=self.subwindow_general_settings)
        btn_docu = SE(
            parent=self.parent, row_id=13, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Documentation", bg_active=self.red_dark, fg_active=self.green_dark)
        btn_docu.configure(state="disabled")
        SE(
            parent=self.parent, row_id=15, column_id=0, n_rows=2, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Medium"]).create_simple_button(
            text="Quit", bg_active=self.red_dark, fg_active=self.green_dark, command=self.parent.quit)
        #
        ## Initialization
        self.select_experiment(var_rb=var_rb_main)
    #
    def clean_result_lists(self, var_list, var_list_new):
        for item in var_list:
            if type(item) in [float, int]:
                var_list_new.append(item)
    #
    def select_experiment(self, var_rb):
        start_row = 9
        start_column = 11
        #
        if var_rb.get() == 0:   # Mineral Analysis
            self.pysills_mode = "MA"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Mineral Analysis", relief=tk.FLAT, fontsize="sans 16 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Settings", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.ma_settings)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Results", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.ma_datareduction_files)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Extras", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.ma_datareduction_files)
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])
        #
        elif var_rb.get() == 1:   # Fluid Inclusions
            self.pysills_mode = "FI"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Fluid Inclusions", relief=tk.FLAT, fontsize="sans 16 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Settings", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.fi_settings)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Results", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.fi_datareduction_files)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Extras", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.ma_datareduction_files)
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])
        #
        elif var_rb.get() == 2:   # Melt Inclusions
            self.pysills_mode = "MI"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Melt Inclusions", relief=tk.FLAT, fontsize="sans 16 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Settings", bg_active=self.red_dark, fg_active=self.green_dark)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Results", bg_active=self.red_dark, fg_active=self.green_dark)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Extras", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.ma_datareduction_files)
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])
        #
        elif var_rb.get() == 3:  # Output Analysis
            self.pysills_mode = "OA"
            ## Cleaning
            for gui_category in ["Label", "Button"]:
                if len(self.gui_elements["main"][gui_category]["Specific"]) > 0:
                    for gui_item in self.gui_elements["main"][gui_category]["Specific"]:
                        gui_item.grid_remove()
                    self.gui_elements["main"][gui_category]["Specific"].clear()
            #
            ## Labels
            lb_01 = SE(
                parent=self.parent, row_id=start_row, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
                text="Output Analysis", relief=tk.FLAT, fontsize="sans 16 bold")
            #
            self.gui_elements["main"]["Label"]["Specific"].append(lb_01)
            #
            ## Buttons
            btn_01 = SE(
                parent=self.parent, row_id=start_row + 2, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Settings", bg_active=self.red_dark, fg_active=self.green_dark)
            btn_02 = SE(
                parent=self.parent, row_id=start_row + 4, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Results", bg_active=self.red_dark, fg_active=self.green_dark)
            btn_03 = SE(
                parent=self.parent, row_id=start_row + 6, column_id=start_column, n_rows=2, n_columns=10,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
                text="Extras", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.ma_datareduction_files)
            btn_03.configure(state="disabled")
            #
            self.gui_elements["main"]["Button"]["Specific"].extend([btn_01, btn_02, btn_03])
    #
    def on_configure(self, var_cnv, event):
        # update scrollregion after starting 'mainloop'
        # when all widgets are in canvas
        var_cnv.configure(scrollregion=var_cnv.bbox("all"))
    #
    # def change_rb_spike(self, var_rb, start_row=0, start_col=21):
    #     if var_rb.get() == 0:   # Grubbs Test
    #         ## Cleaning
    #         categories = ["Label", "Entry", "Button", "Frame"]
    #         for category in categories:
    #             if len(self.gui_elements["ma_setting"][category]["Specific"]) > 0:
    #                 for gui_item in self.gui_elements["ma_setting"][category]["Specific"]:
    #                     gui_item.grid_remove()
    #                 self.gui_elements["ma_setting"][category]["Specific"].clear()
    #         #
    #         ## Labels
    #         lb_spk_01 = SE(
    #             parent=self.parent, row_id=start_row + 26, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Significance Level", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         lb_spk_02 = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         lb_spk_03 = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         lb_spk_04 = SE(
    #             parent=self.parent, row_id=start_row + 27, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Threshold", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         #
    #         self.container_elements["ma_setting"]["Label"].extend([lb_spk_01, lb_spk_02, lb_spk_03, lb_spk_04])
    #         self.gui_elements["ma_setting"]["Label"]["Specific"].extend([lb_spk_01, lb_spk_02, lb_spk_03, lb_spk_04])
    #         #
    #         ## Entries
    #         entr_01 = SE(
    #             parent=self.parent, row_id=start_row + 26, column_id=start_col + 8, n_rows=1,
    #             n_columns=9, fg=self.green_light, bg=self.green_dark).create_simple_entry(
    #             var=self.container_var["settings"]["SE Alpha"], text_default="0.05",
    #             command=lambda event, var_entry=self.container_var["settings"]["SE Alpha"]:
    #             self.update_significance_level(var_entry, event))
    #         #
    #         self.container_var["settings"]["SE Threshold"] = tk.StringVar()
    #         #
    #         entr_02 = SE(
    #             parent=self.parent, row_id=start_row + 27, column_id=start_col + 8, n_rows=1,
    #             n_columns=9, fg=self.green_light, bg=self.green_dark).create_simple_entry(
    #             var=self.container_var["settings"]["SE Threshold"], text_default="1000",
    #             command=lambda event, var=self.container_var["settings"]["SE Threshold"], category_01="MA",
    #                            category_02="Threshold": self.set_entry_value(var, category_01, category_02, event))
    #         #
    #         self.container_elements["ma_setting"]["Entry"].extend([entr_01, entr_02])
    #         self.gui_elements["ma_setting"]["Entry"]["Specific"].extend([entr_01, entr_02])
    #         #
    #         ## Buttons
    #         btn_std_01 = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col + 8, n_rows=1,
    #             n_columns=5, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Apply to all", bg_active=self.red_dark, fg_active=self.green_dark,
    #             command=lambda filetype="STD", algorithm="Grubbs": self.spike_elimination_all(filetype, algorithm))
    #         btn_std_02 = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col + 13, n_rows=1,
    #             n_columns=3, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Check", bg_active=self.red_dark, fg_active=self.green_dark,
    #             command=lambda filetype="STD": SpikeElimination(
    #                 container_lists=self.container_lists,
    #                 gui_elements=self.gui_elements,
    #                 container_spikes=self.container_spikes).spike_elimination_check(filetype))
    #         btn_smpl_01 = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col + 8, n_rows=1,
    #             n_columns=5, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Apply to all", bg_active=self.red_dark, fg_active=self.green_dark,
    #             command=lambda filetype="SMPL", algorithm="Grubbs": self.spike_elimination_all(filetype, algorithm))
    #         btn_smpl_02 = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col + 13, n_rows=1,
    #             n_columns=3, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Check", bg_active=self.red_dark, fg_active=self.green_dark,
    #             command=lambda filetype="SMPL": SpikeElimination(
    #                 container_lists=self.container_lists,
    #                 gui_elements=self.gui_elements,
    #                 container_spikes=self.container_spikes).spike_elimination_check(filetype))
    #         btn_confirmall_spk = SE(
    #             parent=self.parent, row_id=start_row + 30, column_id=start_col + 8, n_rows=1,
    #             n_columns=9, fg=self.green_dark, bg=self.yellow_dark).create_simple_button(
    #             text="Confirm All Spikes", bg_active=self.yellow_dark, fg_active=self.green_dark,
    #             command=self.confirm_all_spikes)
    #         #
    #         self.container_elements["ma_setting"]["Button"].extend(
    #             [btn_std_01, btn_std_02, btn_smpl_01, btn_smpl_02, btn_confirmall_spk])
    #         self.gui_elements["ma_setting"]["Button"]["Specific"].extend(
    #             [btn_std_01, btn_std_02, btn_smpl_01, btn_smpl_02, btn_confirmall_spk])
    #         #
    #         ## Frames
    #         frm_std = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col + 16, n_rows=1, n_columns=1,
    #             fg=self.green_light, bg=self.sign_red).create_frame()
    #         frm_smpl = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col + 16, n_rows=1, n_columns=1,
    #             fg=self.green_light, bg=self.sign_red).create_frame()
    #         #
    #         self.container_elements["ma_setting"]["Frame"].extend([frm_std, frm_smpl])
    #         self.gui_elements["ma_setting"]["Frame"]["Specific"].extend([frm_std, frm_smpl])
    #     #
    #     elif var_rb.get() == 1: # Pointwise Test
    #         ## Cleaning
    #         categories = ["Label", "Entry", "Button", "Frame"]
    #         for category in categories:
    #             if len(self.gui_elements["ma_setting"][category]["Specific"]) > 0:
    #                 for gui_item in self.gui_elements["ma_setting"][category]["Specific"]:
    #                     gui_item.grid_remove()
    #                 self.gui_elements["ma_setting"][category]["Specific"].clear()
    #         #
    #         ## Labels
    #         lbl_ma_setting_11 = SE(
    #             parent=self.parent, row_id=start_row + 26, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Deviation", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         lbl_ma_setting_12 = SE(
    #             parent=self.parent, row_id=start_row + 27, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Threshold", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         lbl_ma_setting_13 = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         lbl_ma_setting_14 = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col, n_rows=1,
    #             n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
    #             text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
    #         #
    #         self.gui_elements["ma_setting"]["Label"]["Specific"].extend(
    #             [lbl_ma_setting_11, lbl_ma_setting_12, lbl_ma_setting_13, lbl_ma_setting_14])
    #         #
    #         ## Entries
    #         var_entr_05 = tk.StringVar()
    #         self.container_var["settings"]["SE Deviation"] = var_entr_05
    #         #
    #         entr_05 = SE(
    #             parent=self.parent, row_id=start_row + 26, column_id=start_col + 8, n_rows=1,
    #             n_columns=9, fg=self.green_light, bg=self.green_dark).create_simple_entry(
    #             var=var_entr_05, text_default="10",
    #             command=lambda event, var=var_entr_05, category_01="MA", category_02="Deviation":
    #             self.set_entry_value(var, category_01, category_02, event))
    #         #
    #         var_entr_06 = tk.StringVar()
    #         self.container_var["settings"]["SE Threshold"] = var_entr_06
    #         #
    #         entr_06 = SE(
    #             parent=self.parent, row_id=start_row + 27, column_id=start_col + 8, n_rows=1,
    #             n_columns=9, fg=self.green_light, bg=self.green_dark).create_simple_entry(
    #             var=var_entr_06, text_default="1000",
    #             command=lambda event, var=var_entr_06, category_01="MA", category_02="Threshold":
    #             self.set_entry_value(var, category_01, category_02, event))
    #         #
    #         self.gui_elements["ma_setting"]["Entry"]["Specific"].extend(
    #             [entr_05, entr_06])
    #         #
    #         ## Buttons
    #         btn_std_01 = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col + 8, n_rows=1,
    #             n_columns=5, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Apply to all", bg_active=self.red_dark, fg_active=self.green_dark,
    #             command=lambda filetype="STD": self.fast_track(filetype))
    #         btn_std_02 = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col + 13, n_rows=1,
    #             n_columns=3, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Check", bg_active=self.red_dark, fg_active=self.green_dark)
    #         btn_smpl_01 = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col + 8, n_rows=1,
    #             n_columns=5, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Apply to all", bg_active=self.red_dark, fg_active=self.green_dark,
    #             command=lambda filetype="SMPL": self.fast_track(filetype))
    #         btn_smpl_02 = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col + 13, n_rows=1,
    #             n_columns=3, fg=self.green_dark, bg=self.green_medium).create_simple_button(
    #             text="Check", bg_active=self.red_dark, fg_active=self.green_dark)
    #         btn_confirmall_spk = SE(
    #             parent=self.parent, row_id=start_row + 30, column_id=start_col + 8, n_rows=1,
    #             n_columns=9, fg=self.green_dark, bg=self.yellow_dark).create_simple_button(
    #             text="Confirm All Spikes", bg_active=self.yellow_dark, fg_active=self.green_dark,
    #             command=self.confirm_all_spikes)
    #         #
    #         self.gui_elements["ma_setting"]["Button"]["Specific"].extend(
    #             [btn_std_01, btn_std_02, btn_smpl_01, btn_smpl_02, btn_confirmall_spk])
    #         #
    #         ## Frames
    #         frm_std = SE(
    #             parent=self.parent, row_id=start_row + 28, column_id=start_col + 16, n_rows=1, n_columns=1,
    #             fg=self.green_light, bg=self.sign_red).create_frame()
    #         frm_smpl = SE(
    #             parent=self.parent, row_id=start_row + 29, column_id=start_col + 16, n_rows=1, n_columns=1,
    #             fg=self.green_light, bg=self.sign_red).create_frame()
    #         #
    #         self.gui_elements["ma_setting"]["Frame"]["Specific"].extend([frm_std, frm_smpl])
    #
    def confirm_all_spikes(self, file_loaded=False):
        container_interval = {"BG": [], "SIG": [], "MAT": [], "INCL": []}
        if self.fast_track_std == False or file_loaded == True:
            for file_std in self.container_lists["STD"]["Long"]:
                filename = file_std.split("/")[-1]
                df_data = self.load_and_assign_data(filename=file_std)
                times = df_data.iloc[:, 0]
                #
                if self.container_helper["Default BG"]["Positions"] == [0, 0] \
                        and "auto-detection used" not in self.container_helper["Default BG"]["Times"] \
                        and "auto-detection used" not in self.container_helper["Default SIG"]["Times"]:
                    #
                    if 1 in self.container_helper["STD"][filename]["BG"]:
                        t_start = self.container_helper["STD"][filename]["BG"][1]["Times"][0]
                        t_end = self.container_helper["STD"][filename]["BG"][1]["Times"][1]
                        start_index = times[times == t_start].index[0]
                        end_index = times[times == t_end].index[0]
                        # start_index = times[times == self.container_helper["Default BG"]["Times"][0]].index[0]
                        # end_index = times[times == self.container_helper["Default BG"]["Times"][1]].index[0]
                        self.container_helper["Default BG"]["Positions"][0] = start_index
                        self.container_helper["Default BG"]["Positions"][1] = end_index
                        #
                        t_start = self.container_helper["STD"][filename]["SIG"][1]["Times"][0]
                        t_end = self.container_helper["STD"][filename]["SIG"][1]["Times"][1]
                        start_index = times[times == t_start].index[0]
                        end_index = times[times == t_end].index[0]
                        # start_index = times[times == self.container_helper["Default SIG"]["Times"][0]].index[0]
                        # end_index = times[times == self.container_helper["Default SIG"]["Times"][1]].index[0]
                        self.container_helper["Default SIG"]["Positions"][0] = start_index
                        self.container_helper["Default SIG"]["Positions"][1] = end_index
                #
                self.container_measurements["RAW"][filename] = {}
                self.container_measurements["EDITED"][filename] = {}
                self.container_measurements["SELECTED"][filename] = {}
                self.container_measurements["SELECTED"][filename]["RAW"] = {}
                self.container_measurements["SELECTED"][filename]["SMOOTHED"] = {}
                self.container_measurements["RAW"][filename]["Time"] = times.tolist()
                self.container_measurements["EDITED"][filename]["Time"] = times.tolist()
                self.container_measurements["SELECTED"][filename]["Time"] = times.tolist()
                #
                if "auto-detection used" in self.container_helper["Default BG"]["Times"]:
                    t_start = self.container_helper["STD"][filename]["BG"][1]["Times"][0]
                    t_end = self.container_helper["STD"][filename]["BG"][1]["Times"][1]
                    start_index = times[times == t_start].index[0]
                    end_index = times[times == t_end].index[0]
                    container_interval["BG"].extend([start_index, end_index])
                if "auto-detection used" in self.container_helper["Default SIG"]["Times"]:
                    t_start = self.container_helper["STD"][filename]["SIG"][1]["Times"][0]
                    t_end = self.container_helper["STD"][filename]["SIG"][1]["Times"][1]
                    start_index = times[times == t_start].index[0]
                    end_index = times[times == t_end].index[0]
                    container_interval["SIG"].extend([start_index, end_index])
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["RAW"][filename][isotope] = df_data[isotope].tolist()
                    self.container_measurements["EDITED"][filename][isotope] = {}
                    self.container_measurements["SELECTED"][filename]["RAW"][isotope] = {}
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope] = {}
                    #
                    self.container_measurements["EDITED"][filename][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename]["RAW"][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["BG"] = []
                    # Mineral Analysis
                    self.container_measurements["EDITED"][filename][isotope]["SIG"] = []
                    self.container_measurements["SELECTED"][filename]["RAW"][isotope]["SIG"] = []
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"] = []
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"] = []
                #
                intervals_bg = []
                intervals_sig = []
                #
                if "auto-detection used" in self.container_helper["Default BG"]["Times"]:
                    intervals_bg.append(container_interval["BG"])
                else:
                    intervals_bg.append(self.container_helper["Default BG"]["Positions"])
                #
                if "auto-detection used" in self.container_helper["Default SIG"]["Times"]:
                    intervals_sig.append(container_interval["SIG"])
                else:
                    intervals_sig.append(self.container_helper["Default SIG"]["Positions"])
                #
                merged_intervals_bg = ES(variable=np.array(intervals_bg)).merge_times()
                merged_intervals_sig = ES(variable=np.array(intervals_sig)).merge_times()
                self.container_files["STD"][filename]["BG limits"] = merged_intervals_bg
                self.container_files["STD"][filename]["SIG limits"] = merged_intervals_sig
                #
                for key_01, value_01 in self.container_measurements["SELECTED"][filename].items():
                    if key_01 != "Time":
                        for key_02, value_02 in value_01.items():
                            for interval in merged_intervals_bg:
                                if key_01 == "RAW":
                                    value_02["BG"].extend(
                                        self.container_measurements["RAW"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                elif key_01 == "SMOOTHED":
                                    try:
                                        value_02["BG"].extend(
                                            self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    except:
                                        value_02["BG"].extend(np.ones(1000))
                            for interval in merged_intervals_sig:
                                if key_01 == "RAW":
                                    value_02["SIG"].extend(
                                        self.container_measurements["RAW"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                elif key_01 == "SMOOTHED":
                                    try:
                                        value_02["SIG"].extend(
                                            self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    except:
                                        value_02["SIG"].extend(np.ones(1000))
        #
        if self.fast_track_smpl == False or file_loaded == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                filename = file_smpl.split("/")[-1]
                df_data = self.load_and_assign_data(filename=file_smpl)
                times = df_data.iloc[:, 0]
                if self.container_helper["Default BG"]["Positions"] == [0, 0] \
                        and "auto-detection used" not in self.container_helper["Default BG"]["Times"] \
                        and "auto-detection used" not in self.container_helper["Default SIG"]["Times"]:
                    #
                    if 1 in self.container_helper["SMPL"][filename]["BG"]:
                        t_start = self.container_helper["SMPL"][filename]["BG"][1]["Times"][0]
                        t_end = self.container_helper["SMPL"][filename]["BG"][1]["Times"][1]
                        start_index = times[times == t_start].index[0]
                        end_index = times[times == t_end].index[0]
                        # start_index = times[times == self.container_helper["Default BG"]["Times"][0]].index[0]
                        # end_index = times[times == self.container_helper["Default BG"]["Times"][1]].index[0]
                        self.container_helper["Default BG"]["Positions"][0] = start_index
                        self.container_helper["Default BG"]["Positions"][1] = end_index
                        #
                        t_start = self.container_helper["SMPL"][filename]["SIG"][1]["Times"][0]
                        t_end = self.container_helper["SMPL"][filename]["SIG"][1]["Times"][1]
                        start_index = times[times == t_start].index[0]
                        end_index = times[times == t_end].index[0]
                        # start_index = times[times == self.container_helper["Default SIG"]["Times"][0]].index[0]
                        # end_index = times[times == self.container_helper["Default SIG"]["Times"][1]].index[0]
                        self.container_helper["Default SIG"]["Positions"][0] = start_index
                        self.container_helper["Default SIG"]["Positions"][1] = end_index
                #
                self.container_measurements["RAW"][filename] = {}
                self.container_measurements["EDITED"][filename] = {}
                self.container_measurements["SELECTED"][filename] = {}
                self.container_measurements["SELECTED"][filename]["RAW"] = {}
                self.container_measurements["SELECTED"][filename]["SMOOTHED"] = {}
                self.container_measurements["RAW"][filename]["Time"] = times.tolist()
                self.container_measurements["EDITED"][filename]["Time"] = times.tolist()
                self.container_measurements["SELECTED"][filename]["Time"] = times.tolist()
                #
                if "auto-detection used" in self.container_helper["Default BG"]["Times"]:
                    t_start = self.container_helper["SMPL"][filename]["BG"][1]["Times"][0]
                    t_end = self.container_helper["SMPL"][filename]["BG"][1]["Times"][1]
                    start_index = times[times == t_start].index[0]
                    end_index = times[times == t_end].index[0]
                    container_interval["BG"].extend([start_index, end_index])
                if "auto-detection used" in self.container_helper["Default SIG"]["Times"]:
                    t_start = self.container_helper["SMPL"][filename]["SIG"][1]["Times"][0]
                    t_end = self.container_helper["SMPL"][filename]["SIG"][1]["Times"][1]
                    start_index = times[times == t_start].index[0]
                    end_index = times[times == t_end].index[0]
                    container_interval["SIG"].extend([start_index, end_index])
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["RAW"][filename][isotope] = df_data[isotope].tolist()
                    self.container_measurements["EDITED"][filename][isotope] = {}
                    self.container_measurements["SELECTED"][filename]["RAW"][isotope] = {}
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope] = {}
                    #
                    self.container_measurements["EDITED"][filename][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename]["RAW"][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["BG"] = []
                    # Mineral Analysis
                    self.container_measurements["EDITED"][filename][isotope]["SIG"] = []
                    self.container_measurements["SELECTED"][filename]["RAW"][isotope]["SIG"] = []
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"] = []
                    self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"] = []
                #
                intervals_bg = []
                intervals_sig = []
                #
                if "auto-detection used" in self.container_helper["Default BG"]["Times"]:
                    intervals_bg.append(container_interval["BG"])
                else:
                    intervals_bg.append(self.container_helper["Default BG"]["Positions"])
                #
                if "auto-detection used" in self.container_helper["Default SIG"]["Times"]:
                    intervals_sig.append(container_interval["SIG"])
                else:
                    intervals_sig.append(self.container_helper["Default SIG"]["Positions"])
                #
                merged_intervals_bg = ES(variable=np.array(intervals_bg)).merge_times()
                merged_intervals_sig = ES(variable=np.array(intervals_sig)).merge_times()
                self.container_files["SMPL"][filename]["BG limits"] = merged_intervals_bg
                self.container_files["SMPL"][filename]["SIG limits"] = merged_intervals_sig
                #
                for key_01, value_01 in self.container_measurements["SELECTED"][filename].items():
                    if key_01 != "Time":
                        for key_02, value_02 in value_01.items():
                            for interval in merged_intervals_bg:
                                if key_01 == "RAW":
                                    value_02["BG"].extend(
                                        self.container_measurements["RAW"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                elif key_01 == "SMOOTHED":
                                    try:
                                        value_02["BG"].extend(
                                            self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    except:
                                        value_02["BG"].extend(np.ones(1000))
                            for interval in merged_intervals_sig:
                                if key_01 == "RAW":
                                    value_02["SIG"].extend(
                                        self.container_measurements["RAW"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                elif key_01 == "SMOOTHED":
                                    try:
                                        value_02["SIG"].extend(
                                            self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    except:
                                        value_02["SIG"].extend(np.ones(1000))
        #
        frm_item_std = self.gui_elements["ma_setting"]["Frame"]["Specific"][0].configure(background=self.sign_green)
        frm_item_smpl = self.gui_elements["ma_setting"]["Frame"]["Specific"][1].configure(background=self.sign_green)
    #
    def confirm_all_files(self, filetype, mode="MA"):
        if filetype == "STD":
            for file_std in self.container_lists["STD"]["Long"]:
                filename = file_std.split("/")[-1]
                #
                if self.container_helper["Default BG"]["Positions"] == [0, 0] \
                        or len(self.container_helper["STD"][filename]["BG"]) == 0:
                    df_data = self.load_and_assign_data(filename=file_std)
                    times = df_data.iloc[:, 0]
                    #
                    if self.autodetection_bg == False:
                        if self.container_helper["Default BG"]["Times"][0] != "Set start time":
                            t_start = min(times, key=lambda x: abs(x - self.container_helper["Default BG"]["Times"][0]))
                            t_end = min(times, key=lambda x: abs(x - self.container_helper["Default BG"]["Times"][1]))
                    else:
                        t_start = self.container_helper["STD"][filename]["BG"][1]["Times"][0]
                        t_end = self.container_helper["STD"][filename]["BG"][1]["Times"][1]
                    #
                    index_start = np.where(times == t_start)[0][0]
                    index_end = np.where(times == t_end)[0][0]
                    bg_id = 1
                    self.container_helper["Default BG"]["Positions"][0] = index_start
                    self.container_helper["Default BG"]["Positions"][1] = index_end
                    #
                    self.container_helper["STD"][filename]["BG"][bg_id] = {
                        "Times": [t_start, t_end],
                        "Positions": [index_start, index_end],
                        "Object": [None, None]}
                    #
                    if self.autodetection_bg == False:
                        if self.container_helper["Default SIG"]["Times"][0] != "Set start time":
                            t_start = min(times, key=lambda x: abs(x - self.container_helper["Default SIG"]["Times"][0]))
                            t_end = min(times, key=lambda x: abs(x - self.container_helper["Default SIG"]["Times"][1]))
                    else:
                        t_start = self.container_helper["STD"][filename]["SIG"][1]["Times"][0]
                        t_end = self.container_helper["STD"][filename]["SIG"][1]["Times"][1]
                    #
                    index_start = np.where(times == t_start)[0][0]
                    index_end = np.where(times == t_end)[0][0]
                    sig_id = 1
                    self.container_helper["Default SIG"]["Positions"][0] = index_start
                    self.container_helper["Default SIG"]["Positions"][1] = index_end
                    #
                    self.container_helper["STD"][filename]["SIG"][sig_id] = {
                        "Times": [t_start, t_end],
                        "Positions": [index_start, index_end],
                        "Object": [None, None]}
                #
                if "Selection" in self.container_spikes:
                    for isotope, values in self.container_spikes["Selection"][filename].items():
                        if len(values) > 0:
                            for index, value in values.items():
                                self.container_measurements["EDITED"][filename][
                                    isotope][index] = value
                #
                if mode == "MA":
                    intervals_bg = []
                    intervals_sig = []
                    #
                    for index, dataset in self.container_helper[filetype][filename]["BG"].items():
                        if type(dataset["Positions"]) == list:
                            intervals_bg.append(dataset["Positions"])
                    #
                    for index, dataset in self.container_helper[filetype][filename]["SIG"].items():
                        if type(dataset["Positions"]) == list:
                            intervals_sig.append(dataset["Positions"])
                    #
                    merged_intervals_bg = ES(variable=np.array(intervals_bg)).merge_times()
                    merged_intervals_sig = ES(variable=np.array(intervals_sig)).merge_times()
                    self.container_files[filetype][filename]["BG limits"] = merged_intervals_bg
                    self.container_files[filetype][filename]["SIG limits"] = merged_intervals_sig
                    #
                    for key_01, value_01 in self.container_measurements["SELECTED"][filename].items():
                        if key_01 != "Time":
                            for key_02, value_02 in value_01.items():
                                for interval in merged_intervals_bg:
                                    if key_01 == "RAW":
                                        value_02["BG"] = list(self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    elif key_01 == "SMOOTHED":
                                        if self.fast_track_std == True:
                                            var_key = "EDITED"
                                        else:
                                            var_key = "RAW"
                                        #
                                        try:
                                            value_02["BG"] = list(self.container_measurements[var_key][filename][key_02][
                                                interval[0]:interval[1] + 1])
                                        except:
                                            value_02["BG"].extend(list(np.ones(1000)))
                                for interval in merged_intervals_sig:
                                    if key_01 == "RAW":
                                        value_02["SIG"] = list(self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    elif key_01 == "SMOOTHED":
                                        if self.fast_track_std == True:
                                            var_key = "EDITED"
                                        else:
                                            var_key = "RAW"
                                        #
                                        try:
                                            value_02["SIG"] = list(self.container_measurements[var_key][filename][key_02][
                                                interval[0]:interval[1] + 1])
                                        except:
                                            value_02["SIG"].extend(list(np.ones(1000)))
                #
                self.container_var[filetype][file_std]["Frame"].config(bg=self.sign_green)
                #
                var_srm_file = self.container_files["STD"][filename]["SRM"].get()
                self.container_lists["STD"]["SRM"][filename] = var_srm_file
            #
        elif filetype == "SMPL":
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                filename = file_smpl.split("/")[-1]
                #
                if self.container_helper["Default BG"]["Positions"] == [0, 0]:
                    df_data = self.load_and_assign_data(filename=file_smpl)
                    times = df_data.iloc[:, 0]
                    #
                    t_start = min(times, key=lambda x: abs(x - self.container_helper["Default BG"]["Times"][0]))
                    t_end = min(times, key=lambda x: abs(x - self.container_helper["Default BG"]["Times"][1]))
                    index_start = np.where(times == t_start)[0][0]
                    index_end = np.where(times == t_end)[0][0]
                    bg_id = 1
                    self.container_helper["Default BG"]["Positions"][0] = index_start
                    self.container_helper["Default BG"]["Positions"][1] = index_end
                    #
                    self.container_helper["SMPL"][filename]["BG"][bg_id] = {
                        "Times": [t_start, t_end],
                        "Positions": [index_start, index_end],
                        "Object": [None, None]}
                    #
                    t_start = min(times, key=lambda x: abs(x - self.container_helper["Default SIG"]["Times"][0]))
                    t_end = min(times, key=lambda x: abs(x - self.container_helper["Default SIG"]["Times"][1]))
                    index_start = np.where(times == t_start)[0][0]
                    index_end = np.where(times == t_end)[0][0]
                    sig_id = 1
                    self.container_helper["Default SIG"]["Positions"][0] = index_start
                    self.container_helper["Default SIG"]["Positions"][1] = index_end
                    #
                    self.container_helper["SMPL"][filename]["SIG"][sig_id] = {
                        "Times": [t_start, t_end],
                        "Positions": [index_start, index_end],
                        "Object": [None, None]}
                #
                if "Selection" in self.container_spikes:
                    for isotope, values in self.container_spikes["Selection"][filename].items():
                        if len(values) > 0:
                            for index, value in values.items():
                                self.container_measurements["EDITED"][filename][
                                    isotope][index] = value
                #
                if mode == "MA":
                    intervals_bg = []
                    intervals_sig = []
                    #
                    for index, dataset in self.container_helper[filetype][filename]["BG"].items():
                        intervals_bg.append(list(dataset["Positions"]))
                    #
                    for index, dataset in self.container_helper[filetype][filename]["SIG"].items():
                        intervals_sig.append(list(dataset["Positions"]))
                    #
                    merged_intervals_bg = ES(variable=np.array(intervals_bg)).merge_times()
                    merged_intervals_sig = ES(variable=np.array(intervals_sig)).merge_times()
                    self.container_files[filetype][filename]["BG limits"] = merged_intervals_bg
                    self.container_files[filetype][filename]["SIG limits"] = merged_intervals_sig
                    #
                    for key_01, value_01 in self.container_measurements["SELECTED"][filename].items():
                        if key_01 != "Time":
                            for key_02, value_02 in value_01.items():
                                for interval in merged_intervals_bg:
                                    if key_01 == "RAW":
                                        value_02["BG"] = list(self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    elif key_01 == "SMOOTHED":
                                        if self.fast_track_smpl == True:
                                            var_key = "EDITED"
                                        else:
                                            var_key = "RAW"
                                        #
                                        try:
                                            value_02["BG"] = list(self.container_measurements[var_key][filename][key_02][
                                                interval[0]:interval[1] + 1])
                                        except:
                                            value_02["BG"].extend(list(np.ones(1000)))
                                for interval in merged_intervals_sig:
                                    if file_smpl == self.container_lists["SMPL"]["Long"][0]:
                                        df_data = self.load_and_assign_data(filename=file_smpl)
                                        times = df_data.iloc[:, 0]
                                        dataset = self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1]
                                    if key_01 == "RAW":
                                        value_02["SIG"] = list(self.container_measurements["RAW"][filename][key_02][
                                            interval[0]:interval[1] + 1])
                                    elif key_01 == "SMOOTHED":
                                        if self.fast_track_smpl == True:
                                            var_key = "EDITED"
                                        else:
                                            var_key = "RAW"
                                        #
                                        try:
                                            value_02["SIG"] = list(self.container_measurements[var_key][filename][key_02][
                                                interval[0]:interval[1] + 1])
                                        except:
                                            value_02["SIG"].extend(list(np.ones(1000)))
                #
                self.container_var[filetype][file_smpl]["Frame"].config(bg=self.sign_green)
                #
        #
        # for key01, value01 in self.container_measurements.items():
        #     print("key01:", key01)
        #     for key02, value02 in value01.items():
        #         print("key02:", key02)
        #         for key03, value03 in value02.items():
        #             print("key03_", key03)
        #             print(value03)
    #
    def update_significance_level(self, var_entry, event):
        self.container_var["settings"]["SE Alpha"].set(var_entry.get())
    #
    def spike_elimination_all(self, filetype, algorithm, mode="MA"):
        if algorithm == "Grubbs":
            if filetype == "STD":
                for filename_long in self.list_std:
                    parts = filename_long.split("/")
                    filename_short = parts[-1]
                    #
                    self.container_measurements["RAW"][filename_short] = {}
                    self.container_measurements["EDITED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX"] = \
                        self.diagrams_setup[filetype][filename_short][
                            "FIG"].add_subplot()
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX_RATIO"] = \
                            self.diagrams_setup[filetype][filename_short][
                                "FIG_RATIO"].add_subplot()
                    #
                    df_data = self.load_and_assign_data(filename=filename_long)
                    times = df_data.iloc[:, 0]
                    start_time = times.iloc[0]
                    end_time = times.iloc[-1]
                    start_index = times[times == start_time].index[0]
                    end_index = times[times == end_time].index[0]
                    spk_id = 1
                    #
                    box_spk = self.diagrams_setup[filetype][filename_short]["AX"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    box_spk_ratio = self.diagrams_setup[filetype][filename_short]["AX_RATIO"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    #
                    isotope = "".join(self.container_lists["ISOTOPES"])
                    #
                    self.container_measurements["RAW"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["EDITED"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["SELECTED"][filename_short]["Time"] = times.tolist()
                    #
                    # self.container_helper["limits SPK"][filename_long]["ID"].append(spk_id)
                    # self.container_helper["limits SPK"][filename_long]["type"].append("custom")
                    # self.container_helper["limits SPK"][filename_long]["info"].append([isotope, spk_id])
                    # self.container_helper["positions"]["SPK"][filename_short].append(
                    #     [round(start_time, 4), round(end_time, 4)])
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                        self.container_measurements["EDITED"][filename_short][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                        #
                        self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                        if mode == "MA":
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            #
                            var_settings = "ma_setting"
                        elif mode in ["FI", "MI"]:
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                            if mode == "FI":
                                var_settings = "fi_setting"
                            elif mode == "MI":
                                var_settings = "mi_setting"
                        #
                        self.spikes_isotopes["STD"][filename_short][isotope] = []
                        self.spikes_isotopes["STD"][filename_short][isotope].append([start_index, end_index])
                        # self.container_helper["STD"][filename_short]["SPK"][isotope] = {}
                        # self.container_helper["STD"][filename_short]["SPK"][isotope][spk_id] = {
                        #     "Times": [round(start_time, 4), round(end_time, 4)],
                        #     "Positions": [start_index, end_index],
                        #     "Object": [box_spk, box_spk_ratio]}
                    #
                self.do_spike_elimination_all_grubbs(filetype=filetype)
                self.fast_track_std = True
                self.counter_fast_track_std += 1
                self.container_var["Spike Elimination"]["STD"]["State"] = True
                #
                self.frm_09e.config(background=self.sign_green, bd=1)
                #
            elif filetype == "SMPL":
                for filename_long in self.list_smpl:
                    parts = filename_long.split("/")
                    filename_short = parts[-1]
                    #
                    self.container_measurements["RAW"][filename_short] = {}
                    self.container_measurements["EDITED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX"] = \
                            self.diagrams_setup[filetype][filename_short][
                                "FIG"].add_subplot()
                    #
                    if self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] == None:
                        self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] = Figure(
                            figsize=(10, 5), facecolor=self.green_light)
                        self.diagrams_setup[filetype][filename_short]["AX_RATIO"] = \
                            self.diagrams_setup[filetype][filename_short][
                                "FIG_RATIO"].add_subplot()
                    #
                    df_data = self.load_and_assign_data(filename=filename_long)
                    times = df_data.iloc[:, 0]
                    start_time = times.iloc[0]
                    end_time = times.iloc[-1]
                    start_index = times[times == start_time].index[0]
                    end_index = times[times == end_time].index[0]
                    spk_id = 1
                    #
                    box_spk = self.diagrams_setup[filetype][filename_short]["AX"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    box_spk_ratio = self.diagrams_setup[filetype][filename_short]["AX_RATIO"].axvspan(
                        start_time, end_time, alpha=0.125, color=self.yellow_dark)
                    #
                    isotope = "".join(self.container_lists["ISOTOPES"])
                    #
                    self.container_measurements["RAW"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["EDITED"][filename_short]["Time"] = times.tolist()
                    self.container_measurements["SELECTED"][filename_short]["Time"] = times.tolist()
                    #
                    # self.container_helper["limits SPK"][filename_long]["ID"].append(spk_id)
                    # self.container_helper["limits SPK"][filename_long]["type"].append("custom")
                    # self.container_helper["limits SPK"][filename_long]["info"].append([isotope, spk_id])
                    # self.container_helper["positions"]["SPK"][filename_short].append(
                    #     [round(start_time, 4), round(end_time, 4)])
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                        self.container_measurements["EDITED"][filename_short][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                        #
                        self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                        if mode == "MA":
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            #
                            var_settings = "ma_setting"
                        elif mode in ["FI", "MI"]:
                            self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                            self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope][
                                "INCL"] = []
                            self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope][
                                "INCL"] = []
                            if mode == "FI":
                                var_settings = "fi_setting"
                            elif mode == "MI":
                                var_settings = "mi_setting"
                        #
                        self.spikes_isotopes["SMPL"][filename_short][isotope] = []
                        self.spikes_isotopes["SMPL"][filename_short][isotope].append([start_index, end_index])
                        # self.container_helper["SMPL"][filename_short]["SPK"][isotope] = {}
                        # self.container_helper["SMPL"][filename_short]["SPK"][isotope][spk_id] = {
                        #     "Times": [round(start_time, 4), round(end_time, 4)],
                        #     "Positions": [start_index, end_index],
                        #     "Object": [box_spk, box_spk_ratio]}
                    #
                self.do_spike_elimination_all_grubbs(filetype=filetype)
                self.fast_track_smpl = True
                self.counter_fast_track_smpl += 1
                self.container_var["Spike Elimination"]["SMPL"]["State"] = True
                #
                if self.pysills_mode == "FI":
                    if self.container_var["fi_setting"]["Spike Elimination Inclusion"].get() == 1:
                        self.frm_09f.config(background=self.sign_green, bd=1)
                    elif self.container_var["fi_setting"]["Spike Elimination Inclusion"].get() == 2:
                        if len(self.container_helper["SMPL"][filename_short]["INCL"]["Content"]) == 0:
                            self.frm_09f.config(background=self.sign_yellow, bd=1)
                        else:
                            self.frm_09f.config(background=self.sign_green, bd=1)
    #
    def change_checkbox_state(self, var_cb, var_filetype, var_filename):
        self.container_files[var_filetype][var_filename]["CB ID"].set(var_cb.get())
    #
    def fast_track(self, filetype, mode="MA"):
        isotopes_spiked_list = [*self.container_lists["ISOTOPES"]]
        corrected_isotopes = []
        #
        if filetype == "STD":
            for file in self.list_std:
                parts = file.split("/")
                filename_short = parts[-1]
                #
                self.container_measurements["RAW"][filename_short] = {}
                self.container_measurements["EDITED"][filename_short] = {}
                self.container_measurements["SELECTED"][filename_short] = {}
                self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                #
                if self.diagrams_setup[filetype][filename_short]["FIG"] == None:
                    self.diagrams_setup[filetype][filename_short]["FIG"] = Figure(
                        figsize=(10, 5), facecolor=self.green_light)
                    self.diagrams_setup[filetype][filename_short]["AX"] = self.diagrams_setup[filetype][filename_short][
                        "FIG"].add_subplot()
                #
                if self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] == None:
                    self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] = Figure(
                        figsize=(10, 5), facecolor=self.green_light)
                    self.diagrams_setup[filetype][filename_short]["AX_RATIO"] = \
                    self.diagrams_setup[filetype][filename_short][
                        "FIG_RATIO"].add_subplot()
                #
                df_data = self.load_and_assign_data(filename=file)
                times = df_data.iloc[:, 0]
                start_time = times.iloc[0]
                end_time = times.iloc[-1]
                start_index = times[times == start_time].index[0]
                end_index = times[times == end_time].index[0]
                spk_id = 1
                #
                box_spk = self.diagrams_setup[filetype][filename_short]["AX"].axvspan(
                    start_time, end_time, alpha=0.125, color=self.yellow_dark)
                box_spk_ratio = self.diagrams_setup[filetype][filename_short]["AX_RATIO"].axvspan(
                    start_time, end_time, alpha=0.125, color=self.yellow_dark)
                #
                isotope = "".join(self.container_lists["ISOTOPES"])
                #
                self.container_measurements["RAW"][filename_short]["Time"] = times.tolist()
                self.container_measurements["EDITED"][filename_short]["Time"] = times.tolist()
                self.container_measurements["SELECTED"][filename_short]["Time"] = times.tolist()
                #
                self.container_helper["limits SPK"][file]["ID"].append(spk_id)
                self.container_helper["limits SPK"][file]["type"].append("custom")
                self.container_helper["limits SPK"][file]["info"].append([isotope, spk_id])
                self.container_helper["positions"]["SPK"][filename_short].append(
                    [round(start_time, 4), round(end_time, 4)])
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                    self.container_measurements["EDITED"][filename_short][isotope] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                    #
                    self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                    if mode == "MA":
                        self.container_measurements["EDITED"][filename_short][isotope]["SIG"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["SIG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["SIG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["SIG"] = []
                        var_settings = "settings"
                    elif mode in ["FI", "MI"]:
                        self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                        self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                        if mode == "FI":
                            var_settings = "fi_setting"
                        elif mode == "MI":
                            var_settings = "mi_setting"
                    #
                    self.spikes_isotopes["STD"][filename_short][isotope] = []
                    self.spikes_isotopes["STD"][filename_short][isotope].append([start_index, end_index])
                    self.container_helper["STD"][filename_short]["SPK"][isotope] = {}
                    self.container_helper["STD"][filename_short]["SPK"][isotope][spk_id] = {
                        "Times": [round(start_time, 4), round(end_time, 4)],
                        "Positions": [start_index, end_index],
                        "Object": [box_spk, box_spk_ratio]}
            #
            self.do_spike_elimination_all_grubbs(filetype=filetype)
            self.fast_track_std = True
            self.counter_fast_track_std += 1
        #
        elif filetype == "SMPL":
            for file in self.list_smpl:
                parts = file.split("/")
                filename_short = parts[-1]
                #
                self.container_measurements["RAW"][filename_short] = {}
                self.container_measurements["EDITED"][filename_short] = {}
                self.container_measurements["SELECTED"][filename_short] = {}
                self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                #
                if self.diagrams_setup[filetype][filename_short]["FIG"] == None:
                    self.diagrams_setup["SMPL"][filename_short]["FIG"] = Figure(
                        figsize=(10, 5), facecolor=self.green_light)
                    self.diagrams_setup["SMPL"][filename_short]["AX"] = self.diagrams_setup["SMPL"][filename_short][
                        "FIG"].add_subplot()
                #
                if self.diagrams_setup[filetype][filename_short]["FIG_RATIO"] == None:
                    self.diagrams_setup["SMPL"][filename_short]["FIG_RATIO"] = Figure(
                        figsize=(10, 5), facecolor=self.green_light)
                    self.diagrams_setup["SMPL"][filename_short]["AX_RATIO"] = self.diagrams_setup["SMPL"][
                        filename_short]["FIG_RATIO"].add_subplot()
                #
                df_data = self.load_and_assign_data(filename=file)
                times = df_data.iloc[:, 0]
                start_time = times.iloc[0]
                end_time = times.iloc[-1]
                start_index = times[times == start_time].index[0]
                end_index = times[times == end_time].index[0]
                spk_id = 1
                #
                box_spk = self.diagrams_setup["SMPL"][filename_short]["AX"].axvspan(
                    start_time, end_time, alpha=0.125, color=self.yellow_dark)
                box_spk_ratio = self.diagrams_setup["SMPL"][filename_short]["AX_RATIO"].axvspan(
                    start_time, end_time, alpha=0.125, color=self.yellow_dark)
                #
                isotope = "".join(self.container_lists["ISOTOPES"])
                #
                self.container_measurements["RAW"][filename_short]["Time"] = times.tolist()
                self.container_measurements["EDITED"][filename_short]["Time"] = times.tolist()
                self.container_measurements["SELECTED"][filename_short]["Time"] = times.tolist()
                #
                self.container_helper["limits SPK"][file]["ID"].append(spk_id)
                self.container_helper["limits SPK"][file]["type"].append("custom")
                self.container_helper["limits SPK"][file]["info"].append([isotope, spk_id])
                self.container_helper["positions"]["SPK"][filename_short].append(
                    [round(start_time, 4), round(end_time, 4)])
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                    self.container_measurements["EDITED"][filename_short][isotope] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                    #
                    self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                    if mode == "MA":
                        self.container_measurements["EDITED"][filename_short][isotope]["SIG"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["SIG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["SIG"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["SIG"] = []
                        var_settings="settings"
                    elif mode in ["FI", "MI"]:
                        self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                        self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
                        self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                        self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                        if mode == "FI":
                            var_settings = "fi_setting"
                        elif mode == "MI":
                            var_settings = "mi_setting"
                    #
                    self.spikes_isotopes["SMPL"][filename_short][isotope] = []
                    self.spikes_isotopes["SMPL"][filename_short][isotope].append([start_index, end_index])
                    self.container_helper["SMPL"][filename_short]["SPK"][isotope] = {}
                    self.container_helper["SMPL"][filename_short]["SPK"][isotope][spk_id] = {
                        "Times": [round(start_time, 4), round(end_time, 4)],
                        "Positions": [start_index, end_index],
                        "Object": [box_spk, box_spk_ratio]}
            #
            self.do_spike_elimination_all_grubbs(filetype=filetype)
            self.fast_track_smpl = True
            self.counter_fast_track_smpl += 1
    #
    def change_rb_file_statistics(self, var_rb):
        if var_rb.get() != self.last_rb_setup[self.filename_short].get():
            self.update_edited_datasets()
            #
            if var_rb.get() == 0:       # BACKGROUND
                results_file = MineralAnalysis(
                    container_measurements=self.container_measurements, container_lists=self.container_lists,
                    container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                    var_filetype=self.file_type, var_datatype="RAW",
                    var_is=self.container_var[self.file_type][self.file]["IS"].get(),
                    xi_std_time=self.xi_std_time).calculate_all_parameters_single(
                    filename=self.filename_short, data_section="BG")
                self.last_rb_setup[self.filename_short].set(0)
            #
            elif var_rb.get() == 1:     # SIGNAL
                results_file = MineralAnalysis(
                    container_measurements=self.container_measurements, container_lists=self.container_lists,
                    container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                    var_filetype=self.file_type, var_datatype="RAW",
                    var_is=self.container_var[self.file_type][self.file]["IS"].get(),
                    xi_std_time=self.xi_std_time).calculate_all_parameters_single(
                    filename=self.filename_short, data_section="SIG")
                self.last_rb_setup[self.filename_short].set(1)
            #
            elif var_rb.get() == 2:     # SIGNAL CORRECTED
                results_file = MineralAnalysis(
                    container_measurements=self.container_measurements, container_lists=self.container_lists,
                    container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                    var_filetype=self.file_type, var_datatype="RAW",
                    var_is=self.container_var[self.file_type][self.file]["IS"].get(),
                    xi_std_time=self.xi_std_time).calculate_all_parameters_single(
                    filename=self.filename_short, data_section="SIG CORR")
                self.last_rb_setup[self.filename_short].set(2)
            #
            categories = ["Intensity", "Intensity Ratio", "Sensitivity", "Concentration", "LOD"]
            subcategories = ["Mean"]
            #
            for category in categories:
                for subcategory in subcategories:
                    for isotope in self.container_lists["ISOTOPES"]:
                        try:
                            self.container_var["plotting"][category][subcategory][isotope].set(
                                round(results_file[category][isotope], 8))
                        except:
                            pass
    #
    def show_time_signal_diagram(self):
        #
        categories = ["Label", "Frame", "Entry", "Radiobutton"]
        for category in categories:
            if len(self.container_gui[self.filename_short][category]["Specific"]) > 0:
                for gui_item in self.container_gui[self.filename_short][category]["Specific"]:
                    gui_item.grid_remove()
        #
        try:
            self.canvas_ratio.get_tk_widget().grid_remove()
            self.toolbarFrame_ratio.grid_remove()
        except AttributeError:
            pass
        #
        try:
            self.canvas.get_tk_widget().grid()
            self.toolbarFrame.grid()
        except AttributeError:
            pass
    #
    def show_time_ratio_diagram(self):
        #
        categories = ["Label", "Frame", "Entry", "Radiobutton"]
        for category in categories:
            if len(self.container_gui[self.filename_short][category]["Specific"]) > 0:
                for gui_item in self.container_gui[self.filename_short][category]["Specific"]:
                    gui_item.grid_remove()
        #
        try:
            self.canvas.get_tk_widget().grid_remove()
            self.toolbarFrame.grid_remove()
        except AttributeError:
            pass
        #
        internal_standard = self.container_var[self.file_type][self.file]["IS"].get()
        intensity_raw_is = np.array(self.container_measurements["RAW"][self.filename_short][internal_standard])
        intensity_raw_is[intensity_raw_is == 0] = 0.001
        #
        if len(self.time_ratio_data[self.filename_short][internal_standard]) == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                intensity_raw_i = np.array(self.container_measurements["RAW"][self.filename_short][isotope])
                #
                value = intensity_raw_i/intensity_raw_is
                #
                self.time_ratio_data[self.filename_short][isotope].extend(value)
            #
            ratio_measurements = np.array(
                [[self.time_ratio_data[self.filename_short][isotope] for isotope in self.container_lists["ISOTOPES"]]])
            ratio_measurements = np.nan_to_num(ratio_measurements, copy=False, nan=0.0, posinf=1000.0, neginf=0.0)
            x_max = np.amax(self.times)
            y_max = np.amax(ratio_measurements)
            #
            for isotope in self.container_lists["ISOTOPES"]:
                ln = self.ax_ratio.plot(
                    self.times, self.time_ratio_data[self.filename_short][isotope], label=isotope,
                    color=self.isotope_colors[isotope], visible=True)
                self.lines["ratio"][isotope] = ln
                self.diagrams_setup[self.file_type][self.filename_short]["Time Ratio"][isotope] = ln
            self.ax_ratio.grid(True)
            self.ax_ratio.set_yscale("log")
            self.ax_ratio.set_xlim(left=0, right=x_max)
            self.ax_ratio.set_xticks(np.arange(0, x_max, 10))
            self.ax_ratio.set_ylim(top=1.1*y_max)
            self.ax_ratio.set_axisbelow(True)
            self.ax_ratio.set_xlabel("Time (s)", labelpad=0.5)
            self.ax_ratio.set_ylabel("Ratio I(i)/I(IS) (cps(i)/cps(IS))", labelpad=0.5)

            self.fig_ratio.subplots_adjust(bottom=0.125, top=0.975, left=0.075, right=0.975)

            plt.rcParams["savefig.facecolor"] = "white"
            plt.rcParams["savefig.dpi"] = 300

            self.canvas_ratio.get_tk_widget().grid(
                row=0, column=21, rowspan=26, columnspan=59, sticky="nesw")
            self.toolbarFrame_ratio = tk.Frame(master=self.parent)
            self.toolbarFrame_ratio.grid(
                row=26, column=21, rowspan=2, columnspan=59, sticky="w")
            self.toolbar_ratio = NavigationToolbar2Tk(self.canvas_ratio, self.toolbarFrame_ratio)
            self.toolbar_ratio.config(background=self.green_light)
            self.toolbar_ratio._message_label.config(background=self.green_light)
            self.toolbar_ratio.winfo_children()[-2].config(background=self.green_light)
            #
            self.container_files[self.file_type][self.filename_short]["Time Ratio Plot"] = [
                self.canvas_ratio, self.toolbarFrame_ratio]
            self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"] = self.canvas_ratio
            self.diagrams_setup[self.file_type][self.filename_short]["TOOLBARFRAME_RATIO"] = self.toolbarFrame_ratio
            #
            if self.container_settings["MA"]["Start BG"].get() != "" \
                    and len(self.container_helper[self.file_type][self.filename_short]["BG"]) == 1:
                x_nearest_start = min(self.times,
                                      key=lambda x: abs(x - float(self.container_settings["MA"]["Start BG"].get())))
                x_nearest_end = min(self.times,
                                    key=lambda x: abs(x - float(self.container_settings["MA"]["End BG"].get())))
            #
            if self.container_settings["MA"]["Start SIG"].get() != "" \
                    and len(self.container_helper[self.file_type][self.filename_short]["SIG"]) == 1:
                x_nearest_start = min(self.times,
                                      key=lambda x: abs(x - float(self.container_settings["MA"]["Start SIG"].get())))
                x_nearest_end = min(self.times,
                                    key=lambda x: abs(x - float(self.container_settings["MA"]["End SIG"].get())))
            #
            if self.file_type == "STD" and self.fast_track_std == True \
                    and self.container_listboxes[self.file_type][self.filename_short]["SPK"][0].size() == 1:
                x_nearest_start = float(
                    self.container_helper[self.file_type][self.filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1]["Times"][0])
                x_nearest_end = float(
                    self.container_helper[self.file_type][self.filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1]["Times"][1])
                # box_spk_ratio = self.ax_ratio.axvspan(
                #     x_nearest_start, x_nearest_end, alpha=0.125, color=self.yellow_dark)
                # #
                # spk_id = self.container_helper["limits SPK"][self.file]["ID"][-1]
                # self.container_helper["limits SPK Ratio"][self.file][str(spk_id)] = box_spk_ratio
            elif self.file_type == "SMPL" and self.fast_track_smpl == True \
                    and self.container_listboxes[self.file_type][self.filename_short]["SPK"][0].size() == 1:
                x_nearest_start = float(
                    self.container_helper[self.file_type][self.filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1]["Times"][0])
                x_nearest_end = float(
                    self.container_helper[self.file_type][self.filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1]["Times"][1])
                # box_spk_ratio = self.ax_ratio.axvspan(
                #     x_nearest_start, x_nearest_end, alpha=0.125, color=self.yellow_dark)
                # #
                # spk_id = self.container_helper["limits SPK"][self.file]["ID"][-1]
                # self.container_helper["limits SPK Ratio"][self.file][str(spk_id)] = box_spk_ratio
            #
            self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].draw()
            self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].mpl_connect(
                "button_press_event", lambda event, var=self.container_var["plotting"][self.filename_short]["RB"][0],
                                             filename=self.filename_short, ratio_mode=True:
                self.onclick(var, filename, ratio_mode, event))
            #
        else:
            #
            try:
                self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].get_tk_widget().grid()
                self.diagrams_setup[self.file_type][self.filename_short]["TOOLBARFRAME_RATIO"].grid()
                self.canvas_ratio = self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"]
                self.toolbarFrame_ratio = self.diagrams_setup[self.file_type][self.filename_short]["TOOLBARFRAME_RATIO"]
                #
                self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].mpl_connect(
                    "button_press_event",
                    lambda event, var=self.container_var["plotting"][self.filename_short]["RB"][0],
                           filename=self.filename_short, ratio_mode=True:
                    self.onclick(var, filename, ratio_mode, event))
                #
            except AttributeError:
                pass
        #
        #self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].draw()
        # self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].mpl_connect(
        #     "button_press_event", lambda event, var=self.container_var["plotting"][self.filename_short]["RB"][0],
        #                                  filename=self.filename_short, ratio_mode=True:
        #     self.onclick(var, filename, ratio_mode, event))

    #
    def sub_mineralanalysis_reduction(self):
        ## Cleaning
        categories = ["SRM", "ma_setting", "ma_dataexploration", "plotting", "PSE", "ma_datareduction_files"]
        for category in categories:
            if len(self.container_elements[category]["Label"]) > 0:
                for item in self.container_elements[category]["Label"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Button"]) > 0:
                for item in self.container_elements[category]["Button"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Option Menu"]) > 0:
                for item in self.container_elements[category]["Option Menu"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Entry"]) > 0:
                for item in self.container_elements[category]["Entry"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Frame"]) > 0:
                for item in self.container_elements[category]["Frame"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Radiobutton"]) > 0:
                for item in self.container_elements[category]["Radiobutton"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Checkbox"]) > 0:
                for item in self.container_elements[category]["Checkbox"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Listbox"]) > 0:
                for item in self.container_elements[category]["Listbox"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Radiobutton"]) > 0:
                for item in self.container_elements[category]["Radiobutton"]:
                    item.grid_remove()
        try:
            self.fig.clf()
            self.ax.cla()
            self.canvas.get_tk_widget().grid_remove()
            self.toolbarFrame.grid_remove()
        except AttributeError:
            pass
        try:
            if self.canvas:
                self.canvas.destroy()
            if self.toolbarFrame:
                self.toolbarFrame.destroy()
        except AttributeError:
            pass
        #
        categories = ["Label", "Entry", "Button", "Frame"]
        for category in categories:
            if len(self.gui_elements["ma_setting"][category]["Specific"]) > 0:
                for gui_item in self.gui_elements["ma_setting"][category]["Specific"]:
                    gui_item.grid_remove()
        #
        ## Reconstruction
        try:
            for lbl_item in self.container_elements["ma_datareduction"]["Label"]:
                lbl_item.grid()
            for btn_item in self.container_elements["ma_datareduction"]["Button"]:
                btn_item.grid()
            for optmen_item in self.container_elements["ma_datareduction"]["Option Menu"]:
                optmen_item.grid()
            for entr_item in self.container_elements["ma_datareduction"]["Entry"]:
                entr_item.grid()
            for entr_item in self.container_elements["ma_datareduction"]["Frame"]:
                entr_item.grid()
            for rb_item in self.container_elements["ma_datareduction"]["Radiobutton"]:
                rb_item.grid()
            #
        except:
            print("Error! Reconstruction 'Data Reduction' failed!")
        #
        subcategories_01 = ["Label", "Button", "Option Menu", "Entry", "Frame", "Radiobutton", "Checkbox", "Listbox"]
        subcategories_02 = ["General", "Specific"]
        #
        for subcategory_01 in subcategories_01:
            for subcategory_02 in subcategories_02:
                if len(self.gui_elements["ma_datareduction"][subcategory_01][subcategory_02]) > 0:
                    for gui_item in self.gui_elements["ma_datareduction"][subcategory_01][subcategory_02]:
                        gui_item.grid()
        #
        try:
            self.canvas_datareduction.get_tk_widget().grid()
            self.toolbarFrame_datareduction.grid()
        except:
            print("Reconstruction of diagram failed!")
        #
        self.container_lists["SRM"].clear()
        self.container_lists["IS"].clear()
        self.container_lists["ID"].clear()
        self.container_lists["ID Files"].clear()
        list_files = ["All Standard Files", "All Sample Files"]
        #
        for key, value in self.container_files["SRM"].items():
            if value.get() not in self.container_lists["SRM"] and value.get() in self.list_srm:
                self.container_lists["SRM"].append(value.get())
                self.fill_srm_values(var_srm=value.get())
        #
        for key, value in self.container_files["STD"].items():
            self.container_lists["IS"].append(value["IS"].get())
        for key, value in self.container_files["SMPL"].items():
            self.container_lists["IS"].append(value["IS"].get())
        self.container_lists["IS"] = list(dict.fromkeys(self.container_lists["IS"]))
        #
        for filename, item in self.container_files["SMPL"].items():
            if item["ID"].get() not in self.container_lists["ID"]:
                self.container_lists["ID"].append(item["ID"].get())
                self.container_lists["ID Files"][item["ID"].get()] = [filename]
                list_files.append(str(item["ID"].get()) + " Files")
            elif item["ID"].get() in self.container_lists["ID"] and item["ID"].get() in self.container_lists["ID Files"]:
                self.container_lists["ID Files"][item["ID"].get()].append(filename)
        #
        ## LABELS
        if len(self.container_elements["ma_datareduction"]["Label"]) == 0:
            lbl_01 = SE(
                parent=self.parent, row_id=0, column_id=21, n_rows=2, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_02 = SE(
                parent=self.parent, row_id=3, column_id=21, n_rows=2, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Data Selection", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_03 = SE(
                parent=self.parent, row_id=7, column_id=21, n_rows=2, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="File Selection", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_04 = SE(
                parent=self.parent, row_id=12, column_id=21, n_rows=2, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Results", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_05 = SE(
                parent=self.parent, row_id=0, column_id=31, n_rows=2, n_columns=3, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Isotope", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_elements["ma_datareduction"]["Label"]["General"].extend(
                [lbl_01, lbl_02, lbl_03, lbl_04, lbl_05])
            self.container_elements["ma_datareduction"]["Label"].extend(
                [lbl_01, lbl_02, lbl_03, lbl_04, lbl_05])
            #
            for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                ## LABELS
                lbl_isotope = SE(
                    parent=self.parent, row_id=2+index, column_id=31, n_rows=1, n_columns=3, fg=self.green_light,
                    bg=self.green_medium).create_simple_label(
                    text=isotope, relief=tk.GROOVE, fontsize="sans 10 bold")
                #
                self.container_elements["ma_datareduction"]["Label"].append(lbl_isotope)
                self.gui_elements["ma_datareduction"]["Label"]["General"].append(lbl_isotope)
            #
            ## RADIOBUTTONS
            rb_raw = SE(
                parent=self.parent, row_id=5, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.yellow_dark).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][0], value_rb=0, color_bg=self.green_medium,
                fg=self.green_light, text="RAW Data", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][0], init_routine=False:
                self.select_datareduction_datatype(var_rb, init_routine))
            rb_smoothed = SE(
                parent=self.parent, row_id=6, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.yellow_dark).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][0], value_rb=1, color_bg=self.green_medium,
                fg=self.green_light, text="SMOOTHED Data", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][0], init_routine=False:
                self.select_datareduction_datatype(var_rb, init_routine))
            rb_std = SE(
                parent=self.parent, row_id=9, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1], value_rb=0, color_bg=self.green_medium,
                fg=self.green_light, text="All Standard Files", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1], init_routine=False:
                self.select_datareduction_filetype(var_rb, init_routine))
            rb_smpl = SE(
                parent=self.parent, row_id=10, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1], value_rb=1, color_bg=self.green_medium,
                fg=self.green_light, text="All Sample Files", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1], init_routine=False:
                self.select_datareduction_filetype(var_rb, init_routine))
            rb_assemblage = SE(
                parent=self.parent, row_id=11, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1], value_rb=2, color_bg=self.green_medium,
                fg=self.green_light, text="Assemblage", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1], init_routine=False:
                self.select_datareduction_filetype(var_rb, init_routine))
            rb_results_concentration = SE(
                parent=self.parent, row_id=14, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2], value_rb=0, color_bg=self.green_medium,
                fg=self.green_light, text="Concentration", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2]:
                self.show_datareduction_tables(var_rb))
            rb_results_intensity = SE(
                parent=self.parent, row_id=15, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2], value_rb=1, color_bg=self.green_medium,
                fg=self.green_light, text="Intensity", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2]:
                self.show_datareduction_tables(var_rb))
            rb_results_sensitivity = SE(
                parent=self.parent, row_id=16, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2], value_rb=2, color_bg=self.green_medium,
                fg=self.green_light, text="Sensitivity", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2]:
                self.show_datareduction_tables(var_rb))
            #
            self.container_elements["ma_datareduction"]["Radiobutton"].extend(
                [rb_raw, rb_smoothed, rb_std, rb_smpl, rb_assemblage, rb_results_concentration, rb_results_intensity,
                 rb_results_sensitivity])
            #
            for index, srm in enumerate(self.container_lists["SRM"]):
                rb_srm = SE(
                    parent=self.parent, row_id=21 + index, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                    bg=self.yellow_dark).create_radiobutton(
                    var_rb=self.container_var["ma_datareduction"]["Radiobutton"][4], value_rb=index,
                    color_bg=self.green_medium, fg=self.green_light, text=srm, sticky="nesw", relief=tk.GROOVE)
                #
                self.container_elements["ma_datareduction"]["Radiobutton"].append(rb_srm)
            #
            ## OPTION MENUS
            self.container_var["ma_datareduction"]["Option IS"].set(self.container_lists["IS"][0])
            self.container_var["ma_datareduction"]["Option Drift"].set(self.container_lists["ISOTOPES"][0])
            #
            opt_menu_is = SE(
                parent=self.parent, row_id=2, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_option_isotope(
                var_iso=self.container_var["ma_datareduction"]["Option IS"], option_list=self.container_lists["IS"],
                text_set=self.container_lists["IS"][0], fg_active=self.green_dark, bg_active=self.red_dark)
            self.opt_menu_id = SE(
                parent=self.parent, row_id=11, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_simple_optionmenu(
                var_opt=self.container_var["ma_datareduction"]["Option ID"],
                var_default=self.container_var["ma_datareduction"]["Option ID"].get(),
                var_list=list(self.container_lists["ID Files"].keys()), fg_active=self.green_dark,
                bg_active=self.red_dark, command=lambda var_opt=self.container_var["ma_datareduction"]["Option ID"]:
                self.select_assemblage(var_opt))
            #
            self.container_elements["ma_datareduction"]["Option Menu"].extend([opt_menu_is, self.opt_menu_id])
            #
            ## BUTTONS
            btn_export = SE(
                parent=self.parent, row_id=17, column_id=21, n_rows=2, n_columns=9, fg=self.green_dark,
                bg=self.red_dark).create_simple_button(
                text="Export Calculation Report", bg_active=self.green_dark, fg_active=self.green_light,
                command=lambda file_type=self.container_var["ma_datareduction"]["Option ID"],
                               data_type=self.container_var["ma_datareduction"]["Radiobutton"][0].get():
                self.export_calculation_report(file_type, data_type))
            #
            self.container_elements["ma_datareduction"]["Button"].extend([btn_export])
            #
        else:
            self.opt_menu_id.destroy()
            #
            self.opt_menu_id = SE(
                parent=self.parent, row_id=11, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_simple_optionmenu(
                var_opt=self.container_var["ma_datareduction"]["Option ID"],
                var_default=self.container_var["ma_datareduction"]["Option ID"].get(),
                var_list=list(self.container_lists["ID Files"].keys()), fg_active=self.green_dark,
                bg_active=self.red_dark, command=lambda var_opt=self.container_var["ma_datareduction"]["Option ID"]:
                self.select_assemblage(var_opt))
            #
            self.container_elements["ma_datareduction"]["Option Menu"].extend([self.opt_menu_id])
            #
        #
        ## Initializing
        self.container_var["ma_datareduction"]["Radiobutton"][0].set(0) # RAW
        self.container_var["ma_datareduction"]["Radiobutton"][1].set(1) # SMPL
        self.container_var["ma_datareduction"]["Radiobutton"][2].set(0) # Concentration
        #
        self.select_datareduction_datatype(var_rb=self.container_var["ma_datareduction"]["Radiobutton"][0])
        self.select_datareduction_filetype(var_rb=self.container_var["ma_datareduction"]["Radiobutton"][1])
        #
        self.results_data = MineralAnalysis(
            container_measurements=self.container_measurements, container_lists=self.container_lists,
            container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
            var_filetype="SMPL", var_datatype="RAW",
            var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
            xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        self.results_data_std_raw = MineralAnalysis(
            container_measurements=self.container_measurements, container_lists=self.container_lists,
            container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
            var_filetype="STD", var_datatype="RAW",
            var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
            xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        self.results_data_std_smoothed = MineralAnalysis(
            container_measurements=self.container_measurements, container_lists=self.container_lists,
            container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
            var_filetype="STD", var_datatype="SMOOTHED",
            var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
            xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        self.results_data_smpl_raw = MineralAnalysis(
            container_measurements=self.container_measurements, container_lists=self.container_lists,
            container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
            var_filetype="SMPL", var_datatype="RAW",
            var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
            xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        self.results_data_smpl_smoothed = MineralAnalysis(
            container_measurements=self.container_measurements, container_lists=self.container_lists,
            container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
            var_filetype="SMPL", var_datatype="SMOOTHED",
            var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
            xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        self.show_datareduction_tables(var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2])
        #
    #
    def select_datareduction_datatype(self, var_rb, init_routine=True):
        #
        if self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 0:
            var_filetype = "STD"
        elif self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 1:
            var_filetype = "SMPL"
        #
        if var_rb.get() == 0:
            self.var_datatype = "RAW"
            #
        elif var_rb.get() == 1:
            self.var_datatype = "SMOOTHED"
        #
        if init_routine == False:
            #
            self.results_data = MineralAnalysis(
                container_measurements=self.container_measurements, container_lists=self.container_lists,
                container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                var_filetype=var_filetype, var_datatype=self.var_datatype,
                var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
                xi_std_time=self.xi_std_time).calculate_all_parameters()
            #
            self.show_datareduction_tables(var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2])
    #
    def select_datareduction_filetype(self, var_rb, init_routine=True):
        self.container_var["ma_datareduction"]["Option ID"].set("Select Assemblage")
        #
        if var_rb.get() == 0:   # Standard Files
            #
            ## CLEANING
            if len(self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"]) > 0:
                for rb_item in self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"]:
                    rb_item.grid_remove()
            #
            for index, file_std in enumerate(self.container_lists["STD"]["Short"]):
                rb_std_file = SE(
                    parent=self.parent, row_id=22 + len(self.container_lists["SRM"]) + index, column_id=21, n_rows=1,
                    n_columns=9, fg=self.green_dark, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["ma_datareduction"]["Radiobutton"][3], value_rb=index,
                    color_bg=self.green_medium,
                    fg=self.green_light, text=file_std, sticky="nesw", relief=tk.GROOVE)
                #
                self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"].append(rb_std_file)
            #
            rb_std_all = SE(
                parent=self.parent, row_id=23 + len(self.container_lists["SRM"]) + index, column_id=21, n_rows=1,
                n_columns=9, fg=self.green_dark, bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][3], value_rb=index + 1,
                color_bg=self.green_medium,
                fg=self.green_light, text="All Standard Files", sticky="nesw", relief=tk.GROOVE)
            #
            self.container_var["ma_datareduction"]["Radiobutton"][3].set(len(self.container_lists["STD"]["Short"]))
            #
            self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"].append(rb_std_all)
            #
            if self.container_var["ma_datareduction"]["Radiobutton"][0].get() == 0:
                var_datatype = "RAW"
            elif self.container_var["ma_datareduction"]["Radiobutton"][0].get() == 1:
                var_datatype = "SMOOTHED"
            #
            self.results_data = MineralAnalysis(
                container_measurements=self.container_measurements, container_lists=self.container_lists,
                container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                var_filetype="STD", var_datatype=var_datatype,
                var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
                xi_std_time=self.xi_std_time).calculate_all_parameters()
            #
        elif var_rb.get() == 1: # Sample Files
            #
            ## CLEANING
            if len(self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"]) > 0:
                for rb_item in self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"]:
                    rb_item.grid_remove()
            #
            for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
                rb_smpl_file = SE(
                    parent=self.parent, row_id=22 + len(self.container_lists["SRM"]) + index, column_id=21, n_rows=1,
                    n_columns=9, fg=self.green_dark, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["ma_datareduction"]["Radiobutton"][3], value_rb=index,
                    color_bg=self.green_medium,
                    fg=self.green_light, text=file_smpl, sticky="nesw", relief=tk.GROOVE)
                #
                self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"].append(rb_smpl_file)
            #
            rb_smpl_all = SE(
                parent=self.parent, row_id=23 + len(self.container_lists["SRM"]) + index, column_id=21, n_rows=1,
                n_columns=9, fg=self.green_dark, bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["ma_datareduction"]["Radiobutton"][3], value_rb=index + 1,
                color_bg=self.green_medium,
                fg=self.green_light, text="All Sample Files", sticky="nesw", relief=tk.GROOVE)
            #
            self.container_var["ma_datareduction"]["Radiobutton"][3].set(len(self.container_lists["SMPL"]["Short"]))
            #
            self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"].append(rb_smpl_all)
        #
        if init_routine == False:
            #
            if self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 0:
                var_filetype = "STD"
            elif self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 1:
                var_filetype = "SMPL"
            if self.container_var["ma_datareduction"]["Radiobutton"][0].get() == 0:
                var_datatype = "RAW"
            elif self.container_var["ma_datareduction"]["Radiobutton"][0].get() == 1:
                var_datatype = "SMOOTHED"
            #
            self.results_data = MineralAnalysis(
                container_measurements=self.container_measurements, container_lists=self.container_lists,
                container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                var_filetype=var_filetype, var_datatype=var_datatype,
                var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
                xi_std_time=self.xi_std_time).calculate_all_parameters()
            #
            self.show_datareduction_tables(var_rb=self.container_var["ma_datareduction"]["Radiobutton"][2])
    #
    def select_assemblage(self, var_opt):
        self.list_assemblage = {}
        #
        if len(self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"]) > 0:
            for rb_item in self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"]:
                rb_item.grid_remove()
        #
        var_id = self.container_var["ma_datareduction"]["Option ID"].get()
        self.list_assemblage[var_id] = []
        self.container_var["ma_datareduction"]["Radiobutton"][1].set(2)
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Long"]):
            if var_id == self.container_var["SMPL"][file_smpl]["ID"].get():
                parts = file_smpl.split("/")
                filename_short = parts[-1]
                self.list_assemblage[var_id].append(filename_short)
                #
                rb_smpl_file = SE(
                    parent=self.parent, row_id=22 + len(self.container_lists["SRM"]) + index, column_id=21, n_rows=1,
                    n_columns=9, fg=self.green_dark, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["ma_datareduction"]["Radiobutton"][3], value_rb=index,
                    color_bg=self.green_medium,
                    fg=self.green_light, text=filename_short, sticky="nesw", relief=tk.GROOVE)
                #
                self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"].append(rb_smpl_file)
        #
        rb_assemblage_all = SE(
            parent=self.parent, row_id=23 + len(self.container_lists["SRM"]) + index, column_id=21, n_rows=1,
            n_columns=9, fg=self.green_dark, bg=self.green_medium).create_radiobutton(
            var_rb=self.container_var["ma_datareduction"]["Radiobutton"][3], value_rb=index + 1,
            color_bg=self.green_medium, fg=self.green_light, text=var_id + str(" Files"), sticky="nesw",
            relief=tk.GROOVE)
        #
        self.gui_elements["ma_datareduction"]["Radiobutton"]["Specific"].append(rb_assemblage_all)
        #
    #
    def show_datareduction_tables(self, var_rb):
        #
        ## CLEANING
        try:
            self.canvas_drift.get_tk_widget().grid_remove()
            self.toolbarFrame_drift.grid_remove()
        except AttributeError:
            pass
        #
        if var_rb.get() == 0:   # Concentration
            ## CLEANING
            if len(self.gui_elements["ma_datareduction"]["Label"]["Specific"]) > 0:
                for lb_item in self.gui_elements["ma_datareduction"]["Label"]["Specific"]:
                    lb_item.grid_remove()
            if len(self.gui_elements["ma_datareduction"]["Entry"]["Specific"]) > 0:
                for entr_item in self.gui_elements["ma_datareduction"]["Entry"]["Specific"]:
                    entr_item.grid_remove()
            #
            ## LABELS
            lbl_concentration = SE(
                parent=self.parent, row_id=0, column_id=34, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Concentration C(i)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_concentration_mean = SE(
                parent=self.parent, row_id=1, column_id=34, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_concentration_error = SE(
                parent=self.parent, row_id=1, column_id=40, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_concentration_ratio = SE(
                parent=self.parent, row_id=0, column_id=46, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Concentration Ratio C(i)/C(IS)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_concentration_ratio_mean = SE(
                parent=self.parent, row_id=1, column_id=46, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_concentration_ratio_error = SE(
                parent=self.parent, row_id=1, column_id=52, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_lod = SE(
                parent=self.parent, row_id=0, column_id=58, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Limit of Detection LoD(i)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_lod_mean = SE(
                parent=self.parent, row_id=1, column_id=58, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_lod_error = SE(
                parent=self.parent, row_id=1, column_id=64, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_elements["ma_datareduction"]["Label"]["Specific"].extend(
                [lbl_concentration, lbl_concentration_mean, lbl_concentration_error, lbl_concentration_ratio,
                 lbl_concentration_ratio_mean, lbl_concentration_ratio_error, lbl_lod, lbl_lod_mean, lbl_lod_error])
            #
            ## ENTRIES
            list_std = ["All Standard Files"]
            list_smpl = ["All Sample Files"]
            list_assemblage = [self.container_var["ma_datareduction"]["Option ID"].get()+str(" Files")]
            if self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 0:
                list_std.extend(self.container_lists["STD"]["Short"])
            elif self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 1:
                list_smpl.extend(self.container_lists["SMPL"]["Short"])
            elif self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 2:
                list_assemblage.extend(
                    self.container_lists["ID Files"][self.container_var["ma_datareduction"]["Option ID"].get()])
            #
            categories = ["Concentration", "Concentration Ratio", "LOD"]
            subcategories = ["Mean", "Error"]
            for index_category, category in enumerate(categories):
                self.container_var["ma_datareduction"][category] = {}
                for index_subcategory, subcategory in enumerate(subcategories):
                    self.container_var["ma_datareduction"][category][subcategory] = {}
                    for index_isotope, isotope in enumerate(self.container_lists["ISOTOPES"]):
                        self.container_var["ma_datareduction"][category][subcategory][isotope] = tk.StringVar()
                        #
                        entr = SE(
                            parent=self.parent, row_id=2 + index_isotope,
                            column_id=34 + index_category*12 + index_subcategory*6, n_rows=1, n_columns=6,
                            fg=self.green_light, bg=self.green_dark).create_simple_entry(
                            var=self.container_var["ma_datareduction"][category][subcategory][isotope],
                            text_default="0.0")
                        #
                        self.gui_elements["ma_datareduction"]["Entry"]["Specific"].append(entr)
        #
        elif var_rb.get() == 1: # Intensity
            ## CLEANING
            if len(self.gui_elements["ma_datareduction"]["Label"]["Specific"]) > 0:
                for lb_item in self.gui_elements["ma_datareduction"]["Label"]["Specific"]:
                    lb_item.grid_remove()
            if len(self.gui_elements["ma_datareduction"]["Entry"]["Specific"]) > 0:
                for entr_item in self.gui_elements["ma_datareduction"]["Entry"]["Specific"]:
                    entr_item.grid_remove()
            #
            lbl_intensity = SE(
                parent=self.parent, row_id=0, column_id=34, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Intensity I(i)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_mean = SE(
                parent=self.parent, row_id=1, column_id=34, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_error = SE(
                parent=self.parent, row_id=1, column_id=40, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_ratio = SE(
                parent=self.parent, row_id=0, column_id=46, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Intensity Ratio I(i)/I(IS)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_ratio_mean = SE(
                parent=self.parent, row_id=1, column_id=46, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_ratio_error = SE(
                parent=self.parent, row_id=1, column_id=52, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_bg = SE(
                parent=self.parent, row_id=0, column_id=58, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Intensity Background I(i,BG)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_bg_mean = SE(
                parent=self.parent, row_id=1, column_id=58, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_intensity_bg_error = SE(
                parent=self.parent, row_id=1, column_id=64, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_elements["ma_datareduction"]["Label"]["Specific"].extend(
                [lbl_intensity, lbl_intensity_mean, lbl_intensity_error, lbl_intensity_ratio, lbl_intensity_ratio_mean,
                 lbl_intensity_ratio_error, lbl_intensity_bg, lbl_intensity_bg_mean, lbl_intensity_bg_error])
            #
            ## ENTRIES
            categories = ["Intensity", "Intensity Ratio", "Intensity BG"]
            subcategories = ["Mean", "Error"]
            for index_category, category in enumerate(categories):
                self.container_var["ma_datareduction"][category] = {}
                for index_subcategory, subcategory in enumerate(subcategories):
                    self.container_var["ma_datareduction"][category][subcategory] = {}
                    for index_isotope, isotope in enumerate(self.container_lists["ISOTOPES"]):
                        self.container_var["ma_datareduction"][category][subcategory][isotope] = tk.StringVar()
                        #
                        entr = SE(
                            parent=self.parent, row_id=2 + index_isotope,
                            column_id=34 + index_category * 12 + index_subcategory * 6, n_rows=1, n_columns=6,
                            fg=self.green_light, bg=self.green_dark).create_simple_entry(
                            var=self.container_var["ma_datareduction"][category][subcategory][isotope],
                            text_default="0.0")
                        #
                        self.gui_elements["ma_datareduction"]["Entry"]["Specific"].append(entr)
        #
        elif var_rb.get() == 2: # Sensitivity
            ## CLEANING
            if len(self.gui_elements["ma_datareduction"]["Label"]["Specific"]) > 0:
                for lb_item in self.gui_elements["ma_datareduction"]["Label"]["Specific"]:
                    lb_item.grid_remove()
            if len(self.gui_elements["ma_datareduction"]["Entry"]["Specific"]) > 0:
                for entr_item in self.gui_elements["ma_datareduction"]["Entry"]["Specific"]:
                    entr_item.grid_remove()
            #
            lbl_sensitivity = SE(
                parent=self.parent, row_id=0, column_id=34, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Analytical Sensitivity \u03BE(i)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_sensitivity_mean = SE(
                parent=self.parent, row_id=1, column_id=34, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_sensitivity_error = SE(
                parent=self.parent, row_id=1, column_id=40, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_rsf = SE(
                parent=self.parent, row_id=0, column_id=46, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Relative Sensitivity Factor RSF(i)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_rsf_mean = SE(
                parent=self.parent, row_id=1, column_id=46, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_rsf_error = SE(
                parent=self.parent, row_id=1, column_id=52, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_s = SE(
                parent=self.parent, row_id=0, column_id=58, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Normalized Sensitivity S(i)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_s_mean = SE(
                parent=self.parent, row_id=1, column_id=58, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Mean \u03BC", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_s_error = SE(
                parent=self.parent, row_id=1, column_id=64, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Error \u03C3", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_elements["ma_datareduction"]["Label"]["Specific"].extend(
                [lbl_sensitivity, lbl_sensitivity_mean, lbl_sensitivity_error, lbl_rsf, lbl_rsf_mean, lbl_rsf_error,
                 lbl_s, lbl_s_mean, lbl_s_error])
            #
            ## ENTRIES
            categories = ["Sensitivity", "RSF", "Normalized Sensitivity"]
            subcategories = ["Mean", "Error"]
            for index_category, category in enumerate(categories):
                self.container_var["ma_datareduction"][category] = {}
                for index_subcategory, subcategory in enumerate(subcategories):
                    self.container_var["ma_datareduction"][category][subcategory] = {}
                    for index_isotope, isotope in enumerate(self.container_lists["ISOTOPES"]):
                        self.container_var["ma_datareduction"][category][subcategory][isotope] = tk.StringVar()
                        #
                        entr = SE(
                            parent=self.parent, row_id=2 + index_isotope,
                            column_id=34 + index_category * 12 + index_subcategory * 6, n_rows=1, n_columns=6,
                            fg=self.green_light, bg=self.green_dark).create_simple_entry(
                            var=self.container_var["ma_datareduction"][category][subcategory][isotope],
                            text_default="0.0")
                        #
                        self.gui_elements["ma_datareduction"]["Entry"]["Specific"].append(entr)
        #
        opt_menu_drift = SE(
            parent=self.parent, row_id=20, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_option_isotope(
            var_iso=self.container_var["ma_datareduction"]["Option Drift"],
            option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_var["ma_datareduction"]["Option Drift"].get(), fg_active=self.green_dark,
            bg_active=self.red_dark)
        #
        self.container_elements["ma_datareduction"]["Option Menu"].append(opt_menu_drift)
        #
        self.fill_tables()
    #
    def fill_tables(self):
        n_digits_intensity = self.container_var["General Settings"]["Accuracy Intensity"].get()
        n_digits_sensitivity = self.container_var["General Settings"]["Accuracy Sensitivity"].get()
        n_digits_concentration = self.container_var["General Settings"]["Accuracy Concentration"].get()
        n_digits_concentration_ratio = 2*n_digits_concentration
        n_digits_rsf = n_digits_sensitivity
        n_digits_lod = n_digits_rsf
        n_digits_s = n_digits_sensitivity
        #
        var_category = self.container_var["ma_datareduction"]["Radiobutton"][2].get()
        var_file = self.container_var["ma_datareduction"]["Radiobutton"][3].get()
        var_is = self.container_var["ma_datareduction"]["Option IS"].get()
        var_filetype = self.container_var["ma_datareduction"]["Radiobutton"][1].get()   # STD vs. SMPL
        if var_filetype == 0:
            var_filetype_key = "STD"
        elif var_filetype == 1 or self.container_var["ma_datareduction"]["Option ID"].get() != "Select Assemblage":
            var_filetype_key = "SMPL"
        var_datatype = self.container_var["ma_datareduction"]["Radiobutton"][0].get()   # RAW vs. SMOOTHED
        if var_datatype == 0:
            var_datatype_key = "RAW"
        elif var_datatype == 1:
            var_datatype_key = "SMOOTHED"
        #
        self.results_data = MineralAnalysis(
            container_measurements=self.container_measurements, container_lists=self.container_lists,
            container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
            var_filetype=var_filetype_key, var_datatype=var_datatype_key,
            var_is=self.container_var["ma_datareduction"]["Option IS"].get(),
            xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        # for key, value in self.results_data["LOD"].items():
        #     print(key, value)
        #
        list_srm_order = np.array(list(self.container_lists["STD"]["SRM"].values()))
        #
        if var_category == 0:   # Concentration
            for isotope in self.container_lists["ISOTOPES"]:
                var_srm_i = self.container_files["SRM"][isotope].get()
                indices_srm = np.where(list_srm_order == var_srm_i)[0]
                #
                if var_file < len(self.results_data["concentration"][isotope]):
                    concentration_i_mean = self.results_data["concentration"][isotope][var_file]
                    concentration_i_error = 0.0
                else:
                    concentration_i_mean = np.nanmean(
                        self.results_data["concentration"][isotope][indices_srm[0]:indices_srm[-1] + 1])
                    concentration_i_error = np.nanstd(
                        self.results_data["concentration"][isotope][indices_srm[0]:indices_srm[-1] + 1], ddof=1)
                    #
                    if math.isnan(concentration_i_mean) == True:
                        concentration_i_mean = 0.0
                        concentration_i_error = 0.0
                #
                if var_file < len(self.results_data["concentration"][isotope]):
                    concentration_ratio_i_mean = self.results_data["concentration"][isotope][var_file]/\
                                                 self.results_data["concentration"][var_is][var_file]
                    concentration_ratio_i_error = 0.0
                else:
                    if concentration_i_mean > 0:
                        concentration_ratio_i_mean = np.nanmean(
                            np.array(self.results_data["concentration"][isotope][indices_srm[0]:indices_srm[-1] + 1])/np.array(
                                self.results_data["concentration"][var_is][indices_srm[0]:indices_srm[-1] + 1]))
                        concentration_ratio_i_error = np.nanstd(
                            np.array(self.results_data["concentration"][isotope][indices_srm[0]:indices_srm[-1] + 1])/np.array(
                                self.results_data["concentration"][var_is][indices_srm[0]:indices_srm[-1] + 1]), ddof=1)
                    else:
                        concentration_ratio_i_mean = 0.0
                        concentration_ratio_i_error = 0.0
                #
                if var_file < len(self.results_data["LOD"][isotope]):
                    lod_i_mean = self.results_data["LOD"][isotope][var_file]
                    lod_i_error = 0.0
                else:
                    lod_i_mean = np.nanmean(
                        self.results_data["LOD"][isotope][indices_srm[0]:indices_srm[-1] + 1])
                    lod_i_error = np.nanstd(
                        self.results_data["LOD"][isotope][indices_srm[0]:indices_srm[-1] + 1], ddof=1)
                #
                ## Concentration
                self.container_var["ma_datareduction"]["Concentration"]["Mean"][isotope].set(
                    round(concentration_i_mean, n_digits_concentration))
                self.container_var["ma_datareduction"]["Concentration"]["Error"][isotope].set(
                    round(concentration_i_error, n_digits_concentration))
                ## Concentration Ratio
                self.container_var["ma_datareduction"]["Concentration Ratio"]["Mean"][isotope].set(
                    f"{concentration_ratio_i_mean:.{n_digits_concentration}E}")
                self.container_var["ma_datareduction"]["Concentration Ratio"]["Error"][isotope].set(
                    f"{concentration_ratio_i_error:.{n_digits_concentration}E}")
                ## Limit of Detection
                self.container_var["ma_datareduction"]["LOD"]["Mean"][isotope].set(
                    round(lod_i_mean, n_digits_lod))
                self.container_var["ma_datareduction"]["LOD"]["Error"][isotope].set(
                    round(lod_i_error, n_digits_lod))
        #
        elif var_category == 1: # Intensity
            for isotope in self.container_lists["ISOTOPES"]:
                if var_filetype == 0:
                    if var_file < len(self.results_data["intensity"]["STD"]["SIGNAL CORRECTED"][isotope]):
                        intensity_i_mean = self.results_data["intensity"]["STD"]["SIGNAL CORRECTED"][isotope][var_file]
                        intensity_i_error = 0.0
                    else:
                        intensity_i_mean = np.nanmean(self.results_data["intensity"]["STD"]["SIGNAL CORRECTED"][isotope])
                        intensity_i_error = np.nanstd(self.results_data["intensity"]["STD"]["SIGNAL CORRECTED"][isotope],
                                                   ddof=1)
                    #
                    if var_file < len(self.results_data["intensity"]["STD"]["BACKGROUND"][isotope]):
                        intensity_bg_i_mean = self.results_data["intensity"]["STD"]["BACKGROUND"][isotope][var_file]
                        intensity_bg_i_error = 0.0
                    else:
                        intensity_bg_i_mean = np.nanmean(self.results_data["intensity"]["STD"]["BACKGROUND"][isotope])
                        intensity_bg_i_error = np.nanstd(self.results_data["intensity"]["STD"]["BACKGROUND"][isotope],
                                                   ddof=1)
                    #
                    if var_file < len(self.results_data["intensity"]["STD"]["SIGNAL CORRECTED"][isotope]):
                        intensity_ratio_i_mean = self.results_data["intensity ratio"]["SIGNAL CORRECTED"][
                            isotope][var_file]
                        intensity_ratio_i_error = 0.0
                    else:
                        intensity_ratio_i_mean = np.nanmean(
                            self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope])
                        intensity_ratio_i_error = np.nanstd(
                            self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope], ddof=1)
                else:
                    if var_file < len(self.results_data["intensity"]["SMPL"]["SIGNAL CORRECTED"][isotope]):
                        intensity_i_mean = self.results_data["intensity"]["SMPL"]["SIGNAL CORRECTED"][isotope][var_file]
                        intensity_i_error = 0.0
                    else:
                        intensity_i_mean = np.nanmean(self.results_data["intensity"]["SMPL"]["SIGNAL CORRECTED"][isotope])
                        intensity_i_error = np.nanstd(self.results_data["intensity"]["SMPL"]["SIGNAL CORRECTED"][isotope],
                                                   ddof=1)
                    #
                    if var_file < len(self.results_data["intensity"]["SMPL"]["BACKGROUND"][isotope]):
                        intensity_bg_i_mean = self.results_data["intensity"]["SMPL"]["BACKGROUND"][isotope][var_file]
                        intensity_bg_i_error = 0.0
                    else:
                        intensity_bg_i_mean = np.nanmean(self.results_data["intensity"]["SMPL"]["BACKGROUND"][isotope])
                        intensity_bg_i_error = np.nanstd(self.results_data["intensity"]["SMPL"]["BACKGROUND"][isotope],
                                                      ddof=1)
                    #
                    if var_file < len(self.results_data["intensity"]["SMPL"]["SIGNAL CORRECTED"][isotope]):
                        intensity_ratio_i_mean = self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope][
                            var_file]
                        intensity_ratio_i_error = 0.0
                    else:
                        intensity_ratio_i_mean = np.nanmean(
                            self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope])
                        intensity_ratio_i_error = np.nanstd(
                            self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope], ddof=1)
                #
                ## Intensity Signal Corrected
                self.container_var["ma_datareduction"]["Intensity"]["Mean"][isotope].set(
                    round(intensity_i_mean, n_digits_intensity))
                self.container_var["ma_datareduction"]["Intensity"]["Error"][isotope].set(
                    round(intensity_i_error, n_digits_intensity))
                ## Intensity Ratio
                self.container_var["ma_datareduction"]["Intensity Ratio"]["Mean"][isotope].set(
                    f"{intensity_ratio_i_mean:.{n_digits_intensity}E}")
                self.container_var["ma_datareduction"]["Intensity Ratio"]["Error"][isotope].set(
                    f"{intensity_ratio_i_error:.2E}")
                ## Intensity Background
                self.container_var["ma_datareduction"]["Intensity BG"]["Mean"][isotope].set(
                    round(intensity_bg_i_mean, n_digits_intensity))
                self.container_var["ma_datareduction"]["Intensity BG"]["Error"][isotope].set(
                    round(intensity_bg_i_error, n_digits_intensity))
                #
        elif var_category == 2: # Sensitivity
            for isotope in self.container_lists["ISOTOPES"]:
                if var_file < len(self.results_data["sensitivity"][isotope]):
                    sensitivity_i_mean = self.results_data["sensitivity"][isotope][var_file]
                    sensitivity_i_error = 0.0
                else:
                    sensitivity_i_mean = np.nanmean(self.results_data["sensitivity"][isotope])
                    sensitivity_i_error = np.nanstd(self.results_data["sensitivity"][isotope], ddof=1)
                #
                if var_file < len(self.results_data["RSF"][isotope]):
                    rsf_i_mean = self.results_data["RSF"][isotope][var_file]
                    rsf_i_error = 0.0
                else:
                    rsf_i_mean = np.nanmean(self.results_data["RSF"][isotope])
                    rsf_i_error = np.nanstd(self.results_data["RSF"][isotope], ddof=1)
                #
                if var_file < len(self.results_data["sensitivity normalized"][isotope]):
                    s_i_mean = self.results_data["sensitivity normalized"][isotope][var_file]
                    s_i_error = 0.0
                else:
                    s_i_mean = np.nanmean(self.results_data["sensitivity normalized"][isotope])
                    s_i_error = np.nanstd(self.results_data["sensitivity normalized"][isotope], ddof=1)
                #
                ## Sensitivity
                self.container_var["ma_datareduction"]["Sensitivity"]["Mean"][isotope].set(
                    round(sensitivity_i_mean, n_digits_sensitivity))
                self.container_var["ma_datareduction"]["Sensitivity"]["Error"][isotope].set(
                    round(sensitivity_i_error, n_digits_sensitivity))
                ## Relative Sensitivity Factor
                self.container_var["ma_datareduction"]["RSF"]["Mean"][isotope].set(
                    round(rsf_i_mean, n_digits_rsf))
                self.container_var["ma_datareduction"]["RSF"]["Error"][isotope].set(
                    round(rsf_i_error, n_digits_rsf))
                ## Normalized Sensitivity
                self.container_var["ma_datareduction"]["Normalized Sensitivity"]["Mean"][isotope].set(
                    round(s_i_mean, n_digits_s))
                self.container_var["ma_datareduction"]["Normalized Sensitivity"]["Error"][isotope].set(
                    round(s_i_error, n_digits_s))
        #
        # if var_filetype == 0:
        #     self.datareduction(filetype="All Standard Files")
        # elif var_filetype == 1:
        #     self.datareduction(filetype="All Sample Files")
        #
        self.show_datareduction_diagram(var_category=var_category)
    #
    def show_datareduction_diagram(self, var_category):
        #
        ## CLEANING
        try:
            self.fig_datareduction.clf()
            self.ax_datareduction.cla()
            self.canvas_datareduction.get_tk_widget().grid_remove()
            self.toolbarFrame_datareduction.grid_remove()
        except AttributeError:
            pass
        #
        ## DIAGRAM
        self.fig_datareduction, self.ax_datareduction = plt.subplots(
            ncols=1, nrows=2, dpi=100, facecolor=self.green_light)
        #
        x_data_bar = self.container_lists["ISOTOPES"]
        y_data_bar = []
        var_is = self.container_var["ma_datareduction"]["Option IS"].get()
        var_isotope = self.container_var["ma_datareduction"]["Option Drift"].get()
        #
        if var_category == 0:   # Concentration
            for isotope in x_data_bar:
                y_data_bar.append(np.mean(self.results_data["concentration"][isotope]))
            #
            bar_plot = self.ax_datareduction[0].bar(
                x_data_bar, y_data_bar, color=self.green_medium, edgecolor="black")
            bar_plot[x_data_bar.index(var_isotope)].set_color(
                self.red_dark)
            bar_plot[x_data_bar.index(var_isotope)].set_edgecolor(
                "black")
            #
            self.ax_datareduction[0].set_xticks(x_data_bar)
            self.ax_datareduction[0].set_xticklabels(x_data_bar, rotation=45, ha="right", rotation_mode="anchor")
            if len(x_data_bar) > 20:
                for label in self.ax_datareduction[0].xaxis.get_ticklabels()[::2]:
                    label.set_visible(False)
            #
            self.ax_datareduction[0].set_yscale("log")
            self.ax_datareduction[0].grid(True)
            self.ax_datareduction[0].set_axisbelow(True)
            self.ax_datareduction[0].set_title("Concentration C", fontsize=9)
            self.ax_datareduction[0].set_xlabel("Measured Isotopes", fontsize=9)
            self.ax_datareduction[0].set_ylabel("Concentration C (ppm)", fontsize=9)
            #
            x_data_sct = self.results_data["concentration"][var_is]
            y_data_sct = self.results_data["concentration"][var_isotope]
            #
            sct = self.ax_datareduction[1].scatter(
                x_data_sct, y_data_sct, label=var_isotope, color=self.red_dark, edgecolor="black", visible=True,
                marker="o", s=100)
            #
            self.ax_datareduction[1].set_xlim(left=0, right=1.05*max(x_data_sct))
            self.ax_datareduction[1].set_ylim(bottom=0, top=1.05*max(y_data_sct))
            self.ax_datareduction[1].set_title("Concentration Comparison", fontsize=9)
            self.ax_datareduction[1].set_xlabel("Concentration C "+str(var_is)+" (ppm)", fontsize=9)
            self.ax_datareduction[1].set_ylabel("Concentration C "+str(var_isotope)+" (ppm)", fontsize=9)
            #
        elif var_category == 1: # Intensity
            for isotope in x_data_bar:
                y_data_bar.append(np.mean(self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope]))
            #
            bar_plot = self.ax_datareduction[0].bar(
                x_data_bar, y_data_bar, color=self.green_medium, edgecolor="black")
            bar_plot[x_data_bar.index(var_isotope)].set_color(
                self.red_dark)
            bar_plot[x_data_bar.index(var_isotope)].set_edgecolor(
                "black")
            #
            self.ax_datareduction[0].set_xticks(x_data_bar)
            self.ax_datareduction[0].set_xticklabels(x_data_bar, rotation=45, ha="right", rotation_mode="anchor")
            if len(x_data_bar) > 20:
                for label in self.ax_datareduction[0].xaxis.get_ticklabels()[::2]:
                    label.set_visible(False)
            #
            self.ax_datareduction[0].set_yscale("log")
            self.ax_datareduction[0].grid(True)
            self.ax_datareduction[0].set_axisbelow(True)
            self.ax_datareduction[0].set_title("Intensity Ratio I(i)/I(IS)", fontsize=9)
            self.ax_datareduction[0].set_xlabel("Measured Isotopes", fontsize=9)
            self.ax_datareduction[0].set_ylabel("Intensity Ratio I(i)/I(IS) (1)", fontsize=9)
            #
            x_data_sct = self.results_data["intensity ratio"]["SIGNAL CORRECTED"][var_is]
            y_data_sct = self.results_data["intensity ratio"]["SIGNAL CORRECTED"][var_isotope]
            #
            sct = self.ax_datareduction[1].scatter(
                x_data_sct, y_data_sct, label=var_isotope, color=self.red_dark, edgecolor="black", visible=True,
                marker="o", s=100)
            #
            self.ax_datareduction[1].set_xlim(left=0, right=1.05 * max(x_data_sct))
            self.ax_datareduction[1].set_ylim(bottom=0, top=1.05 * max(y_data_sct))
            self.ax_datareduction[1].set_title("Intensity Ratio Comparison", fontsize=9)
            self.ax_datareduction[1].set_xlabel("Intensity Ratio I(" + str(var_is) + ")/I(IS) (1)", fontsize=9)
            self.ax_datareduction[1].set_ylabel("Intensity Ratio I(" + str(var_isotope) + ")/I(IS) (1)", fontsize=9)
            plt.ticklabel_format(axis='y', style='sci', scilimits=(0, 0))
            #
        elif var_category == 2: # Sensitivity
            if self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 0:
                var_filetype = "STD"
            elif self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 1 \
                    or self.container_var["ma_datareduction"]["Option ID"].get() != "Select Assemblage":
                var_filetype = "SMPL"
            #
            for isotope in x_data_bar:
                if var_filetype == "STD":
                    y_data_bar.append(np.mean(self.results_data["sensitivity"][isotope]))
                else:
                    y_data_bar.append(self.results_data["sensitivity"]["Drift Change"][isotope])
            #
            bar_plot = self.ax_datareduction[0].bar(
                x_data_bar, y_data_bar, color=self.green_medium, edgecolor="black")
            bar_plot[x_data_bar.index(var_isotope)].set_color(self.red_dark)
            bar_plot[x_data_bar.index(var_isotope)].set_edgecolor("black")
            #
            self.ax_datareduction[0].set_xticks(x_data_bar)
            self.ax_datareduction[0].set_xticklabels(x_data_bar, rotation=45, ha="right", rotation_mode="anchor")
            if len(x_data_bar) > 20:
                for label in self.ax_datareduction[0].xaxis.get_ticklabels()[::2]:
                    label.set_visible(False)
            #
            if var_filetype == "STD":
                self.ax_datareduction[0].set_yscale("log")
            #
            self.ax_datareduction[0].grid(True)
            self.ax_datareduction[0].set_axisbelow(True)
            if var_filetype == "STD":
                self.ax_datareduction[0].set_title("Analytical Sensitivity \u03BE", fontsize=9)
                self.ax_datareduction[0].set_ylabel("Analytical Sensitivity \u03BE (1)", fontsize=9)
            else:
                self.ax_datareduction[0].set_title("% Drift in Analytical Sensitivity \u03BE", fontsize=9)
                self.ax_datareduction[0].set_ylabel("% Drift in Analytical Sensitivity \u03BE (1)", fontsize=9)
            self.ax_datareduction[0].set_xlabel("Measured Isotopes", fontsize=9)
            #
            std_times = self.results_data["sensitivity"]["Times"]["STD"]
            x_times = []
            for index, (key, item) in enumerate(std_times.items()):
                cb_file = self.container_var["STD"][self.container_lists["STD"]["Long"][index]]["Checkbox"].get()
                if type(cb_file) == str:
                    cb_file = int(cb_file)
                #
                if cb_file == 1:
                    if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                        x_times.append(item["Delta"])
                    else:
                        x_times.append(item["Start"])
            #
            x_times.sort()
            x_data = np.array(x_times)
            #
            if self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 1 \
                    or self.container_var["ma_datareduction"]["Option ID"].get() != "Select Assemblage":
                smpl_times = self.results_data["sensitivity"]["Times"]["SMPL"]
                xi_optimized = self.results_data["sensitivity"]["Optimized"]
                #
                x_smpl = []
                var_id = self.container_var["ma_datareduction"]["Option ID"].get()
                #
                if var_filetype == "SMPL":
                    if var_id != "Select Assemblage":
                        list_files = self.container_lists["ID Files"][var_id]
                    else:
                        list_files = self.container_lists[var_filetype]["Short"]
                #
                for index, (key, item) in enumerate(smpl_times.items()):
                    file_long = self.container_lists["SMPL"]["Long"][index]
                    parts = file_long.split("/")
                    file_short = parts[-1]
                    if file_short in list_files:
                        cb_file = self.container_var["SMPL"][self.container_lists["SMPL"]["Long"][index]][
                            "Checkbox"].get()
                        if type(cb_file) == str:
                            cb_file = int(cb_file)
                        #
                        if cb_file == 1:
                            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                                x_times.append(item["Delta"])
                                x_smpl.append(item["Delta"])
                            else:
                                x_times.append(item["Start"])
                                x_smpl.append(item["Start"])
                #
                y_data = xi_optimized[var_isotope][0]*x_data + xi_optimized[var_isotope][1]
            elif self.container_var["ma_datareduction"]["Radiobutton"][1].get() == 0:
                y_data = np.array(self.results_data["sensitivity"][var_isotope])
            #
            x_max = max(x_data)
            x_min = min(x_data)
            #
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if max(x_data) < 100:
                    x_max = round(max(x_data) + 10, -1)
                elif 100 <= max(x_data) < 1000:
                    x_max = round(max(x_data) + 50, -2)
                elif max(x_data) >= 1000:
                    x_max = round(max(x_data) + 100, -2)
            else:
                x_max = round(max(x_data) + 0.05, 1)
                x_min = round(min(x_data) - 0.05, 1)
            #
            y_max = max(y_data)
            x_std = []
            y_std = []
            for index, file in enumerate(self.container_lists["STD"]["Short"]):
                var_srm_file = self.container_lists["STD"]["SRM"][file]
                var_srm_isotope = self.container_files["SRM"][var_isotope].get()
                if var_srm_file == var_srm_isotope:
                    cb_file = self.container_var["STD"][self.container_lists["STD"]["Long"][index]]["Checkbox"].get()
                    if type(cb_file) == str:
                        cb_file = int(cb_file)
                    #
                    if cb_file == 1:
                        x_std.append(self.xi_std_time[file][var_isotope][0])
                        y_std.append(self.xi_std_time[file][var_isotope][1])
            #
            y_smpl = []
            y_smpl.extend(self.results_data["sensitivity"][var_isotope])
            #
            if self.container_var["ma_datareduction"]["Radiobutton"][1].get() in [1, 2]:
                ln = self.ax_datareduction[1].plot(
                    x_data, y_data, label="Sensitivity Fit", color=self.red_dark, visible=True,
                    linewidth=3, linestyle="dashed", zorder=1)
            sct = self.ax_datareduction[1].scatter(
                x_std, y_std, label="Standard", color=self.green_medium, edgecolor="black", visible=True,
                marker="o", s=100, zorder=2)
            if self.container_var["ma_datareduction"]["Radiobutton"][1].get() in [1, 2]:
                sct = self.ax_datareduction[1].scatter(
                    x_smpl, y_smpl, label="Sample", color=self.red_dark, edgecolor="black", visible=True,
                    marker="s", s=100, zorder=2)
            #
            self.ax_datareduction[1].set_title("Sensitivity Drift of " + str(var_isotope) + " over Time", fontsize=9)
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                self.ax_datareduction[1].set_xlabel("Time (s)", fontsize=9)
            else:
                self.ax_datareduction[1].set_xlabel("Decimal Time (h)", fontsize=9)
            self.ax_datareduction[1].set_ylabel("Sensitivity \u03BE (1)", fontsize=9)
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                self.ax_datareduction[1].set_xlim(left=0, right=x_max)
                self.ax_datareduction[1].set_xticks(np.linspace(0, x_max, 6))
            else:
                self.ax_datareduction[1].set_xlim(left=x_min, right=x_max)
                self.ax_datareduction[1].set_xticks(np.linspace(x_min, x_max, 6))
        #
        self.ax_datareduction[1].grid(True)
        self.ax_datareduction[1].set_axisbelow(True)
        #
        handles, labels = self.ax_datareduction[1].get_legend_handles_labels()
        self.leg = self.fig_datareduction.legend(handles, labels, loc="lower center", ncol=3)
        self.leg.set_in_layout(False)
        self.fig_datareduction.subplots_adjust(bottom=0.1, top=0.9, left=0.2, right=0.9, hspace=0.5)
        #
        plt.rcParams["savefig.facecolor"] = "white"
        plt.rcParams["savefig.dpi"] = 300
        #
        self.canvas_datareduction = FigureCanvasTkAgg(self.fig_datareduction, master=self.parent)
        self.canvas_datareduction.get_tk_widget().grid(row=0, column=70, rowspan=38, columnspan=20, sticky="nesw")
        self.toolbarFrame_datareduction = tk.Frame(master=self.parent)
        self.toolbarFrame_datareduction.grid(row=38, column=70, rowspan=2, columnspan=20, sticky="w")
        self.toolbar_datareduction = NavigationToolbar2Tk(
            self.canvas_datareduction, self.toolbarFrame_datareduction)
        self.toolbar_datareduction.config(background=self.green_light)
        self.toolbar_datareduction._message_label.config(background=self.green_light)
        self.toolbar_datareduction.winfo_children()[-2].config(background=self.green_light)
        #
        self.gui_elements["ma_datareduction"]["Canvas"]["Specific"].extend(
            [self.canvas_datareduction, self.toolbarFrame_datareduction])
    #
    def show_drift_correction_diagram(self, var_isotope):
        #
        ## CLEANING
        try:
            self.fig_drift.clf()
            self.ax_drift.cla()
            self.canvas_drift.get_tk_widget().grid_remove()
            self.toolbarFrame_drift.grid_remove()
        except AttributeError:
            pass
        #
        std_times = self.results_data["sensitivity"]["Times"]["STD"]
        smpl_times = self.results_data["sensitivity"]["Times"]["SMPL"]
        xi_optimized = self.results_data["sensitivity"]["Optimized"]
        #
        ## DIAGRAM
        self.fig_drift, self.ax_drift = plt.subplots(ncols=1, nrows=2, dpi=100, facecolor=self.green_light)
        #
        x_times = []
        x_smpl = []
        for key, item in std_times.items():
            x_times.append(item["Delta"])
        for key, item in smpl_times.items():
            x_times.append(item["Delta"])
            x_smpl.append(item["Delta"])
        x_times.sort()
        x_data = np.array(x_times)
        y_data = xi_optimized[var_isotope][0] * x_data + xi_optimized[var_isotope][1]
        x_max = max(x_data)
        # if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
        #
        if max(x_data) < 100:
            x_max = round(max(x_data)+10, -1)
        elif 100 <= max(x_data) < 1000:
            x_max = round(max(x_data)+50, -2)
        elif max(x_data) >= 1000:
            x_max = round(max(x_data)+100, -2)
        #
        y_max = max(y_data)
        x_std = []
        y_std = []
        for file in self.container_lists["STD"]["Short"]:
            x_std.append(self.xi_std_time[file][var_isotope][0])
            y_std.append(self.xi_std_time[file][var_isotope][1])
        y_smpl = []
        y_smpl.extend(self.results_data["sensitivity"][var_isotope])
        #
        x_data_bar = self.container_lists["ISOTOPES"]
        y_data_bar = []
        for isotope in x_data_bar:
            y_data_bar.append(np.mean(self.results_data["sensitivity"][isotope]))
        #
        bar_plot = self.ax_drift[0].bar(x_data_bar, y_data_bar, color=self.green_medium, edgecolor="black")
        bar_plot[x_data_bar.index(self.container_var["ma_datareduction"]["Option IS"].get())].set_color(
            self.red_dark)
        bar_plot[x_data_bar.index(self.container_var["ma_datareduction"]["Option IS"].get())].set_edgecolor("black")
        self.ax_drift[0].set_xticklabels(x_data_bar, rotation=45, ha="right", rotation_mode="anchor")
        self.ax_drift[0].set_yscale("log")
        self.ax_drift[0].grid(True)
        self.ax_drift[0].set_axisbelow(True)
        self.ax_drift[0].set_title("Sensitivity \u03BE", fontsize=9)
        self.ax_drift[0].set_xlabel("Measured Isotopes", fontsize=9)
        self.ax_drift[0].set_ylabel("Sensitivity \u03BE (1)", fontsize=9)
        #
        # sct = self.ax_drift[1].scatter(
        #     x_std, y_std, label="Standard", color=self.isotope_colors[var_isotope], edgecolor="black", visible=True,
        #     marker="o", s=100)
        # sct = self.ax_drift[1].scatter(
        #     x_smpl, y_smpl, label="Sample", color=self.isotope_colors[var_isotope], edgecolor="black", visible=True,
        #     marker="s", s=100)
        # ln = self.ax_drift[1].plot(
        #     x_data, y_data, label="Sensitivity Fit", color=self.isotope_colors[var_isotope], visible=True, linewidth=3,
        #     linestyle="dashed")
        sct = self.ax_drift[1].scatter(
            x_std, y_std, label="Standard", color=self.green_medium, edgecolor="black", visible=True,
            marker="o", s=100)
        sct = self.ax_drift[1].scatter(
            x_smpl, y_smpl, label="Sample", color=self.red_dark, edgecolor="black", visible=True,
            marker="s", s=100)
        ln = self.ax_drift[1].plot(
            x_data, y_data, label="Sensitivity Fit", color=self.red_medium, visible=True, linewidth=3,
            linestyle="dashed")
        self.ax_drift[1].grid(True)
        self.ax_drift[1].set_xlim(left=0, right=x_max)
        self.ax_drift[1].set_xticks(np.linspace(0, x_max, 6))
        self.ax_drift[1].set_axisbelow(True)
        self.ax_drift[1].set_title("Sensitivity Drift of "+str(var_isotope)+" over Time", fontsize=9)
        self.ax_drift[1].set_xlabel("Time (s)", fontsize=9)
        self.ax_drift[1].set_ylabel("Sensitivity \u03BE (1)", fontsize=9)
        #
        #self.fig_drift.suptitle("\n")
        handles, labels = self.ax_drift[1].get_legend_handles_labels()
        self.leg = self.fig_drift.legend(handles, labels, loc="lower center", ncol=3)
        self.leg.set_in_layout(False)
        self.fig_drift.subplots_adjust(bottom=0.1, top=0.9, left=0.2, right=0.9, hspace=0.5)
        #
        plt.rcParams["savefig.facecolor"] = "white"
        plt.rcParams["savefig.dpi"] = 300
        #
        self.canvas_drift = FigureCanvasTkAgg(self.fig_drift, master=self.parent)
        self.canvas_drift.get_tk_widget().grid(row=0, column=70, rowspan=38, columnspan=20, sticky="nesw")
        self.toolbarFrame_drift = tk.Frame(master=self.parent)
        self.toolbarFrame_drift.grid(row=38, column=70, rowspan=2, columnspan=20, sticky="w")
        self.toolbar_drift = NavigationToolbar2Tk(self.canvas_drift, self.toolbarFrame_drift)
        self.toolbar_drift.config(background=self.green_light)
        self.toolbar_drift._message_label.config(background=self.green_light)
        self.toolbar_drift.winfo_children()[-2].config(background=self.green_light)
        #
        self.gui_elements["ma_datareduction"]["Frame"]["Specific"].extend([self.toolbarFrame_drift])
        self.gui_elements["ma_datareduction"]["Canvas"]["Specific"].extend([self.canvas_drift])
    #
    def show_drift_correction(self):
        ## Cleaning
        gui_categories = ["Label", "Entry"]
        for gui_category in gui_categories:
            if len(self.gui_elements["ma_datareduction"][gui_category]["Specific"]) > 0:
                for item in self.gui_elements["ma_datareduction"][gui_category]["Specific"]:
                    item.grid_remove()
        #
        ## OPTION MENU
        self.container_var["ma_datareduction"]["Option Drift"] = tk.StringVar()
        self.container_var["ma_datareduction"]["Option Drift Relativity"] = tk.StringVar()
        opt_menu_iso = SE(
            parent=self.parent, row_id=13, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_option_isotope(
            var_iso=self.container_var["ma_datareduction"]["Option Drift"], option_list=self.container_lists["ISOTOPES"],
            text_set="Select Isotope", fg_active=self.green_dark, bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["ma_datareduction"]["Option Drift"]:
            self.create_drift_correction_diagram(var_opt))
        opt_menu_driftrelativity = SE(
            parent=self.parent, row_id=14, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_option_isotope(
            var_iso=self.container_var["ma_datareduction"]["Option Drift Relativity"], option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_lists["IS"][0], fg_active=self.green_dark, bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["ma_datareduction"]["Option Drift"]:
            self.create_drift_correction_diagram(var_opt))
        self.container_elements["ma_datareduction"]["Option Menu"].extend([opt_menu_iso, opt_menu_driftrelativity])
        self.gui_elements["ma_datareduction"]["Option Menu"]["Specific"].extend([opt_menu_iso, opt_menu_driftrelativity])
    #
    def show_results_table(self):
        ## Cleaning
        gui_categories = ["Option Menu"]
        for gui_category in gui_categories:
            if len(self.gui_elements["ma_datareduction"][gui_category]["Specific"]) > 0:
                for item in self.gui_elements["ma_datareduction"][gui_category]["Specific"]:
                    item.grid_remove()
        #
        try:
            self.fig_drift.clf()
            self.ax_drift.cla()
            self.ax_drift_02.cla()
            self.canvas_drift.get_tk_widget().grid_remove()
            self.toolbarFrame_drift.grid_remove()
        except AttributeError:
            pass
        ## Reconstruction
        try:
            for entr_item in self.gui_elements["ma_datareduction"]["Label"]["Specific"]:
                entr_item.grid()
            for entr_item in self.gui_elements["ma_datareduction"]["Entry"]["Specific"]:
                entr_item.grid()
        except:
            print("Error!")
    #
    def create_drift_correction_diagram(self, var_opt):
        #
        try:
            self.fig_drift.clf()
            self.ax_drift.cla()
            self.ax_drift_02.cla()
            self.canvas_drift.get_tk_widget().grid_remove()
            self.toolbarFrame_drift.grid_remove()
        except AttributeError:
            pass
        try:
            if self.canvas_drift:
                self.canvas_drift.destroy()
            if self.toolbarFrame_drift:
                self.toolbarFrame_drift.destroy()
        except AttributeError:
            pass
        self.gui_elements["ma_datareduction"]["Frame"]["Specific"].clear()
        self.gui_elements["ma_datareduction"]["Canvas"]["Specific"].clear()
        #
        var_is = self.container_var["ma_datareduction"]["Option IS"].get()
        var_i = self.container_var["ma_datareduction"]["Option Drift"].get()
        ## DIAGRAM
        self.fig_drift = Figure(figsize=(10, 5), facecolor=self.green_light)
        self.ax_drift = self.fig_drift.add_subplot(211)
        self.ax_drift_02 = self.fig_drift.add_subplot(212)

        if var_opt == self.container_var["ma_datareduction"]["Option Drift"]:
            isotope = var_opt
        else:
            isotope = self.container_var["ma_datareduction"]["Option Drift"].get()
        x_times = []
        x_smpl = []
        for key, item in self.std_times.items():
            x_times.append(item["Delta"])
        for key, item in self.smpl_times.items():
            x_times.append(item["Delta"])
            x_smpl.append(item["Delta"])
        x_times.sort()
        x_data = np.array(x_times)
        y_data = self.xi_opt[isotope][0]*x_data + self.xi_opt[isotope][1]
        y_data = self.results_data["sensitivity"]["Optimized"][isotope][0] * x_data + self.results_data["sensitivity"]["Optimized"][isotope][1]
        x_max = max(x_data)
        if max(x_data) < 100:
            x_max = round(max(x_data)+10, -1)
        elif 100 <= max(x_data) < 1000:
            x_max = round(max(x_data)+50, -2)
        elif max(x_data) >= 1000:
            x_max = round(max(x_data)+100, -2)
        y_max = max(y_data)
        x_std = []
        y_std = []
        for file in self.container_lists["STD"]["Short"]:
            x_std.append(self.xi_std_time[file][isotope][0])
            y_std.append(self.xi_std_time[file][isotope][1])
        y_smpl = []
        key_id = re.search("(\D+)( Files)", self.container_var["ma_datareduction"]["Option File"].get())
        var_id = key_id.group(1)
        for index, file in enumerate(self.container_lists["SMPL"]["Short"]):
            if var_id not in ["All Standard", "All Sample"]:
                if file in self.container_lists["ID Files"][var_id]:
                    #y_smpl.append(self.container_results["SMPL"]["SMOOTHED"][isotope]["Sensitivity"][index])
                    y_smpl.append(self.results_data["sensitivity"][isotope][index])
            else:
                #y_smpl.append(self.container_results["SMPL"]["SMOOTHED"][isotope]["Sensitivity"][index])
                y_smpl.append(self.results_data["sensitivity"][isotope][index])

        sct = self.ax_drift.scatter(
            x_std, y_std, label="Standard", color=self.isotope_colors[isotope], edgecolor="black", visible=True,
            marker="o", s=100)
        sct = self.ax_drift.scatter(
            x_smpl, y_smpl, label="Sample", color=self.isotope_colors[isotope], edgecolor="black", visible=True,
            marker="s", s=100)
        ln = self.ax_drift.plot(
            x_data, y_data, label="Sensitivity Fit", color=self.isotope_colors[isotope], visible=True, linewidth=3)
        #self.lines["raw"][isotope] = ln
        self.ax_drift.grid(True)
        self.ax_drift.set_xlim(left=0, right=x_max)
        self.ax_drift.set_xticks(np.linspace(0, x_max, 11))
        #self.ax_drift.set_ylim(top=1.5*y_max)
        self.ax_drift.set_axisbelow(True)
        self.ax_drift.set_xlabel("Time (s)", labelpad=0.5)
        self.ax_drift.set_ylabel("Sensitivity", labelpad=0.5)

        self.fig_drift.subplots_adjust(bottom=0.125, top=0.975, left=0.075, right=0.975)

        legend = self.ax_drift.legend(fontsize="x-small", framealpha=1.0, loc="best", prop={'size': 10})

        x_data_02 = self.container_results["SMPL"]["SMOOTHED"][var_i]["Concentration"]
        y_data_02 = self.container_results["SMPL"]["SMOOTHED"][isotope]["Concentration"]
        sct = self.ax_drift_02.scatter(
            x_data_02, y_data_02, label=isotope, color=self.isotope_colors[isotope], edgecolor="black", visible=True,
            marker="s", s=100)
        self.ax_drift_02.set_xlim(left=0, right=1.05*max(x_data_02))
        self.ax_drift_02.set_ylim(bottom=0, top=1.05*max(y_data_02))
        self.ax_drift_02.grid(True)
        self.ax_drift_02.set_axisbelow(True)
        self.ax_drift_02.set_xlabel("Concentration "+str(var_i)+" (ppm)", labelpad=0.5)
        self.ax_drift_02.set_ylabel("Concentration "+str(isotope)+" (ppm)", labelpad=0.5)

        plt.rcParams["savefig.facecolor"] = "white"
        plt.rcParams["savefig.dpi"] = 300

        self.canvas_drift = FigureCanvasTkAgg(self.fig_drift, master=self.parent)
        self.canvas_drift.get_tk_widget().grid(row=0, column=60, rowspan=30, columnspan=30, sticky="nesw")
        self.toolbarFrame_drift = tk.Frame(master=self.parent)
        self.toolbarFrame_drift.grid(row=32, column=60, rowspan=2, columnspan=30, sticky="w")
        self.toolbar_drift = NavigationToolbar2Tk(self.canvas_drift, self.toolbarFrame_drift)
        self.toolbar_drift.config(background=self.green_light)
        self.toolbar_drift._message_label.config(background=self.green_light)
        self.toolbar_drift.winfo_children()[-2].config(background=self.green_light)
        #
        self.gui_elements["ma_datareduction"]["Frame"]["Specific"].extend([self.toolbarFrame_drift])
        self.gui_elements["ma_datareduction"]["Canvas"]["Specific"].extend([self.canvas_drift])
    #
    def extract_data_times(self):
        self.std_times = {}
        dates_0, times_0 = Data(filename=self.list_std[0]).import_as_list()
        if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
            if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                t_start_0 = datetime.timedelta(
                    hours=int(times_0[0][0]), minutes=int(times_0[0][1]), seconds=int(times_0[0][2]))
            else:
                t_start_0 = datetime.timedelta(
                    hours=int(times_0[0][0]), minutes=int(times_0[0][1]), seconds=int(0))
        else:
            t_start_0 = int(times_0[0][0]) + int(times_0[0][1])/60
        #
        for file in self.list_std:
            parts = file.split("/")
            self.std_times[parts[-1]] = {}
            dates, times = Data(filename=file).import_as_list()
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                    t_start = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                else:
                    t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(0))
                t_delta_0 = (t_start - t_start_0).total_seconds()
                self.std_times[parts[-1]]["Start"] = t_start.total_seconds()
                self.std_times[parts[-1]]["Delta"] = t_delta_0
            else:
                t_start = int(times[0][0]) + int(times[0][1])/60
                t_delta_0 = t_start - t_start_0
                self.std_times[parts[-1]]["Start"] = round(t_start, 4)
                self.std_times[parts[-1]]["Delta"] = round(t_delta_0, 4)
        #
        self.smpl_times = {}
        for file in self.list_smpl:
            parts = file.split("/")
            self.smpl_times[parts[-1]] = {}
            dates, times = Data(filename=file).import_as_list()
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                    t_start = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                else:
                    t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(0))
                t_delta_0 = (t_start - t_start_0).total_seconds()
                self.smpl_times[parts[-1]]["Start"] = t_start.total_seconds()
                self.smpl_times[parts[-1]]["Delta"] = t_delta_0
            else:
                t_start = int(times[0][0]) + int(times[0][1])/60
                t_delta_0 = t_start - t_start_0
                self.smpl_times[parts[-1]]["Start"] = round(t_start, 4)
                self.smpl_times[parts[-1]]["Delta"] = round(t_delta_0, 4)
    #
    def change_id_option_results(self, var_id):
        print("Selected ID:", var_id)
        print("Related Files:", self.container_lists["ID Files"][var_id])
    #
    def datareduction(self, filetype, datatype=None, fill_entry=False):
        n_digits_intensity = 4
        n_digits_sensitivity = 4
        n_digits_concentration = 4
        n_digits_rsf = 4
        n_digits_lod = 4
        #
        if datatype == None:
            var_datatype = self.container_var["ma_datareduction"]["Radiobutton"][0].get()
        else:
            var_datatype = datatype
        #
        if var_datatype == 0:
            var_datatype_key = "RAW"
        else:
            var_datatype_key = "SMOOTHED"
        #
        var_is = self.container_var["ma_datareduction"]["Option IS"].get()
        key_element = re.search("(\D+)(\d+)", var_is)
        var_is_element = key_element.group(1)
        var_filetype = {"STD": 0, "SMPL": 0}
        if len(filetype) == 7:
            key_id = re.search("(\D+)( Files)", filetype)
            var_id = key_id.group(1)
            for file in self.container_lists["ID Files"][var_id]:
                if file in self.container_lists["STD"]["Short"]:
                    var_filetype["STD"] += 1
                elif file in self.container_lists["SMPL"]["Short"]:
                    var_filetype["SMPL"] += 1
            if var_filetype["STD"] > 0:
                var_filetype["Result"] = "STD"
            elif var_filetype["SMPL"] > 0:
                var_filetype["Result"] = "SMPL"
        #
        if filetype == "All Standard Files":
            self.results_data = MineralAnalysis(
                container_measurements=self.container_measurements, container_lists=self.container_lists,
                container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                var_filetype="STD", var_datatype=var_datatype_key, var_is=var_is,
                xi_std_time=self.xi_std_time).calculate_all_parameters()
        elif filetype == "All Sample Files":
            self.results_data = MineralAnalysis(
                container_measurements=self.container_measurements, container_lists=self.container_lists,
                container_files=self.container_files, container_var=self.container_var, srm_data=self.srm_actual,
                var_filetype="SMPL", var_datatype=var_datatype_key, var_is=var_is,
                xi_std_time=self.xi_std_time).calculate_all_parameters()
        else:
            if var_filetype["Result"] == "STD":
                self.results_data = MineralAnalysis(
                    container_measurements=self.container_measurements, container_lists=self.container_lists,
                    container_files=self.container_files, container_var=self.container_var,
                    srm_data=self.srm_actual, var_filetype="STD",  var_datatype=var_datatype_key, var_is=var_is,
                    xi_std_time=self.xi_std_time).calculate_all_parameters()
            elif var_filetype["Result"] == "SMPL":
                self.results_data = MineralAnalysis(
                    container_measurements=self.container_measurements, container_lists=self.container_lists,
                    container_files=self.container_files, container_var=self.container_var,
                    srm_data=self.srm_actual, var_filetype="SMPL", var_datatype=var_datatype_key, var_is=var_is,
                    xi_std_time=self.xi_std_time).calculate_all_parameters()
        #
        for isotope in self.container_lists["ISOTOPES"]:
            ## Intensity Ratio
            if fill_entry == True:
                self.container_var["ma_datareduction"][isotope][0].set(
                    round(np.mean(self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope]),
                          n_digits_intensity))
                self.container_var["ma_datareduction"][isotope][1].set(
                    round(np.std(self.results_data["intensity ratio"]["SIGNAL CORRECTED"][isotope], ddof=1),
                          n_digits_intensity))
            if var_datatype == 0:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["RAW"][isotope]["Intensity Ratio"] = self.results_data[
                        "intensity ratio"]["SIGNAL CORRECTED"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["RAW"][isotope]["Intensity Ratio"] = self.results_data[
                        "intensity ratio"]["SIGNAL CORRECTED"][isotope]
            elif var_datatype == 1:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["SMOOTHED"][isotope]["Intensity Ratio"] = self.results_data[
                        "intensity ratio"]["SIGNAL CORRECTED"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["SMOOTHED"][isotope]["Intensity Ratio"] = self.results_data[
                        "intensity ratio"]["SIGNAL CORRECTED"][isotope]
            #
            ## Sensitivity
            if fill_entry == True:
                self.container_var["ma_datareduction"][isotope][2].set(
                    round(np.mean(self.results_data["sensitivity"][isotope]), n_digits_sensitivity))
                self.container_var["ma_datareduction"][isotope][3].set(
                    round(np.std(self.results_data["sensitivity"][isotope], ddof=1), n_digits_sensitivity))
            if var_datatype == 0:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["RAW"][isotope]["Sensitivity"] = self.results_data[
                        "sensitivity"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["RAW"][isotope]["Sensitivity"] = self.results_data[
                        "sensitivity"][isotope]
            elif var_datatype == 1:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["SMOOTHED"][isotope]["Sensitivity"] = self.results_data[
                        "sensitivity"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["SMOOTHED"][isotope]["Sensitivity"] = self.results_data[
                        "sensitivity"][isotope]
            #
            ## Concentration
            if fill_entry == True:
                self.container_var["ma_datareduction"][isotope][4].set(
                    round(np.mean(self.results_data["concentration"][isotope]), n_digits_concentration))
                self.container_var["ma_datareduction"][isotope][5].set(
                    round(np.std(self.results_data["concentration"][isotope], ddof=1), n_digits_concentration))
            if var_datatype == 0:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["RAW"][isotope]["Concentration"] = self.results_data[
                        "concentration"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["RAW"][isotope]["Concentration"] = self.results_data[
                        "concentration"][isotope]
            elif var_datatype == 1:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["SMOOTHED"][isotope]["Concentration"] = self.results_data[
                        "concentration"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["SMOOTHED"][isotope]["Concentration"] = self.results_data[
                        "concentration"][isotope]
            #
            ## Relative Sensitivity Factor
            if fill_entry == True:
                self.container_var["ma_datareduction"][isotope][6].set(
                    round(np.mean(self.results_data["RSF"][isotope]), n_digits_rsf))
                self.container_var["ma_datareduction"][isotope][7].set(
                    round(np.std(self.results_data["RSF"][isotope], ddof=1), n_digits_rsf))
            if var_datatype == 0:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["RAW"][isotope]["RSF"] = self.results_data["RSF"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["RAW"][isotope]["RSF"] = self.results_data["RSF"][isotope]
            elif var_datatype == 1:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["SMOOTHED"][isotope]["RSF"] = self.results_data["RSF"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["SMOOTHED"][isotope]["RSF"] = self.results_data["RSF"][isotope]
            #
            ## Limit of Detection
            if fill_entry == True:
                self.container_var["ma_datareduction"][isotope][8].set(
                    round(np.mean(self.results_data["LOD"][isotope]), n_digits_lod))
                self.container_var["ma_datareduction"][isotope][9].set(
                    round(np.std(self.results_data["LOD"][isotope], ddof=1), n_digits_lod))
            if var_datatype == 0:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["RAW"][isotope]["LOD"] = self.results_data["LOD"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["RAW"][isotope]["LOD"] = self.results_data["LOD"][isotope]
            elif var_datatype == 1:
                if filetype == "All Standard Files":
                    self.container_results["STD"]["SMOOTHED"][isotope]["LOD"] = self.results_data["LOD"][isotope]
                elif filetype == "All Sample Files":
                    self.container_results["SMPL"]["SMOOTHED"][isotope]["LOD"] = self.results_data["LOD"][isotope]
    #
    def calculate_regression(self, data, isotope, file_data):
        x_data = []
        y_data = []
        for file in file_data:
            x_data.append(data[file][isotope][0])
            y_data.append(data[file][isotope][1])
        #
        A = np.vstack([x_data, np.ones(len(x_data))]).T
        m, c = np.linalg.lstsq(A, y_data, rcond=None)[0]  # m*x + c
        results = [m, c]
        #
        return results
    #
    def confirm_edits(self, filename, filetype):
        self.container_var[filetype][filename]["Frame"].config(bg=self.sign_green)
    #
    def change_radiobutton(self, var, value):
        var.set(value)
    #
    def change_carrier_gas(self, var_opt):
        if var_opt == "Helium":
            try:
                self.var_entr_10.set("24.587")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("24.587")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Dark Font"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
            #
        elif var_opt == "Neon":
            try:
                self.var_entr_10.set("21.565")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("21.565")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Argon":
            try:
                self.var_entr_10.set("15.760")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("15.760")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Krypton":
            try:
                self.var_entr_10.set("14.000")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("14.000")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Xenon":
            try:
                self.var_entr_10.set("12.130")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("12.130")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
        elif var_opt == "Radon":
            try:
                self.var_entr_10.set("10.749")
                var_energy = self.var_entr_10.get()
            except:
                self.container_var["Gas Energy"].set("10.749")
                var_energy = self.container_var["Gas Energy"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_element = re.search("(\D+)(\d+)", isotope)
                element = key_element.group(1)
                if float(var_energy) >= float(self.ionization_energies["First"][element]) \
                        and float(var_energy) >= float(self.ionization_energies["Second"][element]):
                    fg_color = self.accent_color
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
                else:
                    fg_color = self.bg_colors["Very Dark"]
                    bg_color = self.bg_colors["Very Light"]
                    self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                    self.container_var["charge"][isotope]["labelvar"].config(bg=bg_color, fg=fg_color)
    #
    def change_visibility_iw(self, var_cb):
        if var_cb == self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["BG"]:
            if var_cb.get() == 0:
                if self.file_type == "STD":
                    for key_01, value_01 in self.container_helper["STD"].items():
                        if key_01 == self.filename_short:
                            for key_02, value_02 in value_01["BG"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(False)
                    for key, item in self.container_files[self.file_type][self.filename_short]["BG"].items():
                        item["Box"].set_visible(False)
                elif self.file_type == "SMPL":
                    for key_01, value_01 in self.container_helper["SMPL"].items():
                        if key_01 == self.filename_short:
                            for key_02, value_02 in value_01["BG"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(False)
            else:
                if self.file_type == "STD":
                    for key_01, value_01 in self.container_helper["STD"].items():
                        if key_01 == self.filename_short:
                            for key_02, value_02 in value_01["BG"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(True)
                elif self.file_type == "SMPL":
                    for key_01, value_01 in self.container_helper["SMPL"].items():
                        if key_01 == self.filename_short:
                            for key_02, value_02 in value_01["BG"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(True)
        #
        elif var_cb == self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["SPK"]:
            if var_cb.get() == 0:
                if self.file_type == "STD":
                    for key_01, value_01 in self.container_helper["STD"].items():
                        for key_02, value_02 in value_01["SPK"].items():
                            for key_03, value_03 in value_02.items():
                                for object in value_03["Object"]:
                                    object.set_visible(False)
                elif self.file_type == "SMPL":
                    for key_01, value_01 in self.container_helper["SMPL"].items():
                        for key_02, value_02 in value_01["SPK"].items():
                            for key_03, value_03 in value_02.items():
                                for object in value_03["Object"]:
                                    object.set_visible(False)
            else:
                if self.file_type == "STD":
                    for key_01, value_01 in self.container_helper["STD"].items():
                        for key_02, value_02 in value_01["SPK"].items():
                            for key_03, value_03 in value_02.items():
                                for object in value_03["Object"]:
                                    object.set_visible(True)
                elif self.file_type == "SMPL":
                    for key_01, value_01 in self.container_helper["SMPL"].items():
                        for key_02, value_02 in value_01["SPK"].items():
                            for key_03, value_03 in value_02.items():
                                for object in value_03["Object"]:
                                    object.set_visible(True)
        #
        if self.var_mode_ma == True:
            if var_cb == self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["SIG"]:
                if var_cb.get() == 0:
                    if self.file_type == "STD":
                        for key_01, value_01 in self.container_helper["STD"].items():
                            if key_01 == self.filename_short:
                                for key_02, value_02 in value_01["SIG"].items():
                                    for object in value_02["Object"]:
                                        object.set_visible(False)
                    elif self.file_type == "SMPL":
                        for key_01, value_01 in self.container_helper["SMPL"].items():
                            if key_01 == self.filename_short:
                                for key_02, value_02 in value_01["SIG"].items():
                                    for object in value_02["Object"]:
                                        object.set_visible(False)
                else:
                    if self.file_type == "STD":
                        for key_01, value_01 in self.container_helper["STD"].items():
                            if key_01 == self.filename_short:
                                for key_02, value_02 in value_01["SIG"].items():
                                    for object in value_02["Object"]:
                                        object.set_visible(True)
                    elif self.file_type == "SMPL":
                        for key_01, value_01 in self.container_helper["SMPL"].items():
                            if key_01 == self.filename_short:
                                for key_02, value_02 in value_01["SIG"].items():
                                    for object in value_02["Object"]:
                                        object.set_visible(True)
        #
        if self.var_mode_fi == True:
            if var_cb == self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["MAT"]:
                if var_cb.get() == 0:
                    if self.file_type == "STD":
                        for key_01, value_01 in self.container_helper["STD"].items():
                            for key_02, value_02 in value_01["MAT"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(False)
                    elif self.file_type == "SMPL":
                        for key_01, value_01 in self.container_helper["SMPL"].items():
                            for key_02, value_02 in value_01["MAT"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(False)
                else:
                    if self.file_type == "STD":
                        for key_01, value_01 in self.container_helper["STD"].items():
                            for key_02, value_02 in value_01["MAT"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(True)
                    elif self.file_type == "SMPL":
                        for key_01, value_01 in self.container_helper["SMPL"].items():
                            for key_02, value_02 in value_01["MAT"].items():
                                for object in value_02["Object"]:
                                    object.set_visible(True)
            #
            if var_cb == self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["INCL"]:
                if var_cb.get() == 0:
                    if self.file_type == "STD":
                        for key_01, value_01 in self.container_helper["STD"].items():
                            for key_02, value_02 in value_01["INCL"].items():
                                value_02["Object"].set_visible(False)
                    elif self.file_type == "SMPL":
                        for key_01, value_01 in self.container_helper["SMPL"].items():
                            for key_02, value_02 in value_01["INCL"].items():
                                value_02["Object"].set_visible(False)
                else:
                    if self.file_type == "STD":
                        for key_01, value_01 in self.container_helper["STD"].items():
                            for key_02, value_02 in value_01["INCL"].items():
                                value_02["Object"].set_visible(True)
                    elif self.file_type == "SMPL":
                        for key_01, value_01 in self.container_helper["SMPL"].items():
                            for key_02, value_02 in value_01["INCL"].items():
                                value_02["Object"].set_visible(True)
        #
        self.diagrams_setup[self.file_type][self.filename_short]["CANVAS"].draw()
        try:
            self.diagrams_setup[self.file_type][self.filename_short]["CANVAS_RATIO"].draw()
        except:
            pass
    #
    def change_rb_value(self, var_rb):
        print(var_rb.get())
    #
    def show_all_lines_old(self):
        for isotope in self.container_lists["ISOTOPES"]:
            if self.container_var["plotting"][self.filename_short]["RB"][1].get() == 0:
                self.container_var["plotting"][self.filename_short]["Checkboxes"]["RAW"][isotope].set(1)
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Raw"][isotope][0].set_visible(True)
            elif self.container_var["plotting"][self.filename_short]["RB"][1].get() == 1:
                self.container_var["plotting"][self.filename_short]["Checkboxes"]["SMOOTHED"][isotope].set(1)
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Smoothed"][isotope][0].set_visible(True)
        #
        self.diagrams_setup[self.file_type][self.filename_short]["CANVAS"].draw()
    #
    def hide_all_lines_old(self):
        for isotope in self.container_lists["ISOTOPES"]:
            if self.container_var["plotting"][self.filename_short]["RB"][1].get() == 0:
                self.container_var["plotting"][self.filename_short]["Checkboxes"]["RAW"][isotope].set(0)
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Raw"][isotope][0].set_visible(False)
            elif self.container_var["plotting"][self.filename_short]["RB"][1].get() == 1:
                self.container_var["plotting"][self.filename_short]["Checkboxes"]["SMOOTHED"][isotope].set(0)
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Smoothed"][isotope][0].set_visible(False)
        #
        self.diagrams_setup[self.file_type][self.filename_short]["CANVAS"].draw()
    #
    def change_visibility(self, var_cb, name):
        if var_cb is self.container_var["plotting"][self.filename_short]["Checkboxes"]["RAW"][name]:
            if var_cb.get() == 0:
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Raw"][name][0].set_visible(False)
            elif var_cb.get() == 1:
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Raw"][name][0].set_visible(True)
        elif var_cb is self.container_var["plotting"][self.filename_short]["Checkboxes"]["SMOOTHED"][name]:
            if var_cb.get() == 0:
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Smoothed"][name][0].set_visible(False)
            elif var_cb.get() == 1:
                self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Smoothed"][name][0].set_visible(True)
        #
        self.diagrams_setup[self.file_type][self.filename_short]["CANVAS"].draw()
    #
    def calculate_and_place_isotope_ratios(self, var_is, data, lb, mode="MA"):
        #
        index_start = int(0.4 * len(self.times))
        index_end = int(0.6 * len(self.times))
        #
        if var_is != "Select IS":
            try:
                for row in lb.get_children():
                    lb.delete(row)
            except:
                pass
            #
            if mode == "MA":
                try:
                    if self.container_var["settings"]["Time SIG Start"].get() != "Set start time":
                        sig_start = float(self.container_var["settings"]["Time SIG Start"].get())
                        time_start = min(self.times, key=lambda x: abs(x - sig_start))
                        index_start = self.times[self.times == time_start].index[0]
                    if self.container_var["settings"]["Time SIG End"].get() != "Set end time":
                        sig_end = float(self.container_var["settings"]["Time SIG End"].get())
                        time_end = min(self.times, key=lambda x: abs(x - sig_end))
                        index_end = self.times[self.times == time_end].index[0]
                except:
                    index_start = int(0.4*len(self.times))
                    index_end = int(0.6*len(self.times))
            elif mode == "FI":
                try:
                    if self.container_var["settings"]["Time MAT Start"].get() != "Set start time":
                        mat_start = float(self.container_var["settings"]["Time MAT Start"].get())
                        time_start = min(self.times, key=lambda x: abs(x - mat_start))
                        index_start = self.times[self.times == time_start].index[0]
                    if self.container_var["settings"]["Time MAT End"].get() != "Set end time":
                        mat_end = float(self.container_var["settings"]["Time MAT End"].get())
                        time_end = min(self.times, key=lambda x: abs(x - mat_end))
                        index_end = self.times[self.times == time_end].index[0]
                except:
                    index_start = int(0.4*len(self.times))
                    index_end = int(0.6*len(self.times))
            #
            results = {}
            intensities_is = data[var_is][index_start:index_end+1]
            intensities_is = intensities_is.replace(0, np.NaN)
            intensities_is = np.mean(intensities_is)
            for isotope in self.container_lists["ISOTOPES"]:
                intensities_i = data[isotope][index_start:index_end+1]
                intensities_i = intensities_i.replace(0, np.NaN)
                intensities_i = np.mean(intensities_i)
                ir = intensities_i/intensities_is
                results[isotope] = round(ir.mean(), 4)
                lb.insert("", tk.END, values=[str(isotope)+"/"+str(var_is), results[isotope]])
    #
    def load_and_assign_data(self, filename):
        dataset_exmpl = Data(filename=filename)
        df_exmpl = dataset_exmpl.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
        return df_exmpl
    #
    def change_srm_std(self, var_srm, file):
        parts = file.split("/")
        self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
        self.fill_srm_values(var_srm=var_srm)
    #
    def change_srm_iso(self, var_srm, isotope):
        self.container_files["SRM"][isotope].set(var_srm)
        self.fill_srm_values(var_srm=var_srm)
    #
    def change_std_is(self, element, file):
        self.container_var["STD"][file]["IS"].set(element)
        parts = file.split("/")
        self.container_files["STD"][parts[-1]]["IS"].set(element)
    #
    def change_std_is_default(self, element, mineral=None):
        self.container_var["IS"]["Default STD"].set(element)
        for file in self.list_std:
            self.container_var["STD"][file]["IS"].set(element)
            parts = file.split("/")
            self.container_files["STD"][parts[-1]]["IS"].set(element)
        #
        if element in self.container_lists["ISOTOPES"]:
            key_is = re.search("(\D+)(\d+)", element)
            element_is = key_is.group(1)
        if mineral != None and mineral != "Select Mineral":
            if element in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element])
            elif element_is in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element_is])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element_is])
            else:
                #self.var_entr_09.set(0.0)
                self.container_var["settings"]["IS Concentration"].set(0.0)
            #
            if self.container_var["IS"]["Default SMPL"].get() == "Select IS":
                self.change_smpl_is_default(element=element, mineral=mineral)
            #
        else:
            warning_is = tk.Toplevel(self.parent)
            warning_is.title("Warning")
            warning_is.geometry("250x100+0+0")
            warning_is.resizable(False, False)
            warning_is["bg"] = self.green_light
            #
            window_width = 250
            window_heigth = 100
            row_min = 25
            n_rows = int(window_heigth / row_min)
            column_min = 20
            n_columns = int(window_width / column_min)
            #
            for x in range(n_columns):
                tk.Grid.columnconfigure(warning_is, x, weight=1)
            for y in range(n_rows):
                tk.Grid.rowconfigure(warning_is, y, weight=1)
            #
            # Rows
            for i in range(0, n_rows):
                warning_is.grid_rowconfigure(i, minsize=row_min)
            # Columns
            for i in range(0, n_columns):
                warning_is.grid_columnconfigure(i, minsize=column_min)
            #
            lbl_01 = SE(
                parent=warning_is, row_id=0, column_id=0, n_rows=n_rows, n_columns=n_columns, fg=self.green_dark,
                bg=self.red_dark).create_simple_label(
                text="Please load your internal\n standard concentration data\n or select a mineral", relief=tk.GROOVE,
                fontsize="sans 10 bold")
            #
            self.container_var["IS"]["Default STD"].set("Select IS")
    #
    def change_smpl_is(self, element, file, mineral=None):
        self.container_var["SMPL"][file]["IS"].set(element)
        if mineral != None:
            parts = file.split("/")
            key_i = re.search("(\D+)(\d+)", element)
            var_element = key_i.group(1)
            self.container_files["SMPL"][parts[-1]]["IS Concentration"].set(self.mineral_chem[mineral][var_element])
            #
            self.container_var["SMPL"][file]["IS Data"]["IS"].set(element)
            self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(
                self.mineral_chem[mineral][element])
            #
    #
    def change_smpl_is_default(self, element, mineral=None):
        self.container_var["IS"]["Default SMPL"].set(element)
        for file in self.list_smpl:
            self.container_var["SMPL"][file]["IS"].set(element)
        #
        if element in self.container_lists["ISOTOPES"]:
            key_is = re.search("(\D+)(\d+)", element)
            element_is = key_is.group(1)
        if mineral != None and mineral != "Select Mineral":
            if element in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element])
                for file in self.list_smpl:
                    parts = file.split("/")
                    self.container_files["SMPL"][parts[-1]]["IS"].set(element)
                    self.container_files["SMPL"][parts[-1]]["IS Concentration"].set(self.mineral_chem[mineral][element])
                    #
                    self.container_var["SMPL"][file]["IS Data"]["IS"].set(element)
                    self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(
                        self.mineral_chem[mineral][element])
                    #
            elif element_is in self.mineral_chem[mineral]:
                #self.var_entr_09.set(self.mineral_chem[mineral][element_is])
                self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral][element_is])
                for file in self.list_smpl:
                    parts = file.split("/")
                    self.container_files["SMPL"][parts[-1]]["IS"].set(element)
                    self.container_files["SMPL"][parts[-1]]["IS Concentration"].set(
                        self.mineral_chem[mineral][element_is])
                    #
                    self.container_var["SMPL"][file]["IS Data"]["IS"].set(element)
                    self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(
                        self.mineral_chem[mineral][element_is])
                    #
            #
            if self.container_var["IS"]["Default SMPL"].get() == "Select IS":
                self.change_std_is_default(element=element, mineral=mineral)
        else:
            warning_is = tk.Toplevel(self.parent)
            warning_is.title("Warning")
            warning_is.geometry("250x100+0+0")
            warning_is.resizable(False, False)
            warning_is["bg"] = self.green_light
            #
            window_width = 250
            window_heigth = 100
            row_min = 25
            n_rows = int(window_heigth / row_min)
            column_min = 20
            n_columns = int(window_width / column_min)
            #
            for x in range(n_columns):
                tk.Grid.columnconfigure(warning_is, x, weight=1)
            for y in range(n_rows):
                tk.Grid.rowconfigure(warning_is, y, weight=1)
            #
            # Rows
            for i in range(0, n_rows):
                warning_is.grid_rowconfigure(i, minsize=row_min)
            # Columns
            for i in range(0, n_columns):
                warning_is.grid_columnconfigure(i, minsize=column_min)
            #
            lbl_01 = SE(
                parent=warning_is, row_id=0, column_id=0, n_rows=n_rows, n_columns=n_columns, fg=self.green_dark,
                bg=self.red_dark).create_simple_label(
                text="Please load your internal\n standard concentration data\n or select a mineral", relief=tk.GROOVE,
                fontsize="sans 10 bold")
            #
            self.container_var["IS"]["Default SMPL"].set("Select IS")
    #
    def change_is_default(self, mineral, element, category="SMPL"):
        if element in self.container_lists["ISOTOPES"]:
            key_is = re.search("(\D+)(\d+)", element)
            element_is = key_is.group(1)
        if self.container_var["isotopes"]["default"].get() == "Select IS":
            self.container_var["isotopes"]["default"].set(element)
        else:
            if self.container_var["isotopes"]["default"].get() in list(self.mineral_chem[mineral.get()].keys()):
                self.container_var["isotopes"]["default"].set(element)
            else:
                self.container_var["isotopes"]["default"].set("Select IS")
        try:
            #self.var_entr_09.set(self.mineral_chem[mineral.get()][element])
            self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral.get()][element])
        except:
            #self.var_entr_09.set(self.mineral_chem[mineral.get()][element_is])
            self.container_var["settings"]["IS Concentration"].set(self.mineral_chem[mineral.get()][element_is])
        for file in self.list_smpl:
            parts = file.split("/")
            self.container_var["isotopes"][file].set(element)
            #self.container_files["SMPL"][parts[-1]].set(element)
            self.container_files["SMPL"][parts[-1]]["IS"].set(element)
        if category == "STD":
            try:
                self.container_var["IS"]["Default STD"].set(element)
            except:
                self.container_var["IS"]["Default STD"].set(element_is)
        elif category == "SMPL":
            try:
                self.container_var["IS"]["Default SMPL"].set(element)
            except:
                self.container_var["IS"]["Default SMPL"].set(element_is)
    #
    def find_suitable_isotopes(self, var_is):
        possible_is = []
        key_is = re.search("(\D+)(\d+)", var_is)
        element_is = key_is.group(1)
        for isotope in self.container_lists["ISOTOPES"]:
            key = re.search("(\D+)(\d+)", isotope)
            if element_is == key.group(1):
                possible_is.append(isotope)
        #
        self.container_lists["Possible IS"].clear()
        self.container_lists["Possible IS"].extend(possible_is)

    #
    def change_srm_default(self, var_srm, key="STD"):
        if key == "STD":
            for file in self.list_std:
                parts = file.split("/")
                self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
                try:
                    self.container_var["SRM"][file].set(var_srm)
                except:
                    print(file, self.container_var["SRM"][file])
            if self.container_var["SRM"]["default"][1].get() == "Select SRM":
                self.container_var["SRM"]["default"][1].set(var_srm)
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_files["SRM"][isotope].set(var_srm)
                    try:
                        self.container_var["SRM"][isotope].set(var_srm)
                    except:
                        print(isotope, self.container_var["SRM"][isotope])
        elif key == "isotope":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_files["SRM"][isotope].set(var_srm)
                try:
                    self.container_var["SRM"][isotope].set(var_srm)
                except:
                    print(isotope, self.container_var["SRM"][isotope])
            if self.container_var["SRM"]["default"][0].get() == "Select SRM":
                self.container_var["SRM"]["default"][0].set(var_srm)
                for file in self.list_std:
                    parts = file.split("/")
                    self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
                    try:
                        self.container_var["SRM"][file].set(var_srm)
                    except:
                        print(file, self.container_var["SRM"][file])
        #
        self.fill_srm_values(var_srm=var_srm)
    #
    def quick_plot_file(self, var_filetype, event):
        if var_filetype == "STD":
            click_id = self.lb_std.curselection()
            var_fig = self.quick_plot_figure_std
        elif var_filetype == "SMPL":
            click_id = self.lb_smpl.curselection()
            var_fig = self.quick_plot_figure_smpl
        #
        click_id = click_id[0]
        var_file_long = self.container_lists[var_filetype]["Long"][click_id]
        var_file_short = self.container_lists[var_filetype]["Short"][click_id]
        #
        ## Window Settings
        window_width = 1000
        window_heigth = 700
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_quickplotter = tk.Toplevel(self.parent)
        subwindow_quickplotter.title("Quick Plotter")
        subwindow_quickplotter.geometry(var_geometry)
        subwindow_quickplotter.resizable(False, False)
        subwindow_quickplotter["bg"] = self.bg_colors["Very Light"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_quickplotter, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_quickplotter, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_quickplotter.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_quickplotter.grid_columnconfigure(i, minsize=column_min)
        #
        ###########################################################
        #
        row_start = 0
        column_start = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=subwindow_quickplotter, row_id=row_start, column_id=column_start, n_rows=1, n_columns=40,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Time-Signal Diagram", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_quickplotter, row_id=row_start, column_id=column_start + 40, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        df_data = self.load_and_assign_data(filename=var_file_long)
        list_keys = list(df_data.columns.values)
        del list_keys[0]
        dataset_time = list(df_data.iloc[:, 0])
        x_max = max(dataset_time)
        #
        if len(self.container_lists["ISOTOPES"]) == 0:
            self.container_lists["ISOTOPES"] = list_keys
            #
            self.palette_complete = sns.color_palette(
                "nipy_spectral", n_colors=len(self.container_lists["ISOTOPES"])).as_hex()
            self.isotope_colors = {}
            for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                self.isotope_colors[isotope] = self.palette_complete[index]
        #
        icp_measurements = np.array([[df_data[isotope] for isotope in self.container_lists["ISOTOPES"]]])
        y_max = np.amax(icp_measurements)
        #
        ## ISOTOPE LIST
        frm_isotopes = SE(
            parent=subwindow_quickplotter, row_id=row_start + 1, column_id=column_start + 40, n_rows=n_rows - 3,
            n_columns=20, fg=self.green_light, bg=self.bg_colors["Very Light"]).create_frame()
        vsb = tk.Scrollbar(master=frm_isotopes, orient="vertical")
        text = tk.Text(master=frm_isotopes, width=30, height=15, yscrollcommand=vsb.set, bg=self.bg_colors["Very Light"])
        vsb.config(command=text.yview)
        vsb.pack(side="right", fill="y")
        text.pack(side="left", fill="both", expand=True)
        #
        self.temp_checkbuttons = {}
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            self.temp_checkbuttons[isotope] = tk.IntVar(value=1)
            #
            cb_i = tk.Checkbutton(master=frm_isotopes, text=isotope, fg=self.green_dark, bg=self.bg_colors["Very Light"],
                                  variable=self.temp_checkbuttons[isotope],
                                  command=lambda var_isotope=isotope, var_file_short=var_file_short:
                                  self.show_line(var_isotope, var_file_short))
            #
            text.window_create("end", window=cb_i)
            text.insert("end", "\n")
            cb_i.select()
        #
        ## DIAGRAMS
        var_fig = Figure(figsize=(10, 5), dpi=150, tight_layout=True, facecolor=self.bg_colors["Very Light"])
        var_ax = var_fig.add_subplot(label=np.random.uniform())
        var_canvas = FigureCanvasTkAgg(var_fig, master=subwindow_quickplotter)
        var_toolbarFrame = tk.Frame(master=subwindow_quickplotter)
        var_toolbar = NavigationToolbar2Tk(var_canvas, var_toolbarFrame)
        #
        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short] = {
            "Figure": var_fig, "Canvas": var_canvas, "Toolbar": var_toolbar, "Axes": var_ax}
        #
        self.temp_lines = {}
        for isotope in self.container_lists["ISOTOPES"]:
            ln = var_ax.plot(dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                         linewidth=1, visible=True)
            self.temp_lines[isotope] = ln
        #
        if var_file_short in self.container_helper[var_filetype]:
            if len(self.container_helper[var_filetype][var_file_short]["BG"]["Content"]) > 0:
                times_bg = self.container_helper[var_filetype][var_file_short]["BG"]["Content"][1]["Times"]
                box_bg = var_ax.axvspan(float(times_bg[0]), float(times_bg[1]), alpha=0.35,
                                    color=self.colors_intervals["BG"])
            if len(self.container_helper[var_filetype][var_file_short]["MAT"]["Content"]) > 0:
                times_sig = self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][1]["Times"]
                box_sig = var_ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=self.colors_intervals["MAT"])
        #
        var_ax.grid(True)
        var_ax.set_yscale("log")
        var_ax.set_xlim(left=0, right=x_max)
        var_ax.set_xticks(np.arange(0, x_max, 20))
        var_ax.set_ylim(top=1.5*y_max)
        var_ax.grid(which="major", linestyle="-", linewidth=1)
        var_ax.minorticks_on()
        var_ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        var_ax.set_axisbelow(True)
        var_ax.set_title(var_file_short, fontsize=9)
        var_ax.set_xlabel("Time (s)", labelpad=0.5, fontsize=8)
        var_ax.set_ylabel("Signal (cps)", labelpad=0.5, fontsize=8)
        var_ax.xaxis.set_tick_params(labelsize=8)
        var_ax.yaxis.set_tick_params(labelsize=8)
        #
        # Canvas
        var_canvas.get_tk_widget().grid(row=row_start + 1, column=column_start, rowspan=n_rows - 3, columnspan=40,
                                        sticky="nesw")
        # Toolbar
        var_toolbarFrame.grid(row=n_rows - 2, column=0, rowspan=2, columnspan=40, sticky="w")
        var_toolbar.config(background=self.bg_colors["Very Light"])
        var_toolbar._message_label.config(background=self.bg_colors["Very Light"])
        var_toolbar.winfo_children()[-2].config(background=self.bg_colors["Very Light"])
        #
        ## BUTTONS
        btn_01 = SE(
            parent=subwindow_quickplotter, row_id=n_rows - 2, column_id=column_start + 40, n_rows=2, n_columns=5,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_button(
            text="Show All", bg_active=self.red_dark, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_file_short=var_file_short: self.show_all_lines(var_file_short))
        btn_02 = SE(
            parent=subwindow_quickplotter, row_id=n_rows - 2, column_id=column_start + 45, n_rows=2, n_columns=5,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_button(
            text="Hide All", bg_active=self.red_dark, fg_active=self.bg_colors["Dark Font"],
            command=lambda var_file_short=var_file_short: self.hide_all_lines(var_file_short))
    #
    def show_line(self, var_isotope, var_file_short):
        if self.temp_checkbuttons[var_isotope].get() == 1:
            self.temp_lines[var_isotope][0].set_visible(True)
        else:
            self.temp_lines[var_isotope][0].set_visible(False)
        #
        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short]["Canvas"].draw()
    #
    def show_all_lines(self, var_file_short):
        for isotope in self.container_lists["ISOTOPES"]:
            self.temp_checkbuttons[isotope].set(1)
            self.temp_lines[isotope][0].set_visible(True)
        #
        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short]["Canvas"].draw()
    #
    def hide_all_lines(self, var_file_short):
        for isotope in self.container_lists["ISOTOPES"]:
            self.temp_checkbuttons[isotope].set(0)
            self.temp_lines[isotope][0].set_visible(False)
        #
        self.container_var["Plotting"][self.pysills_mode]["Quickview"][var_file_short]["Canvas"].draw()
    #
    def sub_mineralanalysis_datareduction_files(self):
        ## CLEANING
        pysills_categories = ["ma_setting", "ma_datareduction", "plotting"]
        gui_categories = ["Frame", "Label", "Button", "Entry", "Option Menu", "Radiobutton", "Checkbox", "Listbox",
                          "Treeview"]
        #
        for pysills_category in pysills_categories:
            for gui_category in gui_categories:
                for gui_item in self.container_elements[pysills_category][gui_category]:
                    gui_item.grid_remove()
                for gui_item in self.gui_elements[pysills_category][gui_category]["General"]:
                    gui_item.grid_remove()
                for gui_item in self.gui_elements[pysills_category][gui_category]["Specific"]:
                    gui_item.grid_remove()
        #
        for gui_item in self.gui_elements["ma_datareduction"]["Canvas"]["Specific"]:
            try:
                gui_item.grid_remove()
            except:
                gui_item.get_tk_widget().grid_remove()
        #
        row_start = 0
        column_start = 21
        #
        ## LABELS
        #
        lbl_01 = SE(
            parent=self.parent, row_id=row_start, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="File Type", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.parent, row_id=row_start + 3, column_id=column_start, n_rows=1, n_columns=9,
            fg=self.green_light, bg=self.green_dark).create_simple_label(
            text="Data Type", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.parent, row_id=row_start + 6, column_id=column_start, n_rows=1, n_columns=9,
            fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Data Reduction", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.parent, row_id=row_start, column_id=column_start + 10, n_rows=1, n_columns=59,
            fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Results", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        self.gui_elements["ma_datareduction_files"]["Label"]["General"].extend([lbl_01, lbl_02, lbl_03, lbl_04])
        #
        ## RADIOBUTTONS
        rb_01a = SE(
            parent=self.parent, row_id=row_start + 1, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["File Type"], value_rb=0, color_bg=self.green_medium,
            fg=self.green_light, text="Standard Files", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_01b = SE(
            parent=self.parent, row_id=row_start + 2, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["File Type"], value_rb=1, color_bg=self.green_medium,
            fg=self.green_light, text="Sample Files", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_02a = SE(
            parent=self.parent, row_id=row_start + 4, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Data Type"], value_rb=0, color_bg=self.green_medium,
            fg=self.green_light, text="RAW Data", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_02b = SE(
            parent=self.parent, row_id=row_start + 5, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Data Type"], value_rb=1, color_bg=self.green_medium,
            fg=self.green_light, text="SMOOTHED Data", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03a = SE(
            parent=self.parent, row_id=row_start + 7, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=0, color_bg=self.green_medium,
            fg=self.green_light, text="Concentration", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03b = SE(
            parent=self.parent, row_id=row_start + 8, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=1, color_bg=self.green_medium,
            fg=self.green_light, text="Concentration Ratio", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03c = SE(
            parent=self.parent, row_id=row_start + 9, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=2, color_bg=self.green_medium,
            fg=self.green_light, text="Intensity", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03d = SE(
            parent=self.parent, row_id=row_start + 10, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=3, color_bg=self.green_medium,
            fg=self.green_light, text="Intensity Ratio", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03e = SE(
            parent=self.parent, row_id=row_start + 11, column_id=column_start, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=4, color_bg=self.green_medium,
            fg=self.green_light, text="Background Intensity", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03f = SE(
            parent=self.parent, row_id=row_start + 12, column_id=column_start, n_rows=1, n_columns=9,
            fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=5, color_bg=self.green_medium,
            fg=self.green_light, text="Analytical Sensitivity", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03g = SE(
            parent=self.parent, row_id=row_start + 13, column_id=column_start, n_rows=1, n_columns=9,
            fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=6, color_bg=self.green_medium,
            fg=self.green_light, text="Relative Sensitivity Factor", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03h = SE(
            parent=self.parent, row_id=row_start + 14, column_id=column_start, n_rows=1, n_columns=9,
            fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=7, color_bg=self.green_medium,
            fg=self.green_light, text="Normalized Sensitivity", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        rb_03i = SE(
            parent=self.parent, row_id=row_start + 15, column_id=column_start, n_rows=1, n_columns=9,
            fg=self.green_dark,
            bg=self.yellow_dark).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Type"], value_rb=8, color_bg=self.green_medium,
            fg=self.green_light, text="Limit of Detection", sticky="nesw", relief=tk.GROOVE,
            command=self.show_datareduction_files_results)
        #
        self.gui_elements["ma_datareduction_files"]["Radiobutton"]["General"].extend(
            [rb_01a, rb_01b, rb_02a, rb_02b, rb_03a, rb_03b, rb_03c, rb_03d, rb_03e, rb_03f, rb_03g, rb_03h, rb_03i])
        #
        ## INITIALIZATION
        self.temp_last_selection = ""
        self.temp_treeview = {}
        self.show_datareduction_files_results()
    #
    def show_datareduction_files_results(self):
        self.temp_actual_selection = str(self.container_var["ma_datareduction_files"]["File Type"].get()) \
                                   + str(self.container_var["ma_datareduction_files"]["Data Type"].get()) \
                                   + str(self.container_var["ma_datareduction_files"]["Result Type"].get())
        #
        if self.temp_actual_selection != self.temp_last_selection:
            self.temp_last_selection = str(self.container_var["ma_datareduction_files"]["File Type"].get()) \
                                       + str(self.container_var["ma_datareduction_files"]["Data Type"].get()) \
                                       + str(self.container_var["ma_datareduction_files"]["Result Type"].get())
            #
            if self.temp_last_selection[0] == "0":
                var_filetype = "STD"
            else:
                var_filetype = "SMPL"
            #
            if self.temp_last_selection[1] == "0":
                var_datatype = "RAW"
            else:
                var_datatype = "SMOOTHED"
            #
            file_long = self.container_lists["SMPL"]["Long"][0]
            var_is = self.container_var["SMPL"][file_long]["IS Data"]["IS"].get()
            #
            results_data = MineralAnalysis(
                container_measurements=self.container_measurements,
                container_lists=self.container_lists,
                container_files=self.container_files, container_var=self.container_var,
                srm_data=self.srm_actual, var_filetype=var_filetype, var_datatype=var_datatype, var_is=var_is,
                xi_std_time=self.xi_std_time).calculate_all_parameters()
            #
            # for key, value in results_data.items():
            #     print(key)
            #     for key2, value2 in value.items():
            #         print(key2, value2)
            #
            list_categories = ["Filename"]
            list_categories.extend(self.container_lists["ISOTOPES"])
            list_width = list(70*np.ones(len(list_categories)))
            list_width = [int(item) for item in list_width]
            list_width[0] = 100
            #
            if self.temp_last_selection in ["100", "110", "000", "010"]:  # Concentration
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entry_smpl = [var_file]
                            dataset_concentration_smpl = results_data["concentration"]
                            for key, value in dataset_concentration_smpl[var_file].items():
                                if self.temp_last_selection in ["100", "110"]:
                                    entry_smpl.append(f"{value:.4f}")
                                else:
                                    entry_smpl.append(f"{value:.2f}")
                            #
                            tv_srm.insert("", tk.END, values=entry_smpl)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection in ["101", "111", "001", "011"]:  # Concentration Ratio SMPL/STD RAW/SMOOTHED
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["concentration"]
                            #
                            file_long = self.container_lists[var_filetype]["Long"][index]
                            var_is = self.container_var[var_filetype][file_long]["IS Data"]["IS"].get()
                            value_is = dataset[var_file][var_is]
                            #
                            for key, value in dataset[var_file].items():
                                entries.append(f"{value/value_is:.2e}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection in ["102", "112", "002", "012"]:    # Intensity SMPL/STD RAW/SMOOTHED
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset_intensity = results_data["intensity"]
                            #
                            for key, value in dataset_intensity[var_filetype]["SIGNAL CORRECTED"][var_file].items():
                                entries.append(f"{value:.2f}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection in ["103", "113", "003", "013"]:  # Intensity Ratio SMPL/STD RAW/SMOOTHED
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["intensity"]
                            #
                            file_long = self.container_lists[var_filetype]["Long"][index]
                            var_is = self.container_var[var_filetype][file_long]["IS Data"]["IS"].get()
                            value_is = dataset[var_filetype]["SIGNAL CORRECTED"][var_file][var_is]
                            #
                            for key, value in dataset[var_filetype]["SIGNAL CORRECTED"][var_file].items():
                                entries.append(f"{value/value_is:.2e}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection in ["104", "114", "004", "014"]:    # Background Intensity
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["intensity"][var_filetype]["BACKGROUND"]
                            #
                            for key, value in dataset[var_file].items():
                                entries.append(f"{value:.4f}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection[2] == "5":  # Analytical Sensitivity
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["sensitivity"]
                            #
                            for key, value in dataset[var_file].items():
                                entries.append(f"{value:.4f}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection[2] == "6":  # Relative Sensitivity Factor
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["RSF"]
                            #
                            for key, value in dataset[var_file].items():
                                entries.append(f"{value:.4f}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection[2] == "7":  # Normalized Sensitivity
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["sensitivity normalized"]
                            #
                            for key, value in dataset[var_file].items():
                                entries.append(f"{value:.4f}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            elif self.temp_last_selection[2] == "8":  # Limit of Detection
                for key, tv_item in self.temp_treeview.items():
                    tv_item.grid_remove()
                #
                if self.temp_last_selection not in self.temp_treeview:
                    tv_srm = SE(
                        parent=self.parent, row_id=1, column_id=31, n_rows=32, n_columns=58,
                        fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
                        n_categories=len(list_categories), text_n=list_categories,
                        width_n=list_width, individual=True)
                    #
                    scb_v = ttk.Scrollbar(self.parent, orient="vertical")
                    scb_h = ttk.Scrollbar(self.parent, orient="horizontal")
                    tv_srm.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
                    scb_v.config(command=tv_srm.yview)
                    scb_h.config(command=tv_srm.xview)
                    scb_v.grid(row=1, column=89, rowspan=32, columnspan=1, sticky="ns")
                    scb_h.grid(row=33, column=31, rowspan=1, columnspan=58, sticky="ew")
                    #
                    self.temp_treeview[self.temp_last_selection] = tv_srm
                    #
                    try:
                        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                            entries = [var_file]
                            dataset = results_data["LOD"]
                            #
                            for key, value in dataset[var_file].items():
                                entries.append(f"{value:.4f}")
                            #
                            tv_srm.insert("", tk.END, values=entries)
                        #
                    except:
                        print("There are no results yet!")
                    #
                else:
                    self.temp_treeview[self.temp_last_selection].grid()
                #
            #
        else:
            pass
    #
    def sub_mineralanalysis_exploration(self):
        #
        ## Cleaning
        categories = ["SRM", "plotting", "PSE", "ma_setting", "ma_datareduction", "ma_datareduction_files"]
        for category in categories:
            if len(self.container_elements[category]["Label"]) > 0:
                for item in self.container_elements[category]["Label"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Button"]) > 0:
                for item in self.container_elements[category]["Button"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Option Menu"]) > 0:
                for item in self.container_elements[category]["Option Menu"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Entry"]) > 0:
                for item in self.container_elements[category]["Entry"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Frame"]) > 0:
                for item in self.container_elements[category]["Frame"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Radiobutton"]) > 0:
                for item in self.container_elements[category]["Radiobutton"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Checkbox"]) > 0:
                for item in self.container_elements[category]["Checkbox"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Listbox"]) > 0:
                for item in self.container_elements[category]["Listbox"]:
                    item.grid_remove()
            #
            for key, values in self.gui_elements[category].items():
                for gui_item in values["Specific"]:
                    gui_item.grid_remove()
        #
        try:
            self.canvas.get_tk_widget().grid_forget()
            self.toolbarFrame.grid_forget()
        except AttributeError:
            pass
        try:
            self.canvas_drift.get_tk_widget().grid_forget()
            self.toolbarFrame_drift.grid_forget()
        except AttributeError:
            pass
        #
        self.container_lists["SRM"].clear()
        self.container_lists["IS"].clear()
        for key, value in self.container_files["SRM"].items():
            if value.get() not in self.container_lists["SRM"] and value.get() in self.list_srm:
                self.container_lists["SRM"].append(value.get())
                self.fill_srm_values(var_srm=value.get())
        #
        for key_01, value_01 in self.container_files["STD"].items():
            for key_02, value_02 in value_01.items():
                if key_02 not in ["Plot", "Time Signal Plot", "Histogram Plot", "Scatter Plot", "BG limits",
                                  "SIG limits", "BG", "SIG", "SPK", "Time Ratio Plot"]:
                    if value_02.get() not in self.container_lists["IS"] and value_02.get() in self.container_lists["ISOTOPES"]:
                        self.container_lists["IS"].append(value_02.get())
        for key_01, value_01 in self.container_files["SMPL"].items():
            for key_02, value_02 in value_01.items():
                if key_02 not in ["Plot", "Time Signal Plot", "Histogram Plot", "Scatter Plot", "BG limits",
                                  "SIG limits", "BG", "SIG", "SPK", "Time Ratio Plot"]:
                    if value_02.get() not in self.container_lists["IS"] and value_02.get() in self.container_lists["ISOTOPES"]:
                        self.container_lists["IS"].append(value_02.get())
        #
        ## LABELS
        lbl_01 = SE(
                parent=self.parent, row_id=0, column_id=21, n_rows=2, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Exploration Mode", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        self.gui_elements["ma_dataexploration"]["Label"]["General"].extend([lbl_01])
        self.container_elements["ma_dataexploration"]["Label"].extend([lbl_01])
        #
        ## RADIOBUTTONS
        rb_mode_01 = SE(
            parent=self.parent, row_id=2, column_id=21, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_medium).create_radiobutton(
            var_rb=self.container_var["ma_dataexploration"]["Exploration Mode"], value_rb=0,
            color_bg=self.green_medium, fg=self.green_light, text="File Analysis", sticky="nesw", relief=tk.GROOVE,
            command=self.select_exploration_mode_ma)
        rb_mode_02 = SE(
            parent=self.parent, row_id=3, column_id=21, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_medium).create_radiobutton(
            var_rb=self.container_var["ma_dataexploration"]["Exploration Mode"], value_rb=1,
            color_bg=self.green_medium, fg=self.green_light, text="Isotope Analysis", sticky="nesw", relief=tk.GROOVE,
            command=self.select_exploration_mode_ma)
        #
        self.gui_elements["ma_dataexploration"]["Radiobutton"]["General"].extend([rb_mode_01, rb_mode_02])
        self.container_elements["ma_dataexploration"]["Radiobutton"].extend([rb_mode_01, rb_mode_02])
    #
    def select_exploration_mode_ma(self):
        for key, values in self.gui_elements["ma_dataexploration"].items():
            for gui_item in values["Specific"]:
                gui_item.grid_remove()
            #
            values["Specific"].clear()
        #
        if self.container_var["ma_dataexploration"]["Exploration Mode"].get() == 0:
            ## LABELS
            lbl_01 = SE(
                parent=self.parent, row_id=4, column_id=21, n_rows=1, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_02 = SE(
                parent=self.parent, row_id=6, column_id=21, n_rows=1, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_elements["ma_dataexploration"]["Label"]["Specific"].extend([lbl_01, lbl_02])
            #
            ## OPTION MENUS
            list_std = self.container_lists["STD"]["Short"]
            list_smpl = self.container_lists["SMPL"]["Short"]
            #
            opt_std = SE(
                parent=self.parent, row_id=5, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_simple_optionmenu(
                var_opt=self.container_var["ma_dataexploration"]["STD File"],
                var_default=self.container_var["ma_dataexploration"]["STD File"].get(), var_list=list_std,
                fg_active=self.green_dark, bg_active=self.red_dark)
            opt_smpl = SE(
                parent=self.parent, row_id=7, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_simple_optionmenu(
                var_opt=self.container_var["ma_dataexploration"]["SMPL File"],
                var_default=self.container_var["ma_dataexploration"]["SMPL File"].get(), var_list=list_smpl,
                fg_active=self.green_dark, bg_active=self.red_dark)
            #
            self.gui_elements["ma_dataexploration"]["Option Menu"]["Specific"].extend([opt_std, opt_smpl])
            #
        elif self.container_var["ma_dataexploration"]["Exploration Mode"].get() == 1:
            ## LABELS
            lbl_01 = SE(
                parent=self.parent, row_id=4, column_id=21, n_rows=1, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Isotope", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_elements["ma_dataexploration"]["Label"]["Specific"].extend([lbl_01])
            #
            ## OPTION MENUS
            list_iso = self.container_lists["ISOTOPES"]
            #
            opt_iso = SE(
                parent=self.parent, row_id=5, column_id=21, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_simple_optionmenu(
                var_opt=self.container_var["ma_dataexploration"]["Isotope"],
                var_default=self.container_var["ma_dataexploration"]["Isotope"].get(), var_list=list_iso,
                fg_active=self.green_dark, bg_active=self.red_dark)
            #
            self.gui_elements["ma_dataexploration"]["Option Menu"]["Specific"].extend([opt_iso])
            #
    #
    def check_functionality(self, functions):
        for key, value in functions.items():
            print(key)
            try:
                for key2, value2 in value.items():
                    print(key2, value2.get())
            except:
                print(key, value)
        for key, value in self.container_settings.items():
            print(key)
            try:
                for key2, value2 in value.items():
                    print(key2, value2.get())
            except:
                print(key, value)
    #
    def place_srm_values(self, var_srm, header_col, default=False):
        #
        lbl_srm_03 = SE(parent=self.parent, row_id=0, column_id=header_col, n_rows=1, n_columns=42, fg=self.green_light,
                            bg=self.green_dark).create_simple_label(text=str(var_srm)+" - Element Concentrations (ppm)",
                                                                    relief=tk.GROOVE, fontsize="sans 10 bold")
        self.container_elements["SRM"]["Label"].append(lbl_srm_03)
        #
        if default == True:
            for file in self.list_std:
                parts = file.split("/")
                self.container_var["SRM"][file].set(var_srm)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_srm)
        #
        try:
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.srm_actual)
        except:
            self.srm_actual[var_srm] = {}
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.srm_actual)
        #
        for element in self.list_pse:
            if element in self.srm_actual[var_srm]:
                self.container_var["SRM"][element].set(self.srm_actual[var_srm][element])
            else:
                self.container_var["SRM"][element].set(0.0)
    #
    def fill_srm_values(self, var_srm):
        if var_srm not in self.srm_actual:
            self.srm_actual[var_srm] = {}
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.srm_actual)
    #
    def calculate_mineral_chemistry(self):
        #
        M_H = 1.008
        M_C = 12.011
        M_O = 15.999
        M_F = 18.998
        M_Na = 22.990
        M_Mg = 24.305
        M_Al = 26.982
        M_Si = 28.085
        M_P = 30.974
        M_S = 32.059
        M_Cl = 35.450
        M_K = 39.098
        M_Ca = 40.078
        M_Ti = 47.867
        M_Cr = 51.996
        M_Mn = 54.938
        M_Fe = 55.845
        M_Cu = 63.546
        M_Zn = 65.382
        M_As = 74.922
        M_Sr = 87.620
        M_Zr = 91.224
        M_Mo = 95.950
        M_Ba = 137.33
        M_La = 138.91
        M_Ce = 140.12
        M_Pr = 140.91
        M_Nd = 144.24
        M_Sm = 150.360
        M_Eu = 151.960
        M_Gd = 157.25
        M_Pb = 207.200
        M_Th = 232.04
        #
        #self.mineral_chem = {}
        for mineral in self.mineral_list:
            self.mineral_chem[mineral] = {}
            if mineral == "Quartz":  # SiO2
                M_Qz = M_Si + 2 * M_O
                w_Si = (M_Si) / (M_Qz) * 1000000
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Arsenopyrite":  # FeAsS
                M_Apy = M_Fe + M_As + M_S
                w_S = (M_S)/(M_Apy)*1000000
                w_Fe = (M_Fe)/(M_Apy)*1000000
                w_As = (M_As)/(M_Apy)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
                self.mineral_chem[mineral]["As"] = w_As
            elif mineral == "Barite":  # BaSO4
                M_Brt = M_Ba + M_S + 4*M_O
                w_O = (4*M_O)/(M_Brt)*1000000
                w_S = (M_S)/(M_Brt)*1000000
                w_Ba = (M_Ba)/(M_Brt)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Ba"] = w_Ba
            elif mineral == "Ilvaite":  # CaFe3(SiO4)2(OH)
                M_Ilvt = M_Ca + 3*M_Fe + 2*(M_Si + 4*M_O) + (M_O + M_H)
                w_H = (M_H)/(M_Ilvt)*1000000
                w_O = (9*M_O)/(M_Ilvt)*1000000
                w_Si = (2*M_Si)/(M_Ilvt)*1000000
                w_Ca = (M_Ca)/(M_Ilvt)*1000000
                w_Fe = (3*M_Fe)/(M_Ilvt)*1000000
                self.mineral_chem[mineral]["H"] = w_H
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Bornite":  # Cu5FeS4
                M_Bn = 5*M_Cu + M_Fe + 4*M_S
                w_S = (4*M_S)/(M_Bn)*1000000
                w_Fe = (M_Fe)/(M_Bn)*1000000
                w_Cu = (5*M_Cu)/(M_Bn)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
                self.mineral_chem[mineral]["Cu"] = w_Cu
            elif mineral == "Calcite":  # CaCO3
                M_Cal = M_Ca + M_C + 3 * M_O
                w_C = (M_C) / (M_Cal) * 1000000
                w_Ca = (M_Ca) / (M_Cal) * 1000000
                self.mineral_chem[mineral]["C"] = w_C
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Chalcopyrite":  # CuFeS2
                M_Ccp = M_Cu + M_Fe + 2*M_S
                w_S = (2*M_S)/(M_Ccp)*1000000
                w_Fe = (M_Fe)/(M_Ccp)*1000000
                w_Cu = (M_Cu)/(M_Ccp)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
                self.mineral_chem[mineral]["Cu"] = w_Cu
            elif mineral == "Chromite":  # FeCr2O4
                M = M_Fe + 2*M_Cr + 4*M_O
                w_O = (4*M_O)/(M)*1000000
                w_Cr = (2*M_Cr)/(M)*1000000
                w_Fe = (M_Fe)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Cr"] = w_Cr
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Enargite":  # Cu3AsS4
                M_En = 3*M_Cu + M_As + 4*M_S
                w_S = (4*M_S)/(M_En)*1000000
                w_Cu = (3*M_Cu)/(M_En)*1000000
                w_As = (M_As)/(M_En)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Cu"] = w_Cu
                self.mineral_chem[mineral]["As"] = w_As
            elif mineral == "Fluorite":  # CaF2
                M_Fl = M_Ca + 2 * M_F
                w_F = (2 * M_F) / (M_Fl) * 1000000
                w_Ca = (M_Ca) / (M_Fl) * 1000000
                self.mineral_chem[mineral]["F"] = w_F
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Apatite-Cl":  # Ca5(PO4)3Cl
                M_Ap = 5 * M_Ca + 3 * (M_P + 4 * M_O) + M_Cl
                w_P = (3 * M_P) / (M_Ap) * 1000000
                w_Cl = (M_Cl) / (M_Ap) * 1000000
                w_Ca = (5 * M_Ca) / (M_Ap) * 1000000
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Cl"] = w_Cl
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Apatite-F":  # Ca5(PO4)3F
                M_Ap = 5 * M_Ca + 3 * (M_P + 4 * M_O) + M_F
                w_F = (M_F) / (M_Ap) * 1000000
                w_P = (3 * M_P) / (M_Ap) * 1000000
                w_Ca = (5 * M_Ca) / (M_Ap) * 1000000
                self.mineral_chem[mineral]["F"] = w_F
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Apatite-OH":  # Ca5(PO4)3OH
                M_Ap = 5 * M_Ca + 3 * (M_P + 4 * M_O) + (M_O + M_H)
                w_H = (M_H) / (M_Ap) * 1000000
                w_P = (3 * M_P) / (M_Ap) * 1000000
                w_Ca = (5 * M_Ca) / (M_Ap) * 1000000
                self.mineral_chem[mineral]["H"] = w_H
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Forsterite":  # Mg2SiO4
                M_Ol = 2 * M_Mg + M_Si + 4 * M_O
                w_Mg = (2 * M_Mg) / (M_Ol) * 1000000
                w_Si = (M_Si) / (M_Ol) * 1000000
                self.mineral_chem[mineral]["Mg"] = w_Mg
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Fayalite":  # Fe2SiO4
                M_Ol = 2 * M_Fe + M_Si + 4 * M_O
                w_Si = (M_Si) / (M_Ol) * 1000000
                w_Fe = (2 * M_Fe) / (M_Ol) * 1000000
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Gahnite":  # ZnAl2O4
                M = M_Zn + 2*M_Al + 4*M_O
                w_O = (4*M_O)/(M)*1000000
                w_Al = (2*M_Al)/(M)*1000000
                w_Zn = (M_Zn)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Zn"] = w_Zn
            elif mineral == "Galena":  # PbS
                M_Gn = M_Pb + M_S
                w_S = (M_S)/(M_Gn)*1000000
                w_Pb = (M_Pb)/(M_Gn)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Pb"] = w_Pb
            elif mineral == "Hematite":  # Fe2O3
                M = 2*M_Fe + 3*M_O
                w_O = (3*M_O)/(M)*1000000
                w_Fe = (2*M_Fe)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Tephroite":  # Mn2SiO4
                M_Ol = 2 * M_Mn + M_Si + 4 * M_O
                w_Si = (M_Si) / (M_Ol) * 1000000
                w_Mn = (2 * M_Mn) / (M_Ol) * 1000000
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Mn"] = w_Mn
            elif mineral == "Albite":  # NaAlSi3O8
                M_Ab = M_Na + M_Al + 3 * M_Si + 8 * M_O
                w_Na = (M_Na) / (M_Ab) * 1000000
                w_Al = (M_Al) / (M_Ab) * 1000000
                w_Si = (3 * M_Si) / (M_Ab) * 1000000
                self.mineral_chem[mineral]["Na"] = w_Na
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Anorthite":  # CaAl2Si2O8
                M_An = M_Ca + 2 * (M_Al + M_Si) + 8 * M_O
                w_Al = (2 * M_Al) / (M_An) * 1000000
                w_Si = (2 * M_Si) / (M_An) * 1000000
                w_Ca = (M_Ca) / (M_An) * 1000000
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Magnetite":  # Fe3O4
                M = 3*M_Fe + 4*M_O
                w_O = (4*M_O)/(M)*1000000
                w_Fe = (3*M_Fe)/(M)*1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Molybdenite":  # MoS2
                M = M_Mo + 2*M_S
                w_S = (2*M_S)/(M)*1000000
                w_Mo = (M_Mo)/(M)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Mo"] = w_Mo
            elif mineral == "Pyrite":  # FeS2
                M_Py = M_Fe + 2*M_S
                w_S = (2*M_S)/(M_Py)*1000000
                w_Fe = (M_Fe)/(M_Py)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral in ["Orthoclase", "Microcline"]:  # KAlSi3O8
                M_OrMc = M_K + M_Al + 3 * M_Si + 8 * M_O
                w_Al = (M_Al) / (M_OrMc) * 1000000
                w_Si = (3 * M_Si) / (M_OrMc) * 1000000
                w_K = (M_K) / (M_OrMc) * 1000000
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["K"] = w_K
            elif mineral == "Sphalerite":  # ZnS
                M_Sp = M_Zn + M_S
                w_S = (M_S)/(M_Sp)*1000000
                w_Zn = (M_Zn)/(M_Sp)*1000000
                self.mineral_chem[mineral]["S"] = w_S
                self.mineral_chem[mineral]["Zn"] = w_Zn
            elif mineral == "Zircon":  # ZrSiO4
                M_Zrn = M_Zr + (M_Si + 4*M_O)
                w_Si = (M_Si)/(M_Zrn)*1000000
                w_Zr = (M_Zr)/(M_Zrn)*1000000
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Zr"] = w_Zr
            elif mineral == "Meionite":  # Ca4 Al6 Si6 O24 CO3
                M = 4*M_Ca + 6*M_Al + 6*M_Si + 24*M_O + M_C + 3*M_O
                w_C = (M_C)/(M) * 1000000
                w_Al = (6*M_Al)/(M) * 1000000
                w_Si = (6*M_Si) / (M) * 1000000
                w_Ca = (4*M_Ca) / (M) * 1000000
                self.mineral_chem[mineral]["C"] = w_C
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Marialite":  # Na4 Al3 Si9 O24 Cl
                M = 4*M_Na + 3*M_Al + 9*M_Si + 24*M_O + M_Cl
                w_Na = (4*M_Na)/(M) * 1000000
                w_Al = (3*M_Al)/(M) * 1000000
                w_Si = (9*M_Si) / (M) * 1000000
                w_Cl = (M_Cl) / (M) * 1000000
                self.mineral_chem[mineral]["Na"] = w_Na
                self.mineral_chem[mineral]["Al"] = w_Al
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Cl"] = w_Cl
            elif mineral == "Strontianite":  # Sr C O3
                M = M_Sr + M_C + 3*M_O
                w_C = (M_C)/(M) * 1000000
                w_O = (3*M_O)/(M) * 1000000
                w_Sr = (M_Sr)/(M) * 1000000
                self.mineral_chem[mineral]["C"] = w_C
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Sr"] = w_Sr
            elif mineral == "Titanite":  # Ca Ti Si O5
                M = M_Ca + M_Ti + M_Si + 5*M_O
                w_O = (5*M_O)/(M) * 1000000
                w_Si = (M_Si)/(M) * 1000000
                w_Ca = (M_Ca)/(M) * 1000000
                w_Ti = (M_Ti)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
                self.mineral_chem[mineral]["Ti"] = w_Ti
            elif mineral == "Aegirine":  # Na Fe Si2 O6
                M = M_Na + M_Fe + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Na = (M_Na)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Fe = (M_Fe)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Na"] = w_Na
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Diopside":  # Mg Ca Si2 O6
                M = M_Mg + M_Ca + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Mg = (M_Mg)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Ca = (M_Ca)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Mg"] = w_Mg
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
            elif mineral == "Hedenbergite":  # Fe Ca Si2 O6
                M = M_Fe + M_Ca + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Ca = (M_Ca)/(M) * 1000000
                w_Fe = (M_Fe)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Ca"] = w_Ca
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Ferrosilite":  # Fe2 Si2 O6
                M = 2*M_Fe + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                w_Fe = (2*M_Fe)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Si"] = w_Si
                self.mineral_chem[mineral]["Fe"] = w_Fe
            elif mineral == "Enstatite":  # Mg2 Si2 O6
                M = 2*M_Mg + 2*M_Si + 6*M_O
                w_O = (6*M_O)/(M) * 1000000
                w_Mg = (2*M_Mg)/(M) * 1000000
                w_Si = (2*M_Si)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["Mg"] = w_Mg
                self.mineral_chem[mineral]["Si"] = w_Si
            elif mineral == "Monazite-La":  # La P O4
                M = M_La + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_La = (M_La)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["La"] = w_La
            elif mineral == "Monazite-Ce":  # Ce P O4
                M = M_Ce + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Ce = (M_Ce)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Ce"] = w_Ce
            elif mineral == "Monazite-Pr":  # Pr P O4
                M = M_Pr + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Pr = (M_Pr)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Pr"] = w_Pr
            elif mineral == "Monazite-Nd":  # Nd P O4
                M = M_Nd + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Nd = (M_Nd)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Nd"] = w_Nd
            elif mineral == "Monazite-Sm":  # Sm P O4
                M = M_Sm + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Sm = (M_Sm)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Sm"] = w_Sm
            elif mineral == "Monazite-Eu":  # Eu P O4
                M = M_Eu + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Eu = (M_Eu)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Eu"] = w_Eu
            elif mineral == "Monazite-Gd":  # Gd P O4
                M = M_Gd + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Gd = (M_Gd)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Gd"] = w_Gd
            elif mineral == "Monazite-Th":  # Th P O4
                M = M_Th + M_P + 4*M_O
                w_O = (4*M_O)/(M) * 1000000
                w_P = (M_P)/(M) * 1000000
                w_Th = (M_Th)/(M) * 1000000
                self.mineral_chem[mineral]["O"] = w_O
                self.mineral_chem[mineral]["P"] = w_P
                self.mineral_chem[mineral]["Th"] = w_Th
            elif mineral == "Select Mineral":
                pass
            #
            for element, value in self.mineral_chem[mineral].items():
                self.mineral_chem[mineral][element] = round(value, 4)
    #
    def place_mineral_values(self, var_min, header_col):
        #
        lbl_srm_03 = SE(parent=self.parent, row_id=0, column_id=header_col, n_rows=1, n_columns=42, fg=self.green_light,
                        bg=self.green_dark).create_simple_label(text=str(var_min)+" - Element Concentrations (ppm)",
                                                                relief=tk.GROOVE, fontsize="sans 10 bold")
        self.container_elements["SRM"]["Label"].append(lbl_srm_03)
        #
        self.srm_actual[var_min] = {}
        M_H = 1.008
        M_C = 12.011
        M_O = 15.999
        M_F = 18.998
        M_Na = 22.990
        M_Mg = 24.305
        M_Al = 26.982
        M_Si = 28.085
        M_P = 30.974
        M_Cl = 35.450
        M_K = 39.098
        M_Ca = 40.078
        M_Mn = 54.938
        M_Fe = 55.845
        M_Zr = 91.224
        M_Ba = 137.33
        #
        if var_min == "Quartz": # SiO2
            M_Qz = M_Si + 2*M_O
            w_Si = (M_Si)/(M_Qz) * 1000000
            self.srm_actual[var_min]["Si"] = w_Si
        elif var_min == "Arsenopyrite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
            self.srm_actual[var_min]["As"] = self.mineral_chem[var_min]["As"]
        elif var_min == "Barite":  # BaSO4
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Ba"] = self.mineral_chem[var_min]["Ba"]
        elif var_min == "Ilvaite":  # CaFe3(SiO4)2(OH)
            self.srm_actual[var_min]["H"] = self.mineral_chem[var_min]["H"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Bornite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
            self.srm_actual[var_min]["Cu"] = self.mineral_chem[var_min]["Cu"]
        elif var_min == "Calcite":  # CaCO3
            M_Cal = M_Ca + M_C + 3*M_O
            w_C = (M_C)/(M_Cal) * 1000000
            w_Ca = (M_Ca)/(M_Cal) * 1000000
            self.srm_actual[var_min]["C"] = w_C
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Chalcopyrite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
            self.srm_actual[var_min]["Cu"] = self.mineral_chem[var_min]["Cu"]
        elif var_min == "Chromite":
            self.srm_actual[var_min]["Cr"] = self.mineral_chem[var_min]["Cr"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Sphalerite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Zn"] = self.mineral_chem[var_min]["Zn"]
        elif var_min == "Enargite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Cu"] = self.mineral_chem[var_min]["Cu"]
            self.srm_actual[var_min]["As"] = self.mineral_chem[var_min]["As"]
        elif var_min == "Fluorite": # CaF2
            M_Fl = M_Ca + 2*M_F
            w_F = (2*M_F)/(M_Fl) * 1000000
            w_Ca = (M_Ca)/(M_Fl) * 1000000
            self.srm_actual[var_min]["F"] = w_F
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Hematite":
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Galena":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Pb"] = self.mineral_chem[var_min]["Pb"]
        elif var_min == "Gahnite":
            self.srm_actual[var_min]["Al"] = self.mineral_chem[var_min]["Al"]
            self.srm_actual[var_min]["Zn"] = self.mineral_chem[var_min]["Zn"]
        elif var_min == "Magnetite":
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Molybdenite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Mo"] = self.mineral_chem[var_min]["Mo"]
        elif var_min == "Pyrite":
            self.srm_actual[var_min]["S"] = self.mineral_chem[var_min]["S"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Apatite-Cl": # Ca5(PO4)3Cl
            M_Ap = 5*M_Ca + 3*(M_P + 4*M_O) + M_Cl
            w_P = (3*M_P)/(M_Ap) * 1000000
            w_Cl = (M_Cl)/(M_Ap) * 1000000
            w_Ca = (5*M_Ca)/(M_Ap) * 1000000
            self.srm_actual[var_min]["P"] = w_P
            self.srm_actual[var_min]["Cl"] = w_Cl
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Apatite-F": # Ca5(PO4)3F
            M_Ap = 5*M_Ca + 3*(M_P + 4*M_O) + M_F
            w_F = (M_F)/(M_Ap) * 1000000
            w_P = (3*M_P)/(M_Ap) * 1000000
            w_Ca = (5*M_Ca)/(M_Ap) * 1000000
            self.srm_actual[var_min]["F"] = w_F
            self.srm_actual[var_min]["P"] = w_P
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Apatite-OH": # Ca5(PO4)3OH
            M_Ap = 5*M_Ca + 3*(M_P + 4*M_O) + (M_O + M_H)
            w_H = (M_H)/(M_Ap) * 1000000
            w_P = (3*M_P)/(M_Ap) * 1000000
            w_Ca = (5*M_Ca)/(M_Ap) * 1000000
            self.srm_actual[var_min]["H"] = w_H
            self.srm_actual[var_min]["P"] = w_P
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min == "Forsterite": # Mg2SiO4
            M_Ol = 2*M_Mg + M_Si + 4*M_O
            w_Mg = (2*M_Mg)/(M_Ol) * 1000000
            w_Si = (M_Si)/(M_Ol) * 1000000
            self.srm_actual[var_min]["Mg"] = w_Mg
            self.srm_actual[var_min]["Si"] = w_Si
        elif var_min == "Fayalite": # Fe2SiO4
            M_Ol = 2*M_Fe + M_Si + 4*M_O
            w_Si = (M_Si)/(M_Ol) * 1000000
            w_Fe = (2*M_Fe)/(M_Ol) * 1000000
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Fe"] = w_Fe
        elif var_min == "Tephroite": # Mn2SiO4
            M_Ol = 2*M_Mn + M_Si + 4*M_O
            w_Si = (M_Si)/(M_Ol) * 1000000
            w_Mn = (2*M_Mn)/(M_Ol) * 1000000
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Mn"] = w_Mn
        elif var_min == "Albite": # NaAlSi3O8
            M_Ab = M_Na + M_Al + 3*M_Si + 8*M_O
            w_Na = (M_Na)/(M_Ab) * 1000000
            w_Al = (M_Al)/(M_Ab) * 1000000
            w_Si = (3*M_Si)/(M_Ab) * 1000000
            self.srm_actual[var_min]["Na"] = w_Na
            self.srm_actual[var_min]["Al"] = w_Al
            self.srm_actual[var_min]["Si"] = w_Si
        elif var_min == "Anorthite": # CaAl2Si2O8
            M_An = M_Ca + 2*(M_Al + M_Si) + 8*M_O
            w_Al = (2*M_Al)/(M_An) * 1000000
            w_Si = (2*M_Si)/(M_An) * 1000000
            w_Ca = (M_Ca)/(M_An) * 1000000
            self.srm_actual[var_min]["Al"] = w_Al
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Ca"] = w_Ca
        elif var_min in ["Orthoclase", "Microcline"]: # KAlSi3O8
            M_OrMc = M_K + M_Al + 3*M_Si + 8*M_O
            w_Al = (M_Al)/(M_OrMc) * 1000000
            w_Si = (3*M_Si)/(M_OrMc) * 1000000
            w_K = (M_K)/(M_OrMc) * 1000000
            self.srm_actual[var_min]["Al"] = w_Al
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["K"] = w_K
        elif var_min == "Zircon": # ZrSiO4
            M_Zrn = M_Zr + (M_Si + 4*M_O)
            w_Si = (M_Si)/(M_Zrn)*1000000
            w_Zr = (M_Zr)/(M_Zrn)*1000000
            self.srm_actual[var_min]["Si"] = w_Si
            self.srm_actual[var_min]["Zr"] = w_Zr
        elif var_min == "Meionite":
            self.srm_actual[var_min]["C"] = self.mineral_chem[var_min]["C"]
            self.srm_actual[var_min]["Al"] = self.mineral_chem[var_min]["Al"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
        elif var_min == "Marialite":
            self.srm_actual[var_min]["Na"] = self.mineral_chem[var_min]["Na"]
            self.srm_actual[var_min]["Al"] = self.mineral_chem[var_min]["Al"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Cl"] = self.mineral_chem[var_min]["Cl"]
        elif var_min == "Strontianite":
            self.srm_actual[var_min]["C"] = self.mineral_chem[var_min]["C"]
            self.srm_actual[var_min]["Sr"] = self.mineral_chem[var_min]["Sr"]
        elif var_min == "Titanite":
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
            self.srm_actual[var_min]["Ti"] = self.mineral_chem[var_min]["Ti"]
        elif var_min == "Aegirine":
            self.srm_actual[var_min]["Na"] = self.mineral_chem[var_min]["Na"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Diopside":
            self.srm_actual[var_min]["Mg"] = self.mineral_chem[var_min]["Mg"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
        elif var_min == "Hedenbergite":
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Ca"] = self.mineral_chem[var_min]["Ca"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Ferrosilite":
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
            self.srm_actual[var_min]["Fe"] = self.mineral_chem[var_min]["Fe"]
        elif var_min == "Enstatite":
            self.srm_actual[var_min]["Mg"] = self.mineral_chem[var_min]["Mg"]
            self.srm_actual[var_min]["Si"] = self.mineral_chem[var_min]["Si"]
        elif var_min == "Monazite-La":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["La"] = self.mineral_chem[var_min]["La"]
        elif var_min == "Monazite-Ce":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Ce"] = self.mineral_chem[var_min]["Ce"]
        elif var_min == "Monazite-Pr":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Pr"] = self.mineral_chem[var_min]["Pr"]
        elif var_min == "Monazite-Nd":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Nd"] = self.mineral_chem[var_min]["Nd"]
        elif var_min == "Monazite-Sm":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Sm"] = self.mineral_chem[var_min]["Sm"]
        elif var_min == "Monazite-Eu":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Eu"] = self.mineral_chem[var_min]["Eu"]
        elif var_min == "Monazite-Gd":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Gd"] = self.mineral_chem[var_min]["Gd"]
        elif var_min == "Monazite-Th":
            self.srm_actual[var_min]["P"] = self.mineral_chem[var_min]["P"]
            self.srm_actual[var_min]["Th"] = self.mineral_chem[var_min]["Th"]
        #
        for element in self.list_pse:
            if element in self.srm_actual[var_min]:
                self.container_var["SRM"][element].set(self.srm_actual[var_min][element])
            else:
                self.container_var["SRM"][element].set(0.0)
    #
    def select_mineral_is(self, var_min, fluidinclusion=False):
        self.srm_actual[var_min] = {}
        #
        if var_min in self.mineral_chem:
            for key, value in self.mineral_chem[var_min].items():
                self.srm_actual[var_min][key] = value
            #
            if fluidinclusion == False:
                if self.file_loaded == False:
                    self.container_var["isotopes"]["default"].set("Select IS")
                    self.container_var["settings"]["IS Concentration"].set(0.0)
            if len(self.container_var["mineralchemistry"]) > 0:
                self.container_var["mineralchemistry"].clear()
            self.container_var["mineralchemistry"].extend(list(self.mineral_chem[var_min].keys()))
            self.container_var["mineralchemistry"].sort()
            #
            possible_is = []
            for element in self.container_var["mineralchemistry"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    key = re.search("(\D+)(\d+)", isotope)
                    if element == key.group(1):
                        possible_is.append(isotope)
            if fluidinclusion == True:
                list_fluidchemistry = ["H", "Na", "Mg", "Ca", "K", "Cl", "F", "Br", "I", "At"]
                for element in list_fluidchemistry:
                    for isotope in self.container_lists["ISOTOPES"]:
                        key = re.search("(\D+)(\d+)", isotope)
                        if element == key.group(1):
                            possible_is.append(isotope)
            #
            if fluidinclusion == False:
                self.opt_is_std_def["menu"].delete(0, "end")
                self.opt_is_smpl_def["menu"].delete(0, "end")
                #
                for index, isotope in enumerate(possible_is):
                    for file in self.list_std:
                        if index == 0:
                            self.container_optionmenu["STD"][file]["menu"].delete(0, "end")
                        self.container_optionmenu["STD"][file]["menu"].add_command(
                            label=isotope, command=lambda element=isotope, file=file: self.change_std_is(element, file))
                        if self.file_loaded is False:
                            self.container_var["STD"][file]["IS"].set("Select IS")
                    for file in self.list_smpl:
                        if index == 0:
                            self.container_optionmenu["SMPL"][file]["menu"].delete(0, "end")
                        self.container_optionmenu["SMPL"][file]["menu"].add_command(
                            label=isotope, command=lambda element=isotope, file=file,
                                                          mineral=self.container_var["mineral"].get():
                            self.change_smpl_is(element, file, mineral))
                        if self.file_loaded is False:
                            self.container_var["SMPL"][file]["IS"].set("Select IS")
                    #
                    self.opt_is_std_def["menu"].add_command(
                        label=isotope, command=lambda element=isotope, mineral=var_min:
                        self.change_std_is_default(element, mineral))
                    self.opt_is_smpl_def["menu"].add_command(
                        label=isotope, command=lambda element=isotope, mineral=var_min:
                        self.change_smpl_is_default(element, mineral))
            #
            self.container_lists["Possible IS"].clear()
            self.container_lists["Possible IS"].extend(possible_is)
            #
            self.mineral_chem["Unknown"] = {}
            for element in self.container_var["mineralchemistry"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    key = re.search("(\D+)(\d+)", isotope)
                    if element == key.group(1):
                        self.mineral_chem["Unknown"][element] = self.srm_actual[var_min][element]
                        self.mineral_chem["Unknown"][isotope] = self.srm_actual[var_min][element]
    #
    def print_something(self, var):
        if isinstance(var, list):
            for item in var:
                print(item)
    #
    def find_nearest_time(self, var_t, times, category_01, category_02, event):
        try:
            time = var_t.get()
            time = time.replace(',', '.')

            x_nearest_start = round(min(times, key=lambda x: abs(x-float(time))), 8)
            var_t.set(x_nearest_start)
            self.container_settings[category_01][category_02].set(x_nearest_start)
            if "BG" in category_02:
                var_section = "BG"
            else:
                var_section = "SIG"
            key_section = "Default "+str(var_section)
            if "Start" in category_02:
                self.container_helper[key_section]["Times"][0] = x_nearest_start
                self.container_helper[key_section]["Positions"][0] = times[times == x_nearest_start].index[0]
            elif "End" in category_02:
                self.container_helper[key_section]["Times"][1] = x_nearest_start
                self.container_helper[key_section]["Positions"][1] = times[times == x_nearest_start].index[0]
            #
            # print(key_section)
            # print(self.container_helper[key_section]["Times"], self.container_helper[key_section]["Positions"])
        except:
            pass
    #
    def set_entry_value(self, var, category_01, category_02, event):
        var.set(var.get())
        self.container_settings[category_01][category_02].set(var.get())
    #
    def onclick(self, var, filename, ratio_mode, event, spikes=False):
        if spikes == False:
            if var.get() in [1, 2, 3, 4, 5]:
                if len(self.container_helper["positions"][filename]) == 2 and len(
                        self.container_helper["indices"][filename]) == 2:
                    self.container_helper["positions"][filename].clear()
                    self.container_helper["indices"][filename].clear()
                #
                x_nearest = min(self.times, key=lambda x: abs(x - event.xdata))
                self.container_helper["positions"][filename].append(x_nearest)
                self.container_helper["indices"][filename].append(self.times[self.times == x_nearest].index[0])
                #
                if len(self.container_helper["positions"][filename])+len(
                        self.container_helper["indices"][filename]) == 4:
                    if var.get() == 1:  # BG
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["BG STD"][filename]) > 0:
                                self.bg_id = self.container_helper["positions"]["BG STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["BG SMPL"][filename]) > 0:
                                self.bg_id = self.container_helper["positions"]["BG SMPL"][filename][-1][4]
                        #
                        self.bg_id += 1
                        self.bg_idlist.append(self.bg_id)
                        self.container_helper["limits BG"][self.file]["ID"].append(self.bg_id)
                        self.container_helper["limits BG"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["BG"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["BG"][0].insert(
                            tk.END, "BG" + str(self.bg_id) + " [" + str(
                                self.container_helper["positions"][filename][0]) + "-" +
                                    str(self.container_helper["positions"][filename][1]) + "]")
                        #
                        if ratio_mode == False:
                            box_bg = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            box_bg_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            #
                            self.container_helper["limits BG"][self.file][str(self.bg_id)] = box_bg
                            self.container_helper["limits BG Ratio"][self.file][str(self.bg_id)] = box_bg_ratio
                            #
                            self.canvas.draw()
                            try:
                                self.canvas_ratio.draw()
                            except:
                                pass
                        else:
                            box_bg = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            box_bg_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.blue_dark)
                            #
                            self.container_helper["limits BG"][self.file][str(self.bg_id)] = box_bg
                            self.container_helper["limits BG Ratio"][self.file][str(self.bg_id)] = box_bg_ratio
                            #
                            self.canvas.draw()
                            self.canvas_ratio.draw()
                        #
                        self.indices_bg = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id] = {}
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Box"] = box_bg
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["BG"][self.bg_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_bg, box_bg_ratio]}
                            self.container_helper["positions"]["BG STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.bg_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["BG"][self.bg_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_bg, box_bg_ratio]}
                            self.container_helper["positions"]["BG SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.bg_id])
                    elif var.get() == 2:    # SIG
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["SIG STD"][filename]) > 0:
                                self.sig_id = self.container_helper["positions"]["SIG STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["SIG SMPL"][filename]) > 0:
                                self.sig_id = self.container_helper["positions"]["SIG SMPL"][filename][-1][4]
                        self.sig_id += 1
                        self.sig_idlist.append(self.sig_id)
                        self.container_helper["limits SIG"][self.file]["ID"].append(self.sig_id)
                        self.container_helper["limits SIG"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["SIG"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["SIG"][0].insert(
                            tk.END, "SIG"+str(self.sig_id)+" ["+str(self.container_helper["positions"][filename][0])+"-"
                                           +str(self.container_helper["positions"][filename][1])+"]")
                        #
                        if ratio_mode == False:
                            box_sig = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            self.container_helper["limits SIG"][self.file][str(self.sig_id)] = box_sig
                            self.canvas.draw()
                            #
                            # box_sig_ratio = self.ax_ratio.axvspan(
                            #     self.container_helper["positions"][filename][0],
                            #     self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            # self.container_helper["limits SIG Ratio"][self.file][str(self.sig_id)] = box_sig_ratio
                            # self.canvas_ratio.draw()
                        else:
                            box_sig_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            box_sig = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                            #
                            self.container_helper["limits SIG Ratio"][self.file][str(self.sig_id)] = box_sig_ratio
                            self.container_helper["limits SIG"][self.file][str(self.sig_id)] = box_sig
                            #
                            self.canvas_ratio.draw()
                            self.canvas.draw()
                        #
                        self.indices_sig = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id] = {}
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Box"] = box_sig
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["SIG"][self.sig_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_sig, box_sig_ratio]}
                            self.container_helper["positions"]["SIG STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.sig_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["SIG"][self.sig_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_sig, box_sig_ratio]}
                            self.container_helper["positions"]["SIG SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.sig_id])
                    elif var.get() == 3:    # SPK
                        isotope_list = []
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in self.container_helper[self.file_type][filename]["SPK"]:
                                self.container_helper[self.file_type][filename]["SPK"][isotope] = {}
                            if self.container_var["plotting"][isotope][1].get() == 1:
                                isotope_list.append(isotope)
                        for isotope in isotope_list:
                            if len(self.container_helper[self.file_type][filename]["SPK"][isotope]) == 0:
                                self.spk_id = 1
                            else:
                                self.spk_id = int(len(self.container_helper[self.file_type][filename]["SPK"][isotope]) + 1)
                        isotope = "".join(isotope_list)
                        self.spk_idlist.append(self.spk_id)
                        self.container_helper["limits SPK"][self.file]["ID"].append(self.spk_id)
                        self.container_helper["limits SPK"][self.file]["type"].append("custom")
                        self.container_helper["limits SPK"][self.file]["info"].append([isotope, self.spk_id])
                        self.container_helper["positions"]["SPK"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        #
                        if len(isotope_list) > 1:
                            color_var = self.yellow_dark
                        else:
                            color_var = self.isotope_colors[isotope]
                        self.container_listboxes[self.file_type][filename]["SPK"][0].insert(
                            tk.END, "["+", ".join(isotope_list)+"] #"+str(self.spk_id)+" ["+str(
                                self.container_helper["positions"][filename][0])+"-"+str(
                                self.container_helper["positions"][filename][1])+"]")
                        #
                        if ratio_mode == False:
                            box_spk = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            box_spk_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            #
                            self.container_helper["limits SPK"][self.file][str(self.spk_id)] = box_spk
                            self.container_helper["limits SPK Ratio"][self.file][str(self.spk_id)] = box_spk_ratio
                            #
                            self.canvas_ratio.draw()
                            self.canvas.draw()
                        else:
                            box_spk_ratio = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            box_spk = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.125, color=color_var)
                            #
                            self.container_helper["limits SPK Ratio"][self.file][str(self.spk_id)] = box_spk_ratio
                            self.container_helper["limits SPK"][self.file][str(self.spk_id)] = box_spk
                            #
                            self.canvas_ratio.draw()
                            self.canvas.draw()
                        #
                        self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id] = {}
                        for isotope in isotope_list:
                            if isotope not in self.spikes_isotopes[self.file_type][filename]:
                                self.spikes_isotopes[self.file_type][filename][isotope] = []
                                self.spikes_isotopes[self.file_type][filename][isotope].append([self.container_helper["indices"][filename][0],
                                                                      self.container_helper["indices"][filename][1]])
                            else:
                                self.spikes_isotopes[self.file_type][filename][isotope].append([self.container_helper["indices"][filename][0],
                                                                      self.container_helper["indices"][filename][1]])
                            #
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Isotope"] = isotope
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Times"] = [
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1]]
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Positions"] = [
                                self.container_helper["indices"][filename][0],
                                self.container_helper["indices"][filename][1]]
                            self.container_files[self.file_type][self.filename_short]["SPK"][self.spk_id][
                                "Box"] = box_spk
                            #
                            if self.file_type == "STD":
                                self.container_helper["STD"][filename]["SPK"][isotope][self.spk_id] = {
                                    "Times": [self.container_helper["positions"][filename][0],
                                              self.container_helper["positions"][filename][1]],
                                    "Positions": [self.container_helper["indices"][filename][0],
                                                  self.container_helper["indices"][filename][1]],
                                    "Object": [box_spk, box_spk_ratio]}
                            elif self.file_type == "SMPL":
                                self.container_helper["SMPL"][filename]["SPK"][isotope][self.spk_id] = {
                                    "Times": [self.container_helper["positions"][filename][0],
                                              self.container_helper["positions"][filename][1]],
                                    "Positions": [self.container_helper["indices"][filename][0],
                                                  self.container_helper["indices"][filename][1]],
                                    "Object": [box_spk, box_spk_ratio]}
                    #
                    elif var.get() == 4:    # MAT
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["MAT STD"][filename]) > 0:
                                self.mat_id = self.container_helper["positions"]["MAT STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["MAT SMPL"][filename]) > 0:
                                self.mat_id = self.container_helper["positions"]["MAT SMPL"][filename][-1][4]
                        self.mat_id += 1
                        self.mat_idlist.append(self.mat_id)
                        self.container_helper["limits MAT"][self.file]["ID"].append(self.mat_id)
                        self.container_helper["limits MAT"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["MAT"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["MAT"][0].insert(
                            tk.END, "MAT"+str(self.mat_id)+" ["+str(self.container_helper["positions"][filename][0])+"-"
                                    +str(self.container_helper["positions"][filename][1])+"]")
                        #
                        # if ratio_mode == False:
                        #     box_mat = self.ax.axvspan(
                        #         self.container_helper["positions"][filename][0],
                        #         self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        #     self.container_helper["limits MAT"][self.file][str(self.mat_id)] = box_mat
                        #     #
                        #     self.canvas.draw()
                        # else:
                        #     box_mat = self.ax_ratio.axvspan(
                        #         self.container_helper["positions"][filename][0],
                        #         self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        #     self.container_helper["limits MAT Ratio"][self.file][str(self.mat_id)] = box_mat
                        #     #
                        #     self.canvas_ratio.draw()
                        #
                        box_mat = self.ax.axvspan(
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        box_mat_ratio = self.ax_ratio.axvspan(
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1], alpha=0.25, color=self.brown_dark)
                        self.container_helper["limits MAT"][self.file][str(self.mat_id)] = box_mat
                        self.container_helper["limits MAT Ratio"][self.file][str(self.mat_id)] = box_mat_ratio
                        #
                        self.canvas_ratio.draw()
                        self.canvas.draw()
                        #
                        self.indices_mat = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id] = {}
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Box"] = box_mat
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["MAT"][self.mat_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_mat, box_mat_ratio]}
                            self.container_helper["positions"]["MAT STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.mat_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["MAT"][self.mat_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": [box_mat, box_mat_ratio]}
                            self.container_helper["positions"]["MAT SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.mat_id])
                    #
                    elif var.get() == 5:  # INCL
                        if self.file_type == "STD":
                            if len(self.container_helper["positions"]["INCL STD"][filename]) > 0:
                                self.incl_id = self.container_helper["positions"]["INCL STD"][filename][-1][4]
                        elif self.file_type == "SMPL":
                            if len(self.container_helper["positions"]["INCL SMPL"][filename]) > 0:
                                self.incl_id = self.container_helper["positions"]["INCL SMPL"][filename][-1][4]
                        self.incl_id += 1
                        self.incl_idlist.append(self.incl_id)
                        self.container_helper["limits INCL"][self.file]["ID"].append(self.incl_id)
                        self.container_helper["limits INCL"][self.file]["type"].append("custom")
                        self.container_helper["positions"]["INCL"][filename].append(
                            [round(self.container_helper["positions"][filename][0], 4),
                             round(self.container_helper["positions"][filename][1], 4)])
                        self.container_listboxes[self.file_type][filename]["INCL"][0].insert(
                            tk.END, "INCL" + str(self.incl_id) + " [" + str(
                                self.container_helper["positions"][filename][0]) + "-"
                                    + str(self.container_helper["positions"][filename][1]) + "]")
                        #
                        if ratio_mode == False:
                            box_incl = self.ax.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.slate_grey_dark)
                            self.container_helper["limits INCL"][self.file][str(self.incl_id)] = box_incl
                            #
                            self.canvas.draw()
                        else:
                            box_incl = self.ax_ratio.axvspan(
                                self.container_helper["positions"][filename][0],
                                self.container_helper["positions"][filename][1], alpha=0.25, color=self.slate_grey_dark)
                            self.container_helper["limits INCL Ratio"][self.file][str(self.incl_id)] = box_incl
                            #
                            self.canvas_ratio.draw()
                        #
                        self.indices_incl = self.container_helper["indices"][filename]
                        #
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id] = {}
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id]["Times"] = [
                            self.container_helper["positions"][filename][0],
                            self.container_helper["positions"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id][
                            "Positions"] = [
                            self.container_helper["indices"][filename][0],
                            self.container_helper["indices"][filename][1]]
                        self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id][
                            "Box"] = box_incl
                        #
                        if self.file_type == "STD":
                            self.container_helper["STD"][filename]["INCL"][self.incl_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": box_incl}
                            self.container_helper["positions"]["INCL STD"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.incl_id])
                        elif self.file_type == "SMPL":
                            self.container_helper["SMPL"][filename]["INCL"][self.incl_id] = {
                                "Times": [self.container_helper["positions"][filename][0],
                                          self.container_helper["positions"][filename][1]],
                                "Positions": [self.container_helper["indices"][filename][0],
                                              self.container_helper["indices"][filename][1]],
                                "Object": box_incl}
                            self.container_helper["positions"]["INCL SMPL"][filename].append(
                                [self.container_helper["positions"][filename][0],
                                 self.container_helper["positions"][filename][1],
                                 self.container_helper["indices"][filename][0],
                                 self.container_helper["indices"][filename][1],
                                 self.incl_id])
                #
                    elif var.get() == 0:
                        pass
            else:
                pass
            #
        else:
            if var.get() == 1:
                if len(self.container_helper["positions"][filename]) == 2 and len(self.container_helper["indices"][filename]) == 2:
                    self.container_helper["positions"][filename].clear()
                    self.container_helper["indices"][filename].clear()
                #
                x_nearest = min(self.times, key=lambda x: abs(x-event.xdata))
                self.container_helper["positions"][filename].append(x_nearest)
                self.container_helper["indices"][filename].append(self.times[self.times == x_nearest].index[0])
                #
                if len(self.container_helper["positions"][filename])+len(self.container_helper["indices"][filename]) == 4:
                    if var.get() == 1:
                        self.se_id += 1
                        self.se_idlist.append(self.se_id)
                        self.positions_se.append([round(self.container_helper["positions"][filename][0], 4), round(self.container_helper["positions"][filename][1], 4)])
                        self.lb_se.insert(tk.END, "Spikes"+str(self.se_id)+" ["+str(self.container_helper["positions"][filename][0])+"-"+
                                                       str(self.container_helper["positions"][filename][1])+"]"+" ["+str(self.container_helper["indices"][filename][0]) + "-"+
                                                       str(self.container_helper["indices"][filename][1]) +"]")
                        box_se = self.ax.axvspan(self.container_helper["positions"][filename][0], self.container_helper["positions"][filename][1], alpha=0.25,
                                                 color="#fff6a4")
                        self.limits_se[str(self.se_id)] = box_se
                        self.canvas_se.draw()
                    elif var.get() == 0:
                        pass
            else:
                pass
    #
    def delete_interval(self, var):
        filename = self.file.split("/")[-1]
        #
        if var.get() == 1:  # BG
            item = self.container_listboxes[self.file_type][filename]["BG"][0].curselection()
            index = self.container_helper["limits BG"][self.file]["ID"][item[0]]
            self.container_helper["limits BG"][self.file]["ID"].remove(index)
            #
            self.container_listboxes[self.file_type][filename]["BG"][0].delete(tk.ANCHOR)
            if self.file_type == "STD":
                for object in self.container_helper["STD"][filename]["BG"][index]["Object"]:
                    object.set_visible(False)
                #
                self.canvas.draw()
                self.canvas_ratio.draw()
                self.container_helper["STD"][filename]["BG"].pop(index)
                for item in self.container_helper["positions"]["BG STD"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["BG STD"][filename].remove(item)
            elif self.file_type == "SMPL":
                for object in self.container_helper["SMPL"][filename]["BG"][index]["Object"]:
                    object.set_visible(False)
                #
                self.canvas.draw()
                self.canvas_ratio.draw()
                self.container_helper["SMPL"][filename]["BG"].pop(index)
                for item in self.container_helper["positions"]["BG SMPL"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["BG SMPL"][filename].remove(item)
        #
        elif var.get() == 2:    # SIG
            #
            #item = self.lb_sig.curselection()
            item = self.container_listboxes[self.file_type][filename]["SIG"][0].curselection()
            index = self.container_helper["limits SIG"][self.file]["ID"][item[0]]
            self.container_helper["limits SIG"][self.file]["ID"].remove(index)
            #
            #self.lb_sig.delete(tk.ANCHOR)
            self.container_listboxes[self.file_type][filename]["SIG"][0].delete(tk.ANCHOR)
            if self.file_type == "STD":
                for object in self.container_helper["STD"][filename]["SIG"][index]["Object"]:
                    object.set_visible(False)
                #self.container_helper["STD"][filename]["SIG"][index]["Object"].set_visible(False)
                self.canvas.draw()
                self.canvas_ratio.draw()
                self.container_helper["STD"][filename]["SIG"].pop(index)
                for item in self.container_helper["positions"]["SIG STD"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["SIG STD"][filename].remove(item)
            elif self.file_type == "SMPL":
                for object in self.container_helper["SMPL"][filename]["SIG"][index]["Object"]:
                    object.set_visible(False)
                #self.container_helper["SMPL"][filename]["SIG"][index]["Object"].set_visible(False)
                self.canvas.draw()
                self.canvas_ratio.draw()
                self.container_helper["SMPL"][filename]["SIG"].pop(index)
                for item in self.container_helper["positions"]["SIG SMPL"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["SIG SMPL"][filename].remove(item)
        #
        elif var.get() == 3:    # SPK
            #
            #item = self.lb_spk.curselection()
            item = self.container_listboxes[self.file_type][filename]["SPK"][0].curselection()
            isotope = self.container_helper["limits SPK"][self.file]["info"][item[0]][0]
            index = self.container_helper["limits SPK"][self.file]["info"][item[0]][1]
            self.container_helper["limits SPK"][self.file]["info"].pop(item[0])
            self.container_helper["limits SPK"][self.file]["ID"].remove(index)
            #
            #self.lb_spk.delete(tk.ANCHOR)
            self.container_listboxes[self.file_type][filename]["SPK"][0].delete(tk.ANCHOR)
            if len(isotope) < 6:
                if self.file_type == "STD":
                    try:
                        self.container_helper["STD"][filename]["SPK"][isotope][index]["Object"].set_visible(False)
                    except:
                        for object in self.container_helper["STD"][filename]["SPK"][isotope][index]["Object"]:
                            object.set_visible(False)
                    self.canvas.draw()
                    self.container_helper["STD"][filename]["SPK"][isotope].pop(index)
                    for item in self.container_helper["positions"]["SPK STD"][filename]:
                        if index == item[-1]:
                            self.container_helper["positions"]["SPK STD"][filename].remove(item)
                elif self.file_type == "SMPL":
                    try:
                        self.container_helper["SMPL"][filename]["SPK"][isotope][index]["Object"].set_visible(False)
                    except:
                        for object in self.container_helper["SMPL"][filename]["SPK"][isotope][index]["Object"]:
                            object.set_visible(False)
                    self.canvas.draw()
                    self.container_helper["SMPL"][filename]["SPK"][isotope].pop(index)
                    for item in self.container_helper["positions"]["SPK SMPL"][filename]:
                        if index == item[-1]:
                            self.container_helper["positions"]["SPK SMPL"][filename].remove(item)
            else:
                try:
                    self.container_helper[self.file_type][filename]["SPK"][self.container_lists["ISOTOPES"][0]][index]["Object"].set_visible(False)
                except:
                    for object in self.container_helper[self.file_type][filename]["SPK"][self.container_lists["ISOTOPES"][0]][index]["Object"]:
                        object.set_visible(False)
                self.canvas.draw()
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_helper[self.file_type][filename]["SPK"][isotope].pop(index)
        #
        elif var.get() == 4:    # MAT
            #
            item = self.container_listboxes[self.file_type][filename]["MAT"][0].curselection()
            index = self.container_helper["limits MAT"][self.file]["ID"][item[0]]
            self.container_helper["limits MAT"][self.file]["ID"].remove(index)
            #
            self.container_listboxes[self.file_type][filename]["MAT"][0].delete(tk.ANCHOR)
            if self.file_type == "STD":
                for object in self.container_helper["STD"][filename]["MAT"][index]["Object"]:
                    object.set_visible(False)
                self.canvas.draw()
                self.container_helper["STD"][filename]["MAT"].pop(index)
                for item in self.container_helper["positions"]["MAT STD"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["MAT STD"][filename].remove(item)
            elif self.file_type == "SMPL":
                for object in self.container_helper["SMPL"][filename]["MAT"][index]["Object"]:
                    object.set_visible(False)
                # if self.container_var["plotting"][filename]["RB"][2].get() == 0:
                #     self.container_helper["SMPL"][filename]["MAT"][index]["Object"][0].set_visible(False)
                # else:
                #     self.container_helper["SMPL"][filename]["MAT"][index]["Object"][1].set_visible(False)
                self.canvas.draw()
                self.container_helper["SMPL"][filename]["MAT"].pop(index)
                for item in self.container_helper["positions"]["MAT SMPL"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["MAT SMPL"][filename].remove(item)
        #
        elif var.get() == 5:    # INCL
            #
            item = self.container_listboxes[self.file_type][filename]["INCL"][0].curselection()
            index = self.container_helper["limits INCL"][self.file]["ID"][item[0]]
            self.container_helper["limits INCL"][self.file]["ID"].remove(index)
            #
            self.container_listboxes[self.file_type][filename]["INCL"][0].delete(tk.ANCHOR)
            if self.file_type == "STD":
                self.container_helper["STD"][filename]["INCL"][index]["Object"].set_visible(False)
                self.canvas.draw()
                self.container_helper["STD"][filename]["INCL"].pop(index)
                for item in self.container_helper["positions"]["INCL STD"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["INCL STD"][filename].remove(item)
            elif self.file_type == "SMPL":
                self.container_helper["SMPL"][filename]["INCL"][index]["Object"].set_visible(False)
                self.canvas.draw()
                self.container_helper["SMPL"][filename]["INCL"].pop(index)
                for item in self.container_helper["positions"]["INCL SMPL"][filename]:
                    if index == item[-1]:
                        self.container_helper["positions"]["INCL SMPL"][filename].remove(item)
    #
    def update_edited_datasets(self, mode="MA"):
        filename = self.file.split("/")[-1]
        if mode == "MA":
            intervals_bg = []
            intervals_sig = []
            #
            for key, value in self.container_helper[self.file_type][filename]["BG"].items():
                intervals_bg.append(value["Positions"])
            for key, value in self.container_helper[self.file_type][filename]["SIG"].items():
                intervals_sig.append(value["Positions"])
            #
            merged_intervals_bg = ES(variable=np.array(intervals_bg)).merge_times()
            merged_intervals_sig = ES(variable=np.array(intervals_sig)).merge_times()
            self.container_files[self.file_type][filename]["BG limits"] = merged_intervals_bg
            self.container_files[self.file_type][filename]["SIG limits"] = merged_intervals_sig
            #
            for key_01, value_01 in self.container_measurements["SELECTED"][filename].items():
                if key_01 != "Time":
                    for key_02, value_02 in value_01.items():
                        for interval in merged_intervals_bg:
                            if key_01 == "RAW":
                                value_02["BG"].extend(
                                    self.container_measurements["RAW"][filename][key_02][interval[0]:interval[1]+1])
                            elif key_01 == "SMOOTHED":
                                try:
                                    value_02["BG"].extend(
                                        self.container_measurements["EDITED"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                except:
                                    value_02["BG"].extend(np.ones(1000))
                        for interval in merged_intervals_sig:
                            if key_01 == "RAW":
                                value_02["SIG"].extend(
                                    self.container_measurements["RAW"][filename][key_02][interval[0]:interval[1]+1])
                            elif key_01 == "SMOOTHED":
                                try:
                                    value_02["SIG"].extend(
                                        self.container_measurements["EDITED"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                except:
                                    value_02["SIG"].extend(np.ones(1000))
            #
        elif mode in ["FI", "MI"]:
            intervals_bg = []
            intervals_mat = []
            intervals_incl = []
            #
            for key, value in self.container_helper[self.file_type][filename]["BG"].items():
                intervals_bg.append(value["Positions"])
            for key, value in self.container_helper[self.file_type][filename]["MAT"].items():
                intervals_mat.append(value["Positions"])
            for key, value in self.container_helper[self.file_type][filename]["INCL"].items():
                intervals_incl.append(value["Positions"])
            #
            merged_intervals_bg = ES(variable=np.array(intervals_bg)).merge_times()
            merged_intervals_mat = ES(variable=np.array(intervals_mat)).merge_times()
            merged_intervals_incl = ES(variable=np.array(intervals_incl)).merge_times()
            self.container_files[self.file_type][filename]["BG limits"] = merged_intervals_bg
            self.container_files[self.file_type][filename]["MAT limits"] = merged_intervals_mat
            self.container_files[self.file_type][filename]["INCL limits"] = merged_intervals_incl
            #
            for key_01, value_01 in self.container_measurements["SELECTED"][filename].items():
                if key_01 != "Time":
                    for key_02, value_02 in value_01.items():
                        for interval in merged_intervals_bg:
                            if key_01 == "RAW":
                                value_02["BG"].extend(
                                    self.container_measurements["RAW"][filename][key_02][interval[0]:interval[1] + 1])
                            elif key_01 == "SMOOTHED":
                                try:
                                    value_02["BG"].extend(
                                        self.container_measurements["EDITED"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                except:
                                    value_02["BG"].extend(np.ones(1000))
                        for interval in merged_intervals_mat:
                            if key_01 == "RAW":
                                value_02["MAT"].extend(
                                    self.container_measurements["RAW"][filename][key_02][interval[0]:interval[1] + 1])
                            elif key_01 == "SMOOTHED":
                                try:
                                    value_02["MAT"].extend(
                                        self.container_measurements["EDITED"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                except:
                                    value_02["MAT"].extend(np.ones(1000))
                        for interval in merged_intervals_incl:
                            if key_01 == "RAW":
                                value_02["INCL"].extend(
                                    self.container_measurements["RAW"][filename][key_02][interval[0]:interval[1] + 1])
                            elif key_01 == "SMOOTHED":
                                try:
                                    value_02["INCL"].extend(
                                        self.container_measurements["EDITED"][filename][key_02][
                                        interval[0]:interval[1] + 1])
                                except:
                                    value_02["INCL"].extend(np.ones(1000))
        #
        self.container_var[self.file_type][self.file]["Frame"].config(bg=self.sign_green)
    #
    def smooth_all_isotopes(self):
        #
        if len(self.container_helper["positions"][self.filename_short]) == 2 \
                and len(self.container_helper["indices"][self.filename_short]) == 2:
            self.container_helper["positions"][self.filename_short].clear()
            self.container_helper["indices"][self.filename_short].clear()
        #
        isotope_list = []
        for isotope in self.container_lists["ISOTOPES"]:
            isotope_list.append(isotope)
            if isotope not in self.container_helper[self.file_type][self.filename_short]["SPK"]:
                self.container_helper[self.file_type][self.filename_short]["SPK"][isotope] = {}
            if len(self.container_helper[self.file_type][self.filename_short]["SPK"][isotope]) == 0:
                self.spk_id = 1
            else:
                self.spk_id = int(len(self.container_helper[self.file_type][self.filename_short]["SPK"][isotope]) + 1)
        #
        start_time = self.times.iloc[0]
        end_time = self.times.iloc[-1]
        self.container_helper["positions"][self.filename_short].extend([round(start_time, 4), round(end_time, 4)])
        self.container_helper["indices"][self.filename_short].extend([self.times[self.times == start_time].index[0],
                                                                      self.times[self.times == end_time].index[0]])
        #
        isotope = "".join(isotope_list)
        self.spk_idlist.append(self.spk_id)
        self.container_helper["limits SPK"][self.file]["ID"].append(self.spk_id)
        self.container_helper["limits SPK"][self.file]["type"].append("custom")
        self.container_helper["limits SPK"][self.file]["info"].append([isotope, self.spk_id])
        self.container_helper["positions"]["SPK"][self.filename_short].append(
            [round(self.container_helper["positions"][self.filename_short][0], 4),
             round(self.container_helper["positions"][self.filename_short][1], 4)])
        #
        if len(isotope_list) > 1:
            color_var = self.yellow_dark
        else:
            color_var = self.isotope_colors[isotope]
        self.container_listboxes[self.file_type][self.filename_short]["SPK"][0].insert(
            tk.END, "["+", ".join(isotope_list)+"] #"+str(self.spk_id)+" ["+str(
                self.container_helper["positions"][self.filename_short][0])+"-"+str(
                self.container_helper["positions"][self.filename_short][1])+"]")
        #
        box_spk = self.ax.axvspan(
            self.container_helper["positions"][self.filename_short][0],
            self.container_helper["positions"][self.filename_short][1], alpha=0.125, color=color_var)
        box_spk_ratio = self.ax_ratio.axvspan(
            self.container_helper["positions"][self.filename_short][0],
            self.container_helper["positions"][self.filename_short][1], alpha=0.125, color=color_var)
        #
        self.container_helper["limits SPK"][self.file][str(self.spk_id)] = box_spk
        self.container_helper["limits SPK Ratio"][self.file][str(self.spk_id)] = box_spk_ratio
        #
        self.canvas_ratio.draw()
        self.canvas.draw()
        #
        for isotope in isotope_list:
            if isotope not in self.spikes_isotopes[self.file_type][self.filename_short]:
                self.spikes_isotopes[self.file_type][self.filename_short][isotope] = []
                self.spikes_isotopes[self.file_type][self.filename_short][isotope].append(
                    [self.container_helper["indices"][self.filename_short][0],
                     self.container_helper["indices"][self.filename_short][1]])
            else:
                self.spikes_isotopes[self.file_type][self.filename_short][isotope].append(
                    [self.container_helper["indices"][self.filename_short][0],
                     self.container_helper["indices"][self.filename_short][1]])
            if self.file_type == "STD":
                self.container_helper["STD"][self.filename_short]["SPK"][isotope][self.spk_id] = {
                    "Times": [self.container_helper["positions"][self.filename_short][0],
                              self.container_helper["positions"][self.filename_short][1]],
                    "Positions": [self.container_helper["indices"][self.filename_short][0],
                                  self.container_helper["indices"][self.filename_short][1]],
                    "Object": [box_spk, box_spk_ratio]}
            elif self.file_type == "SMPL":
                self.container_helper["SMPL"][self.filename_short]["SPK"][isotope][self.spk_id] = {
                    "Times": [self.container_helper["positions"][self.filename_short][0],
                              self.container_helper["positions"][self.filename_short][1]],
                    "Positions": [self.container_helper["indices"][self.filename_short][0],
                                  self.container_helper["indices"][self.filename_short][1]],
                    "Object": [box_spk, box_spk_ratio]}
    #
    def do_spike_elimination_all_grubbs(self, filetype):
        if "Selection" not in self.container_spikes:
            self.container_spikes["Selection"] = {}
        #
        if self.pysills_mode == "MA":
            var_alpha = float(self.container_var["ma_setting"]["SE Alpha"].get())
            var_threshold = int(self.container_var["ma_setting"]["SE Threshold"].get())
            if self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (SILLS)":
                var_method = 0
            elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test":
                var_method = 1
            # elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (alternative)":
            #     var_method = 2
        elif self.pysills_mode == "FI":
            var_alpha = float(self.container_var["fi_setting"]["SE Alpha"].get())
            var_threshold = int(self.container_var["fi_setting"]["SE Threshold"].get())
            if self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (SILLS)":
                var_method = 0
            elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test":
                var_method = 1
            # elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (alternative)":
            #     var_method = 2
        elif self.pysills_mode == "MI":
            var_alpha = float(self.container_var["mi_setting"]["SE Alpha"].get())
            var_threshold = int(self.container_var["mi_setting"]["SE Threshold"].get())
            if self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (SILLS)":
                var_method = 0
            elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test":
                var_method = 1
            # elif self.container_var["Spike Elimination Method"].get() == "Grubbs-Test (alternative)":
            #     var_method = 2
        #
        if filetype == "STD":
            for file_std in self.container_lists["STD"]["Short"]:
                isotopes_spiked_list = [*self.spikes_isotopes[filetype][file_std]]
                corrected_isotopes = []
                not_corrected_isotopes = []
                self.container_spikes[file_std] = {}
                #
                if file_std not in self.container_spikes["Selection"]:
                    self.container_spikes["Selection"][file_std] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    if bool(self.spikes_isotopes[filetype][file_std]) == True:
                        for isotope_spiked, intervals in self.spikes_isotopes[filetype][file_std].items():
                            #
                            if isotope_spiked not in self.container_spikes["Selection"][file_std]:
                                self.container_spikes["Selection"][file_std][isotope_spiked] = {}
                            #
                            if isotope in isotopes_spiked_list:
                                if isotope not in corrected_isotopes:
                                    corrected_isotopes.append(isotope)
                                    spike_intervals = np.array(intervals)
                                    merged_intervals = ES(variable=spike_intervals).merge_times()
                                    for interval in merged_intervals:
                                        dataset_raw = self.container_measurements["RAW"][file_std][isotope][
                                                      interval[0]:interval[1]]
                                        dataset_complete = self.container_measurements["RAW"][file_std][isotope]

                                        if var_method == 0:
                                            data_smoothed, indices_outl = GrubbsTestSILLS(
                                                raw_data=dataset_raw, alpha=var_alpha, threshold=var_threshold,
                                                start_index=interval[0],
                                                dataset_complete=dataset_complete).determine_outlier()
                                        elif var_method == 1:
                                            data_smoothed, indices_outl = ES(variable=dataset_raw).do_grubbs_test(
                                                alpha=var_alpha, dataset_complete=dataset_complete,
                                                threshold=var_threshold)

                                        self.container_measurements["EDITED"][file_std][isotope][
                                            "Uncut"] = data_smoothed
                                        #
                                        self.container_spikes[file_std][isotope] = {
                                            "Data RAW": self.container_measurements["RAW"][file_std][isotope],
                                            "Data SMOOTHED": data_smoothed, "Indices": indices_outl,
                                            "Times": self.container_measurements["SELECTED"][file_std]["Time"]}
                                    #
                                    for var_index in indices_outl:
                                        self.container_spikes["Selection"][file_std][isotope][
                                            var_index] = data_smoothed[var_index]
                                    #
                                else:
                                    pass
                            else:
                                if isotope not in not_corrected_isotopes:
                                    not_corrected_isotopes.append(isotope)
                                    self.container_measurements["EDITED"][file_std][isotope]["Uncut"] = \
                                        self.container_measurements["RAW"][file_std][isotope]
                                else:
                                    pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][file_std][isotope]["Uncut"] = \
                                self.container_measurements["RAW"][file_std][isotope]
                        else:
                            pass
                    #
        elif filetype == "SMPL":
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                isotopes_spiked_list = [*self.spikes_isotopes[filetype][file_smpl]]
                corrected_isotopes = []
                not_corrected_isotopes = []
                self.container_spikes[file_smpl] = {}
                #
                if file_smpl not in self.container_spikes["Selection"]:
                    self.container_spikes["Selection"][file_smpl] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    if bool(self.spikes_isotopes[filetype][file_smpl]) == True:
                        for isotope_spiked, intervals in self.spikes_isotopes[filetype][file_smpl].items():
                            #
                            if isotope_spiked not in self.container_spikes["Selection"][file_smpl]:
                                self.container_spikes["Selection"][file_smpl][isotope_spiked] = {}
                            #
                            if isotope in isotopes_spiked_list:
                                if isotope not in corrected_isotopes:
                                    corrected_isotopes.append(isotope)
                                    spike_intervals = np.array(intervals)
                                    merged_intervals = ES(variable=spike_intervals).merge_times()
                                    for interval in merged_intervals:
                                        dataset_raw = self.container_measurements["RAW"][file_smpl][isotope][
                                                      interval[0]:interval[1]]
                                        dataset_complete = self.container_measurements["RAW"][file_smpl][isotope]
                                        if var_method == 0:
                                            data_smoothed, indices_outl = GrubbsTestSILLS(
                                                raw_data=dataset_raw, alpha=var_alpha, threshold=var_threshold,
                                                start_index=interval[0],
                                                dataset_complete=dataset_complete).determine_outlier()
                                        elif var_method == 1:
                                            data_smoothed, indices_outl = ES(variable=dataset_raw).do_grubbs_test(
                                                alpha=var_alpha, dataset_complete=dataset_complete,
                                                threshold=var_threshold)
                                        #
                                        if self.pysills_mode == "FI":
                                            if self.container_var["fi_setting"]["Spike Elimination Inclusion"].get() == 2:
                                                length_incl_datasets = len(
                                                    self.container_helper["SMPL"][file_smpl]["INCL"]["Content"])
                                                #
                                                if length_incl_datasets > 0:
                                                    for key, items in self.container_helper["SMPL"][file_smpl]["INCL"][
                                                        "Content"].items():
                                                        var_indices = items["Indices"]
                                                        data_raw = self.container_measurements["RAW"][file_smpl][isotope]
                                                        #
                                                        for index in range(var_indices[0], var_indices[1] + 1):
                                                            data_smoothed[index] = data_raw[index]
                                        #
                                        self.container_measurements["EDITED"][file_smpl][isotope][
                                            "Uncut"] = data_smoothed
                                        self.container_spikes[file_smpl][isotope] = {
                                            "Data RAW": self.container_measurements["RAW"][file_smpl][isotope],
                                            "Data SMOOTHED": data_smoothed, "Indices": indices_outl,
                                            "Times": self.container_measurements["SELECTED"][file_smpl]["Time"]}
                                    #
                                    for var_index in indices_outl:
                                        self.container_spikes["Selection"][file_smpl][isotope][
                                            var_index] = data_smoothed[var_index]
                                    #
                                else:
                                    pass
                            else:
                                if isotope not in not_corrected_isotopes:
                                    not_corrected_isotopes.append(isotope)
                                    self.container_measurements["EDITED"][file_smpl][isotope]["Uncut"] = \
                                        self.container_measurements["RAW"][file_smpl][isotope]
                                else:
                                    pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][file_smpl][isotope]["Uncut"] = \
                                self.container_measurements["RAW"][file_smpl][isotope]
                        else:
                            pass
                    #
    #
    def do_spike_elimination_all(self, file_type, settings="settings"):
        if file_type == "STD":
            for file_short in self.container_lists["STD"]["Short"]:
                #
                isotopes_spiked_list = [*self.spikes_isotopes[file_type][file_short]]
                corrected_isotopes = []
                not_corrected_isotopes = []
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    if bool(self.spikes_isotopes[file_type][file_short]) == True:
                        for isotope_spiked, intervals in self.spikes_isotopes[file_type][file_short].items():
                            if isotope in isotopes_spiked_list:
                                if isotope not in corrected_isotopes:
                                    corrected_isotopes.append(isotope)
                                    spike_intervals = np.array(intervals)
                                    merged_intervals = ES(variable=spike_intervals).merge_times()
                                    for interval in merged_intervals:
                                        data_smoothed, indices_outl = ES(
                                            variable=self.container_measurements["RAW"][file_short][isotope][
                                                     interval[0]:interval[1]]).find_outlier(
                                            limit=float(self.container_var[settings]["SE Deviation"].get()),
                                            threshold=float(self.container_var[settings]["SE Threshold"].get()),
                                            interval=interval,
                                            data_total=self.container_measurements["RAW"][file_short],
                                            isotope=isotope)
                                        self.container_measurements["EDITED"][file_short][
                                            isotope] = data_smoothed
                                else:
                                    pass
                            else:
                                if isotope not in not_corrected_isotopes:
                                    not_corrected_isotopes.append(isotope)
                                    self.container_measurements["EDITED"][file_short][isotope] = \
                                        self.container_measurements["RAW"][file_short][isotope]
                                else:
                                    pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][file_short][isotope] = \
                                self.container_measurements["RAW"][file_short][isotope]
                        else:
                            pass
                #
        elif file_type == "SMPL":
            for file_short in self.container_lists["SMPL"]["Short"]:
                #
                isotopes_spiked_list = [*self.spikes_isotopes[file_type][file_short]]
                corrected_isotopes = []
                not_corrected_isotopes = []
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    if bool(self.spikes_isotopes[file_type][file_short]) == True:
                        for isotope_spiked, intervals in self.spikes_isotopes[file_type][file_short].items():
                            if isotope in isotopes_spiked_list:
                                if isotope not in corrected_isotopes:
                                    corrected_isotopes.append(isotope)
                                    spike_intervals = np.array(intervals)
                                    merged_intervals = ES(variable=spike_intervals).merge_times()
                                    for interval in merged_intervals:
                                        data_smoothed, indices_outl = ES(
                                            variable=self.container_measurements["RAW"][file_short][isotope][
                                                     interval[0]:interval[1]]).find_outlier(
                                            limit=float(self.container_var[settings]["SE Deviation"].get()),
                                            threshold=float(self.container_var[settings]["SE Threshold"].get()),
                                            interval=interval,
                                            data_total=self.container_measurements["RAW"][file_short],
                                            isotope=isotope)
                                        self.container_measurements["EDITED"][file_short][
                                            isotope] = data_smoothed
                                else:
                                    pass
                            else:
                                if isotope not in not_corrected_isotopes:
                                    not_corrected_isotopes.append(isotope)
                                    self.container_measurements["EDITED"][file_short][isotope] = \
                                        self.container_measurements["RAW"][file_short][isotope]
                                else:
                                    pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][file_short][isotope] = \
                                self.container_measurements["RAW"][file_short][isotope]
                        else:
                            pass
                #
    #
    def do_spike_elimination(self, var_setting="settings"):
        #
        isotopes_spiked_list = [*self.spikes_isotopes[self.file_type][self.filename_short]]
        corrected_isotopes = []
        not_corrected_isotopes = []
        #
        for isotope in self.container_lists["ISOTOPES"]:
            if bool(self.spikes_isotopes[self.file_type][self.filename_short]) == True:
                for isotope_spiked, intervals in self.spikes_isotopes[self.file_type][self.filename_short].items():
                    if isotope in isotopes_spiked_list:
                        if isotope not in corrected_isotopes:
                            corrected_isotopes.append(isotope)
                            spike_intervals = np.array(intervals)
                            merged_intervals = ES(variable=spike_intervals).merge_times()
                            for interval in merged_intervals:
                                data_smoothed, indices_outl = ES(
                                    variable=self.container_measurements["RAW"][self.filename_short][isotope][interval[0]:interval[1]]).find_outlier(
                                    limit=float(self.container_var[var_setting]["SE Deviation"].get()),
                                    threshold=float(self.container_var[var_setting]["SE Threshold"].get()),
                                    interval=interval, data_total=self.container_measurements["RAW"][self.filename_short],
                                    isotope=isotope)
                                self.container_measurements["EDITED"][self.filename_short][isotope] = data_smoothed
                        else:
                            pass
                    else:
                        if isotope not in not_corrected_isotopes:
                            not_corrected_isotopes.append(isotope)
                            self.container_measurements["EDITED"][self.filename_short][isotope] = \
                                self.container_measurements["RAW"][self.filename_short][isotope]
                        else:
                            pass
            else:
                if isotope not in not_corrected_isotopes:
                    not_corrected_isotopes.append(isotope)
                    self.container_measurements["EDITED"][self.filename_short][isotope] = \
                        self.container_measurements["RAW"][self.filename_short][isotope]
                else:
                    pass
        #
        ## DIAGRAM
        for isotope in self.container_lists["ISOTOPES"]:
            ln = self.ax.plot(
                self.times, self.container_measurements["EDITED"][self.filename_short][isotope], label=isotope,
                color=self.isotope_colors[isotope], visible=True)
            self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Smoothed"][isotope] = ln
            self.container_var["plotting"][self.filename_short]["Checkboxes"]["SMOOTHED"][isotope].set(1)
        self.diagrams_setup[self.file_type][self.filename_short]["CANVAS"].draw()
    #
    def show_smoothed_data(self):
        ## DIAGRAM
        for isotope in self.container_lists["ISOTOPES"]:
            ln = self.diagrams_setup[self.file_type][self.filename_short]["AX"].plot(
                self.times, self.container_measurements["EDITED"][self.filename_short][isotope], label=isotope,
                color=self.isotope_colors[isotope], visible=True)
            self.diagrams_setup[self.file_type][self.filename_short]["Time Signal Smoothed"][isotope] = ln
            self.container_var["plotting"][self.filename_short]["Checkboxes"]["SMOOTHED"][isotope].set(1)
        self.diagrams_setup[self.file_type][self.filename_short]["CANVAS"].draw()
    #
    def ma_export_calculation_report(self):
        header = ["filename", "ID"]
        n_decimals_concentration = 5
        n_decimals_intensity = 5
        n_decimals_sensitivity = 5
        #
        # Concentration
        report_concentration = {}
        report_concentration["Total STD"] = {}
        report_concentration["Total SMPL"] = {}
        # Concentration Ratio
        report_concentration_ratio = {}
        report_concentration_ratio["Total STD"] = {}
        report_concentration_ratio["Total SMPL"] = {}
        # Limit of Detection
        report_lod = {}
        report_lod["Total STD"] = {}
        report_lod["Total SMPL"] = {}
        # Intensity
        report_intensity = {}
        report_intensity["Total STD"] = {}
        report_intensity["Total SMPL"] = {}
        # Intensity Ratio
        report_intensity_ratio = {}
        report_intensity_ratio["Total STD"] = {}
        report_intensity_ratio["Total SMPL"] = {}
        # Analytical Sensitivity
        report_analytical_sensitivity = {}
        report_analytical_sensitivity["Total STD"] = {}
        report_analytical_sensitivity["Total SMPL"] = {}
        # Normalized Sensitivity
        report_normalized_sensitivity = {}
        report_normalized_sensitivity["Total STD"] = {}
        report_normalized_sensitivity["Total SMPL"] = {}
        # Relative Sensitivity Factor
        report_rsf = {}
        report_rsf["Total STD"] = {}
        report_rsf["Total SMPL"] = {}
        #
        for var_filetype in ["STD", "SMPL"]:
            var_key = "Total " + str(var_filetype)
            #
            report_concentration[var_filetype] = {}
            report_concentration[var_key] = {}
            report_concentration[var_key]["filename"] = "All Files"
            #
            report_concentration_ratio[var_filetype] = {}
            report_concentration_ratio[var_key] = {}
            report_concentration_ratio[var_key]["filename"] = "All Files"
            #
            report_lod[var_filetype] = {}
            report_lod[var_key] = {}
            report_lod[var_key]["filename"] = "All Files"
            #
            report_intensity[var_filetype] = {}
            report_intensity[var_key] = {}
            report_intensity[var_key]["filename"] = "All Files"
            #
            report_intensity_ratio[var_filetype] = {}
            report_intensity_ratio[var_key] = {}
            report_intensity_ratio[var_key]["filename"] = "All Files"
            #
            report_analytical_sensitivity[var_filetype] = {}
            report_analytical_sensitivity[var_key] = {}
            report_analytical_sensitivity[var_key]["filename"] = "All Files"
            #
            report_normalized_sensitivity[var_filetype] = {}
            report_normalized_sensitivity[var_key] = {}
            report_normalized_sensitivity[var_key]["filename"] = "All Files"
            #
            report_rsf[var_filetype] = {}
            report_rsf[var_key] = {}
            report_rsf[var_key]["filename"] = "All Files"
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_concentration[var_filetype][var_datatype] = {}
                report_concentration_ratio[var_filetype][var_datatype] = {}
                report_lod[var_filetype][var_datatype] = {}
                #
                report_intensity[var_filetype][var_datatype] = {}
                report_intensity_ratio[var_filetype][var_datatype] = {}
                #
                report_analytical_sensitivity[var_filetype][var_datatype] = {}
                report_normalized_sensitivity[var_filetype][var_datatype] = {}
                report_rsf[var_filetype][var_datatype] = {}
                #
                for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                    file_long = self.container_lists[var_filetype]["Long"][index]
                    #
                    report_concentration[var_filetype][var_datatype][file_short] = {}
                    report_concentration[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_ratio[var_filetype][var_datatype][file_short] = {}
                    report_concentration_ratio[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_lod[var_filetype][var_datatype][file_short] = {}
                    report_lod[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_concentration[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_concentration_ratio[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_lod[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_concentration[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_concentration_ratio[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_lod[var_filetype][var_datatype][file_short]["ID"] = self.container_var[var_filetype][
                            file_long]["ID"].get()
                    #
                    report_intensity[var_filetype][var_datatype][file_short] = {}
                    report_intensity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_ratio[var_filetype][var_datatype][file_short] = {}
                    report_intensity_ratio[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_intensity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_ratio[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_intensity[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_ratio[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                    #
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_rsf[var_filetype][var_datatype][file_short] = {}
                    report_rsf[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = self.container_var[var_filetype][
                            file_long]["ID"].get()
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        # Concentration
                        value_i = self.container_concentration[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        report_concentration[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_concentration)
                        value_mean = self.container_concentration[var_filetype][var_datatype][isotope]
                        report_concentration[var_key][isotope] = round(value_mean, n_decimals_concentration)
                        # Concentration Ratio
                        value_i = self.container_concentration_ratio[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        report_concentration_ratio[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                            value_i)
                        value_mean = self.container_concentration_ratio[var_filetype][var_datatype][isotope]
                        report_concentration_ratio[var_key][isotope] = "{:0.5e}".format(value_mean)
                        # Limit of Detection
                        value_i = self.container_lod[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        report_lod[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_concentration)
                        value_mean = self.container_lod[var_filetype][var_datatype][isotope]
                        report_lod[var_key][isotope] = round(value_mean, n_decimals_concentration)
                        # Intensity
                        value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        report_intensity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_intensity)
                        value_mean = self.container_intensity_corrected[var_filetype][var_datatype][isotope]
                        report_intensity[var_key][isotope] = round(value_mean, n_decimals_intensity)
                        # Intensity Ratio
                        value_i = self.container_intensity_ratio[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        report_intensity_ratio[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                            value_i)
                        value_mean = self.container_intensity_ratio[var_filetype][var_datatype][isotope]
                        report_intensity_ratio[var_key][isotope] = "{:0.5e}".format(value_mean)
                        # Analytical Sensitivity
                        value_i = self.container_analytical_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_sensitivity)
                        value_mean = self.container_analytical_sensitivity[var_filetype][var_datatype][isotope]
                        report_analytical_sensitivity[var_key][isotope] = round(value_mean, n_decimals_sensitivity)
                        # Normalized Sensitivity
                        value_i = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_sensitivity)
                        value_mean = self.container_normalized_sensitivity[var_filetype][var_datatype][isotope]
                        report_normalized_sensitivity[var_key][isotope] = round(value_mean, n_decimals_sensitivity)
                        # Relative Sensitivity Factor
                        value_i = self.container_rsf[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        report_rsf[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_decimals_sensitivity)
                        value_mean = self.container_rsf[var_filetype][var_datatype][isotope]
                        report_rsf[var_key][isotope] = round(value_mean, n_decimals_sensitivity)

        for isotope in self.container_lists["ISOTOPES"]:
            header.append(isotope)
        #
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=".csv")
        filename = export_file.name
        #
        with open(filename, "w", newline="") as report_file:
            writer = csv.DictWriter(report_file, fieldnames=header, delimiter=";")
            report_file.write("CALCULATION REPORT\n")
            report_file.write("\n")
            report_file.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file.write("\n")
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_file.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file.write("\n")
                #
                for var_filetype in ["SMPL", "STD"]:
                    if var_filetype == "SMPL":
                        report_file.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file.write("STANDARD FILES\n")
                    #
                    var_key = "Total " + str(var_filetype)
                    report_file.write("\n")
                    #
                    ## COMPOSITIONAL ANALYSIS
                    report_file.write("COMPOSITIONAL ANALYSIS\n")
                    report_file.write("Concentration\n")            # Concentration
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_concentration[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Concentration Ratio\n")      # Concentration Ratio
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration_ratio[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_concentration_ratio[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Limit of Detection\n")  # Limit of Detection
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_lod[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_lod[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Intensity (Matrix)\n")  # Intensity
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_intensity[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Intensity Ratio (Matrix)\n")  # Intensity Ratio
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_ratio[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_intensity_ratio[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_analytical_sensitivity[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_normalized_sensitivity[var_key])
                    #
                    report_file.write("\n")
                    #
                    report_file.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_rsf[var_key])
                    #
                    report_file.write("\n")
                    #
    #
    def fi_export_calculation_report(self):
        header = ["filename", "ID"]
        #
        # Concentration Inclusion
        report_concentration_incl = {}
        report_concentration_incl["Total STD"] = {}
        report_concentration_incl["Total SMPL"] = {}
        # Concentration Matrix
        report_concentration_mat = {}
        report_concentration_mat["Total STD"] = {}
        report_concentration_mat["Total SMPL"] = {}
        # Concentration Ratio
        report_concentration_mix = {}
        report_concentration_mix["Total STD"] = {}
        report_concentration_mix["Total SMPL"] = {}
        # Limit of Detection
        report_lod_incl = {}
        report_lod_incl["Total STD"] = {}
        report_lod_incl["Total SMPL"] = {}
        #
        report_lod_mat = {}
        report_lod_mat["Total STD"] = {}
        report_lod_mat["Total SMPL"] = {}
        # Mixing ratio
        report_mixingratio_a = {}
        report_mixingratio_a["Total STD"] = {}
        report_mixingratio_a["Total SMPL"] = {}
        #
        report_mixingratio_x = {}
        report_mixingratio_x["Total STD"] = {}
        report_mixingratio_x["Total SMPL"] = {}
        # Intensity Inclusion
        report_intensity_incl = {}
        report_intensity_incl["Total STD"] = {}
        report_intensity_incl["Total SMPL"] = {}
        # Intensity Matrix
        report_intensity_mat = {}
        report_intensity_mat["Total STD"] = {}
        report_intensity_mat["Total SMPL"] = {}
        # Intensity Background
        report_intensity_bg = {}
        report_intensity_bg["Total STD"] = {}
        report_intensity_bg["Total SMPL"] = {}
        # Intensity Mix
        report_intensity_mix = {}
        report_intensity_mix["Total STD"] = {}
        report_intensity_mix["Total SMPL"] = {}
        # Analytical Sensitivity
        report_analytical_sensitivity = {}
        report_analytical_sensitivity["Total STD"] = {}
        report_analytical_sensitivity["Total SMPL"] = {}
        # Normalized Sensitivity
        report_normalized_sensitivity = {}
        report_normalized_sensitivity["Total STD"] = {}
        report_normalized_sensitivity["Total SMPL"] = {}
        # Relative Sensitivity Factor
        report_rsf = {}
        report_rsf["Total STD"] = {}
        report_rsf["Total SMPL"] = {}
        #
        for var_filetype in ["STD", "SMPL"]:
            var_key = "Total " + str(var_filetype)
            #
            report_concentration_incl[var_filetype] = {}
            report_concentration_incl[var_key] = {}
            report_concentration_incl[var_key]["filename"] = "All Files"
            #
            report_concentration_mat[var_filetype] = {}
            report_concentration_mat[var_key] = {}
            report_concentration_mat[var_key]["filename"] = "All Files"
            #
            report_concentration_mix[var_filetype] = {}
            report_concentration_mix[var_key] = {}
            report_concentration_mix[var_key]["filename"] = "All Files"
            #
            report_lod_incl[var_filetype] = {}
            report_lod_incl[var_key] = {}
            report_lod_incl[var_key]["filename"] = "All Files"
            #
            report_lod_mat[var_filetype] = {}
            report_lod_mat[var_key] = {}
            report_lod_mat[var_key]["filename"] = "All Files"
            #
            report_mixingratio_a[var_filetype] = {}
            report_mixingratio_a[var_key] = {}
            report_mixingratio_a[var_key]["filename"] = "All Files"
            #
            report_mixingratio_x[var_filetype] = {}
            report_mixingratio_x[var_key] = {}
            report_mixingratio_x[var_key]["filename"] = "All Files"
            #
            report_intensity_incl[var_filetype] = {}
            report_intensity_incl[var_key] = {}
            report_intensity_incl[var_key]["filename"] = "All Files"
            #
            report_intensity_mat[var_filetype] = {}
            report_intensity_mat[var_key] = {}
            report_intensity_mat[var_key]["filename"] = "All Files"
            #
            report_intensity_bg[var_filetype] = {}
            report_intensity_bg[var_key] = {}
            report_intensity_bg[var_key]["filename"] = "All Files"
            #
            report_intensity_mix[var_filetype] = {}
            report_intensity_mix[var_key] = {}
            report_intensity_mix[var_key]["filename"] = "All Files"
            #
            report_analytical_sensitivity[var_filetype] = {}
            report_analytical_sensitivity[var_key] = {}
            report_analytical_sensitivity[var_key]["filename"] = "All Files"
            #
            report_normalized_sensitivity[var_filetype] = {}
            report_normalized_sensitivity[var_key] = {}
            report_normalized_sensitivity[var_key]["filename"] = "All Files"
            #
            report_rsf[var_filetype] = {}
            report_rsf[var_key] = {}
            report_rsf[var_key]["filename"] = "All Files"
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_concentration_incl[var_filetype][var_datatype] = {}
                report_concentration_mat[var_filetype][var_datatype] = {}
                report_concentration_mix[var_filetype][var_datatype] = {}
                report_lod_incl[var_filetype][var_datatype] = {}
                report_lod_mat[var_filetype][var_datatype] = {}
                report_mixingratio_a[var_filetype][var_datatype] = {}
                report_mixingratio_x[var_filetype][var_datatype] = {}
                #
                report_intensity_incl[var_filetype][var_datatype] = {}
                report_intensity_mat[var_filetype][var_datatype] = {}
                report_intensity_bg[var_filetype][var_datatype] = {}
                report_intensity_mix[var_filetype][var_datatype] = {}
                #
                report_analytical_sensitivity[var_filetype][var_datatype] = {}
                report_normalized_sensitivity[var_filetype][var_datatype] = {}
                report_rsf[var_filetype][var_datatype] = {}
                #
                for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                    file_long = self.container_lists[var_filetype]["Long"][index]
                    #
                    report_concentration_incl[var_filetype][var_datatype][file_short] = {}
                    report_concentration_incl[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_mat[var_filetype][var_datatype][file_short] = {}
                    report_concentration_mat[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_concentration_mix[var_filetype][var_datatype][file_short] = {}
                    report_concentration_mix[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_lod_incl[var_filetype][var_datatype][file_short] = {}
                    report_lod_incl[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_lod_mat[var_filetype][var_datatype][file_short] = {}
                    report_lod_mat[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_mixingratio_a[var_filetype][var_datatype][file_short] = {}
                    report_mixingratio_a[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_mixingratio_x[var_filetype][var_datatype][file_short] = {}
                    report_mixingratio_x[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_concentration_incl[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_concentration_mat[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_concentration_mix[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_lod_incl[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_lod_mat[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_mixingratio_a[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_mixingratio_x[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_concentration_incl[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_concentration_mat[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_concentration_mix[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_lod_incl[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_lod_mat[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_mixingratio_a[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_mixingratio_x[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                    #
                    report_intensity_incl[var_filetype][var_datatype][file_short] = {}
                    report_intensity_incl[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_mat[var_filetype][var_datatype][file_short] = {}
                    report_intensity_mat[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_bg[var_filetype][var_datatype][file_short] = {}
                    report_intensity_bg[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_intensity_mix[var_filetype][var_datatype][file_short] = {}
                    report_intensity_mix[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_intensity_incl[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_mat[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_bg[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_intensity_mix[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_intensity_incl[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_mat[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_bg[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                        report_intensity_mix[var_filetype][var_datatype][file_short]["ID"] = self.container_var[
                            var_filetype][file_long]["ID"].get()
                    #
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_analytical_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short] = {}
                    report_normalized_sensitivity[var_filetype][var_datatype][file_short]["filename"] = file_short
                    report_rsf[var_filetype][var_datatype][file_short] = {}
                    report_rsf[var_filetype][var_datatype][file_short]["filename"] = file_short
                    #
                    if var_filetype == "STD":
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short]["ID"] = "---"
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = "---"
                    else:
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][
                            "ID"] = self.container_var[var_filetype][file_long]["ID"].get()
                        report_rsf[var_filetype][var_datatype][file_short]["ID"] = self.container_var[var_filetype][
                            file_long]["ID"].get()
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        ## COMPOSITIONAL ANALYSIS
                        # Concentration Inclusion
                        if var_filetype == "SMPL":
                            value_i = self.container_concentration[var_filetype][var_datatype][file_short]["INCL"][
                                isotope]
                            value_mean = self.container_concentration[var_filetype][var_datatype]["INCL"][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_concentration_incl[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_concentration_incl[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Concentration Matrix
                        value_i = self.container_concentration[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_concentration[var_filetype][var_datatype]["MAT"][isotope]
                        #
                        n_digits = 5
                        #
                        report_concentration_mat[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_concentration_mat[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Concentration Mixed
                        if var_filetype == "SMPL":
                            value_i = self.container_mixed_concentration[var_filetype][var_datatype][file_short][
                                isotope]
                            value_mean = self.container_mixed_concentration[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_concentration_mix[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_concentration_mix[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Limit of Detection (Inclusion)
                        if var_filetype == "SMPL":
                            value_i = self.container_lod[var_filetype][var_datatype][file_short]["INCL"][isotope]
                            value_mean = self.container_lod[var_filetype][var_datatype]["INCL"][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_lod_incl[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_lod_incl[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Limit of Detection (Matrix)
                        value_i = self.container_lod[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        value_mean = self.container_lod[var_filetype][var_datatype]["MAT"][isotope]
                        #
                        n_digits = 5
                        #
                        report_lod_mat[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_lod_mat[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Mixing Ratio (Factor a)
                        if var_filetype == "SMPL":
                            value_i = self.container_mixed_concentration_ratio[var_filetype][var_datatype][file_short][
                                isotope]
                            value_mean = self.container_mixed_concentration_ratio[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        report_mixingratio_a[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                            value_i)
                        report_mixingratio_a[var_key][isotope] = "{:0.5e}".format(value_mean)
                        #
                        # Mixing Ratio (Factor x)
                        if var_filetype == "SMPL":
                            value_i = self.container_mixing_ratio[var_filetype][var_datatype][file_short][isotope]
                            value_mean = self.container_mixing_ratio[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        report_mixingratio_x[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(
                            value_i)
                        report_mixingratio_x[var_key][isotope] = "{:0.5e}".format(value_mean)
                        #
                        ## INTENSITY ANALYSIS
                        # Intensity Inclusion
                        if var_filetype == "SMPL":
                            value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short][
                                "INCL"][isotope]
                            value_mean = self.container_intensity_corrected[var_filetype][var_datatype]["INCL"][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_intensity_incl[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_incl[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Intensity Matrix
                        value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_intensity_corrected[var_filetype][var_datatype]["MAT"][isotope]
                        #
                        n_digits = 5
                        #
                        report_intensity_mat[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_mat[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Intensity Background
                        value_i = self.container_intensity_corrected[var_filetype][var_datatype][file_short]["BG"][
                            isotope]
                        value_mean = self.container_intensity_corrected[var_filetype][var_datatype]["BG"][isotope]
                        #
                        n_digits = 5
                        #
                        report_intensity_bg[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_bg[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Intensity Mixed
                        if var_filetype == "SMPL":
                            value_i = self.container_intensity_mix[var_filetype][var_datatype][file_short][isotope]
                            value_mean = self.container_intensity_mix[var_filetype][var_datatype][isotope]
                        else:
                            value_i = 0.0
                            value_mean = 0.0
                        #
                        n_digits = 5
                        #
                        report_intensity_mix[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_intensity_mix[var_key][isotope] = round(value_mean, n_digits)
                        #
                        ## SENSITIVITY ANALYSIS
                        # Analytical Sensitivity
                        value_i = self.container_analytical_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_analytical_sensitivity[var_filetype][var_datatype][isotope]
                        #
                        n_digits = 5
                        #
                        report_analytical_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_analytical_sensitivity[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Normalized Sensitivity
                        value_i = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short]["MAT"][
                            isotope]
                        value_mean = self.container_normalized_sensitivity[var_filetype][var_datatype][isotope]
                        #
                        n_digits = 5
                        #
                        report_normalized_sensitivity[var_filetype][var_datatype][file_short][isotope] = round(
                            value_i, n_digits)
                        report_normalized_sensitivity[var_key][isotope] = round(value_mean, n_digits)
                        #
                        # Relative Sensitivity Factor
                        value_i = self.container_rsf[var_filetype][var_datatype][file_short]["MAT"][isotope]
                        value_mean = self.container_rsf[var_filetype][var_datatype][isotope]
                        #
                        report_rsf[var_filetype][var_datatype][file_short][isotope] = "{:0.5e}".format(value_i)
                        report_rsf[var_key][isotope] = "{:0.5e}".format(value_mean)

        for isotope in self.container_lists["ISOTOPES"]:
            header.append(isotope)
        #
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=".csv")
        filename = export_file.name
        #
        with open(filename, "w", newline="") as report_file:
            writer = csv.DictWriter(report_file, fieldnames=header, delimiter=";")
            report_file.write("CALCULATION REPORT\n")
            report_file.write("\n")
            report_file.write("AUTHOR:;" + str(self.container_var["ma_setting"]["Author"].get()) + "\n")
            report_file.write("SOURCE ID:;" + str(self.container_var["ma_setting"]["Source ID"].get()) + "\n")
            report_file.write("\n")
            #
            for var_datatype in ["SMOOTHED", "RAW"]:
                report_file.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
                report_file.write("\n")
                #
                for var_filetype in ["SMPL", "STD"]:
                    if var_filetype == "SMPL":
                        report_file.write("SAMPLE FILES\n")
                    elif var_filetype == "STD":
                        report_file.write("STANDARD FILES\n")
                    #
                    var_key = "Total " + str(var_filetype)
                    report_file.write("\n")
                    #
                    ## COMPOSITIONAL ANALYSIS
                    report_file.write("COMPOSITIONAL ANALYSIS\n")
                    if var_filetype == "SMPL":
                        report_file.write("Composition (Inclusion)\n")  # Concentration Inclusion
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_incl[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_concentration_incl[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("Composition (Matrix)\n")  # Concentration Matrix
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_concentration_mat[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_concentration_mat[var_key])
                    report_file.write("\n")
                    #
                    if var_filetype == "SMPL":
                        report_file.write("Composition (Mixed)\n")  # Concentration Mixed
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_concentration_mix[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_concentration_mix[var_key])
                        report_file.write("\n")
                        #
                        report_file.write("Limit of Detection (Inclusion)\n")  # Limit of Detection (Inclusion)
                        report_file.write("(ppm)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_lod_incl[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_lod_incl[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("Limit of Detection (Matrix)\n")  # Limit of Detection (Matrix)
                    report_file.write("(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_lod_mat[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_lod_mat[var_key])
                    report_file.write("\n")
                    #
                    if var_filetype == "SMPL":
                        report_file.write("Mixing Ratio a\n")  # Mixing Ratio a
                        report_file.write("(1)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_mixingratio_a[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_mixingratio_a[var_key])
                        report_file.write("\n")
                        #
                        report_file.write("Mixing Ratio x\n")  # Mixing Ratio x
                        report_file.write("(1)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_mixingratio_x[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_mixingratio_x[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("INTENSITY ANALYSIS\n")
                    if var_filetype == "SMPL":
                        report_file.write("Intensity (Inclusion)\n")  # Intensity Inclusion
                        report_file.write("(cps)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_incl[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_intensity_incl[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("Intensity (Matrix)\n")  # Intensity Matrix
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_mat[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_intensity_mat[var_key])
                    report_file.write("\n")
                    #
                    report_file.write("Intensity (Background)\n")  # Intensity Background
                    report_file.write("(cps)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_intensity_bg[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_intensity_bg[var_key])
                    report_file.write("\n")
                    #
                    if var_filetype == "SMPL":
                        report_file.write("Intensity (Mixed)\n")  # Intensity Mixed
                        report_file.write("(cps)\n")
                        writer.writeheader()
                        #
                        for file_short in self.container_lists[var_filetype]["Short"]:
                            writer.writerow(report_intensity_mix[var_filetype][var_datatype][file_short])
                        #
                        writer.writerow(report_intensity_mix[var_key])
                        report_file.write("\n")
                        #
                    report_file.write("SENSITIVITY ANALYSIS\n")
                    report_file.write("Analytical Sensitivity\n")  # Analytical Sensitivity
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_analytical_sensitivity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_analytical_sensitivity[var_key])
                    report_file.write("\n")
                    #
                    report_file.write("Normalized Sensitivity\n")  # Normalized Sensitivity
                    report_file.write("(cps)/(ppm)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_normalized_sensitivity[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_normalized_sensitivity[var_key])
                    report_file.write("\n")
                    #
                    report_file.write("Relative Sensitivity Factor\n")  # Relative Sensitivity Factor
                    report_file.write("(1)\n")
                    writer.writeheader()
                    #
                    for file_short in self.container_lists[var_filetype]["Short"]:
                        writer.writerow(report_rsf[var_filetype][var_datatype][file_short])
                    #
                    writer.writerow(report_rsf[var_key])
                    report_file.write("\n")
    #
    def save_project(self):
        if self.pysills_mode == "MA":
            save_file = filedialog.asksaveasfile(mode="w", defaultextension=".txt")
            #
            ## Save information about the project
            save_file.write("PROJECT INFORMATION" + "\n")
            save_file.write("Mineral Analysis" + "\n")
            #
            info_author = self.container_var["ma_setting"]["Author"].get()
            info_source = self.container_var["ma_setting"]["Source ID"].get()
            info_carrier_gas = self.container_var["LASER"].get()
            #
            str_proj = str(info_author) + ";" + str(info_source) + ";" + str(info_carrier_gas)
            str_proj += "\n"
            #
            save_file.write(str_proj)
            save_file.write("\n")
            #
            ## Save information about 'Standard Files Setup'
            save_file.write("STANDARD FILES" + "\n")
            #
            for file_std in self.container_lists["STD"]["Long"]:
                filename_std_short = file_std.split("/")[-1]
                #
                info_file = file_std
                info_srm = self.container_files["STD"][filename_std_short]["SRM"].get()
                info_is = self.container_var["STD"][file_std]["IS Data"]["IS"].get()
                info_cb_state = self.container_var["STD"][file_std]["Checkbox"].get()
                #
                str_std = str(info_file) + ";" + str(info_srm) + ";" + str(info_is) + ";" + str(info_cb_state)
                #
                str_std += "\n"
                save_file.write(str_std)
            save_file.write("\n")
            #
            ## Save information about 'Sample Files Setup'
            save_file.write("SAMPLE FILES" + "\n")
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                var_file_short = var_file.split("/")[-1]
                #
                info_file = var_file
                info_is = self.container_var["SMPL"][var_file]["IS Data"]["IS"].get()
                info_assemblage = self.container_var["SMPL"][var_file]["ID"].get()
                info_cb_state = self.container_var["SMPL"][var_file]["Checkbox"].get()
                #
                str_smpl = str(info_file) + ";" + str(info_is) + ";" + str(info_assemblage) + ";" + str(info_cb_state)
                #
                str_smpl += "\n"
                save_file.write(str_smpl)
            save_file.write("\n")
            #
            ## Save information about 'Measured Isotopes'
            save_file.write("ISOTOPES" + "\n")
            #
            for isotope in self.container_lists["ISOTOPES"]:
                info_srm = self.container_var["SRM"][isotope].get()
                #
                str_iso = str(isotope) + ";" + str(info_srm)
                str_iso += "\n"
                save_file.write(str_iso )
            #
            save_file.write("\n")
            #
            ## Save information about 'Matrix Settings'
            save_file.write("MATRIX SETTINGS" + "\n")
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                info_file = var_file
                info_is = self.container_var["SMPL"][var_file]["IS Data"]["IS"].get()
                info_concentration = self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].get()
                #
                str_smpl_is = str(info_file) + ";" + str(info_is) + ";" + str(info_concentration)
                str_smpl_is += "\n"
                save_file.write(str_smpl_is)
            #
            save_file.write("\n")
            #
            ## Save information about 'Dwell Time Settings'
            save_file.write("DWELL TIME SETTINGS" + "\n")
            #
            for isotope in self.container_lists["ISOTOPES"]:
                info_dwell = self.container_var["dwell_times"]["Entry"][isotope].get()
                #
                str_dwell = str(isotope) + ";" + str(info_dwell)
                str_dwell += "\n"
                save_file.write(str_dwell)
            #
            save_file.write("\n")
            #
            ## Save information about 'Interval Settings'
            save_file.write("INTERVAL SETTINGS" + "\n")
            #
            for var_file in self.container_lists["STD"]["Long"]:
                var_file_short = var_file.split("/")[-1]
                str_intervals = str(var_file) + ";" + "STD" + "\n"
                #
                for key, item in self.container_helper["STD"][var_file_short]["BG"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "BG" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                for key, item in self.container_helper["STD"][var_file_short]["MAT"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "MAT" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                save_file.write(str_intervals)
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                var_file_short = var_file.split("/")[-1]
                str_intervals = str(var_file) + ";" + "SMPL" + "\n"
                #
                for key, item in self.container_helper["SMPL"][var_file_short]["BG"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "BG" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                for key, item in self.container_helper["SMPL"][var_file_short]["MAT"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "MAT" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                save_file.write(str_intervals)
            #
            save_file.write("\n")
            #
            ## Save information about 'Spike Elimination'
            save_file.write("SPIKE ELIMINATION" + "\n")

            info_std_state = self.container_var["Spike Elimination"]["STD"]["State"]
            info_smpl_state = self.container_var["Spike Elimination"]["SMPL"]["State"]
            info_method = self.container_var["Spike Elimination Method"].get()
            info_alpha = self.container_var["ma_setting"]["SE Alpha"].get()
            info_threshold = self.container_var["ma_setting"]["SE Threshold"].get()

            str_spike = str("STD") + ";" + str(info_std_state) + ";" + str("SMPL") + ";" + str(info_smpl_state) + ";" \
                        + str(info_method) + ";" + str(info_alpha) + ";" + str(info_threshold) + "\n"

            save_file.write(str_spike)

            for var_file, dataset_isotopes in self.container_spike_values.items():
                str_spike_file = var_file + "\n"
                save_file.write(str_spike_file)
                for var_isotope, dataset_values in dataset_isotopes.items():
                    str_spike_isotope = str(var_isotope) + ";"
                    for var_id, val_id in dataset_values["Save"].items():
                        str_spike_isotope += str(var_id) + ";" + str(val_id) + ";"
                    str_spike_isotope = str_spike_isotope[:-1]
                    str_spike_isotope += "\n"
                    save_file.write(str_spike_isotope)

        elif self.pysills_mode == "FI":
            save_file = filedialog.asksaveasfile(mode="w", defaultextension=".txt")
            #
            ## Save information about the project
            save_file.write("PROJECT INFORMATION" + "\n")
            save_file.write("Fluid Inclusion Analysis" + "\n")
            #
            info_author = self.container_var["fi_setting"]["Author"].get()
            info_source = self.container_var["fi_setting"]["Source ID"].get()
            info_carrier_gas = self.container_var["LASER"].get()
            #
            str_proj = str(info_author) + ";" + str(info_source) + ";" + str(info_carrier_gas)
            str_proj += "\n"
            #
            save_file.write(str_proj)
            save_file.write("\n")
            #
            ## Save information about 'Standard Files Setup'
            save_file.write("STANDARD FILES" + "\n")
            #
            for file_std in self.container_lists["STD"]["Long"]:
                filename_std_short = file_std.split("/")[-1]
                #
                info_file = file_std
                info_srm = self.container_files["STD"][filename_std_short]["SRM"].get()
                info_is = self.container_var["STD"][file_std]["IS Data"]["IS"].get()
                info_cb_state = self.container_var["STD"][file_std]["Checkbox"].get()
                #
                str_std = str(info_file) + ";" + str(info_srm) + ";" + str(info_is) + ";" + str(info_cb_state)
                #
                str_std += "\n"
                save_file.write(str_std)
            save_file.write("\n")
            #
            ## Save information about 'Sample Files Setup'
            save_file.write("SAMPLE FILES" + "\n")
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                info_file = var_file
                info_is = self.container_var["SMPL"][var_file]["IS Data"]["IS"].get()
                info_assemblage = self.container_var["SMPL"][var_file]["ID"].get()
                info_cb_state = self.container_var["SMPL"][var_file]["Checkbox"].get()
                #
                str_smpl = str(info_file) + ";" + str(info_is) + ";" + str(info_assemblage) + ";" + str(info_cb_state)
                #
                str_smpl += "\n"
                save_file.write(str_smpl)
            save_file.write("\n")
            #
            ## Save information about 'Measured Isotopes'
            save_file.write("ISOTOPES" + "\n")
            #
            for isotope in self.container_lists["ISOTOPES"]:
                info_srm = self.container_var["SRM"][isotope].get()
                #
                str_iso = str(isotope) + ";" + str(info_srm)
                str_iso += "\n"
                save_file.write(str_iso)
            #
            save_file.write("\n")
            #
            ## Save information about 'Inclusion Setup'
            save_file.write("INCLUSION SETTINGS" + "\n")
            #
            info_method = self.container_var["fi_setting"]["Inclusion Setup Selection"].get()
            #
            str_incl = str("Method") + ";" + str(info_method) + "\n"
            save_file.write(str_incl)
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                info_file = var_file
                var_file_short = var_file.split("/")[-1]
                info_is = self.container_var["SMPL"][var_file]["IS Data"]["IS"].get()
                info_concentration = self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].get()
                info_salinity = self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                    var_file_short].get()
                #
                str_incl = str(info_file) + ";" + str(info_is) + ";" + str(info_concentration) + ";" \
                           + str(info_salinity)
                #
                str_incl += "\n"
                save_file.write(str_incl)
            #
            save_file.write("\n")
            #
            ## Save information about 'Quantification Setup (Matrix-Only Tracer)'
            save_file.write("QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)" + "\n")
            #
            info_method = self.container_var["fi_setting"]["Quantification Method"].get()
            #
            str_method = str("Method") + ";" + str(info_method) + "\n"
            save_file.write(str_method)
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                info_file = var_file
                info_amount = self.container_var["SMPL"][var_file]["Host Only Tracer"]["Amount"].get()
                info_matrix = self.container_var["SMPL"][var_file]["Host Only Tracer"]["Matrix"].get()
                info_isotope = self.container_var["SMPL"][var_file]["Host Only Tracer"]["Name"].get()
                info_concentration = self.container_var["SMPL"][var_file]["Host Only Tracer"]["Value"].get()
                #
                str_method = str(info_file) + ";" + str(info_amount) + ";" + str(info_matrix) + ";" \
                             + str(info_isotope) + ";" + str(info_concentration)
                #
                str_method += "\n"
                save_file.write(str_method)
            #
            save_file.write("\n")
            #
            ## Save information about 'Quantification Setup (Second Internal Standard)'
            save_file.write("QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)" + "\n")
            #
            info_method = self.container_var["fi_setting"]["Quantification Method"].get()
            #
            str_method = str("Method") + ";" + str(info_method) + "\n"
            save_file.write(str_method)
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                info_file = var_file
                info_isotope = self.container_var["SMPL"][var_file]["Second Internal Standard"]["Name"].get()
                info_concentration = self.container_var["SMPL"][var_file]["Second Internal Standard"]["Value"].get()
                #
                str_method = str(info_file) + ";" + str(info_isotope) + ";" + str(info_concentration)
                #
                str_method += "\n"
                save_file.write(str_method)
            #
            save_file.write("\n")
            #
            ## Save information about 'Matrix Setup'
            save_file.write("MATRIX SETTINGS" + "\n")
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                info_file = var_file
                info_isotope = self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Name"].get()
                info_concentration = self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Concentration"].get()
                #
                str_matr = str(info_file) + ";" + str(info_isotope) + ";" + str(info_concentration)
                #
                str_matr += "\n"
                save_file.write(str_matr)
            #
            save_file.write("\n")
            #
            ## Save information about 'Dwell Time Settings'
            save_file.write("DWELL TIME SETTINGS" + "\n")
            #
            for isotope in self.container_lists["ISOTOPES"]:
                info_dwell = self.container_var["dwell_times"]["Entry"][isotope].get()
                #
                str_dwell = str(isotope) + ";" + str(info_dwell)
                str_dwell += "\n"
                save_file.write(str_dwell)
            #
            save_file.write("\n")
            #
            ## Save information about 'Interval Settings'
            save_file.write("INTERVAL SETTINGS" + "\n")
            #
            for var_file in self.container_lists["STD"]["Long"]:
                var_file_short = var_file.split("/")[-1]
                str_intervals = str(var_file) + ";" + "STD" + "\n"
                #
                for key, item in self.container_helper["STD"][var_file_short]["BG"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "BG" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                for key, item in self.container_helper["STD"][var_file_short]["MAT"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "MAT" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                save_file.write(str_intervals)
            #
            for var_file in self.container_lists["SMPL"]["Long"]:
                var_file_short = var_file.split("/")[-1]
                str_intervals = str(var_file) + ";" + "SMPL" + "\n"
                #
                for key, item in self.container_helper["SMPL"][var_file_short]["BG"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "BG" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                for key, item in self.container_helper["SMPL"][var_file_short]["MAT"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "MAT" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(info_indices) + "\n"
                #
                for key, item in self.container_helper["SMPL"][var_file_short]["INCL"]["Content"].items():
                    info_id = key
                    info_times = item["Times"]
                    info_indices = item["Indices"]
                    #
                    str_intervals += "INCL" + ";" + str(info_id) + ";" + str(info_times) + ";" + str(
                        info_indices) + "\n"
                #
                save_file.write(str_intervals)
            #
            save_file.write("\n")
            #
            ## Save information about 'Spike Elimination'
            save_file.write("SPIKE ELIMINATION" + "\n")

            info_std_state = self.container_var["Spike Elimination"]["STD"]["State"]
            info_smpl_state = self.container_var["Spike Elimination"]["SMPL"]["State"]
            info_inclusion_consideration = self.container_var["fi_setting"]["Spike Elimination Inclusion"].get()
            info_method = self.container_var["Spike Elimination Method"].get()
            info_alpha = self.container_var["fi_setting"]["SE Alpha"].get()
            info_threshold = self.container_var["fi_setting"]["SE Threshold"].get()

            str_spike = str("STD") + ";" + str(info_std_state) + ";" + str("SMPL") + ";" + str(info_smpl_state) + ";" \
                        + str(info_inclusion_consideration) + str(info_method) + ";" + str(info_alpha) + ";" \
                        + str(info_threshold) + "\n"

            save_file.write(str_spike)

            for var_file, dataset_isotopes in self.container_spike_values.items():
                str_spike_file = var_file + "\n"
                save_file.write(str_spike_file)
                for var_isotope, dataset_values in dataset_isotopes.items():
                    str_spike_isotope = str(var_isotope) + ";"
                    for var_id, val_id in dataset_values["Save"].items():
                        str_spike_isotope += str(var_id) + ";" + str(val_id) + ";"
                    str_spike_isotope = str_spike_isotope[:-1]
                    str_spike_isotope += "\n"
                    save_file.write(str_spike_isotope)

        elif self.pysills_mode == "MI":
            pass
        #
        ## END
        save_file.write("\n")
        save_file.write("\n")
        save_file.write("END")
        #
        save_file.close()
    #
    def open_project(self):
        filename = filedialog.askopenfilename()
        #
        try:
            file_loaded = open(str(filename), "r")
            loaded_lines = file_loaded.readlines()
            #
            n_settings = 0
            index = 0
            #
            if self.pysills_mode == "MA":
                strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES", "MATRIX SETTINGS",
                           "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION", "END"]
            else:
                strings = ["PROJECT INFORMATION", "STANDARD FILES", "SAMPLE FILES", "ISOTOPES", "INCLUSION SETTINGS",
                           "QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)",
                           "QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)", "MATRIX SETTINGS",
                           "DWELL TIME SETTINGS", "INTERVAL SETTINGS", "SPIKE ELIMINATION", "END"]
            #
            index_container = {}
            #
            while n_settings < len(strings):
                index_container[strings[n_settings]] = 0
                index = 0
                flag = 0
                for line in open(str(filename), "r"):
                    if strings[n_settings] in line:
                        flag = 1
                        break
                    else:
                        index += 1
                #
                if flag == 0:
                    pass
                else:
                    index_container[strings[n_settings]] += index
                    n_settings += 1
            #
            if self.pysills_mode == "MA":
                ## PROJECT INFORMATION
                for i in range(index_container["PROJECT INFORMATION"] + 2,
                               index_container["STANDARD FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    self.container_var["ma_setting"]["Author"].set(splitted_std[0])
                    self.container_var["ma_setting"]["Source ID"].set(splitted_std[1])
                    self.container_var["LASER"].set(splitted_std[2])
                    #
                ## STANDARD FILES
                for i in range(index_container["STANDARD FILES"] + 1,
                               index_container["SAMPLE FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_files["STD"][var_file_short] = {"SRM": tk.StringVar()}
                    self.container_var["STD"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar()}
                    #
                    self.lb_std.insert(tk.END, str(var_file_short))
                    self.list_std.append(var_file_long)
                    self.container_lists["STD"]["Long"].append(var_file_long)
                    self.container_lists["STD"]["Short"].append(var_file_short)
                    self.container_files["STD"][var_file_short]["SRM"].set(splitted_std[1])
                    self.container_var["STD"][var_file_long]["IS Data"]["IS"].set(splitted_std[2])
                    self.container_var["STD"][var_file_long]["Checkbox"].set(splitted_std[3])
                    #
                    self.ma_current_file_std = self.list_std[0]
                    #
                ## SAMPLE FILES
                for i in range(index_container["SAMPLE FILES"] + 1,
                               index_container["ISOTOPES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_var["SMPL"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar(),
                        "ID": tk.StringVar()}
                    #
                    self.lb_smpl.insert(tk.END, str(var_file_short))
                    self.list_smpl.append(var_file_long)
                    self.container_lists["SMPL"]["Long"].append(var_file_long)
                    self.container_lists["SMPL"]["Short"].append(var_file_short)
                    self.container_var["SMPL"][var_file_long]["Checkbox"].get()
                    self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set(splitted_std[1])
                    self.container_var["SMPL"][var_file_long]["ID"].set(splitted_std[2])
                    self.container_var["SMPL"][var_file_long]["Checkbox"].set(splitted_std[3])
                    #
                    self.ma_current_file_smpl = self.list_smpl[0]
                    #
                ## ISOTOPES
                for i in range(index_container["ISOTOPES"] + 1,
                               index_container["MATRIX SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["SRM"][isotope] = tk.StringVar()
                    self.container_lists["ISOTOPES"].append(isotope)
                    self.container_var["SRM"][isotope].set(splitted_std[1])
                    #
                ## MATRIX SETTINGS
                for i in range(index_container["MATRIX SETTINGS"] + 1,
                               index_container["DWELL TIME SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set(splitted_std[1])
                    self.container_var["SMPL"][var_file_long]["IS Data"]["Concentration"].set(splitted_std[2])
                    #
                ## DWELL TIME SETTINGS
                for i in range(index_container["DWELL TIME SETTINGS"] + 1,
                               index_container["INTERVAL SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                    self.container_var["dwell_times"]["Entry"][isotope].set(splitted_std[1])
                    #
                ## INTERVAL SETTINGS
                for i in range(index_container["INTERVAL SETTINGS"] + 1,
                               index_container["SPIKE ELIMINATION"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    if splitted_std[-1] in ["STD", "SMPL"]:
                        var_filetype = splitted_std[1]
                        var_file_long = splitted_std[0]
                        var_file_short = splitted_std[0].split("/")[-1]
                        #
                        self.container_helper[var_filetype][var_file_short] = {
                            "BG": {"Content": {}}, "MAT": {"Content": {}}}
                        #
                    else:
                        if splitted_std[0] == "BG":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            #
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Times"] = [float(key_times.group(1)), float(key_times.group(3))]
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Indices"] = [int(key_indices.group(1)), int(key_indices.group(3))]
                            #
                        elif splitted_std[0] == "MAT":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            #
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Times"] = [float(key_times.group(1)), float(key_times.group(3))]
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Indices"] = [int(key_indices.group(1)), int(key_indices.group(3))]
                    #
                ## SPIKE ELIMINATION
                index = 0
                for i in range(index_container["SPIKE ELIMINATION"] + 1,
                               index_container["END"] - 2):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    if index == 0:
                        self.container_var["Spike Elimination"]["STD"]["State"] = bool(splitted_std[1])
                        self.container_var["Spike Elimination"]["SMPL"]["State"] = bool(splitted_std[3])
                        self.container_var["Spike Elimination Method"].set(splitted_std[4])
                        self.container_var["ma_setting"]["SE Alpha"].set(splitted_std[5])
                        self.container_var["ma_setting"]["SE Threshold"].set(int(splitted_std[6]))
                        index += 1
                    else:
                        if len(splitted_std) == 1:
                            var_file = splitted_std[0]
                            if var_file not in self.container_spike_values:
                                self.container_spike_values[var_file] = {}
                        if len(splitted_std) > 1:
                            var_isotope = splitted_std[0]
                            list_values = splitted_std[1:]
                            if var_isotope not in self.container_spike_values[var_file]:
                                self.container_spike_values[var_file][var_isotope] = {
                                    "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
                            for var_index in range(0, len(list_values), 2):
                                var_id = int(list_values[var_index])
                                val_id = float(list_values[var_index + 1])
                                self.container_spike_values[var_file][var_isotope]["Save"][var_id] = val_id

            elif self.pysills_mode == "FI":
                ## PROJECT INFORMATION
                for i in range(index_container["PROJECT INFORMATION"] + 2,
                               index_container["STANDARD FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    self.container_var["fi_setting"]["Author"].set(splitted_std[0])
                    self.container_var["fi_setting"]["Source ID"].set(splitted_std[1])
                    self.container_var["LASER"].set(splitted_std[2])
                    #
                ## STANDARD FILES
                for i in range(index_container["STANDARD FILES"] + 1,
                               index_container["SAMPLE FILES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_files["STD"][var_file_short] = {"SRM": tk.StringVar()}
                    self.container_var["STD"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar()}
                    #
                    self.lb_std.insert(tk.END, str(var_file_short))
                    self.list_std.append(var_file_long)
                    self.container_lists["STD"]["Long"].append(var_file_long)
                    self.container_lists["STD"]["Short"].append(var_file_short)
                    self.container_files["STD"][var_file_short]["SRM"].set(splitted_std[1])
                    self.container_var["STD"][var_file_long]["IS Data"]["IS"].set(splitted_std[2])
                    self.container_var["STD"][var_file_long]["Checkbox"].set(splitted_std[3])
                    #
                    self.fi_current_file_std = self.list_std[0]
                    #
                ## SAMPLE FILES
                for i in range(index_container["SAMPLE FILES"] + 1,
                               index_container["ISOTOPES"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    var_file_long = splitted_std[0]
                    var_file_short = splitted_std[0].split("/")[-1]
                    #
                    self.container_var["SMPL"][var_file_long] = {
                        "IS Data": {"IS": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Checkbox": tk.IntVar(),
                        "ID": tk.StringVar()}
                    #
                    self.lb_smpl.insert(tk.END, str(var_file_short))
                    self.list_smpl.append(var_file_long)
                    self.container_lists["SMPL"]["Long"].append(var_file_long)
                    self.container_lists["SMPL"]["Short"].append(var_file_short)
                    self.container_var["SMPL"][var_file_long]["Checkbox"].get()
                    self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].set(splitted_std[1])
                    self.container_var["SMPL"][var_file_long]["ID"].set(splitted_std[2])
                    self.container_var["SMPL"][var_file_long]["Checkbox"].set(splitted_std[3])
                    #
                    self.fi_current_file_smpl = self.list_smpl[0]
                    #
                ## ISOTOPES
                for i in range(index_container["ISOTOPES"] + 1,
                               index_container["INCLUSION SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["SRM"][isotope] = tk.StringVar()
                    self.container_lists["ISOTOPES"].append(isotope)
                    self.container_var["SRM"][isotope].set(splitted_std[1])
                    #
                ## INCLUSION SETTINGS
                index = 0
                for i in range(index_container["INCLUSION SETTINGS"] + 1,
                               index_container["QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)"] - 1):
                    line_data = str(loaded_lines[i].strip())
                    splitted_data = line_data.split(";")
                    #
                    if index == 0:
                        self.container_var["fi_setting"]["Inclusion Setup Selection"] = tk.IntVar()
                        self.container_var["fi_setting"]["Inclusion Setup Selection"].set(splitted_data[1])
                        #
                    else:
                        info_file = splitted_data[0]
                        info_file_short = info_file.split("/")[-1]
                        info_is = splitted_data[1]
                        info_concentration = splitted_data[2]
                        info_salinity = splitted_data[3]
                        #
                        self.container_var["SMPL"][info_file]["IS Data"]["IS"].set(info_is)
                        self.container_var["SMPL"][info_file]["IS Data"]["Concentration"].set(info_concentration)
                        self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                            info_file_short] = tk.StringVar()
                        self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][info_file_short].set(
                            info_salinity)
                    #
                    index += 1
                #
                ## QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)
                index = 0
                for i in range(index_container["QUANTIFICATION SETTINGS (MATRIX-ONLY TRACER)"] + 1,
                               index_container["QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)"] - 1):
                    line_data = str(loaded_lines[i].strip())
                    splitted_data = line_data.split(";")
                    #
                    if index == 0:
                        self.container_var["fi_setting"]["Quantification Method"] = tk.IntVar()
                        self.container_var["fi_setting"]["Quantification Method"].set(splitted_data[1])
                        #
                    else:
                        info_file = splitted_data[0]
                        info_amount = splitted_data[1]
                        info_matrix = splitted_data[2]
                        info_isotope = splitted_data[3]
                        info_concentration = splitted_data[4]
                        #
                        self.container_var["SMPL"][info_file]["Host Only Tracer"] = {
                            "Name": tk.StringVar(), "Value": tk.StringVar(), "Matrix": tk.StringVar(),
                            "Amount": tk.StringVar()}
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Amount"].set(info_amount)
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Matrix"].set(info_matrix)
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Name"].set(info_isotope)
                        self.container_var["SMPL"][info_file]["Host Only Tracer"]["Value"].set(info_concentration)
                    #
                    index += 1
                #
                ## QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)
                index = 0
                for i in range(index_container["QUANTIFICATION SETTINGS (SECOND INTERNAL STANDARD)"] + 1,
                               index_container["MATRIX SETTINGS"] - 1):
                    line_data = str(loaded_lines[i].strip())
                    splitted_data = line_data.split(";")
                    #
                    if index == 0:
                        self.container_var["fi_setting"]["Quantification Method"] = tk.IntVar()
                        self.container_var["fi_setting"]["Quantification Method"].set(splitted_data[1])
                        #
                    else:
                        info_file = splitted_data[0]
                        info_isotope = splitted_data[1]
                        info_concentration = splitted_data[2]
                        #
                        self.container_var["SMPL"][info_file]["Second Internal Standard"] = {
                            "Name": tk.StringVar(), "Value": tk.StringVar()}
                        self.container_var["SMPL"][info_file]["Second Internal Standard"]["Name"].set(info_isotope)
                        self.container_var["SMPL"][info_file]["Second Internal Standard"]["Value"].set(
                            info_concentration)
                    #
                    index += 1
                #
                ## MATRIX SETTINGS
                for i in range(index_container["MATRIX SETTINGS"] + 1,
                               index_container["DWELL TIME SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    info_file = splitted_std[0]
                    info_isotope = splitted_std[1]
                    info_concentration = splitted_std[2]
                    #
                    self.container_var["SMPL"][info_file]["Matrix Setup"] = {
                        "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                        "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
                    self.container_var["SMPL"][info_file]["Matrix Setup"]["IS"]["Name"].set(info_isotope)
                    self.container_var["SMPL"][info_file]["Matrix Setup"]["IS"]["Concentration"].set(info_concentration)
                #
                ## DWELL TIME SETTINGS
                for i in range(index_container["DWELL TIME SETTINGS"] + 1,
                               index_container["INTERVAL SETTINGS"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    isotope = splitted_std[0]
                    self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                    self.container_var["dwell_times"]["Entry"][isotope].set(splitted_std[1])
                    #
                ## INTERVAL SETTINGS
                for i in range(index_container["INTERVAL SETTINGS"] + 1,
                               index_container["SPIKE ELIMINATION"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")
                    #
                    if splitted_std[-1] in ["STD", "SMPL"]:
                        var_filetype = splitted_std[1]
                        var_file_long = splitted_std[0]
                        var_file_short = splitted_std[0].split("/")[-1]
                        #
                        self.container_helper[var_filetype][var_file_short] = {
                            "BG": {"Content": {}, "Indices": []},
                            "MAT": {"Content": {}, "Indices": []},
                            "INCL": {"Content": {}, "Indices": []}}
                        #
                        #self.container_helper[var_filetype][var_file_short][var_key]["Indices"]
                        #
                    else:
                        if splitted_std[0] == "BG":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            #
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Times"] = [float(key_times.group(1)), float(key_times.group(3))]
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"][var_id][
                                "Indices"] = [int(key_indices.group(1)), int(key_indices.group(3))]
                            #
                            self.container_helper[var_filetype][var_file_short]["BG"]["Indices"].append(var_id)
                            #
                        elif splitted_std[0] == "MAT":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            #
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Times"] = [float(key_times.group(1)), float(key_times.group(3))]
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"][var_id][
                                "Indices"] = [int(key_indices.group(1)), int(key_indices.group(3))]
                            #
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Indices"].append(var_id)
                            #
                        elif splitted_std[0] == "INCL":
                            var_id = int(splitted_std[1])
                            var_times = splitted_std[2]
                            var_indices = splitted_std[3]
                            #
                            key_times = re.search(r"\[(\d+\.\d+)(\,\s+)(\d+\.\d+)\]", var_times)
                            key_indices = re.search(r"\[(\d+)(\,\s+)(\d+)\]", var_indices)
                            #
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"][var_id] = {}
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"][var_id][
                                "Times"] = [float(key_times.group(1)), float(key_times.group(3))]
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"][var_id][
                                "Indices"] = [int(key_indices.group(1)), int(key_indices.group(3))]
                            #
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Indices"].append(var_id)
                    #
                    if splitted_std[0] == "BG":
                        self.container_helper[var_filetype][var_file_short]["BG"]["ID"] = len(
                            self.container_helper[var_filetype][var_file_short]["BG"]["Content"])
                        #
                    elif splitted_std[0] == "MAT":
                        self.container_helper[var_filetype][var_file_short]["MAT"]["ID"] = len(
                            self.container_helper[var_filetype][var_file_short]["MAT"]["Content"])
                        #
                    elif splitted_std[0] == "INCL":
                        self.container_helper[var_filetype][var_file_short]["INCL"]["ID"] = len(
                            self.container_helper[var_filetype][var_file_short]["INCL"]["Content"])
                #
                ## SPIKE ELIMINATION
                index = 0
                for i in range(index_container["SPIKE ELIMINATION"] + 1, index_container["END"] - 1):
                    line_std = str(loaded_lines[i].strip())
                    splitted_std = line_std.split(";")

                    if index == 0:
                        self.container_var["Spike Elimination"]["STD"]["State"] = bool(splitted_std[1])
                        self.container_var["Spike Elimination"]["SMPL"]["State"] = bool(splitted_std[3])
                        self.container_var["fi_setting"]["Spike Elimination Inclusion"].set(splitted_std[4])
                        self.container_var["Spike Elimination Method"].set(splitted_std[5])
                        self.container_var["fi_setting"]["SE Alpha"].set(splitted_std[6])
                        self.container_var["fi_setting"]["SE Threshold"].set(int(splitted_std[7]))
                        index += 1
                    else:
                        if len(splitted_std) == 1:
                            var_file = splitted_std[0]
                            if var_file not in self.container_spike_values:
                                self.container_spike_values[var_file] = {}
                        if len(splitted_std) > 1:
                            var_isotope = splitted_std[0]
                            list_values = splitted_std[1:]
                            if var_isotope not in self.container_spike_values[var_file]:
                                self.container_spike_values[var_file][var_isotope] = {
                                    "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
                            for var_index in range(0, len(list_values), 2):
                                var_id = int(list_values[var_index])
                                val_id = float(list_values[var_index + 1])
                                self.container_spike_values[var_file][var_isotope]["Save"][var_id] = val_id

            elif self.pysills_mode == "MI":
                pass
            #
            self.palette_complete = sns.color_palette(
                "nipy_spectral", n_colors=len(self.container_lists["ISOTOPES"])).as_hex()
            self.isotope_colors = {}
            #
            for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                self.isotope_colors[isotope] = self.palette_complete[index]
                self.container_files["SRM"][isotope] = tk.StringVar()
            #
            self.file_loaded = True
        #
        except FileNotFoundError:
            pass
    #
    def export_calculation_report(self, file_type="Sample Files", data_type="SMOOTHED"):
        #
        if self.container_var["ma_datareduction"]["Radiobutton"][0].get() == 0:
            var_datatype = "RAW"
        elif self.container_var["ma_datareduction"]["Radiobutton"][0].get() == 1:
            var_datatype = "SMOOTHED"
        #
        header = ["filename"]
        #
        n_digits = 8
        #
        # print("RAW STD")
        # for key, value in self.results_data_std_raw.items():
        #     print(key)
        #     for key2, value2 in value.items():
        #         print(key2, value2)
        # print("")
        # print("SMOOTHED STD")
        # for key, value in self.results_data_std_smoothed.items():
        #     print(key, value)
        # print("RAW SMPL")
        # for key, value in self.results_data_smpl_raw.items():
        #     print(key)
        #     for key2, value2 in value.items():
        #         print(key2, value2)
        # print("")
        # print("SMOOTHED SMPL")
        # for key, value in self.results_data_smpl_smoothed.items():
        #     print(key, value)
        # print("")
        #
        report_data = {}
        report_data["STD"] = {}
        report_data["SMPL"] = {}
        report_data["Total STD"] = {}
        report_data["Total SMPL"] = {}
        #
        categories = [
            "intensity", "intensity ratio", "sensitivity", "concentration", "RSF", "LOD",
            "sensitivity normalized"]
        for index, file_std in enumerate(self.container_lists["STD"]["Short"]):
            report_data["STD"][file_std] = {}
            report_data["Total STD"] = {}
            for category in categories:
                if category == "intensity":
                    container_str = category + str(" bg")
                    report_data["STD"][file_std][container_str] = {}
                    report_data["Total STD"][container_str] = {}
                    report_data["STD"][file_std][container_str]["filename"] = file_std
                    report_data["Total STD"][container_str]["filename"] = "Total STD"
                    #
                    container_str = category + str(" sig corr")
                    report_data["STD"][file_std][container_str] = {}
                    report_data["Total STD"][container_str] = {}
                    report_data["STD"][file_std][container_str]["filename"] = file_std
                    report_data["Total STD"][container_str]["filename"] = "Total STD"
                    #
                else:
                    report_data["STD"][file_std][category] = {}
                    report_data["Total STD"][category] = {}
                    report_data["STD"][file_std][category]["filename"] = file_std
                    report_data["Total STD"][category]["filename"] = "Total STD"
                    #
                for isotope in self.container_lists["ISOTOPES"]:
                    if var_datatype == "RAW":
                        if category == "intensity ratio":
                            value_file = round(
                                self.results_data_std_raw[category]["SIGNAL CORRECTED"][file_std][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_raw[category]["SIGNAL CORRECTED"][isotope]), n_digits)
                            report_data["STD"][file_std][category][isotope] = value_file
                            report_data["Total STD"][category][isotope] = value_total
                            #
                            self.container_report[file_std]["Mean"][category][isotope] = round(np.nanmean(
                                self.results_data_std_raw[category]["SIGNAL CORRECTED"][file_std][isotope]), n_digits)
                            self.container_report["Total STD"]["Mean"][category][isotope] = round(np.nanmean(
                                self.results_data_std_raw[category]["SIGNAL CORRECTED"][isotope]), n_digits)
                            #
                        elif category == "intensity":
                            value_file = round(
                                self.results_data_std_raw[category]["STD"]["BACKGROUND"][file_std][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_raw[category]["STD"]["BACKGROUND"][isotope]), n_digits)
                            #
                            container_str = category + str(" bg")
                            report_data["STD"][file_std][container_str][isotope] = value_file
                            report_data["Total STD"][container_str][isotope] = value_total
                            #
                            self.container_report[file_std]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_raw[category]["STD"]["BACKGROUND"][file_std][isotope]), n_digits)
                            self.container_report["Total STD"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_raw[category]["STD"]["BACKGROUND"][isotope]), n_digits)
                            #
                        #elif category == "intensity sig corr":
                            value_file = round(
                                self.results_data_std_raw[category]["STD"]["SIGNAL CORRECTED"][file_std][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_raw[category]["STD"]["SIGNAL CORRECTED"][isotope]), n_digits)
                            #
                            container_str = category + str(" sig corr")
                            report_data["STD"][file_std][container_str][isotope] = value_file
                            report_data["Total STD"][container_str][isotope] = value_total
                            #
                            self.container_report[file_std]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_raw[category]["STD"]["SIGNAL CORRECTED"][file_std][isotope]),
                                n_digits)
                            self.container_report["Total STD"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_raw[category]["STD"]["SIGNAL CORRECTED"][isotope]), n_digits)
                            #
                        else:
                            value_file = round(
                                self.results_data_std_raw[category][file_std][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_raw[category][isotope]), n_digits)
                            report_data["STD"][file_std][category][isotope] = value_file
                            report_data["Total STD"][category][isotope] = value_total
                            #
                    elif var_datatype == "SMOOTHED":
                        if category == "intensity ratio":
                            value_file = round(
                                self.results_data_std_smoothed[category]["SIGNAL CORRECTED"][file_std][isotope],
                                n_digits)
                            value_total = round(np.mean(
                                self.results_data_std_smoothed[category]["SIGNAL CORRECTED"][isotope]), n_digits)
                            report_data["STD"][file_std][category][isotope] = value_file
                            report_data["Total STD"][category][isotope] = value_total
                            #
                        elif category == "intensity":
                            value_file = round(
                                self.results_data_std_smoothed[category]["STD"]["BACKGROUND"][file_std][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_smoothed[category]["STD"]["BACKGROUND"][isotope]), n_digits)
                            #
                            container_str = category + str(" bg")
                            report_data["STD"][file_std][container_str][isotope] = value_file
                            report_data["Total STD"][container_str][isotope] = value_total
                            #
                            self.container_report[file_std]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_smoothed[category]["STD"]["BACKGROUND"][file_std][isotope]),
                                n_digits)
                            self.container_report["Total STD"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_smoothed[category]["STD"]["BACKGROUND"][isotope]), n_digits)
                            #
                        #elif category == "intensity sig corr":
                            value_file = round(
                                self.results_data_std_smoothed[category]["STD"]["SIGNAL CORRECTED"][file_std][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_smoothed[category]["STD"]["SIGNAL CORRECTED"][isotope]), n_digits)
                            #
                            container_str = category + str(" sig corr")
                            report_data["STD"][file_std][container_str][isotope] = value_file
                            report_data["Total STD"][container_str][isotope] = value_total
                            #
                            self.container_report[file_std]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_smoothed[category]["STD"]["SIGNAL CORRECTED"][file_std][isotope]),
                                n_digits)
                            self.container_report["Total STD"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_std_smoothed[category]["STD"]["SIGNAL CORRECTED"][isotope]), n_digits)
                            #
                        else:
                            value_file = round(
                                self.results_data_std_smoothed[category][file_std][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_std_smoothed[category][isotope]), n_digits)
                            report_data["STD"][file_std][category][isotope] = value_file
                            report_data["Total STD"][category][isotope] = value_total
                            #
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            report_data["SMPL"][file_smpl] = {}
            report_data["Total SMPL"] = {}
            for category in categories:
                if category == "intensity":
                    container_str = category + str(" bg")
                    report_data["SMPL"][file_smpl][container_str] = {}
                    report_data["Total SMPL"][container_str] = {}
                    report_data["SMPL"][file_smpl][container_str]["filename"] = file_smpl
                    report_data["Total SMPL"][container_str]["filename"] = "Total SMPL"
                    #
                    container_str = category + str(" sig corr")
                    report_data["SMPL"][file_smpl][container_str] = {}
                    report_data["Total SMPL"][container_str] = {}
                    report_data["SMPL"][file_smpl][container_str]["filename"] = file_smpl
                    report_data["Total SMPL"][container_str]["filename"] = "Total SMPL"
                    #
                else:
                    report_data["SMPL"][file_smpl][category] = {}
                    report_data["Total SMPL"][category] = {}
                    report_data["SMPL"][file_smpl][category]["filename"] = file_smpl
                    report_data["Total SMPL"][category]["filename"] = "Total SMPL"
                    #
                for isotope in self.container_lists["ISOTOPES"]:
                    if var_datatype == "RAW":
                        if category == "intensity ratio":
                            value_file = round(
                                self.results_data_smpl_raw[category]["SIGNAL CORRECTED"][file_smpl][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SIGNAL CORRECTED"][isotope]), n_digits)
                            report_data["SMPL"][file_smpl][category][isotope] = value_file
                            report_data["Total SMPL"][category][isotope] = value_total
                        #
                        elif category == "intensity":
                            value_file = round(
                                self.results_data_smpl_raw[category]["SMPL"]["BACKGROUND"][file_smpl][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SMPL"]["BACKGROUND"][isotope]), n_digits)
                            #
                            container_str = category + str(" bg")
                            report_data["SMPL"][file_smpl][container_str][isotope] = value_file
                            report_data["Total SMPL"][container_str][isotope] = value_total
                            #
                            self.container_report[file_smpl]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SMPL"]["BACKGROUND"][file_smpl][isotope]),
                                n_digits)
                            self.container_report["Total SMPL"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SMPL"]["BACKGROUND"][isotope]), n_digits)
                            #
                        #elif category == "intensity sig corr":
                            value_file = round(
                                self.results_data_smpl_raw[category]["SMPL"]["SIGNAL CORRECTED"][file_smpl][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SMPL"]["SIGNAL CORRECTED"][isotope]), n_digits)
                            #
                            container_str = category + str(" sig corr")
                            report_data["SMPL"][file_smpl][container_str][isotope] = value_file
                            report_data["Total SMPL"][container_str][isotope] = value_total
                            #
                            self.container_report[file_smpl]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SMPL"]["SIGNAL CORRECTED"][file_smpl][isotope]),
                                n_digits)
                            self.container_report["Total SMPL"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_raw[category]["SMPL"]["SIGNAL CORRECTED"][isotope]), n_digits)
                        #
                        else:
                            value_file = round(
                                self.results_data_smpl_raw[category][file_smpl][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_raw[category][isotope]), n_digits)
                            report_data["SMPL"][file_smpl][category][isotope] = value_file
                            report_data["Total SMPL"][category][isotope] = value_total
                        #
                    elif var_datatype == "SMOOTHED":
                        if category == "intensity ratio":
                            value_file = round(
                                self.results_data_smpl_smoothed[category]["SIGNAL CORRECTED"][file_smpl][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SIGNAL CORRECTED"][isotope]), n_digits)
                            report_data["SMPL"][file_smpl][category][isotope] = value_file
                            report_data["Total SMPL"][category][isotope] = value_total
                        #
                        elif category == "intensity":
                            value_file = round(
                                self.results_data_smpl_smoothed[category]["SMPL"]["BACKGROUND"][file_smpl][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SMPL"]["BACKGROUND"][isotope]), n_digits)
                            #
                            container_str = category + str(" bg")
                            report_data["SMPL"][file_smpl][container_str][isotope] = value_file
                            report_data["Total SMPL"][container_str][isotope] = value_total
                            #
                            self.container_report[file_smpl]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SMPL"]["BACKGROUND"][file_smpl][isotope]),
                                n_digits)
                            self.container_report["Total SMPL"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SMPL"]["BACKGROUND"][isotope]), n_digits)
                            #
                        #elif category == "intensity sig corr":
                            value_file = round(
                                self.results_data_smpl_smoothed[category]["SMPL"]["SIGNAL CORRECTED"][file_smpl][isotope],
                                n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SMPL"]["SIGNAL CORRECTED"][isotope]),
                                n_digits)
                            #
                            container_str = category + str(" sig corr")
                            report_data["SMPL"][file_smpl][container_str][isotope] = value_file
                            report_data["Total SMPL"][container_str][isotope] = value_total
                            #
                            self.container_report[file_smpl]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SMPL"]["SIGNAL CORRECTED"][file_smpl][isotope]),
                                n_digits)
                            self.container_report["Total SMPL"]["Mean"][container_str][isotope] = round(np.nanmean(
                                self.results_data_smpl_smoothed[category]["SMPL"]["SIGNAL CORRECTED"][isotope]),
                                n_digits)
                        #
                        else:
                            value_file = round(
                                self.results_data_smpl_smoothed[category][file_smpl][isotope], n_digits)
                            value_total = round(np.nanmean(
                                self.results_data_smpl_smoothed[category][isotope]), n_digits)
                            report_data["SMPL"][file_smpl][category][isotope] = value_file
                            report_data["Total SMPL"][category][isotope] = value_total
        #
        # print("REPORT DATA:")
        # for key, value in report_data.items():
        #     print("KEY:", key)
        #     for key2, value2, in value.items():
        #         print(key2, value2)
        #     print("")
        #
        for isotope in self.container_lists["ISOTOPES"]:
            header.append(isotope)
        #
        export_file = filedialog.asksaveasfile(mode="w", defaultextension=".csv")
        filename = export_file.name
        #
        with open(filename, "w", newline="") as report_file:
            writer = csv.DictWriter(report_file, fieldnames=header, delimiter=";")
            report_file.write("CALCULATION REPORT\n")
            report_file.write("\n")
            report_file.write("AUTHOR:;" + str(self.container_var["settings"]["Author"].get()) + "\n")
            report_file.write("SOURCE ID:;" + str(self.container_var["settings"]["Source ID"].get()) + "\n")
            report_file.write("\n")
            report_file.write("DATA TYPE:;" + str(var_datatype) + str(" DATA") + "\n")
            report_file.write("\n")
            #
            ## STANDARD FILES
            report_file.write("STANDARD FILES\n")
            report_file.write("\n")
            # Intensity Background
            report_file.write("BACKGROUND INTENSITY (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["intensity bg"])
            writer.writerow(report_data["Total STD"]["intensity bg"])
            report_file.write("\n")
            #
            # Intensity Signal corrected
            report_file.write(" BACKGROUND CORRECTED SIGNAL INTENSITY (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["intensity sig corr"])
            writer.writerow(report_data["Total STD"]["intensity sig corr"])
            report_file.write("\n")
            #
            # Intensity Ratios
            report_file.write("SIGNAL INTENSITY RATIO (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["intensity ratio"])
            writer.writerow(report_data["Total STD"]["intensity ratio"])
            report_file.write("\n")
            # Sensitivity
            report_file.write("SENSITIVITY (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["sensitivity"])
            writer.writerow(report_data["Total STD"]["sensitivity"])
            report_file.write("\n")
            # Concentration
            report_file.write("CONCENTRATION (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["concentration"])
            writer.writerow(report_data["Total STD"]["concentration"])
            report_file.write("\n")
            # Relative Sensitivity Factor (RSF)
            report_file.write("RELATIVE SENSITIVITY FACTOR RSF (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["RSF"])
            writer.writerow(report_data["Total STD"]["RSF"])
            report_file.write("\n")
            #
            # Normalized Sensitivity (S)
            report_file.write("NORMALIZED SENSITIVITY S (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["sensitivity normalized"])
            writer.writerow(report_data["Total STD"]["sensitivity normalized"])
            report_file.write("\n")
            #
            # Limit of Detection (LOD)
            report_file.write("LIMIT OF DETECTION LOD (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_std in self.container_lists["STD"]["Short"]:
                writer.writerow(report_data["STD"][file_std]["LOD"])
            writer.writerow(report_data["Total STD"]["LOD"])
            report_file.write("\n")
            #
            ## SAMPLE FILES
            report_file.write("SAMPLE FILES\n")
            report_file.write("\n")
            # Intensity Background
            report_file.write("BACKGROUND INTENSITY (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["intensity bg"])
            writer.writerow(report_data["Total SMPL"]["intensity bg"])
            report_file.write("\n")
            #
            # Intensity Signal corrected
            report_file.write(" BACKGROUND CORRECTED SIGNAL INTENSITY (arithmetic mean)\n")
            report_file.write("Standard Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["intensity sig corr"])
            writer.writerow(report_data["Total SMPL"]["intensity sig corr"])
            report_file.write("\n")
            #
            # Intensity Ratios
            report_file.write("SIGNAL INTENSITY RATIO (arithmetic mean)\n")
            report_file.write("Sample Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["intensity ratio"])
            writer.writerow(report_data["Total SMPL"]["intensity ratio"])
            report_file.write("\n")
            # Sensitivity
            report_file.write("SENSITIVITY (arithmetic mean)\n")
            report_file.write("Sample Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["sensitivity"])
            writer.writerow(report_data["Total SMPL"]["sensitivity"])
            report_file.write("\n")
            # Concentration
            report_file.write("CONCENTRATION (arithmetic mean)\n")
            report_file.write("Sample Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["concentration"])
            writer.writerow(report_data["Total SMPL"]["concentration"])
            report_file.write("\n")
            # Relative Sensitivity Factor (RSF)
            report_file.write("RELATIVE SENSITIVITY FACTOR RSF (arithmetic mean)\n")
            report_file.write("Sample Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["RSF"])
            writer.writerow(report_data["Total SMPL"]["RSF"])
            report_file.write("\n")
            #
            # Normalized Sensitivity (S)
            report_file.write("NORMALIZED SENSITIVITY S (arithmetic mean)\n")
            report_file.write("Sample Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["sensitivity normalized"])
            writer.writerow(report_data["Total SMPL"]["sensitivity normalized"])
            report_file.write("\n")
            #
            # Limit of Detection (LOD)
            report_file.write("LIMIT OF DETECTION LOD (arithmetic mean)\n")
            report_file.write("Sample Files\n")
            writer.writeheader()
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                writer.writerow(report_data["SMPL"][file_smpl]["LOD"])
            writer.writerow(report_data["Total SMPL"]["LOD"])
            report_file.write("\n")
    #
    def titanium_in_quartz_geothermometer(self, data): # e.g. data = self.container_results["STD"]["RAW"]
        for isotope, value in data.items():
            print(isotope, value)
    #
    def delete_csv(self, var_lb, var_list):
        if var_lb == self.lb_std:
            var_list = self.list_std
        elif var_lb == self.lb_smpl:
            var_list = self.list_smpl
        item = var_lb.curselection()
        var_list.remove(var_list[item[0]])
        var_lb.delete(tk.ANCHOR)
        #
        if var_lb == self.lb_std:
            del self.container_lists["STD"]["Long"][item[0]]
            del self.container_lists["STD"]["Short"][item[0]]
        elif var_lb == self.lb_smpl:
            del self.container_lists["SMPL"]["Long"][item[0]]
            del self.container_lists["SMPL"]["Short"][item[0]]
    #
    def show_diagrams(self, filename):
        isotope = self.container_lists["ISOTOPES"][self.container_var["ma_dataexploration"]["RB"].get()]
        isotope_is = self.container_var["ma_dataexploration"]["Option IS"].get()
        #
        results_ir = self.calculate_intensity_ratios(filename=filename, isotope=isotope, isotope_is=isotope_is)
        results_xi = self.calculate_sensitivity(filename=filename, isotope=isotope, isotope_is=isotope_is)
        results_c = self.calculate_concentration(filename=filename, isotope=isotope, isotope_is=isotope_is,
                                                 sensitivities=results_xi)
        #
        self.fig = Figure(figsize=(8, 8), facecolor=self.green_light)
        self.ax1 = self.fig.add_subplot(221)
        self.ax2 = self.fig.add_subplot(222)
        self.ax3 = self.fig.add_subplot(223)
        self.ax4 = self.fig.add_subplot(224)
        #
        self.ax1.hist(x=self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"],
                      color=self.isotope_colors[isotope], edgecolor="black")
        self.ax1.set_xlabel("Signal Intensity (cps "+str(isotope)+")", labelpad=0.5)
        self.ax1.set_ylabel("Frequency (#)", labelpad=0.5)
        self.ax1.grid(True)
        self.ax1.set_axisbelow(True)
        #
        self.ax2.scatter(x=self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope_is]["SIG"],
                         y=self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"],
                         color=self.isotope_colors[isotope], edgecolor="black", alpha=0.67)
        self.ax2.set_xlabel("Signal Intensity (cps "+str(isotope_is)+")", labelpad=0.5)
        self.ax2.set_ylabel("Signal Intensity (cps "+str(isotope)+")", labelpad=0.5)
        self.ax2.grid(True)
        self.ax2.set_axisbelow(True)
        #
        self.ax3.hist(x=results_ir, color=self.isotope_colors[isotope], edgecolor="black")
        self.ax3.set_xlabel("Intensity Ratio (cps "+str(isotope)+")/(cps "+str(isotope_is)+")", labelpad=0.5)
        self.ax3.set_ylabel("Frequency (#)", labelpad=0.5)
        self.ax3.grid(True)
        self.ax3.set_axisbelow(True)
        #
        self.ax4.scatter(x=results_xi, y=results_c, color=self.isotope_colors[isotope], edgecolor="black", alpha=0.67)
        self.ax4.set_xlabel("Sensitivity (cps/ppm)", labelpad=0.5)
        self.ax4.set_ylabel("Concentration (ppm)", labelpad=0.5)
        self.ax4.grid(True)
        self.ax4.set_axisbelow(True)
        #
        self.fig.subplots_adjust(bottom=0.125, top=0.975, left=0.055, right=0.975)
        #
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.parent)
        self.canvas.get_tk_widget().grid(row=0, column=42, rowspan=38, columnspan=48, sticky="nesw")
        self.toolbarFrame = tk.Frame(master=self.parent)
        self.toolbarFrame.grid(row=38, column=42, rowspan=2, columnspan=48, sticky="w")
        self.toolbar = NavigationToolbar2Tk(self.canvas, self.toolbarFrame)
        self.toolbar.config(background=self.green_light)
        self.toolbar._message_label.config(background=self.green_light)
        self.toolbar.winfo_children()[-2].config(background=self.green_light)
    #
    def calculate_intensity_ratios(self, filename, isotope, isotope_is):
        data_i = np.array(self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"])
        data_is = np.array(self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope_is]["SIG"])
        results = data_i/data_is
        #
        return results
    #
    def calculate_sensitivity(self, filename, isotope, isotope_is):
        if filename in self.container_lists["STD"]["Short"]:
            intensities_i = np.array(self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"])
            intensities_is = np.array(self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope_is]["SIG"])
            key_i = re.search("(\D+)(\d+)", isotope)
            element_i = key_i.group(1)
            key_is = re.search("(\D+)(\d+)", isotope_is)
            element_is = key_is.group(1)
            concentration_i = self.srm_actual[self.container_var["ma_dataexploration"]["Option SRM"].get()][element_i]
            concentration_is = self.srm_actual[self.container_var["ma_dataexploration"]["Option SRM"].get()][element_is]
            results = intensities_i/intensities_is * concentration_is/concentration_i
        elif filename in self.container_lists["SMPL"]["Short"]:
            filetype = "SMPL"
            limits_sig = self.container_files[filetype][filename]["SIG limits"]
            time_values = []
            for interval_sig in limits_sig:
                times = self.container_measurements["SELECTED"][filename]["Time"][interval_sig[0]:interval_sig[1]+1]
                time_values.extend(times)
            times_shifted = self.smpl_times[filename]["Delta"] + np.array(time_values)
            results = self.xi_opt[isotope][0]*times_shifted + self.xi_opt[isotope][1]
        #
        return results
    #
    def calculate_concentration(self, filename, isotope, isotope_is, sensitivities):
        if filename in self.container_lists["STD"]["Short"]:
            key_i = re.search("(\D+)(\d+)", isotope)
            element_i = key_i.group(1)
            concentration_i = self.srm_actual[self.container_var["ma_dataexploration"]["Option SRM"].get()][element_i]
            results = np.ones(len(sensitivities))*concentration_i
        elif filename in self.container_lists["SMPL"]["Short"]:
            intensities_i = np.array(self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope]["SIG"])
            intensities_is = np.array(self.container_measurements["SELECTED"][filename]["SMOOTHED"][isotope_is]["SIG"])
            sensitivities_i = sensitivities
            concentration_is = float(self.container_files["SMPL"][filename]["IS Concentration"].get())
            #
            results = intensities_i/intensities_is * concentration_is/sensitivities_i
        #
        return results
    #
    def show_histogram(self, filename):
        self.fig = Figure(figsize=(10, 5), facecolor=self.green_light)
        self.ax = self.fig.add_subplot()
        sns.set_theme()

        for isotope in self.container_lists["ISOTOPES"]:
            hist = sns.histplot(data=self.container_measurements["EDITED"][filename][isotope]*10**(-6), multiple="stack", ax=self.ax)
        self.ax.grid(True)
        self.ax.set_axisbelow(True)

        self.fig.subplots_adjust(bottom=0.125, top=0.975, left=0.075, right=0.975)

        legend = self.ax.legend(fontsize="x-small", framealpha=1.0, edgecolor="white",
                                bbox_to_anchor=(0.125, 0.015), loc=3, borderaxespad=0,
                                bbox_transform=plt.gcf().transFigure, ncol=int(len(self.container_lists["ISOTOPES"])/2 + 1),
                                facecolor="white")
        plt.rcParams["savefig.facecolor"] = "white"
        plt.rcParams["savefig.dpi"] = 300

        self.canvas = FigureCanvasTkAgg(self.fig, master=self.parent)
        self.canvas.get_tk_widget().grid(row=0, column=50, rowspan=38, columnspan=60, sticky="nesw")
        self.toolbarFrame = tk.Frame(master=self.parent)
        self.toolbarFrame.grid(row=38, column=50, rowspan=2, columnspan=60, sticky="w")
        self.toolbar = NavigationToolbar2Tk(self.canvas, self.toolbarFrame)
        self.toolbar.config(background=self.green_light)
        self.toolbar._message_label.config(background=self.green_light)
        self.toolbar.winfo_children()[-2].config(background=self.green_light)
    #
    def save_settings(self):
        #
        # print("container_helper:")
        # print(self.container_helper["STD"])
        # print(self.container_helper["SMPL"])
        # print("container_files:")
        # print(self.container_files["STD"])
        # print(self.container_files["SMPL"])
        #
        save_file = filedialog.asksaveasfile(mode="w", defaultextension=".txt")
        #
        ## STANDARD FILES
        save_file.write("STANDARD FILES (LONG)"+"\n")
        for file_std in self.list_std:
            filename_std_short = file_std.split("/")[-1]
            str_std = str(file_std)+";"+str(self.container_files["STD"][filename_std_short]["SRM"].get())+";"\
                      +str(self.container_files["STD"][filename_std_short]["IS"].get())+";"\
                      +str(self.container_files["STD"][filename_std_short]["CB ID"].get())+";"+str("BG")+";"
            for key, item in self.container_helper["STD"][filename_std_short]["BG"].items():
                str_std += str(key)+";"
                str_std += str(item["Times"])+";"+str(item["Positions"])+";"
            str_std += str("SIG") + ";"
            for key, item in self.container_helper["STD"][filename_std_short]["SIG"].items():
                str_std += str(key)+";"
                str_std += str(item["Times"])+";"+str(item["Positions"])+";"
            str_std += str("SPK") + ";"
            for isotope, item_isotope in self.container_helper["STD"][filename_std_short]["SPK"].items():
                str_std += str(isotope) + ";"
                for id_key, id_item in item_isotope.items():
                    str_std += str(id_key)+";"
                    str_std += str(id_item["Times"])+";"+str(id_item["Positions"])+";"
            str_std += "\n"
            save_file.write(str_std)
        save_file.write("\n")
        #
        ## SAMPLE FILES
        save_file.write("SAMPLE FILES (LONG)"+"\n")
        if len(self.list_smpl) > 0:
            for file_smpl in self.list_smpl:
                filename_smpl_short = file_smpl.split("/")[-1]
                str_smpl = str(file_smpl) + ";" + str(self.container_files["SMPL"][filename_smpl_short]["SRM"].get()) \
                           + ";" + str(self.container_files["SMPL"][filename_smpl_short]["IS"].get()) + ";" \
                           + str(self.container_files["SMPL"][filename_smpl_short]["ID"].get()) + ";" \
                           + str(self.container_files["SMPL"][filename_smpl_short]["CB ID"].get()) + ";" + str("BG") \
                           + ";"
                for key, item in self.container_helper["SMPL"][filename_smpl_short]["BG"].items():
                    str_smpl += str(key) + ";"
                    str_smpl += str(item["Times"]) + ";" + str(item["Positions"]) + ";"
                str_smpl += str("SIG") + ";"
                for key, item in self.container_helper["SMPL"][filename_smpl_short]["SIG"].items():
                    str_smpl += str(key) + ";"
                    str_smpl += str(item["Times"]) + ";" + str(item["Positions"]) + ";"
                str_smpl += str("SPK") + ";"
                for isotope, item_isotope in self.container_helper["SMPL"][filename_smpl_short]["SPK"].items():
                    str_smpl += str(isotope) + ";"
                    for id_key, id_item in item_isotope.items():
                        str_smpl += str(id_key) + ";"
                        str_smpl += str(id_item["Times"]) + ";" + str(id_item["Positions"]) + ";"
                str_smpl += "\n"
                save_file.write(str_smpl)
        else:
            save_file.write(str(None)+"\n")
        save_file.write("\n")
        #
        ## ISOTOPES
        save_file.write("ISOTOPES" + "\n")
        for key, item in self.container_files["SRM"].items():
            save_file.write(str(key)+";"+str(item.get())+"\n")
        save_file.write("\n")
        #
        ## SETTINGS
        save_file.write("SETTINGS" + "\n")
        save_file.write(str("Mineral") + ";" + str(self.container_var["mineral"].get()) + "\n")
        if self.var_mode_ma == True:
            save_file.write(str("IS CONCENTRATION") + ";" + str(
                self.container_var["settings"]["IS Concentration"].get()) + "\n")
        save_file.write(str("Default SRM STD") + ";" + str(self.container_var["SRM"]["default"][0].get()) + "\n")
        save_file.write(str("Default SRM SMPL") + ";" + str(self.container_var["SRM"]["default"][1].get()) + "\n")
        save_file.write(str("Default IS STD") + ";" + str(self.container_var["IS"]["Default STD"].get()) + "\n")
        save_file.write(str("Default IS SMPL") + ";" + str(self.container_var["IS"]["Default SMPL"].get()) + "\n")
        save_file.write(str("Default BG Start")+";"+str(self.container_var["settings"]["Time BG Start"].get())+"\n")
        save_file.write(str("Default BG End")+";"+str(self.container_var["settings"]["Time BG End"].get())+"\n")
        save_file.write(str("Default SIG Start")+";"+str(self.container_var["settings"]["Time SIG Start"].get())+"\n")
        save_file.write(str("Default SIG End")+";"+str(self.container_var["settings"]["Time SIG End"].get())+"\n")
        save_file.write(str("Author")+";"+str(self.container_var["settings"]["Author"].get())+"\n")
        save_file.write(str("Source ID")+";"+str(self.container_var["settings"]["Source ID"].get())+"\n")
        save_file.write(str("SPK ELIMINATION STD") + ";" + str(self.fast_track_std) + "\n")
        save_file.write(str("SPK ELIMINATION SMPL") + ";" + str(self.fast_track_smpl) + "\n")
        save_file.write(str("SPK ELIMINATION ALPHA") + ";" + str(
            self.container_var["settings"]["SE Alpha"].get()) + "\n")
        save_file.write(str("SPK ELIMINATION THRESHOLD") + ";" + str(
            self.container_var["settings"]["SE Threshold"].get()) + "\n")
        save_file.write("\n")
        #
        ## END
        save_file.write("END")
        #
        save_file.close()
    #
    def load_settings(self):
        filename = filedialog.askopenfilename()
        #
        try:
            file_loaded = open(str(filename), "r")
            loaded_lines = file_loaded.readlines()
            #
            n_settings = 0
            index = 0
            strings = ["STANDARD FILES (LONG)", "SAMPLE FILES (LONG)", "ISOTOPES", "SETTINGS", "END"]
            index_container = {}
            while n_settings < len(strings):
                index_container[strings[n_settings]] = 0
                index = 0
                flag = 0
                for line in open(str(filename), "r"):
                    if strings[n_settings] in line:
                        flag = 1
                        break
                    else:
                        index += 1
                #
                if flag == 0:
                    pass
                else:
                    index_container[strings[n_settings]] += index
                    n_settings += 1
            #
            ## STANDARD FILES (STD)
            for i in range(index_container["STANDARD FILES (LONG)"]+1, index_container["SAMPLE FILES (LONG)"]-1):
                line_std = str(loaded_lines[i].strip())
                splitted_std = line_std.split(";")
                #
                list_bg_data = self.find_dataset_in_list(a=splitted_std, low="BG", high="SIG")
                list_bg_data.pop(0)
                n_bg = int(len(list_bg_data)/3)
                list_sig_data = self.find_dataset_in_list(a=splitted_std, low="SIG", high="SPK")
                list_sig_data.pop(0)
                n_sig = int(len(list_sig_data) / 3)
                #
                filename_std = str(splitted_std[0])
                filename_std_short = filename_std.split("/")[-1]
                srm_std = str(splitted_std[1])
                is_std = str(splitted_std[2])
                cb_id_std = str(splitted_std[3])
                #
                self.container_helper["STD"][filename_std_short] = {}
                self.container_helper["STD"][filename_std_short]["BG"] = {}
                self.container_helper["STD"][filename_std_short]["SIG"] = {}
                self.container_helper["STD"][filename_std_short]["SPK"] = {}
                self.container_helper["positions"]["BG STD"][filename_std_short]= []
                self.container_helper["positions"]["SIG STD"][filename_std_short] = []
                self.container_lists["IS"].append(is_std)
                #
                index_bg = 0
                while index_bg < n_bg:
                    bg_id = int(list_bg_data[int(3*index_bg)])
                    list_times = list_bg_data[int(3*index_bg + 1)]
                    list_positions = list_bg_data[int(3*index_bg + 2)]
                    splitted_times = list_times.split(",")
                    splitted_positions = list_positions.split(",")
                    #
                    self.container_helper["STD"][filename_std_short]["BG"][bg_id] = {
                        "Times": [float(splitted_times[0][1:]), float(splitted_times[1][:-1])],
                        "Positions": [int(splitted_positions[0][1:]), int(splitted_positions[1][:-1])],
                        "Object": [None, None]}
                    self.container_helper["positions"]["BG STD"][filename_std_short].append(
                        [list_times[0], list_times[1], list_positions[0], list_positions[1], bg_id])
                    #
                    index_bg += 1
                #
                index_sig = 0
                while index_sig < n_sig:
                    sig_id = int(list_sig_data[int(3*index_sig)])
                    list_times = list_sig_data[int(3*index_sig + 1)]
                    list_positions = list_sig_data[int(3*index_sig + 2)]
                    splitted_times = list_times.split(",")
                    splitted_positions = list_positions.split(",")
                    #
                    self.container_helper["STD"][filename_std_short]["SIG"][sig_id] = {
                        "Times": [float(splitted_times[0][1:]), float(splitted_times[1][:-1])],
                        "Positions": [int(splitted_positions[0][1:]), int(splitted_positions[1][:-1])],
                        "Object": [None, None]}
                    self.container_helper["positions"]["SIG STD"][filename_std_short].append(
                        [list_times[0], list_times[1], list_positions[0], list_positions[1], sig_id])
                    #
                    index_sig += 1
                #
                self.list_std.append(filename_std)
                self.lb_std.insert(tk.END, str(filename_std_short))
                self.container_var["SRM"][filename_std] = tk.StringVar()
                self.container_var["SRM"][filename_std].set(srm_std)
                self.container_var["STD"][filename_std] = {}
                self.container_var["STD"][filename_std]["IS"] = tk.StringVar()
                self.container_var["STD"][filename_std]["IS"].set(is_std)
                self.container_var["STD"][filename_std]["Checkbox"] = tk.StringVar()
                self.container_var["STD"][filename_std]["Checkbox"].set(cb_id_std)
            #
            ## SAMPLE FILES (SMPL)
            for i in range(index_container["SAMPLE FILES (LONG)"]+1, index_container["ISOTOPES"]-1):
                line_smpl = str(loaded_lines[i].strip())
                splitted_smpl = line_smpl.split(";")
                #
                list_bg_data = self.find_dataset_in_list(a=splitted_smpl, low="BG", high="SIG")
                list_bg_data.pop(0)
                n_bg = int(len(list_bg_data) / 3)
                list_sig_data = self.find_dataset_in_list(a=splitted_smpl, low="SIG", high="SPK")
                list_sig_data.pop(0)
                n_sig = int(len(list_sig_data) / 3)
                #
                filename_smpl = str(splitted_smpl[0])
                filename_smpl_short = filename_smpl.split("/")[-1]
                is_smpl = str(splitted_smpl[2])
                id_smpl = str(splitted_smpl[3])
                cb_id_smpl = str(splitted_smpl[4])
                is_conc_smpl = str(splitted_smpl[2])
                #
                self.container_helper["SMPL"][filename_smpl_short] = {}
                self.container_helper["SMPL"][filename_smpl_short]["BG"] = {}
                self.container_helper["SMPL"][filename_smpl_short]["SIG"] = {}
                self.container_helper["SMPL"][filename_smpl_short]["SPK"] = {}
                self.container_helper["positions"]["BG SMPL"][filename_smpl_short] = []
                self.container_helper["positions"]["SIG SMPL"][filename_smpl_short] = []
                self.container_lists["IS"].append(is_smpl)
                #
                index_bg = 0
                while index_bg < n_bg:
                    bg_id = int(list_bg_data[int(3 * index_bg)])
                    list_times = list_bg_data[int(3 * index_bg + 1)]
                    list_positions = list_bg_data[int(3 * index_bg + 2)]
                    splitted_times = list_times.split(",")
                    splitted_positions = list_positions.split(",")
                    #
                    self.container_helper["SMPL"][filename_smpl_short]["BG"][bg_id] = {
                        "Times": [float(splitted_times[0][1:]), float(splitted_times[1][:-1])],
                        "Positions": [int(splitted_positions[0][1:]), int(splitted_positions[1][:-1])],
                        "Object": [None, None]}
                    self.container_helper["positions"]["BG SMPL"][filename_smpl_short].append(
                        [list_times[0], list_times[1], list_positions[0], list_positions[1], bg_id])
                    #
                    index_bg += 1
                #
                index_sig = 0
                while index_sig < n_sig:
                    sig_id = int(list_sig_data[int(3 * index_sig)])
                    list_times = list_sig_data[int(3 * index_sig + 1)]
                    list_positions = list_sig_data[int(3 * index_sig + 2)]
                    splitted_times = list_times.split(",")
                    splitted_positions = list_positions.split(",")
                    #
                    self.container_helper["SMPL"][filename_smpl_short]["SIG"][sig_id] = {
                        "Times": [float(splitted_times[0][1:]), float(splitted_times[1][:-1])],
                        "Positions": [int(splitted_positions[0][1:]), int(splitted_positions[1][:-1])],
                        "Object": [None, None]}
                    self.container_helper["positions"]["SIG SMPL"][filename_smpl_short].append(
                        [list_times[0], list_times[1], list_positions[0], list_positions[1], sig_id])
                    #
                    index_sig += 1
                #
                self.list_smpl.append(filename_smpl)
                self.lb_smpl.insert(tk.END, str(filename_smpl_short))
                self.container_var["SMPL"][filename_smpl] = {}
                self.container_var["SMPL"][filename_smpl]["IS"] = tk.StringVar()
                self.container_var["SMPL"][filename_smpl]["IS"].set(is_smpl)
                self.container_var["SMPL"][filename_smpl]["ID"] = tk.StringVar()
                self.container_var["SMPL"][filename_smpl]["ID"].set(id_smpl)
                self.container_var["SMPL"][filename_smpl]["Checkbox"] = tk.StringVar()
                self.container_var["SMPL"][filename_smpl]["Checkbox"].set(cb_id_smpl)
                self.container_lists["IS"].append(is_smpl)
            #
            ## ISOTOPES (ISO)
            for i in range(index_container["ISOTOPES"]+1, index_container["SETTINGS"]-1):
                line_iso = str(loaded_lines[i].strip())
                splitted_iso = line_iso.split(";")
                isotope = str(splitted_iso[0])
                srm_iso = str(splitted_iso[1])
                self.container_var["SRM"][isotope] = tk.StringVar()
                self.container_var["SRM"][isotope].set(srm_iso)
                #
                self.container_lists["ISOTOPES"].append(isotope)
            #
            ## SETTINGS
            for i in range(index_container["SETTINGS"] + 1, index_container["END"] - 1):
                line_setup = str(loaded_lines[i].strip())
                splitted_setup = line_setup.split(";")
                if splitted_setup[0] == "Mineral":
                    self.container_var["mineral"].set(splitted_setup[1])
                elif splitted_setup[0] == "IS CONCENTRATION":
                    self.container_var["settings"]["IS Concentration"].set(splitted_setup[1])
                elif splitted_setup[0] == "Default SRM STD":
                    self.container_var["SRM"]["default"][0].set(splitted_setup[1])
                elif splitted_setup[0] == "Default SRM SMPL":
                    self.container_var["SRM"]["default"][1].set(splitted_setup[1])
                elif splitted_setup[0] == "Default IS STD":
                    self.container_var["IS"]["Default STD"].set(splitted_setup[1])
                elif splitted_setup[0] == "Default IS SMPL":
                    self.container_var["IS"]["Default SMPL"].set(splitted_setup[1])
                elif splitted_setup[0] == "Default BG Start":
                    self.container_var["settings"]["Time BG Start"].set(splitted_setup[1])
                    self.container_settings["MA"]["Start BG"].set(splitted_setup[1])
                    try:
                        self.container_helper["Default BG"]["Times"][0] = float(splitted_setup[1])
                    except:
                        self.container_helper["Default BG"]["Times"][0] = splitted_setup[1]
                elif splitted_setup[0] == "Default BG End":
                    self.container_var["settings"]["Time BG End"].set(splitted_setup[1])
                    self.container_settings["MA"]["End BG"].set(splitted_setup[1])
                    try:
                        self.container_helper["Default BG"]["Times"][1] = float(splitted_setup[1])
                    except:
                        self.container_helper["Default BG"]["Times"][1] = splitted_setup[1]
                elif splitted_setup[0] == "Default SIG Start":
                    self.container_var["settings"]["Time SIG Start"].set(splitted_setup[1])
                    self.container_settings["MA"]["Start SIG"].set(splitted_setup[1])
                    try:
                        self.container_helper["Default SIG"]["Times"][0] = float(splitted_setup[1])
                    except:
                        self.container_helper["Default SIG"]["Times"][0] = splitted_setup[1]
                elif splitted_setup[0] == "Default SIG End":
                    self.container_var["settings"]["Time SIG End"].set(splitted_setup[1])
                    self.container_settings["MA"]["End SIG"].set(splitted_setup[1])
                    try:
                        self.container_helper["Default SIG"]["Times"][1] = float(splitted_setup[1])
                    except:
                        self.container_helper["Default SIG"]["Times"][1] = splitted_setup[1]
                elif splitted_setup[0] == "Author":
                    self.container_var["settings"]["Author"].set(splitted_setup[1])
                elif splitted_setup[0] == "Source ID":
                    self.container_var["settings"]["Source ID"].set(splitted_setup[1])
                elif splitted_setup[0] == "SPK ELIMINATION STD":
                    self.fast_track_std = eval(splitted_setup[1])
                elif splitted_setup[0] == "SPK ELIMINATION SMPL":
                    self.fast_track_smpl = eval(splitted_setup[1])
                elif splitted_setup[0] == "SPK ELIMINATION ALPHA":
                    self.container_var["settings"]["SE Alpha"] = tk.StringVar()
                    self.container_var["settings"]["SE Alpha"].set(eval(splitted_setup[1]))
                elif splitted_setup[0] == "SPK ELIMINATION THRESHOLD":
                    self.container_var["settings"]["SE Threshold"] = tk.StringVar()
                    self.container_var["settings"]["SE Threshold"].set(eval(splitted_setup[1]))
            #
            file_loaded.close()
            self.file_loaded = True
            #
            self.container_lists["IS"] = list(dict.fromkeys(self.container_lists["IS"]))
            #
        #
        except FileNotFoundError:
            pass
    #
    def find_dataset_in_list(self, a, low, high):
        i = a.index(low)
        g = a.index(high)
        if i != len(a) or g != len(a):
            new_list = a[i:g]
            return new_list
        raise ValueError
    #
    def restart_pysills(self):
        self.parent.destroy()
        root = tk.Tk()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        PySILLS(parent=root, var_screen_width=screen_width, var_screen_height=screen_height)
        root.mainloop()
    #
    def change_id_file(self, var_id, filename, filetype):
        parts = filename.split("/")
        self.container_var[filetype][filename]["ID"].set(var_id)
        self.container_files[filetype][parts[-1]]["ID"].set(var_id)
    #
    def set_integration_window(self, filename_short, var_key, event):
        if self.container_var["plotting"][filename_short]["RB"][0].get() == 0:
            self.container_var["plotting"][filename_short]["Entry"]["Start"].set("Please set signal category!")
            self.container_var["plotting"][filename_short]["Entry"]["End"].set("Please set signal category!")
        else:
            if var_key == "Start":
                if len(self.container_helper["positions"][filename_short]) == 2 and len(self.container_helper["indices"][filename_short]) == 2:
                    self.container_helper["positions"][filename_short].clear()
                    self.container_helper["indices"][filename_short].clear()
                #
                time_start = float(self.container_var["plotting"][filename_short]["Entry"]["Start"].get())
                time_nearest = min(self.times, key=lambda x: abs(x - time_start))
                #
                self.container_helper["positions"][filename_short].append(time_nearest)
                self.container_helper["indices"][filename_short].append(self.times[self.times == time_nearest].index[0])
                self.container_var["plotting"][filename_short]["Entry"]["Start"].set(time_nearest)
            elif var_key == "End":
                time_end = float(self.container_var["plotting"][filename_short]["Entry"]["End"].get())
                time_nearest = min(self.times, key=lambda x: abs(x - time_end))
                #
                self.container_helper["positions"][filename_short].append(time_nearest)
                self.container_helper["indices"][filename_short].append(self.times[self.times == time_nearest].index[0])
                self.container_var["plotting"][filename_short]["Entry"]["End"].set(time_nearest)
            #
            if self.container_var["plotting"][filename_short]["RB"][0].get() == 1 and len(self.container_helper["positions"][filename_short]) == 2: # Background
                #
                if self.file_type == "STD":
                    if len(self.container_helper["positions"]["BG STD"][filename_short]) > 0:
                        self.bg_id = self.container_helper["positions"]["BG STD"][filename_short][-1][4]
                elif self.file_type == "SMPL":
                    if len(self.container_helper["positions"]["BG SMPL"][filename_short]) > 0:
                        self.bg_id = self.container_helper["positions"]["BG SMPL"][filename_short][-1][4]
                #
                self.bg_id += 1
                self.bg_idlist.append(self.bg_id)
                self.container_helper["limits BG"][self.file]["ID"].append(self.bg_id)
                self.container_helper["limits BG"][self.file]["type"].append("custom")
                self.container_helper["positions"]["BG"][filename_short].append(
                    [round(self.container_helper["positions"][filename_short][0], 4),
                     round(self.container_helper["positions"][filename_short][1], 4)])
                self.container_listboxes[self.file_type][filename_short]["BG"][0].insert(
                    tk.END, "BG" + str(self.bg_id) + " [" + str(
                        self.container_helper["positions"][filename_short][0]) + "-" +
                            str(self.container_helper["positions"][filename_short][1]) + "]")
                #
                box_bg = self.ax.axvspan(self.container_helper["positions"][filename_short][0],
                                         self.container_helper["positions"][filename_short][1], alpha=0.25,
                                         color=self.blue_dark)
                box_bg_ratio = self.ax_ratio.axvspan(self.container_helper["positions"][filename_short][0],
                                         self.container_helper["positions"][filename_short][1], alpha=0.25,
                                         color=self.blue_dark)
                #
                self.container_helper["limits BG"][self.file][str(self.bg_id)] = box_bg
                self.container_helper["limits BG Ratio"][self.file][str(self.bg_id)] = box_bg_ratio
                self.canvas.draw()
                self.indices_bg = self.container_helper["indices"][filename_short]
                #
                self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id] = {}
                self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Times"] = [
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Positions"] = [
                    self.container_helper["indices"][filename_short][0],
                    self.container_helper["indices"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["BG"][self.bg_id]["Box"] = box_bg
                #
                if self.file_type == "STD":
                    self.container_helper["STD"][filename_short]["BG"][self.bg_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": [box_bg, box_bg_ratio]}
                    self.container_helper["positions"]["BG STD"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.bg_id])
                elif self.file_type == "SMPL":
                    self.container_helper["SMPL"][filename_short]["BG"][self.bg_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": [box_bg, box_bg_ratio]}
                    self.container_helper["positions"]["BG SMPL"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.bg_id])
                #
                self.container_var["plotting"][filename_short]["RB"][0].set(0)
                self.container_helper["positions"][filename_short].clear()
                self.container_helper["indices"][filename_short].clear()
                self.container_var["plotting"][filename_short]["Entry"]["Start"].set("0.0")
                self.container_var["plotting"][filename_short]["Entry"]["End"].set("0.0")
                #
            elif self.container_var["plotting"][filename_short]["RB"][0].get() == 4 and len(self.container_helper["positions"][filename_short]) == 2: # Matrix
                #
                if self.file_type == "STD":
                    if len(self.container_helper["positions"]["MAT STD"][filename_short]) > 0:
                        self.mat_id = self.container_helper["positions"]["MAT STD"][filename_short][-1][4]
                elif self.file_type == "SMPL":
                    if len(self.container_helper["positions"]["MAT SMPL"][filename_short]) > 0:
                        self.mat_id = self.container_helper["positions"]["MAT SMPL"][filename_short][-1][4]
                #
                self.mat_id += 1
                self.mat_idlist.append(self.mat_id)
                self.container_helper["limits MAT"][self.file]["ID"].append(self.mat_id)
                self.container_helper["limits MAT"][self.file]["type"].append("custom")
                self.container_helper["positions"]["MAT"][filename_short].append(
                    [round(self.container_helper["positions"][filename_short][0], 4),
                     round(self.container_helper["positions"][filename_short][1], 4)])
                self.container_listboxes[self.file_type][filename_short]["MAT"][0].insert(
                    tk.END, "MAT" + str(self.mat_id) + " [" + str(
                        self.container_helper["positions"][filename_short][0]) + "-" +
                            str(self.container_helper["positions"][filename_short][1]) + "]")
                box_mat = self.ax.axvspan(
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1], alpha=0.25, color=self.brown_dark)
                self.container_helper["limits MAT"][self.file][str(self.mat_id)] = box_mat
                self.canvas.draw()
                self.indices_mat = self.container_helper["indices"][filename_short]
                #
                self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id] = {}
                self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Times"] = [
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Positions"] = [
                    self.container_helper["indices"][filename_short][0],
                    self.container_helper["indices"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["MAT"][self.mat_id]["Box"] = box_mat
                #
                if self.file_type == "STD":
                    self.container_helper["STD"][filename_short]["MAT"][self.mat_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": box_mat}
                    self.container_helper["positions"]["MAT STD"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.mat_id])
                elif self.file_type == "SMPL":
                    self.container_helper["SMPL"][filename_short]["MAT"][self.mat_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": box_mat}
                    self.container_helper["positions"]["MAT SMPL"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.mat_id])
                #
                self.container_var["plotting"][filename_short]["RB"][0].set(0)
                self.container_helper["positions"][filename_short].clear()
                self.container_helper["indices"][filename_short].clear()
                self.container_var["plotting"][filename_short]["Entry"]["Start"].set("0.0")
                self.container_var["plotting"][filename_short]["Entry"]["End"].set("0.0")
                #
            elif self.container_var["plotting"][filename_short]["RB"][0].get() == 5 and len(self.container_helper["positions"][filename_short]) == 2: # Inclusion
                #
                if self.file_type == "STD":
                    if len(self.container_helper["positions"]["INCL STD"][filename_short]) > 0:
                        self.incl_id = self.container_helper["positions"]["INCL STD"][filename_short][-1][4]
                elif self.file_type == "SMPL":
                    if len(self.container_helper["positions"]["INCL SMPL"][filename_short]) > 0:
                        self.incl_id = self.container_helper["positions"]["INCL SMPL"][filename_short][-1][4]
                self.incl_id += 1
                self.incl_idlist.append(self.incl_id)
                self.container_helper["limits INCL"][self.file]["ID"].append(self.incl_id)
                self.container_helper["limits INCL"][self.file]["type"].append("custom")
                self.container_helper["positions"]["INCL"][filename_short].append(
                    [round(self.container_helper["positions"][filename_short][0], 4),
                     round(self.container_helper["positions"][filename_short][1], 4)])
                self.container_listboxes[self.file_type][filename_short]["INCL"][0].insert(
                    tk.END, "INCL" + str(self.incl_id) + " [" + str(
                        self.container_helper["positions"][filename_short][0]) + "-"
                            + str(self.container_helper["positions"][filename_short][1]) + "]")
                #
                box_incl = self.ax.axvspan(
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1], alpha=0.25, color=self.slate_grey_dark)
                self.container_helper["limits INCL"][self.file][str(self.incl_id)] = box_incl
                self.canvas.draw()
                #
                self.indices_incl = self.container_helper["indices"][filename_short]
                #
                self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id] = {}
                self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id]["Times"] = [
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id][
                    "Positions"] = [
                    self.container_helper["indices"][filename_short][0],
                    self.container_helper["indices"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["INCL"][self.incl_id][
                    "Box"] = box_incl
                #
                if self.file_type == "STD":
                    self.container_helper["STD"][filename_short]["INCL"][self.incl_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": box_incl}
                    self.container_helper["positions"]["INCL STD"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.incl_id])
                elif self.file_type == "SMPL":
                    self.container_helper["SMPL"][filename_short]["INCL"][self.incl_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": box_incl}
                    self.container_helper["positions"]["INCL SMPL"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.incl_id])
                #
                self.container_var["plotting"][filename_short]["RB"][0].set(0)
                self.container_helper["positions"][filename_short].clear()
                self.container_helper["indices"][filename_short].clear()
                self.container_var["plotting"][filename_short]["Entry"]["Start"].set("0.0")
                self.container_var["plotting"][filename_short]["Entry"]["End"].set("0.0")
                #
            elif self.container_var["plotting"][filename_short]["RB"][0].get() == 2 and len(self.container_helper["positions"][filename_short]) == 2: # Signal
                #
                if self.file_type == "STD":
                    if len(self.container_helper["positions"]["SIG STD"][filename_short]) > 0:
                        self.sig_id = self.container_helper["positions"]["SIG STD"][filename_short][-1][4]
                elif self.file_type == "SMPL":
                    if len(self.container_helper["positions"]["SIG SMPL"][filename_short]) > 0:
                        self.sig_id = self.container_helper["positions"]["SIG SMPL"][filename_short][-1][4]
                #
                self.sig_id += 1
                self.sig_idlist.append(self.sig_id)
                self.container_helper["limits SIG"][self.file]["ID"].append(self.sig_id)
                self.container_helper["limits SIG"][self.file]["type"].append("custom")
                self.container_helper["positions"]["SIG"][filename_short].append(
                    [round(self.container_helper["positions"][filename_short][0], 4),
                     round(self.container_helper["positions"][filename_short][1], 4)])
                self.container_listboxes[self.file_type][filename_short]["SIG"][0].insert(
                    tk.END, "SIG" + str(self.sig_id) + " [" + str(
                        self.container_helper["positions"][filename_short][0]) + "-" +
                            str(self.container_helper["positions"][filename_short][1]) + "]")
                #
                box_sig = self.ax.axvspan(
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1], alpha=0.25, color=self.brown_dark)
                box_sig_ratio = self.ax_ratio.axvspan(
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1], alpha=0.25, color=self.brown_dark)
                #
                self.container_helper["limits SIG"][self.file][str(self.sig_id)] = box_sig
                self.container_helper["limits SIG Ratio"][self.file][str(self.sig_id)] = box_sig_ratio
                self.canvas.draw()
                self.indices_sig = self.container_helper["indices"][filename_short]
                #
                self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id] = {}
                self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Times"] = [
                    self.container_helper["positions"][filename_short][0],
                    self.container_helper["positions"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Positions"] = [
                    self.container_helper["indices"][filename_short][0],
                    self.container_helper["indices"][filename_short][1]]
                self.container_files[self.file_type][self.filename_short]["SIG"][self.sig_id]["Box"] = box_sig
                #
                if self.file_type == "STD":
                    self.container_helper["STD"][filename_short]["SIG"][self.sig_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": [box_sig, box_sig_ratio]}
                    self.container_helper["positions"]["SIG STD"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.sig_id])
                elif self.file_type == "SMPL":
                    self.container_helper["SMPL"][filename_short]["SIG"][self.sig_id] = {
                        "Times": [self.container_helper["positions"][filename_short][0],
                                  self.container_helper["positions"][filename_short][1]],
                        "Positions": [self.container_helper["indices"][filename_short][0],
                                      self.container_helper["indices"][filename_short][1]],
                        "Object": [box_sig, box_sig_ratio]}
                    self.container_helper["positions"]["SIG SMPL"][filename_short].append(
                        [self.container_helper["positions"][filename_short][0],
                         self.container_helper["positions"][filename_short][1],
                         self.container_helper["indices"][filename_short][0],
                         self.container_helper["indices"][filename_short][1],
                         self.sig_id])
                #
                self.container_var["plotting"][filename_short]["RB"][0].set(0)
                self.container_helper["positions"][filename_short].clear()
                self.container_helper["indices"][filename_short].clear()
                self.container_var["plotting"][filename_short]["Entry"]["Start"].set("0.0")
                self.container_var["plotting"][filename_short]["Entry"]["End"].set("0.0")
                #
    #
    def change_id_default(self, var_id, filetype):
        if filetype == "STD":
            for file_std in self.list_std:
                parts = file_std.split("/")
                self.container_var["STD"][file_std]["ID"].set(var_id)
                self.container_files["STD"][parts[-1]]["ID"].set(var_id)
        elif filetype == "SMPL":
            for file_smpl in self.list_smpl:
                parts = file_smpl.split("/")
                self.container_var["SMPL"][file_smpl]["ID"].set(var_id)
                self.container_files["SMPL"][parts[-1]]["ID"].set(var_id)
    #
    ####################
    ## DATA PROCESSING #
    ####################
    #
    def open_csv(self, datatype):
        if datatype == "STD":
            if "Default_STD_01.csv" in self.list_std:
                self.list_std.clear()
            var_list = self.list_std
            var_listbox = self.lb_std
        elif datatype == "SMPL":
            if "Default_SMPL_01.csv" in self.list_smpl:
                self.list_smpl.clear()
            var_list = self.list_smpl
            var_listbox = self.lb_smpl
        #
        filename = filedialog.askopenfilenames(
            parent=self.parent, filetypes=(("csv files", "*.csv"), ("all files", "*.*")),
            initialdir=os.getcwd())
        for i in filename:
            if i not in var_list:
                var_list.append(i)
                file_parts = i.split("/")
                var_listbox.insert(tk.END, file_parts[-1])
                #
                if i not in self.container_lists[datatype]["Long"]:
                    self.container_lists[datatype]["Long"].append(i)
                    self.container_lists[datatype]["Short"].append(file_parts[-1])
                #
                self.container_var["Plotting"][self.pysills_mode]["Quickview"] = {"Canvas": None, "Toolbar": None}
                self.container_var["Plotting"][self.pysills_mode]["Time-Signal"] = {"Canvas": None, "Toolbar": None}
                self.container_var["Plotting"][self.pysills_mode]["Time-Ratio"] = {"Canvas": None, "Toolbar": None}

        self.demo_mode = False
    #
    def import_concentration_data(self):
        filename = filedialog.askopenfilenames(
            parent=self.parent, filetypes=(("csv files", "*.csv"), ("all files", "*.*")), initialdir=os.getcwd())
        df = pd.read_csv(filename[0], sep=";", header=0, engine="python")
        data_concentration = dict(zip(df.element, df.concentration))
        #
        self.container_var["isotopes"]["default"].set("Select IS")
        #self.var_entr_09.set(0.0)
        #self.container_var["settings"]["IS Concentration"].set(0.0)
        if len(self.container_var["mineralchemistry"]) > 0:
            self.container_var["mineralchemistry"].clear()
        self.container_var["mineralchemistry"].extend(list(data_concentration.keys()))
        self.container_var["mineralchemistry"].sort()
        #
        possible_is = []
        #self.mineral_chem = {}
        self.mineral_chem["Unknown"] = {}
        for element in self.container_var["mineralchemistry"]:
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d+)", isotope)
                if element == key.group(1):
                    possible_is.append(isotope)
                    self.mineral_chem["Unknown"][element] = data_concentration[element]
                    self.mineral_chem["Unknown"][isotope] = data_concentration[element]
        #
        self.opt_is_std_def["menu"].delete(0, "end")
        self.opt_is_smpl_def["menu"].delete(0, "end")
        #
        for index, isotope in enumerate(possible_is):
            for file in self.list_std:
                if index == 0:
                    self.container_optionmenu["STD"][file]["menu"].delete(0, "end")
                self.container_optionmenu["STD"][file]["menu"].add_command(
                    label=isotope, command=lambda element=isotope, file=file: self.change_std_is(element, file))
                if self.file_loaded is False:
                    self.container_var["STD"][file]["IS"].set("Select IS")
            for file in self.list_smpl:
                if index == 0:
                    self.container_optionmenu["SMPL"][file]["menu"].delete(0, "end")
                self.container_optionmenu["SMPL"][file]["menu"].add_command(
                    label=isotope, command=lambda element=isotope, file=file,
                                                  mineral=self.container_var["mineral"].get():
                    self.change_smpl_is(element, file, mineral))
                if self.file_loaded is False:
                    self.container_var["SMPL"][file]["IS"].set("Select IS")
            #
            self.opt_is_std_def["menu"].add_command(
                label=isotope, command=lambda element=isotope, mineral="Unknown":
                self.change_std_is_default(element, mineral))
            self.opt_is_smpl_def["menu"].add_command(
                label=isotope, command=lambda element=isotope, mineral="Unknown":
                self.change_smpl_is_default(element, mineral))
        #
        self.container_lists["Possible IS"].clear()
        self.container_lists["Possible IS"].extend(possible_is)
    #
    ##############################
    ## FLUID INCLUSION ANALYSIS ##
    ##############################
    #
    #
    def sub_fluidinclusions_settings(self):
        #
        ## Cleaning
        if self.demo_view == False:
            categories = ["SRM", "plotting", "PSE", "ma_setting", "ma_datareduction", "ma_dataexploration",
                          "fi_datareduction"]
        else:
            categories = ["SRM", "plotting", "PSE", "ma_setting", "ma_datareduction", "ma_dataexploration",
                          "fi_datareduction"]
        for category in categories:
            if len(self.container_elements[category]["Label"]) > 0:
                for item in self.container_elements[category]["Label"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Button"]) > 0:
                for item in self.container_elements[category]["Button"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Option Menu"]) > 0:
                for item in self.container_elements[category]["Option Menu"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Entry"]) > 0:
                for item in self.container_elements[category]["Entry"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Frame"]) > 0:
                for item in self.container_elements[category]["Frame"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Radiobutton"]) > 0:
                for item in self.container_elements[category]["Radiobutton"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Checkbox"]) > 0:
                for item in self.container_elements[category]["Checkbox"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Listbox"]) > 0:
                for item in self.container_elements[category]["Listbox"]:
                    item.grid_remove()
        try:
            self.canvas.get_tk_widget().grid_forget()
            self.toolbarFrame.grid_forget()
        except AttributeError:
            pass
        try:
            self.canvas_drift.get_tk_widget().grid_forget()
            self.toolbarFrame_drift.grid_forget()
        except AttributeError:
            pass
        #
        ## Reconstruction
        if self.demo_view == False:
            try:
                for lbl_item in self.container_elements["fi_setting"]["Label"]:
                    lbl_item.grid()
                for btn_item in self.container_elements["fi_setting"]["Button"]:
                    btn_item.grid()
                for rb_item in self.container_elements["fi_setting"]["Radiobutton"]:
                    rb_item.grid()
                for optmen_item in self.container_elements["fi_setting"]["Option Menu"]:
                    optmen_item.grid()
                for entr_item in self.container_elements["fi_setting"]["Entry"]:
                    entr_item.grid()
                for entr_item in self.container_elements["fi_setting"]["Frame"]:
                    entr_item.grid()
            except:
                print("Error! Reconstruction failed!")
        else:
            for category in ["Label", "Button", "Option Menu", "Entry", "Frame"]:
                self.container_elements["fi_setting"][category].clear()
            self.container_lists["ISOTOPES"].clear()
            del self.palette_complete
            del self.isotope_colors
            del self.times
            self.container_files["SRM"].clear()
            self.container_files["STD"].clear()
            self.container_files["SMPL"].clear()
            self.container_helper["STD"].clear()
            self.container_helper["SMPL"].clear()
            self.container_lists["STD"]["Long"].clear()
            self.container_lists["STD"]["Short"].clear()
            self.container_lists["SMPL"]["Long"].clear()
            self.container_lists["SMPL"]["Short"].clear()
            #
            list_std = ["Default_STD_01.csv", "Default_STD_02.csv", "Default_STD_03.csv", "Default_STD_04.csv",
                        "Default_STD_05.csv", "Default_STD_06.csv"]
            for item in list_std:
                self.container_var["STD"].pop(item, None)
                self.container_helper["positions"]["SPK"].pop(item, None)
            list_smpl = ["Default_SMPL_01.csv", "Default_SMPL_02.csv", "Default_SMPL_03.csv", "Default_SMPL_04.csv",
                         "Default_SMPL_05.csv", "Default_SMPL_06.csv", "Default_SMPL_07.csv", "Default_SMPL_08.csv",
                         "Default_SMPL_09.csv", "Default_SMPL_10.csv"]
            for item in list_smpl:
                self.container_var["SMPL"].pop(item, None)
                self.container_helper["positions"]["SPK"].pop(item, None)
            self.window_created["fi_setting"] = False
            self.demo_view = False
        #
        try:
            dataset_exmpl = Data(filename=self.list_std[0])
            df_exmpl = dataset_exmpl.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            self.times = df_exmpl.iloc[:, 0]
            self.list_isotopes = list(df_exmpl.columns.values)
            self.list_isotopes.pop(0)
            self.container_lists["ISOTOPES"] = self.list_isotopes
            self.palette_complete = sns.color_palette("nipy_spectral", n_colors=len(self.container_lists["ISOTOPES"])).as_hex()
            if bool(self.container_files["SRM"]) == False:
                self.isotope_colors = {}
                for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                    self.container_files["SRM"][isotope] = tk.StringVar()
                    self.isotope_colors[isotope] = self.palette_complete[index]
        except:
            #
            path = os.getcwd()
            parent = os.path.dirname(path)
            fi_demo_files = {"ALL": [], "STD": [], "SMPL": []}
            demo_files = os.listdir(path=path + str("/demo_files/"))
            for file in demo_files:
                if file.startswith("demo_fi"):
                    path_complete = os.path.join(path+str("/demo_files/"), file)
                    path_raw = pathlib.PureWindowsPath(path_complete)
                    fi_demo_files["ALL"].append(str(path_raw.as_posix()))
            fi_demo_files["ALL"].sort()
            # fi_demo_files["STD"].extend(fi_demo_files["ALL"][:2])
            # fi_demo_files["STD"].extend(fi_demo_files["ALL"][-2:])
            # fi_demo_files["SMPL"].extend(fi_demo_files["ALL"][2:-2])
            fi_demo_files["STD"].extend(fi_demo_files["ALL"][:1])
            fi_demo_files["STD"].extend(fi_demo_files["ALL"][-1:])
            fi_demo_files["SMPL"].extend(fi_demo_files["ALL"][2:4])
            #
            self.list_std = fi_demo_files["STD"]
            self.list_smpl = fi_demo_files["SMPL"]
            #
            for file_std in self.list_std:
                file_parts = file_std.split("/")
                self.lb_std.insert(tk.END, file_parts[-1])
            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                self.lb_smpl.insert(tk.END, file_parts[-1])
            #
            dataset_exmpl = Data(filename=self.list_std[0])
            df_exmpl = dataset_exmpl.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            self.times = df_exmpl.iloc[:, 0]
            self.list_isotopes = list(df_exmpl.columns.values)
            self.list_isotopes.pop(0)
            self.container_lists["ISOTOPES"] = self.list_isotopes
            self.palette_complete = sns.color_palette("nipy_spectral", n_colors=len(self.container_lists["ISOTOPES"])).as_hex()
            if bool(self.container_files["SRM"]) == False:
                self.isotope_colors = {}
                for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                    self.container_files["SRM"][isotope] = tk.StringVar()
                    self.isotope_colors[isotope] = self.palette_complete[index]
            #
            self.demo_view = False
        #
        ## Labels
        start_col_settings = 21
        start_col_std = 39
        start_col_smpl = 39
        start_col_iso = 72
        start_row_settings_01 = -3
        #
        if len(self.container_elements["fi_setting"]["Label"]) == 0:
            lbl_fi_setting_01 = SE(
                parent=self.parent, row_id=0, column_id=start_col_std, n_rows=1, n_columns=23, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Settings (Standard Files)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_02 = SE(
                parent=self.parent, row_id=len(self.list_std) + 2, column_id=start_col_smpl, n_rows=1, n_columns=23,
                fg=self.green_light, bg=self.green_dark).create_simple_label(
                text="Settings (Sample Files)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_03 = SE(
                parent=self.parent, row_id=0, column_id=start_col_iso+1, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Settings (Isotopes)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_18 = SE(
                parent=self.parent, row_id=start_row_settings_01+3, column_id=start_col_settings, n_rows=1,
                n_columns=17, fg=self.green_light, bg=self.green_dark).create_simple_label(
                text="Standard Reference Material (SRM)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_19 = SE(
                parent=self.parent, row_id=start_row_settings_01+4, column_id=start_col_settings, n_rows=1, n_columns=8,
                fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_20 = SE(
                parent=self.parent, row_id=start_row_settings_01+5, column_id=start_col_settings, n_rows=1, n_columns=8,
                fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Isotopes", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_21 = SE(
                parent=self.parent, row_id=start_row_settings_01+11, column_id=start_col_settings, n_rows=1,
                n_columns=17, fg=self.green_light, bg=self.green_dark).create_simple_label(
                text="Quantification Settings", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_quantification_06 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 13, column_id=start_col_settings, n_rows=2,
                n_columns=8,
                fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Quantification Method", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_04 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 20, column_id=start_col_settings, n_rows=1,
                n_columns=17, fg=self.green_light, bg=self.green_dark).create_simple_label(
                text="Default Time Windows (Background)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_05 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 21, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_06 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 22, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_07 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 23, column_id=start_col_settings, n_rows=1,
                n_columns=17, fg=self.green_light, bg=self.green_dark).create_simple_label(
                text="Default Time Windows (Matrix)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_08 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 24, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_09 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 25, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_10 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 26, column_id=start_col_settings, n_rows=1,
                n_columns=17, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Settings (Spike Elimination)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_11 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 27, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="Deviation", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_12 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 28, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="Threshold", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_13 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 29, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="Standard Files", relief=tk.GROOVE,fontsize="sans 10 bold")
            lbl_fi_setting_14 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 30, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_15 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 31, column_id=start_col_settings, n_rows=1,
                n_columns=17, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Settings (Additional Information)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_16 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 32, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Author", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_17 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 33, column_id=start_col_settings, n_rows=1,
                n_columns=8, fg=self.green_light, bg=self.green_medium).create_simple_label(
                text="Source ID", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_25 = SE(
                parent=self.parent, row_id=0, column_id=start_col_iso+13, n_rows=1, n_columns=5, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Ionization", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_26 = SE(
                parent=self.parent, row_id=start_row_settings_01+15, column_id=21, n_rows=1, n_columns=17,
                fg=self.green_light, bg=self.green_dark).create_simple_label(
                text="Assemblage Settings", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_fi_setting_28 = SE(
                parent=self.parent, row_id=start_row_settings_01+16, column_id=21, n_rows=1, n_columns=8,
                fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_32 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 6, column_id=21, n_rows=1, n_columns=17,
                fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Host Settings", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_33 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 17, column_id=21, n_rows=1, n_columns=17,
                fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Dwell Times Settings", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_34 = SE(
                parent=self.parent, row_id=start_row_settings_01 + 18, column_id=21, n_rows=1, n_columns=8,
                fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text=" Isotope Dwell Times", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.container_elements["fi_setting"]["Label"].extend(
                [lbl_fi_setting_01, lbl_fi_setting_02, lbl_fi_setting_03, lbl_fi_setting_04, lbl_fi_setting_05,
                 lbl_fi_setting_06, lbl_fi_setting_07, lbl_fi_setting_08, lbl_fi_setting_09, lbl_fi_setting_10,
                 lbl_fi_setting_11, lbl_fi_setting_12, lbl_fi_setting_13, lbl_fi_setting_14, lbl_fi_setting_15,
                 lbl_fi_setting_16, lbl_fi_setting_17, lbl_fi_setting_18, lbl_fi_setting_19, lbl_fi_setting_20,
                 lbl_fi_setting_21, lbl_fi_setting_25, lbl_fi_setting_26, lbl_fi_setting_28,
                 lbl_quantification_06, lbl_32, lbl_33, lbl_34])
            #
            # Ionization Energy
            self.var_entr_10 = tk.StringVar()
            self.container_var["fi_setting"]["Ionization Energy"] = self.var_entr_10
            entr_10 = SE(
                parent=self.parent, row_id=int(1+ len(self.container_lists["ISOTOPES"])), column_id=start_col_iso+13, n_rows=1,
                n_columns=5, fg=self.green_light,
                bg=self.green_dark).create_simple_entry(var=self.var_entr_10, text_default="15.760")
            #
            gui_categories = ["Label", "Button", "Option Menu", "Entry", "Frame", "Radiobutton", "Checkbox", "Listbox",
                              "Canvas"]
            #
            if self.window_created["fi_setting"] == False:
                #
                self.var_mode_fi = True
                #
                ##################
                # STANDARD FILES #
                ##################
                if len(self.list_std) > 0:
                    for index, file in enumerate(self.list_std):
                        #
                        parts = file.split("/")
                        filename_short = parts[-1]
                        #
                        self.container_gui[filename_short] = {}
                        for gui_category in gui_categories:
                            self.container_gui[filename_short][gui_category] = {}
                            self.container_gui[filename_short][gui_category]["General"] = []
                            self.container_gui[filename_short][gui_category]["Specific"] = []
                        #
                        self.container_helper["limits BG"][file] = {}
                        self.container_helper["limits BG"][file]["ID"] = []
                        self.container_helper["limits BG"][file]["type"] = []
                        self.container_helper["limits BG Ratio"][file] = {}
                        self.container_helper["limits BG Ratio"][file]["ID"] = []
                        self.container_helper["limits BG Ratio"][file]["type"] = []
                        self.container_helper["limits MAT"][file] = {}
                        self.container_helper["limits MAT"][file]["ID"] = []
                        self.container_helper["limits MAT"][file]["type"] = []
                        self.container_helper["limits MAT Ratio"][file] = {}
                        self.container_helper["limits MAT Ratio"][file]["ID"] = []
                        self.container_helper["limits MAT Ratio"][file]["type"] = []
                        self.container_helper["limits INCL"][file] = {}
                        self.container_helper["limits INCL"][file]["ID"] = []
                        self.container_helper["limits INCL"][file]["type"] = []
                        self.container_helper["limits INCL Ratio"][file] = {}
                        self.container_helper["limits INCL Ratio"][file]["ID"] = []
                        self.container_helper["limits INCL Ratio"][file]["type"] = []
                        self.container_helper["limits SPK"][file] = {}
                        self.container_helper["limits SPK"][file]["ID"] = []
                        self.container_helper["limits SPK"][file]["type"] = []
                        self.container_helper["limits SPK"][file]["info"] = []
                        self.container_helper["positions"]["SPK"][filename_short] = []
                        self.spikes_isotopes["STD"][filename_short] = {}
                        if self.file_loaded is False:
                            self.container_var["STD"][file] = {}
                            self.container_var["STD"][file]["IS"] = tk.StringVar()
                            self.container_var["STD"][file]["IS"].set("Select IS")
                        #
                        categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                                      "TOOLBARFRAME_RATIO"]
                        self.container_diagrams["STD"][filename_short] = {}
                        self.container_listboxes["STD"][filename_short] = {}
                        self.diagrams_setup["STD"][filename_short] = {}
                        for category in categories:
                            self.container_diagrams["STD"][filename_short][category] = None
                            self.diagrams_setup["STD"][filename_short][category] = None
                        categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter"]
                        for category in categories:
                            self.diagrams_setup["STD"][filename_short][category] = {}
                        categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
                        for category in categories:
                            self.container_listboxes["STD"][filename_short][category] = None
                        #
                        self.container_report[filename_short] = {}
                        self.container_report[filename_short]["Mean"] = {}
                        self.container_report[filename_short]["Error"] = {}
                        categories_02 = ["Intensity BG", "Intensity SIG CORR", "Intensity Ratio", "Sensitivity", "Concentration", "RSF", "LOD"]
                        for category_02 in categories_02:
                            self.container_report[filename_short]["Mean"][category_02] = {}
                            self.container_report[filename_short]["Error"][category_02] = {}
                            self.container_report[filename_short]["Mean"][category_02]["filename"] = filename_short
                            self.container_report[filename_short]["Error"][category_02]["filename"] = filename_short
                        #
                        if len(self.container_lists["STD"]["Long"]) < len(self.list_std):
                            self.container_lists["STD"]["Long"].append(file)
                            self.container_lists["STD"]["Short"].append(filename_short)
                            self.container_helper["STD"][filename_short] = {}
                            self.container_helper["STD"][filename_short]["BG"] = {}
                            self.container_helper["STD"][filename_short]["MAT"] = {}
                            self.container_helper["STD"][filename_short]["INCL"] = {}
                            self.container_helper["STD"][filename_short]["SPK"] = {}
                        if filename_short not in self.container_files["STD"]:
                            self.container_files["STD"][filename_short] = {}
                            self.container_files["STD"][filename_short]["SRM"] = tk.StringVar()
                            self.container_files["STD"][filename_short]["IS"] = tk.StringVar()
                            self.container_files["STD"][filename_short]["IS Concentration"] = tk.StringVar()
                            # self.container_files["STD"][filename_short]["ID"] = tk.StringVar()
                            self.container_files["STD"][filename_short]["Plot"] = False
                            self.container_files["STD"][filename_short]["Time Signal Plot"] = None
                            self.container_files["STD"][filename_short]["Histogram Plot"] = None
                            self.container_files["STD"][filename_short]["Scatter Plot"] = None
                            self.container_files["STD"][filename_short]["BG"] = {}
                            self.container_files["STD"][filename_short]["MAT"] = {}
                            self.container_files["STD"][filename_short]["INCL"] = {}
                            self.container_files["STD"][filename_short]["SPK"] = {}
                            #
                            self.container_var["plotting"][filename_short] = {}
                            self.container_var["plotting"][filename_short]["Entry"] = {}
                            self.container_var["plotting"][filename_short]["Entry"]["Start"] = tk.StringVar()
                            self.container_var["plotting"][filename_short]["Entry"]["Start"].set("0.0")
                            self.container_var["plotting"][filename_short]["Entry"]["End"] = tk.StringVar()
                            self.container_var["plotting"][filename_short]["Entry"]["End"].set("0.0")
                            self.container_var["plotting"][filename_short]["Checkboxes"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["RAW"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["SMOOTHED"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["SPIKES"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "BG"] = tk.IntVar()
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "MAT"] = tk.IntVar()
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "INCL"] = tk.IntVar()
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "SPK"] = tk.IntVar()
                            #
                            self.container_helper["positions"]["BG STD"][filename_short] = []
                            self.container_helper["positions"]["MAT STD"][filename_short] = []
                            self.container_helper["positions"]["INCL STD"][filename_short] = []
                            self.container_helper["positions"]["SPK STD"][filename_short] = []
                            #
                        #
                        if file not in self.container_var["SRM"] and self.file_loaded is False:
                            self.container_var["SRM"][file] = tk.StringVar()
                            self.container_var["SRM"][file].set("Select SRM")
                        #
                        lbl_std = SE(
                            parent=self.parent, row_id=1 + index, column_id=start_col_std, n_rows=1, n_columns=6,
                            fg=self.green_light, bg=self.green_medium).create_simple_label(
                            text=filename_short, relief=tk.GROOVE, fontsize="sans 10 bold")
                        #
                        self.container_elements["fi_setting"]["Label"].append(lbl_std)
                        #
                        btn_fi_setting_std = SE(
                            parent=self.parent, row_id=1 + index, column_id=start_col_std + 19, n_rows=1, n_columns=3,
                            fg=self.green_dark, bg=self.green_medium).create_simple_button(
                            text="Setup", bg_active=self.red_dark, fg_active=self.green_dark,
                            command=lambda filename=self.list_std[index]: self.sub_fluidinclusions_plotting(filename))
                        #
                        self.container_elements["fi_setting"]["Button"].append(btn_fi_setting_std)
                        #
                        frm_std = SE(parent=self.parent, row_id=1 + index, column_id=start_col_std + 22, n_rows=1,
                                     n_columns=1, fg=self.green_light, bg=self.sign_red).create_frame()
                        #
                        self.container_elements["fi_setting"]["Frame"].append(frm_std)
                        self.container_var["STD"][file]["Frame"] = frm_std
                        #
                        ## Option Menus
                        # Standard Reference Material
                        if self.container_var["SRM"][file].get() != "Select SRM":
                            var_text = self.container_var["SRM"][file].get()
                            self.container_files["STD"][filename_short]["SRM"].set(var_text)
                        else:
                            var_text = "Select SRM"
                        opt_menu_srm = SE(
                            parent=self.parent, row_id=1 + index, column_id=start_col_std + 6, n_rows=1, n_columns=9,
                            fg=self.green_dark, bg=self.green_medium).create_option_srm(
                            var_srm=self.container_var["SRM"][file],text_set=var_text, fg_active=self.green_dark,
                            bg_active=self.red_dark, command=lambda var_srm=self.container_var["SRM"][file], file=file:
                            self.change_srm_std(var_srm, file))
                        #
                        self.container_elements["fi_setting"]["Option Menu"].append(opt_menu_srm)
                        #
                        # Internal Standard
                        if self.container_var["STD"][file]["IS"].get() != "Select IS":
                            var_text = self.container_var["STD"][file]["IS"].get()
                        else:
                            var_text = "Select IS"
                        opt_menu_std = SE(
                            parent=self.parent, row_id=1 + index, column_id=start_col_std + 15, n_rows=1, n_columns=4,
                            fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                            var_iso=self.container_var["STD"][file]["IS"], option_list=self.container_lists["ISOTOPES"],
                            text_set=var_text, fg_active=self.green_dark, bg_active=self.red_dark,
                            command=lambda element=self.container_var["STD"][file]["IS"], file=file:
                            self.change_std_is(element, file))
                        #
                        self.container_elements["fi_setting"]["Option Menu"].append(opt_menu_std)
                        self.container_optionmenu["STD"][file] = opt_menu_std
                    #
                if len(self.list_smpl) > 0:
                    for index, file in enumerate(self.list_smpl):
                        #
                        parts = file.split("/")
                        filename_short = parts[-1]
                        #
                        self.container_gui[filename_short] = {}
                        for gui_category in gui_categories:
                            self.container_gui[filename_short][gui_category] = {}
                            self.container_gui[filename_short][gui_category]["General"] = []
                            self.container_gui[filename_short][gui_category]["Specific"] = []
                        #
                        self.container_helper["limits BG"][file] = {}
                        self.container_helper["limits BG"][file]["ID"] = []
                        self.container_helper["limits BG"][file]["type"] = []
                        self.container_helper["limits BG Ratio"][file] = {}
                        self.container_helper["limits BG Ratio"][file]["ID"] = []
                        self.container_helper["limits BG Ratio"][file]["type"] = []
                        self.container_helper["limits MAT"][file] = {}
                        self.container_helper["limits MAT"][file]["ID"] = []
                        self.container_helper["limits MAT"][file]["type"] = []
                        self.container_helper["limits MAT Ratio"][file] = {}
                        self.container_helper["limits MAT Ratio"][file]["ID"] = []
                        self.container_helper["limits MAT Ratio"][file]["type"] = []
                        self.container_helper["limits INCL"][file] = {}
                        self.container_helper["limits INCL"][file]["ID"] = []
                        self.container_helper["limits INCL"][file]["type"] = []
                        self.container_helper["limits INCL Ratio"][file] = {}
                        self.container_helper["limits INCL Ratio"][file]["ID"] = []
                        self.container_helper["limits INCL Ratio"][file]["type"] = []
                        self.container_helper["limits SPK"][file] = {}
                        self.container_helper["limits SPK"][file]["ID"] = []
                        self.container_helper["limits SPK"][file]["type"] = []
                        self.container_helper["limits SPK"][file]["info"] = []
                        self.container_helper["positions"]["SPK"][filename_short] = []
                        self.spikes_isotopes["SMPL"][filename_short] = {}
                        if self.file_loaded is False:
                            self.container_var["SMPL"][file] = {}
                            self.container_var["SMPL"][file]["IS"] = tk.StringVar()
                            self.container_var["SMPL"][file]["IS"].set("Select IS")
                            self.container_var["SMPL"][file]["ID"] = tk.StringVar()
                            self.container_var["SMPL"][file]["ID"].set("A")
                        #
                        categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                                      "TOOLBARFRAME_RATIO"]
                        self.container_diagrams["SMPL"][filename_short] = {}
                        self.diagrams_setup["SMPL"][filename_short] = {}
                        self.container_listboxes["SMPL"][filename_short] = {}
                        for category in categories:
                            self.container_diagrams["SMPL"][filename_short][category] = None
                            self.diagrams_setup["SMPL"][filename_short][category] = None
                        categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter"]
                        for category in categories:
                            self.diagrams_setup["SMPL"][filename_short][category] = {}
                        categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
                        for category in categories:
                            self.container_listboxes["SMPL"][filename_short][category] = None
                        #
                        self.container_report[filename_short] = {}
                        self.container_report[filename_short]["Mean"] = {}
                        self.container_report[filename_short]["Error"] = {}
                        categories_02 = ["Intensity BG", "Intensity SIG CORR", "Intensity Ratio", "Sensitivity", "Concentration", "RSF", "LOD"]
                        for category_02 in categories_02:
                            self.container_report[filename_short]["Mean"][category_02] = {}
                            self.container_report[filename_short]["Error"][category_02] = {}
                            self.container_report[filename_short]["Mean"][category_02]["filename"] = filename_short
                            self.container_report[filename_short]["Error"][category_02]["filename"] = filename_short
                        #
                        if len(self.container_lists["SMPL"]["Long"]) < len(self.list_smpl):
                            self.container_lists["SMPL"]["Long"].append(file)
                            self.container_lists["SMPL"]["Short"].append(filename_short)
                            self.container_helper["SMPL"][filename_short] = {}
                            self.container_helper["SMPL"][filename_short]["BG"] = {}
                            self.container_helper["SMPL"][filename_short]["MAT"] = {}
                            self.container_helper["SMPL"][filename_short]["INCL"] = {}
                            self.container_helper["SMPL"][filename_short]["SPK"] = {}
                        if filename_short not in self.container_files["SMPL"]:
                            self.container_files["SMPL"][filename_short] = {}
                            self.container_files["SMPL"][filename_short]["SRM"] = tk.StringVar()
                            self.container_files["SMPL"][filename_short]["IS"] = tk.StringVar()
                            self.container_files["SMPL"][filename_short]["IS Concentration"] = tk.StringVar()
                            self.container_files["SMPL"][filename_short]["ID"] = tk.StringVar()
                            self.container_files["SMPL"][filename_short]["ID"].set("A")
                            self.container_files["SMPL"][filename_short]["Plot"] = False
                            self.container_files["SMPL"][filename_short]["Time Signal Plot"] = None
                            self.container_files["SMPL"][filename_short]["Histogram Plot"] = None
                            self.container_files["SMPL"][filename_short]["Scatter Plot"] = None
                            self.container_files["SMPL"][filename_short]["BG"] = {}
                            self.container_files["SMPL"][filename_short]["MAT"] = {}
                            self.container_files["SMPL"][filename_short]["INCL"] = {}
                            self.container_files["SMPL"][filename_short]["SPK"] = {}
                            #
                            self.container_var["plotting"][filename_short] = {}
                            self.container_var["plotting"][filename_short]["Entry"] = {}
                            self.container_var["plotting"][filename_short]["Entry"]["Start"] = tk.StringVar()
                            self.container_var["plotting"][filename_short]["Entry"]["Start"].set("0.0")
                            self.container_var["plotting"][filename_short]["Entry"]["End"] = tk.StringVar()
                            self.container_var["plotting"][filename_short]["Entry"]["End"].set("0.0")
                            self.container_var["plotting"][filename_short]["Checkboxes"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["RAW"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["SMOOTHED"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["SPIKES"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"] = {}
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "BG"] = tk.IntVar()
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "MAT"] = tk.IntVar()
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "INCL"] = tk.IntVar()
                            self.container_var["plotting"][filename_short]["Checkboxes"]["INTERVALS"][
                                "SPK"] = tk.IntVar()
                        #
                        lbl_smpl = SE(
                            parent=self.parent, row_id=len(self.list_std) + 3 + index, column_id=start_col_smpl,
                            n_rows=1, n_columns=6, fg=self.green_light, bg=self.green_medium).create_simple_label(
                            text=filename_short, relief=tk.GROOVE, fontsize="sans 10 bold")
                        #
                        self.container_elements["fi_setting"]["Label"].append(lbl_smpl)
                        #
                        btn_fi_setting_smpl = SE(
                            parent=self.parent, row_id=len(self.list_std) + 3 + index,
                            column_id=start_col_smpl+19, n_rows=1, n_columns=3, fg=self.green_dark,
                            bg=self.green_medium).create_simple_button(
                            text="Setup", bg_active=self.red_dark, fg_active=self.green_dark,
                            command=lambda filename=self.list_smpl[index]: self.sub_fluidinclusions_plotting(filename))
                        #
                        self.container_elements["fi_setting"]["Button"].append(btn_fi_setting_smpl)
                        #
                        frm_smpl = SE(parent=self.parent, row_id=len(self.list_std) + 3 + index,
                                      column_id=start_col_smpl+22, n_rows=1, n_columns=1, fg=self.green_light,
                                      bg=self.sign_red).create_frame()
                        #
                        self.container_elements["fi_setting"]["Frame"].append(frm_smpl)
                        self.container_var["SMPL"][file]["Frame"] = frm_smpl
                        #
                        ## Option Menus
                        self.container_var["isotopes"][file] = tk.StringVar()
                        # Internal Standard
                        if self.container_var["SMPL"][file]["IS"].get() != "Select IS":
                            var_text = self.container_var["SMPL"][file]["IS"].get()
                        else:
                            var_text = "Select IS"
                        opt_menu_iso = SE(
                            parent=self.parent, row_id=len(self.list_std) + 3 + index, column_id=start_col_smpl + 6,
                            n_rows=1, n_columns=9, fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                            var_iso=self.container_var["SMPL"][file]["IS"], option_list=self.container_lists["ISOTOPES"],
                            text_set=var_text, fg_active=self.green_dark,  bg_active=self.red_dark,
                            command=lambda element=self.container_var["SMPL"][file]["IS"], file=file,
                                           mineral=self.container_var["mineral"].get():
                            self.change_smpl_is(element, file, mineral))
                        #
                        self.container_elements["fi_setting"]["Option Menu"].append(opt_menu_iso)
                        self.container_optionmenu["SMPL"][file] = opt_menu_iso
                        #
                        # Sample ID
                        if self.container_var["SMPL"][file]["ID"].get() != "B":
                            var_text = self.container_var["SMPL"][file]["ID"].get()
                        else:
                            var_text = "B"
                        opt_menu_smpl_id = SE(
                            parent=self.parent, row_id=len(self.list_std) + 3 + index, column_id=start_col_smpl + 15,
                            n_rows=1, n_columns=4, fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                            var_iso=self.container_var["SMPL"][file]["ID"], option_list=self.list_alphabet,
                            text_set=var_text, fg_active=self.green_dark, bg_active=self.red_dark,
                            command=lambda var_id=self.container_var["SMPL"][file]["ID"], filename=file,
                                           filetype="SMPL": self.change_id_file(var_id, filename, filetype))
                        #
                        self.container_elements["fi_setting"]["Option Menu"].append(opt_menu_smpl_id)
                        #
                if len(self.list_std) > 0 or len(self.list_smpl) > 0:
                    if len(self.container_lists["ISOTOPES"]) < 20:
                        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                            self.container_results["STD"]["RAW"][isotope] = {}
                            self.container_results["STD"]["SMOOTHED"][isotope] = {}
                            self.container_results["SMPL"]["RAW"][isotope] = {}
                            self.container_results["SMPL"]["SMOOTHED"][isotope] = {}
                            #
                            self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                            self.container_var["dwell_times"]["Entry"][isotope].set("0.01")
                            #
                            ## Labels
                            rgb = mcolors.to_rgb(self.isotope_colors[isotope])
                            brightness = np.sqrt(0.299*(rgb[0] * 255)**2 + 0.587*(rgb[1]*255)**2 + 0.114*(rgb[2]*255)**2)
                            if brightness < 128:
                                color_fg = "white"
                            else:
                                color_fg = "black"
                            # LABELS
                            lbl_iso = SE(
                                parent=self.parent, row_id=1+index, column_id=start_col_iso+1, fg=color_fg, n_rows=1,
                                n_columns=3, bg=self.isotope_colors[isotope]).create_simple_label(
                                text=isotope, relief=tk.GROOVE, fontsize="sans 10 bold")
                            #
                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            self.container_var["charge"][isotope] = {"textvar": tk.StringVar()}
                            #
                            if float(self.var_entr_10.get()) >= float(self.ionization_energies["First"][element]) \
                                    and float(self.var_entr_10.get()) >= float(
                                self.ionization_energies["Second"][element]):
                                self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                                lbl_charge = SE(
                                    parent=self.parent, row_id=1+index, column_id=start_col_iso+13, n_rows=1,
                                    n_columns=5, fg=self.green_dark, bg=self.red_medium).create_simple_label(
                                    text=self.container_var["charge"][isotope]["textvar"], relief=tk.GROOVE,
                                    fontsize="sans 10 bold", textvariable=True)
                                self.container_var["charge"][isotope]["labelvar"] = lbl_charge
                            else:
                                self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                                lbl_charge = SE(
                                    parent=self.parent, row_id=1+index, column_id=start_col_iso+13, n_rows=1,
                                    n_columns=5, fg=self.green_dark, bg=self.blue_medium).create_simple_label(
                                    text=self.container_var["charge"][isotope]["textvar"], relief=tk.GROOVE,
                                    fontsize="sans 10 bold", textvariable=True)
                                self.container_var["charge"][isotope]["labelvar"] = lbl_charge
                            #
                            self.container_elements["fi_setting"]["Label"].extend([lbl_iso, lbl_charge])
                            #
                            ## Option Menus
                            # Standard Reference Material
                            self.container_var["SRM"][isotope] = tk.StringVar()
                            if self.container_var["SRM"]["default"][0].get() != "Select SRM":
                                var_text = self.container_var["SRM"]["default"][0].get()
                                self.container_files["SRM"][isotope].set(var_text)
                            else:
                                var_text = "Select SRM"
                            opt_menu_srm = SE(
                                parent=self.parent, row_id=1+index, column_id=start_col_iso+4, n_rows=1, n_columns=9,
                                fg=self.green_dark, bg=self.green_medium).create_option_srm(
                                var_srm=self.container_var["SRM"][isotope], text_set=var_text, fg_active=self.green_dark,
                                bg_active=self.red_dark,
                                command=lambda var_srm=self.container_var["SRM"][isotope], isotope=isotope:
                                self.change_srm_iso(var_srm, isotope))
                            #
                            self.container_elements["fi_setting"]["Option Menu"].append(opt_menu_srm)
                            #
                    else:
                        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                            self.container_results["STD"]["RAW"][isotope] = {}
                            self.container_results["STD"]["SMOOTHED"][isotope] = {}
                            self.container_results["SMPL"]["RAW"][isotope] = {}
                            self.container_results["SMPL"]["SMOOTHED"][isotope] = {}
                            #
                            self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                            self.container_var["dwell_times"]["Entry"][isotope].set("0.01")
                            #
                            ## Labels
                            rgb = mcolors.to_rgb(self.isotope_colors[isotope])
                            brightness = np.sqrt(0.299*(rgb[0]*255)**2 + 0.587*(rgb[1]*255)**2 + 0.114*(rgb[2]*255)**2)
                            if brightness < 128:
                                color_fg = "white"
                            else:
                                color_fg = "black"
                            # LABELS
                            lbl_iso = SE(
                                parent=self.parent, row_id=1+index, column_id=start_col_iso+1, fg=color_fg, n_rows=1,
                                n_columns=3, bg=self.isotope_colors[isotope]).create_simple_label(
                                text=isotope, relief=tk.GROOVE, fontsize="sans 10 bold")
                            #
                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            self.container_var["charge"][isotope] = {"textvar": tk.StringVar()}
                            #
                            if float(self.var_entr_10.get()) >= float(self.ionization_energies["First"][element]) and float(self.var_entr_10.get()) >= float(self.ionization_energies["Second"][element]):
                                self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                                lbl_charge = SE(
                                    parent=self.parent, row_id=1+index, column_id=start_col_iso+13, n_rows=1, n_columns=5,
                                    fg=self.green_dark, bg=self.red_medium).create_simple_label(
                                    text=self.container_var["charge"][isotope]["textvar"], relief=tk.GROOVE, fontsize="sans 10 bold",
                                    textvariable=True)
                                self.container_var["charge"][isotope]["labelvar"] = lbl_charge
                            else:
                                self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                                lbl_charge = SE(
                                    parent=self.parent, row_id=1+index, column_id=start_col_iso+13, n_rows=1, n_columns=5,
                                    fg=self.green_dark, bg=self.blue_medium).create_simple_label(
                                    text=self.container_var["charge"][isotope]["textvar"], relief=tk.GROOVE, fontsize="sans 10 bold",
                                    textvariable=True)
                                self.container_var["charge"][isotope]["labelvar"] = lbl_charge
                            self.container_elements["fi_setting"]["Label"].extend([lbl_iso, lbl_charge])
                            ## Option Menus
                            self.container_var["SRM"][isotope] = tk.StringVar()
                            if self.container_var["SRM"]["default"][0].get() != "Select SRM":
                                var_text = self.container_var["SRM"]["default"][0].get()
                                self.container_files["SRM"][isotope].set(var_text)
                            else:
                                var_text = "Select SRM"
                            opt_menu_srm = SE(
                                parent=self.parent, row_id=1+index, column_id=start_col_iso+4, n_rows=1, n_columns=9,
                                fg=self.green_dark, bg=self.green_medium).create_option_srm(
                                var_srm=self.container_var["SRM"][isotope], text_set=var_text, fg_active=self.green_dark,
                                bg_active=self.red_dark,
                                command=lambda var_srm=self.container_var["SRM"][isotope], isotope=isotope:
                                self.change_srm_iso(var_srm, isotope))
                            #
                            self.container_elements["fi_setting"]["Option Menu"].append(opt_menu_srm)
                #
                ## Buttons
                btn_std_01 = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 29, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_simple_button(
                    text="Apply to all", bg_active=self.red_dark, fg_active=self.green_dark,
                    command=lambda filetype="STD", mode="FI": self.fast_track(filetype, mode))
                btn_smpl_01 = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 30, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_simple_button(
                    text="Apply to all", bg_active=self.red_dark, fg_active=self.green_dark,
                    command=lambda filetype="SMPL", mode="FI": self.fast_track(filetype, mode))
                btn_load_conc = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 12, column_id=21, n_rows=1, n_columns=8,
                    fg=self.green_dark, bg=self.green_medium).create_simple_button(
                    text="Load IS Data", bg_active=self.red_dark, fg_active=self.green_dark,
                    command=self.import_concentration_data)
                btn_salt = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 12, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_simple_button(
                    text="Salt Correction", bg_active=self.red_dark, fg_active=self.green_dark,
                    command=lambda gui_elements=self.gui_elements: FluidInclusions(
                        parent=self.parent, list_isotopes=self.container_lists["ISOTOPES"], srm_actual=self.srm_actual,
                        container_var=self.container_var, container_lists=self.container_lists,
                        container_measurements=self.container_measurements, container_files=self.container_files,
                        xi_std_time=self.xi_std_time,
                        container_results=self.container_results).create_salt_correction_window(gui_elements))
                btn_method = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 14, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_simple_button(
                    text="Setup", bg_active=self.red_dark, fg_active=self.green_dark,
                    command=lambda gui_elements=self.gui_elements,
                                   var_method=self.container_var["fi_setting"]["Method"]: FluidInclusions(
                        parent=self.parent, list_isotopes=self.container_lists["ISOTOPES"], srm_actual=self.srm_actual,
                        container_var=self.container_var, container_lists=self.container_lists,
                        container_measurements=self.container_measurements, container_files=self.container_files,
                        xi_std_time=self.xi_std_time,
                        container_results=self.container_results).create_method_settings_window(
                        gui_elements, var_method))
                btn_dwell = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 18, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_simple_button(
                    text="Setup", bg_active=self.red_dark, fg_active=self.green_dark,
                    command=self.create_dwell_time_window)
                #
                self.container_elements["fi_setting"]["Button"].extend(
                    [btn_std_01, btn_smpl_01, btn_load_conc, btn_salt, btn_method, btn_dwell])
                #
                ## RADIOBUTTONS
                rb_oxide = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 7, column_id=21, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["fi_setting"]["Host Setup Selection"], value_rb=1,
                    color_bg=self.green_medium, fg=self.green_light, text="", sticky="nesw", relief=tk.GROOVE)
                #
                rb_sulfide = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 8, column_id=21, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["fi_setting"]["Host Setup Selection"], value_rb=2,
                    color_bg=self.green_medium, fg=self.green_light, text="", sticky="nesw", relief=tk.GROOVE)
                #
                rb_halide = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 9, column_id=21, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["fi_setting"]["Host Setup Selection"], value_rb=3,
                    color_bg=self.green_medium, fg=self.green_light, text="", sticky="nesw", relief=tk.GROOVE)
                #
                rb_mineral = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 10, column_id=21, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_radiobutton(
                    var_rb=self.container_var["fi_setting"]["Host Setup Selection"], value_rb=4,
                    color_bg=self.green_medium, fg=self.green_light, text="", sticky="nesw", relief=tk.GROOVE)
                #
                self.container_elements["fi_setting"]["Radiobutton"].extend(
                    [rb_oxide, rb_sulfide, rb_halide, rb_mineral])
                #
                ## Entries
                # Time Interval Background
                if self.container_var["fi_setting"]["Time BG Start"].get() != "Set start time":
                    var_text = self.container_var["fi_setting"]["Time BG Start"].get()
                else:
                    var_text = "Set start time"
                entr_01 = SE(
                    parent=self.parent, row_id=start_row_settings_01+21, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Time BG Start"], text_default=var_text,
                    command=lambda event, var_t=self.container_var["fi_setting"]["Time BG Start"], times=self.times,
                                   category_01="FI", category_02="Start BG":
                    self.find_nearest_time(var_t, times, category_01, category_02, event))
                #
                if self.container_var["fi_setting"]["Time BG End"].get() != "Set end time":
                    var_text = self.container_var["fi_setting"]["Time BG End"].get()
                else:
                    var_text = "Set end time"
                entr_02 = SE(
                    parent=self.parent, row_id=start_row_settings_01+22, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Time BG End"], text_default=var_text,
                    command=lambda event, var_t=self.container_var["fi_setting"]["Time BG End"], times=self.times,
                                   category_01="FI", category_02="End BG":
                    self.find_nearest_time(var_t, times, category_01, category_02, event))
                #
                # Time Interval Matrix
                if self.container_var["fi_setting"]["Time MAT Start"].get() != "Set start time":
                    var_text = self.container_var["fi_setting"]["Time MAT Start"].get()
                else:
                    var_text = "Set start time"
                entr_03 = SE(
                    parent=self.parent, row_id=start_row_settings_01+24, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Time MAT Start"], text_default=var_text,
                    command=lambda event, var_t=self.container_var["fi_setting"]["Time MAT Start"], times=self.times,
                                   category_01="FI",  category_02="Start MAT":
                    self.find_nearest_time(var_t, times, category_01, category_02, event))
                #
                if self.container_var["fi_setting"]["Time MAT End"].get() != "Set end time":
                    var_text = self.container_var["fi_setting"]["Time MAT End"].get()
                else:
                    var_text = "Set end time"
                entr_04 = SE(
                    parent=self.parent, row_id=start_row_settings_01+25, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Time MAT End"], text_default=var_text,
                    command=lambda event, var_t=self.container_var["fi_setting"]["Time MAT End"], times=self.times,
                                   category_01="FI", category_02="End MAT":
                    self.find_nearest_time(var_t, times, category_01, category_02, event))
                #
                # Deviation and Threshold
                var_entr_05 = tk.StringVar()
                self.container_var["fi_setting"]["SE Deviation"] = var_entr_05
                entr_05 = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 27, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=var_entr_05, text_default="10",
                    command=lambda event, var=var_entr_05, category_01="MA", category_02="Deviation":
                    self.set_entry_value(var, category_01, category_02, event))
                #
                var_entr_06 = tk.StringVar()
                self.container_var["fi_setting"]["SE Threshold"] = var_entr_06
                entr_06 = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 28, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=var_entr_06, text_default="1000",
                    command=lambda event, var=var_entr_06, category_01="MA", category_02="Threshold":
                    self.set_entry_value(var, category_01, category_02, event))
                #
                # Author and Source ID
                var_entr_07 = tk.StringVar()
                self.container_var["fi_setting"]["Author"] = var_entr_07
                entr_07 = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 32, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=var_entr_07, text_default="J. Doe",
                    command=lambda event, var=var_entr_07, category_01="MA", category_02="Author":
                    self.set_entry_value(var, category_01, category_02, event))
                #
                var_entr_08 = tk.StringVar()
                self.container_var["fi_setting"]["Source ID"] = var_entr_08
                entr_08 = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 33, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=var_entr_08, text_default="RUR01",
                    command=lambda event, var=var_entr_08, category_01="MA", category_02="Source ID":
                    self.set_entry_value(var, category_01, category_02, event))
                #
                if self.container_var["fi_setting"]["Oxide Concentration"].get() != "100":
                    var_text = self.container_var["fi_setting"]["Oxide Concentration"].get()
                else:
                    var_text = "100"
                entr_oxide = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 7, column_id=24, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Oxide Concentration"], text_default=var_text)
                #
                if self.container_var["fi_setting"]["Sulfide Concentration"].get() != "1000000":
                    var_text = self.container_var["fi_setting"]["Sulfide Concentration"].get()
                else:
                    var_text = "1000000"
                entr_sulfide = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 8, column_id=24, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Sulfide Concentration"], text_default=var_text)
                #
                if self.container_var["fi_setting"]["Halide Concentration"].get() != "100":
                    var_text = self.container_var["fi_setting"]["Halide Concentration"].get()
                else:
                    var_text = "100"
                entr_halide = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 9, column_id=24, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Halide Concentration"], text_default=var_text)
                #
                if self.container_var["fi_setting"]["Mineral Concentration"].get() != "100":
                    var_text = self.container_var["fi_setting"]["Mineral Concentration"].get()
                else:
                    var_text = "100"
                entr_mineral = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 10, column_id=24, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["fi_setting"]["Mineral Concentration"], text_default=var_text)
                #
                self.container_elements["fi_setting"]["Entry"].extend(
                    [entr_01, entr_02, entr_03, entr_04, entr_05, entr_06, entr_07, entr_08, entr_10, entr_oxide,
                     entr_sulfide, entr_halide, entr_mineral])
                #
                if self.container_var["SRM"]["default"][0].get() != "Select SRM":
                    var_text = self.container_var["SRM"]["default"][0].get()
                else:
                    var_text = "Select SRM"
                #
                opt_menu_srm_default_01 = SE(
                    parent=self.parent, row_id=start_row_settings_01+4, column_id=29, n_rows=1, n_columns=9, fg=self.green_dark,
                    bg=self.green_medium).create_option_srm(
                    var_srm=self.container_var["SRM"]["default"][0], text_set=var_text, fg_active=self.green_dark,
                    bg_active=self.red_dark, command=lambda var_srm=self.container_var["SRM"]["default"][0]:
                    self.change_srm_default(var_srm))
                opt_menu_srm_default_02 = SE(
                    parent=self.parent, row_id=start_row_settings_01+5, column_id=29, n_rows=1, n_columns=9, fg=self.green_dark,
                    bg=self.green_medium).create_option_srm(
                    var_srm=self.container_var["SRM"]["default"][1], text_set=var_text, fg_active=self.green_dark,
                    bg_active=self.red_dark, command=lambda var_srm=self.container_var["SRM"]["default"][1]:
                    self.change_srm_default(var_srm, key="isotope"))
                #
                if self.container_var["mineral"].get() != "Select Mineral":
                    var_text = self.container_var["mineral"].get()
                else:
                    var_text = "Select Mineral"
                opt_menu_mineral = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 10, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_option_mineral(
                    var_min=self.container_var["mineral"], text_set=var_text, fg_active=self.green_dark,
                    bg_active=self.red_dark, option_list=self.mineral_list,
                    command=lambda var_min=self.container_var["mineral"], fluidinclusion=True:
                    self.select_mineral_is(var_min, fluidinclusion))
                #
                list_opt_gas = ["Helium", "Neon", "Argon", "Krypton", "Xenon", "Radon"]
                opt_laser = SE(
                    parent=self.parent, row_id=int(1 + len(self.container_lists["ISOTOPES"])), column_id=start_col_iso+1, n_rows=1,
                    n_columns=12, fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                    var_iso=self.container_var["LASER"], option_list=list_opt_gas, text_set="Argon",
                    fg_active=self.green_dark, bg_active=self.red_dark,
                    command=lambda var_opt=self.container_var["LASER"]: self.change_carrier_gas(var_opt))
                #
                ## Quantification Method
                self.build_plugin_list()
                opt_methods = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 13, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                    var_iso=self.container_var["fi_setting"]["Method"],
                    option_list=self.container_lists["Plugins FI"]["Names"], text_set="Select Method",
                    fg_active=self.green_dark, bg_active=self.red_dark)
                #
                self.container_elements["fi_setting"]["Option Menu"].extend(
                    [opt_menu_srm_default_01, opt_menu_srm_default_02, opt_laser, opt_methods, opt_menu_mineral])
                #
                if self.container_var["ID"]["Default SMPL"].get() != "A":
                    var_text = self.container_var["ID"]["Default SMPL"].get()
                else:
                    var_text = "A"
                self.opt_id_smpl_def = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 16, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                    var_iso=self.container_var["ID"]["Default SMPL"], option_list=self.list_alphabet, text_set=var_text,
                    fg_active=self.green_dark, bg_active=self.red_dark,
                    command=lambda var_id=self.container_var["ID"]["Default SMPL"],
                                   filetype="SMPL": self.change_id_default(var_id, filetype))
                #
                self.container_elements["fi_setting"]["Option Menu"].extend([self.opt_id_smpl_def])
                #
                ## HOST SETTINGS
                if self.container_var["fi_setting"]["Oxide"].get() != "Select Oxide":
                    var_text = self.container_var["fi_setting"]["Oxide"].get()
                else:
                    var_text = "Select Oxide"
                opt_oxides = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 7, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                    var_iso=self.container_var["fi_setting"]["Oxide"],
                    option_list=self.container_lists["Oxides"], text_set=var_text,
                    fg_active=self.green_dark, bg_active=self.red_dark)
                #
                if self.container_var["fi_setting"]["Sulfide"].get() != "Select Sulfide":
                    var_text = self.container_var["fi_setting"]["Sulfide"].get()
                else:
                    var_text = "Select Sulfide"
                opt_sulfides = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 8, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                    var_iso=self.container_var["fi_setting"]["Sulfide"],
                    option_list=self.container_lists["Sulfides"], text_set=var_text,
                    fg_active=self.green_dark, bg_active=self.red_dark)
                #
                if self.container_var["fi_setting"]["Halide"].get() != "Select Halide":
                    var_text = self.container_var["fi_setting"]["Halide"].get()
                else:
                    var_text = "Select Halide"
                opt_halides = SE(
                    parent=self.parent, row_id=start_row_settings_01 + 9, column_id=29, n_rows=1, n_columns=9,
                    fg=self.green_dark, bg=self.green_medium).create_option_isotope(
                    var_iso=self.container_var["fi_setting"]["Halide"],
                    option_list=self.container_lists["Halides"], text_set=var_text,
                    fg_active=self.green_dark, bg_active=self.red_dark)
                #
                self.container_elements["fi_setting"]["Option Menu"].extend([opt_oxides, opt_sulfides, opt_halides])
                #
                ## ADDITIONAL OPERATIONS DUE TO FILE LOADING
                if self.file_loaded is True:
                    self.select_mineral_is(var_min=self.container_var["mineral"].get())
                #
                self.window_created["fi_setting"] = True
        #
        else:
            pass
        #
    def sub_fluidinclusions_plotting(self, filename):
        #
        if filename in self.list_std:
            self.file_type = "STD"
        elif filename in self.list_smpl:
            self.file_type = "SMPL"
        #
        ## Cleaning
        categories = ["fi_setting"]
        for category in categories:
            if len(self.container_elements[category]["Label"]) > 0:
                for item in self.container_elements[category]["Label"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Button"]) > 0:
                for item in self.container_elements[category]["Button"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Option Menu"]) > 0:
                for item in self.container_elements[category]["Option Menu"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Entry"]) > 0:
                for item in self.container_elements[category]["Entry"]:
                    item.grid_remove()
            if len(self.container_elements[category]["Frame"]) > 0:
                for item in self.container_elements[category]["Frame"]:
                    item.grid_remove()
        #
        try:
            parts = filename.split("/")
            self.container_files[self.file_type][parts[-1]]["Time Signal Plot"].draw()
        except:
            pass
        #
        self.file = filename
        parts = filename.split("/")
        filename_short = parts[-1]
        self.filename_short = filename_short
        df_data = self.load_and_assign_data(filename=filename)
        self.times = df_data.iloc[:, 0]
        icp_measurements = np.array([[df_data[isotope] for isotope in self.container_lists["ISOTOPES"]]])
        x_max = np.amax(self.times)
        y_max = np.amax(icp_measurements)
        if self.container_files[self.file_type][filename_short]["Plot"] == False:
            self.bg_id = 0
            self.bg_idlist = []
            self.mat_id = 0
            self.mat_idlist = []
            self.incl_id = 0
            self.incl_idlist = []
            self.spk_id = 0
            self.spk_idlist = []
            self.lines = {}
            self.lines["raw"] = {}
            self.lines["edited"] = {}
            if filename_short not in self.container_helper["positions"]:
                self.container_helper["positions"]["BG"][filename_short] = []
                self.container_helper["positions"]["BG SMPL"] = {}
                self.container_helper["positions"]["BG SMPL"][filename_short] = []
                self.container_helper["positions"]["MAT"][filename_short] = []
                self.container_helper["positions"]["MAT SMPL"] = {}
                self.container_helper["positions"]["MAT SMPL"][filename_short] = []
                self.container_helper["positions"]["INCL"][filename_short] = []
                self.container_helper["positions"]["INCL SMPL"] = {}
                self.container_helper["positions"]["INCL SMPL"][filename_short] = []
                self.container_helper["positions"]["SPK"][filename_short] = []
                self.container_helper["positions"]["SPK SMPL"] = {}
                self.container_helper["positions"]["SPK SMPL"][filename_short] = []
                self.container_helper["positions"][filename_short] = []
                self.container_helper["indices"][filename_short] = []
            #
            if filename_short not in self.container_measurements["RAW"]:
                self.container_measurements["RAW"][filename_short] = {}
                self.container_measurements["SELECTED"][filename_short] = {}
                self.container_measurements["SELECTED"][filename_short]["RAW"] = {}
                self.container_measurements["SELECTED"][filename_short]["SMOOTHED"] = {}
                self.container_measurements["EDITED"][filename_short] = {}
                self.container_measurements["RAW"]["Time"] = self.times.tolist()
                self.container_measurements["SELECTED"][filename_short]["Time"] = self.times.tolist()
                self.container_measurements["EDITED"]["Time"] = self.times.tolist()
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["RAW"][filename_short][isotope] = df_data[isotope].tolist()
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope] = {}
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["MAT"] = []
                    self.container_measurements["SELECTED"][filename_short]["RAW"][isotope]["INCL"] = []
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope] = {}
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["BG"] = []
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["MAT"] = []
                    self.container_measurements["SELECTED"][filename_short]["SMOOTHED"][isotope]["INCL"] = []
                    self.container_measurements["EDITED"][filename_short][isotope] = {}
                    self.container_measurements["EDITED"][filename_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][filename_short][isotope]["MAT"] = []
                    self.container_measurements["EDITED"][filename_short][isotope]["INCL"] = []
            #
            ## FRAMES
            frm_bg = SE(
                parent=self.parent, row_id=29, column_id=21, n_rows=1, n_columns=9, fg=self.blue_light,
                bg=self.blue_dark).create_frame(relief=tk.FLAT)
            frm_mat = SE(
                parent=self.parent, row_id=29, column_id=30, n_rows=1, n_columns=9, fg=self.brown_light,
                bg=self.brown_dark).create_frame(relief=tk.FLAT)
            frm_incl = SE(
                parent=self.parent, row_id=29, column_id=39, n_rows=1, n_columns=9, fg=self.slate_grey_light,
                bg=self.slate_grey_dark).create_frame(relief=tk.FLAT)
            frm_spkelim = SE(
                parent=self.parent, row_id=29, column_id=48, n_rows=1, n_columns=9, fg=self.yellow_light,
                bg=self.yellow_dark).create_frame(relief=tk.FLAT)
            frm_isorat = SE(
                parent=self.parent, row_id=29, column_id=57, n_rows=1, n_columns=9, fg=self.slate_grey_light,
                bg=self.slate_grey_light).create_frame(relief=tk.FLAT)
            frm_spke_bg = SE(
                parent=self.parent, row_id=1, column_id=87, n_rows=len(self.container_lists["ISOTOPES"]), n_columns=2,
                fg=self.yellow_medium, bg=self.yellow_medium).create_frame()
            #
            self.container_elements["plotting"]["Frame"].extend(
                [frm_bg, frm_mat, frm_incl, frm_spkelim, frm_isorat, frm_spke_bg])
            self.container_gui[filename_short]["Frame"]["General"].extend(
                [frm_bg, frm_mat, frm_incl, frm_spkelim, frm_isorat, frm_spke_bg])
            #
            ## LABELS
            lbl_file = SE(
                parent=self.parent, row_id=0, column_id=80, n_rows=1, n_columns=9, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text=filename_short, relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_spk = SE(
                parent=self.parent, row_id=33, column_id=66, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Spike Elimination", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_disply = SE(
                parent=self.parent, row_id=30, column_id=66, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_dark).create_simple_label(
                text="Plot Selection", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_start = SE(
                parent=self.parent, row_id=36, column_id=66, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="Start (Time)", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_end = SE(
                parent=self.parent, row_id=37, column_id=66, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text="End (Time)", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.container_elements["plotting"]["Label"].extend(
                [lbl_file, lbl_spk, lbl_disply, lbl_start, lbl_end])
            self.container_gui[filename_short]["Label"]["General"].extend(
                [lbl_file, lbl_spk, lbl_disply, lbl_start, lbl_end])
            #
            ## ENTRY
            #
            entr_start = SE(
                parent=self.parent, row_id=36, column_id=72, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_entry(
                var=self.container_var["plotting"][filename_short]["Entry"]["Start"], text_default="0.0",
                command=lambda event, filename_short=filename_short, var_key="Start":
                self.set_integration_window(filename_short, var_key, event))
            entr_end = SE(
                parent=self.parent, row_id=37, column_id=72, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_entry(
                var=self.container_var["plotting"][filename_short]["Entry"]["End"], text_default="0.0",
                command=lambda event, filename_short=filename_short, var_key="End":
                self.set_integration_window(filename_short, var_key, event))
            #
            self.container_elements["plotting"]["Entry"].extend([entr_start, entr_end])
            self.container_gui[filename_short]["Entry"]["General"].extend([entr_start, entr_end])
            #
            for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                rgb = mcolors.to_rgb(self.isotope_colors[isotope])
                brightness = np.sqrt(
                    0.299 * (rgb[0] * 255) ** 2 + 0.587 * (rgb[1] * 255) ** 2 + 0.114 * (rgb[2] * 255) ** 2)
                if brightness < 128:
                    color_fg = "white"
                else:
                    color_fg = "black"
                # LABELS
                lbl_iso = SE(parent=self.parent, row_id=1 + index, column_id=80, fg=color_fg, n_rows=1, n_columns=3,
                             bg=self.isotope_colors[isotope]).create_simple_label(text=isotope)
                #
                self.container_elements["plotting"]["Label"].append(lbl_iso)
                self.container_gui[filename_short]["Label"]["General"].append(lbl_iso)
                #
                # CHECKBOXES
                self.container_var["plotting"][isotope] = [tk.IntVar(), tk.IntVar(), tk.IntVar()]
                self.container_var["plotting"][isotope][0].set(1)
                self.container_var["plotting"][isotope][1].set(0)
                self.container_var["plotting"][isotope][2].set(0)
                self.container_var["plotting"][filename_short]["Checkboxes"]["RAW"][isotope] = tk.IntVar()
                self.container_var["plotting"][filename_short]["Checkboxes"]["SMOOTHED"][isotope] = tk.IntVar()
                self.container_var["plotting"][filename_short]["Checkboxes"]["SPIKES"][isotope] = tk.IntVar()
                self.container_var["plotting"][filename_short]["Checkboxes"]["RAW"][isotope].set(1)
                self.container_var["plotting"][filename_short]["Checkboxes"]["SMOOTHED"][isotope].set(0)
                self.container_var["plotting"][filename_short]["Checkboxes"]["SPIKES"][isotope].set(0)
                #
                frm_iso_bg = SE(parent=self.parent, row_id=1 + index, column_id=83, n_rows=1, n_columns=4,
                                fg=self.isotope_colors[isotope], bg=self.isotope_colors[isotope]).create_frame()
                self.container_elements["plotting"]["Frame"].append(frm_iso_bg)
                self.container_gui[filename_short]["Frame"]["General"].append(frm_iso_bg)
                cb_iso = SE(
                    parent=self.parent, row_id=1 + index, column_id=83, fg=color_fg, n_rows=1, n_columns=2,
                    bg=self.isotope_colors[isotope]).create_simple_checkbox(
                    var_cb=self.container_var["plotting"][filename_short]["Checkboxes"]["RAW"][isotope], text="",
                    set_sticky="", command=lambda
                        var_cb=self.container_var["plotting"][filename_short]["Checkboxes"]["RAW"][isotope],
                        name=isotope: self.change_visibility(var_cb, name))
                cb_isosmoothed = SE(
                    parent=self.parent, row_id=1 + index, column_id=85, fg=color_fg, n_rows=1, n_columns=2,
                    bg=self.isotope_colors[isotope]).create_simple_checkbox(
                    var_cb=self.container_var["plotting"][filename_short]["Checkboxes"]["SMOOTHED"][isotope],
                    text="",
                    set_sticky="", command=lambda
                        var_cb=self.container_var["plotting"][filename_short]["Checkboxes"]["SMOOTHED"][isotope],
                        name=isotope: self.change_visibility(var_cb, name))
                cb_spk = SE(
                    parent=self.parent, row_id=1 + index, column_id=87, fg=color_fg, n_rows=1, n_columns=2,
                    bg=self.yellow_medium).create_simple_checkbox(
                    var_cb=self.container_var["plotting"][filename_short]["Checkboxes"]["SPIKES"][isotope], text="",
                    set_sticky="")
                #
                self.container_elements["plotting"]["Checkbox"].extend([cb_iso, cb_spk, cb_isosmoothed])
                self.container_gui[filename_short]["Checkbox"][isotope] = []
                self.container_gui[filename_short]["Checkbox"][isotope].extend([cb_iso, cb_spk, cb_isosmoothed])
            #
            ## RADIOBUTTONS
            self.container_var["plotting"][filename_short]["RB"] = [tk.IntVar(), tk.IntVar(), tk.IntVar()]
            rb_bg = SE(
                parent=self.parent, row_id=29, column_id=21, n_rows=1, n_columns=6, fg=self.blue_light,
                bg=self.blue_dark).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][0], value_rb=1, color_bg=self.blue_dark,
                fg=self.blue_light, text="Background", sticky="nesw", relief=tk.GROOVE,
                command=lambda var=self.container_var["plotting"][filename_short]["RB"][0],
                               value=1: self.change_radiobutton(var, value))
            rb_mat = SE(
                parent=self.parent, row_id=29, column_id=30, n_rows=1, n_columns=6, fg=self.brown_light,
                bg=self.brown_dark).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][0], value_rb=4,
                color_bg=self.brown_dark,
                fg=self.brown_light, text="Matrix", sticky="nesw", relief=tk.GROOVE,
                command=lambda var=self.container_var["plotting"][filename_short]["RB"][0],
                               value=4: self.change_radiobutton(var, value))
            rb_incl = SE(
                parent=self.parent, row_id=29, column_id=39, n_rows=1, n_columns=6, fg=self.slate_grey_light,
                bg=self.slate_grey_dark).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][0], value_rb=5,
                color_bg=self.slate_grey_dark,
                fg=self.slate_grey_light, text="Inclusion", sticky="nesw", relief=tk.GROOVE,
                command=lambda var=self.container_var["plotting"][filename_short]["RB"][0],
                               value=5: self.change_radiobutton(var, value))
            rb_spk = SE(
                parent=self.parent, row_id=29, column_id=48, n_rows=1, n_columns=6, fg=self.yellow_light,
                bg=self.yellow_dark).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][0], value_rb=3,
                color_bg=self.yellow_dark,
                fg=self.yellow_light, text="Spike Elimination", sticky="nesw", relief=tk.GROOVE,
                command=lambda var=self.container_var["plotting"][filename_short]["RB"][0],
                               value=3: self.change_radiobutton(var, value))
            rb_nslctn = SE(
                parent=self.parent, row_id=28, column_id=21, n_rows=1, n_columns=36, fg=self.green_light,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][0], value_rb=0,
                color_bg=self.green_medium,
                fg=self.green_light, text="No Selection", sticky="nesw", relief=tk.GROOVE)
            rb_01 = SE(
                parent=self.parent, row_id=28, column_id=66, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][1], value_rb=0,
                color_bg=self.green_medium,
                fg=self.green_light, text="Raw Data", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["plotting"][filename_short]["RB"][1]: self.change_rb_value(
                    var_rb))
            rb_02 = SE(
                parent=self.parent, row_id=29, column_id=66, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][1], value_rb=1,
                color_bg=self.green_medium,
                fg=self.green_light, text="Smoothed Data", sticky="nesw", relief=tk.GROOVE,
                command=lambda var_rb=self.container_var["plotting"][filename_short]["RB"][1]: self.change_rb_value(
                    var_rb))
            rb_03 = SE(
                parent=self.parent, row_id=31, column_id=66, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][2], value_rb=0,
                color_bg=self.green_medium,
                fg=self.green_light, text="Time-Signal Plot", sticky="nesw", relief=tk.GROOVE)
            rb_06 = SE(
                parent=self.parent, row_id=31, column_id=72, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][2], value_rb=3,
                color_bg=self.green_medium,
                fg=self.green_light, text="Time-Ratio Plot", sticky="nesw", relief=tk.GROOVE)
            rb_04 = SE(
                parent=self.parent, row_id=32, column_id=66, n_rows=1, n_columns=12, fg=self.green_light,
                bg=self.green_medium).create_radiobutton(
                var_rb=self.container_var["plotting"][filename_short]["RB"][2], value_rb=1,
                color_bg=self.green_medium,
                fg=self.green_light, text="Statistics", sticky="nesw", relief=tk.GROOVE)
            #
            self.container_elements["plotting"]["Radiobutton"].extend(
                [rb_bg, rb_mat, rb_incl, rb_spk, rb_nslctn, rb_01, rb_02, rb_03, rb_04, rb_06])
            self.container_gui[filename_short]["Radiobutton"]["General"].extend(
                [rb_bg, rb_mat, rb_incl, rb_spk, rb_nslctn, rb_01, rb_02, rb_03, rb_04, rb_06])
            #
            ## CHECKBOXES
            self.container_var["plotting"]["Integration Window"] = [tk.IntVar(), tk.IntVar(), tk.IntVar()]
            self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["BG"].set(1)
            self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["MAT"].set(1)
            self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["INCL"].set(1)
            self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["SPK"].set(1)
            self.container_var["plotting"]["Integration Window"][0].set(1)
            self.container_var["plotting"]["Integration Window"][1].set(1)
            self.container_var["plotting"]["Integration Window"][2].set(1)
            cb_iw_bg = SE(
                parent=self.parent, row_id=29, column_id=27, fg=self.blue_light, n_rows=1, n_columns=3,
                bg=self.blue_dark).create_simple_checkbox(
                var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["BG"],
                text="Show", set_sticky="", own_color=True, command=lambda
                    var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["BG"]:
                self.change_visibility_iw(var_cb))
            cb_iw_mat = SE(
                parent=self.parent, row_id=29, column_id=36, fg=self.brown_light, n_rows=1, n_columns=3,
                bg=self.brown_dark).create_simple_checkbox(
                var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["MAT"],
                text="Show", set_sticky="", own_color=True, command=lambda
                    var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["MAT"]:
                self.change_visibility_iw(var_cb))
            cb_iw_incl = SE(
                parent=self.parent, row_id=29, column_id=45, fg=self.red_light, n_rows=1, n_columns=3,
                bg=self.slate_grey_dark).create_simple_checkbox(
                var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["INCL"],
                text="Show", set_sticky="", own_color=True, command=lambda
                    var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["INCL"]:
                self.change_visibility_iw(var_cb))
            cb_iw_spk = SE(
                parent=self.parent, row_id=29, column_id=54, fg=self.yellow_light, n_rows=1, n_columns=3,
                bg=self.yellow_dark).create_simple_checkbox(
                var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["SPK"],
                text="Show", set_sticky="", own_color=True, command=lambda
                    var_cb=self.container_var["plotting"][self.filename_short]["Checkboxes"]["INTERVALS"]["SPK"]:
                self.change_visibility_iw(var_cb))
            #
            self.container_elements["plotting"]["Checkbox"].extend([cb_iw_bg, cb_iw_mat, cb_iw_incl, cb_iw_spk])
            self.container_gui[filename_short]["Checkbox"]["General"].extend([cb_iw_bg, cb_iw_mat, cb_iw_incl,
                                                                              cb_iw_spk])
            #
            ## BUTTONS
            btn_back = SE(
                parent=self.parent, row_id=38, column_id=66, n_rows=2, n_columns=12, fg=self.green_dark,
                bg=self.red_dark).create_simple_button(
                text="Back to Settings", bg_active=self.green_dark, fg_active=self.green_light,
                command=self.sub_fluidinclusions_settings)
            btn_rmv = SE(
                parent=self.parent, row_id=28, column_id=57, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.red_dark).create_simple_button(
                text="Remove Interval", bg_active=self.green_dark, fg_active=self.green_light,
                command=lambda var=self.container_var["plotting"][filename_short]["RB"][0]: self.delete_interval(
                    var))
            btn_all = SE(
                parent=self.parent, row_id=28, column_id=72, n_rows=1, n_columns=6, fg=self.green_dark,
                bg=self.green_medium).create_simple_button(
                text="Show All", bg_active=self.red_dark, fg_active=self.green_dark, command=self.show_all_lines)
            btn_none = SE(
                parent=self.parent, row_id=29, column_id=72, n_rows=1, n_columns=6, fg=self.green_dark,
                bg=self.green_medium).create_simple_button(
                text="Show None", bg_active=self.red_dark, fg_active=self.green_dark, command=self.hide_all_lines)
            btn_smthall = SE(
                parent=self.parent, row_id=34, column_id=66, n_rows=1, n_columns=6, fg=self.green_dark,
                bg=self.green_medium).create_simple_button(
                text="All Isotopes", bg_active=self.red_dark, fg_active=self.green_dark,
                command=self.smooth_all_isotopes)
            btn_smoothit = SE(
                parent=self.parent, row_id=34, column_id=72, n_rows=1, n_columns=6, fg=self.green_dark,
                bg=self.green_medium).create_simple_button(
                text="Smooth it", bg_active=self.red_dark, fg_active=self.green_dark,
                command=lambda var_setting="fi_setting": self.do_spike_elimination(var_setting))
            btn_cnfrm = SE(
                parent=self.parent, row_id=35, column_id=72, n_rows=1, n_columns=6, fg=self.green_dark,
                bg=self.green_medium).create_simple_button(
                text="Confirm Edits", bg_active=self.red_dark, fg_active=self.green_dark,
                command=lambda filename=self.file, filetype=self.file_type: self.confirm_edits(filename, filetype))
            btn_showspkelim = SE(
                parent=self.parent, row_id=35, column_id=66, n_rows=1, n_columns=6, fg=self.green_dark,
                bg=self.green_medium).create_simple_button(
                text="Update Data", bg_active=self.red_dark, fg_active=self.green_dark,
                command=lambda mode="FI": self.update_edited_datasets(mode))
            #
            self.container_elements["plotting"]["Button"].extend(
                [btn_back, btn_rmv, btn_all, btn_none, btn_smthall, btn_cnfrm, btn_showspkelim, btn_smoothit])
            self.container_gui[filename_short]["Button"]["General"].extend(
                [btn_back, btn_rmv, btn_all, btn_none, btn_smthall, btn_cnfrm, btn_showspkelim, btn_smoothit])
            #
            ## LISTBOXES and TREEVIEWS
            lb_bg, scrollbar_bg_x, scrollbar_bg_y = SE(
                parent=self.parent, row_id=30, column_id=21, n_rows=10, n_columns=9, fg=self.blue_dark,
                bg=self.blue_light).create_simple_listbox_grid()
            lb_mat, scrollbar_mat_x, scrollbar_mat_y = SE(
                parent=self.parent, row_id=30, column_id=30, n_rows=10, n_columns=9, fg=self.brown_dark,
                bg=self.brown_light).create_simple_listbox_grid()
            lb_incl, scrollbar_incl_x, scrollbar_incl_y = SE(
                parent=self.parent, row_id=30, column_id=39, n_rows=10, n_columns=9, fg=self.slate_grey_dark,
                bg=self.slate_grey_light).create_simple_listbox_grid()
            lb_spk, scrollbar_spk_x, scrollbar_spk_y = SE(
                parent=self.parent, row_id=30, column_id=48, n_rows=10, n_columns=9, fg=self.yellow_dark,
                bg=self.yellow_light).create_simple_listbox_grid()
            lb_isorat = SE(
                parent=self.parent, row_id=30, column_id=57, n_rows=10, n_columns=9, fg=self.slate_grey_dark,
                bg=self.slate_grey_light).create_treeview()
            #
            self.container_elements["plotting"]["Listbox"].extend([lb_bg, scrollbar_bg_x, scrollbar_bg_y,
                                                                   lb_mat, scrollbar_mat_x, scrollbar_mat_y,
                                                                   lb_incl, scrollbar_incl_x, scrollbar_incl_y,
                                                                   lb_spk, scrollbar_spk_x, scrollbar_spk_y,
                                                                   lb_isorat])
            self.container_listboxes[self.file_type][filename_short]["BG"] = [lb_bg, scrollbar_bg_x, scrollbar_bg_y]
            self.container_listboxes[self.file_type][filename_short]["MAT"] = [lb_mat, scrollbar_mat_x, scrollbar_mat_y]
            self.container_listboxes[self.file_type][filename_short]["INCL"] = [lb_incl, scrollbar_incl_x,
                                                                                scrollbar_incl_y]
            self.container_listboxes[self.file_type][filename_short]["SPK"] = [lb_spk, scrollbar_spk_x,
                                                                               scrollbar_spk_y]
            self.container_listboxes[self.file_type][filename_short]["ISORAT"] = lb_isorat
            #
            ## OPTION MENU
            if filename in self.container_var["STD"]:
                if self.container_var["STD"][filename]["IS"].get() != "Select IS":
                    var_text = self.container_var["STD"][filename]["IS"].get()
                    var_iso = self.container_var["STD"][filename]["IS"]
                    self.calculate_and_place_isotope_ratios(
                        var_is=self.container_var["STD"][filename]["IS"].get(), data=df_data, lb=lb_isorat, mode="FI")
                else:
                    var_iso = self.container_var["STD"][filename]["IS"]
                    var_text = self.container_lists["ISOTOPES"][0]
                    self.calculate_and_place_isotope_ratios(var_is=var_text, data=df_data, lb=lb_isorat)
            else:
                if self.container_var["SMPL"][filename]["IS"].get() != "Select IS":
                    var_text = self.container_var["SMPL"][filename]["IS"].get()
                    var_iso = self.container_var["SMPL"][filename]["IS"]
                    self.calculate_and_place_isotope_ratios(
                        var_is=self.container_var["SMPL"][filename]["IS"].get(), data=df_data, lb=lb_isorat, mode="FI")
                else:
                    var_iso = self.container_var["SMPL"][filename]["IS"]
                    var_text = self.container_lists["ISOTOPES"][0]
                    self.calculate_and_place_isotope_ratios(var_is=var_text, data=df_data, lb=lb_isorat)
            #
            opt_is = SE(
                parent=self.parent, row_id=29, column_id=57, n_rows=1, n_columns=9, fg=self.green_dark,
                bg=self.green_medium).create_option_isotope(
                var_iso=var_iso, option_list=self.container_lists["ISOTOPES"], text_set=var_text, fg_active=self.green_dark,
                bg_active=self.red_dark, command=lambda var_is=var_iso, data=df_data, lb=lb_isorat:
                self.calculate_and_place_isotope_ratios(var_is, data, lb))
            #
            self.container_elements["plotting"]["Option Menu"].append(opt_is)
            self.container_gui[filename_short]["Option Menu"]["General"].append(opt_is)
            #
            ## DIAGRAM
            if self.container_var["plotting"][filename_short]["RB"][1].get() == 0:
                if self.file_type == "STD":
                    if self.fast_track_std == True:
                        self.fig = self.diagrams_setup[self.file_type][filename_short]["FIG"]
                        self.ax = self.diagrams_setup[self.file_type][filename_short]["AX"]
                        self.fig_ratio = self.diagrams_setup[self.file_type][filename_short]["FIG_RATIO"]
                        self.ax_ratio = self.diagrams_setup[self.file_type][filename_short]["AX_RATIO"]
                        #
                        self.canvas_ratio = FigureCanvasTkAgg(self.fig_ratio, master=self.parent)
                    else:
                        self.fig = Figure(figsize=(10, 5), facecolor=self.green_light)
                        self.ax = self.fig.add_subplot()
                        self.fig_ratio = Figure(figsize=(10, 5), facecolor=self.green_light)
                        self.ax_ratio = self.fig_ratio.add_subplot()
                        #
                        self.container_diagrams[self.file_type][filename_short]["FIG"] = self.fig
                        self.container_diagrams[self.file_type][filename_short]["AX"] = self.ax
                        self.diagrams_setup[self.file_type][filename_short]["FIG"] = self.fig
                        self.diagrams_setup[self.file_type][filename_short]["AX"] = self.ax
                        #
                        self.container_diagrams[self.file_type][filename_short]["FIG_RATIO"] = self.fig_ratio
                        self.container_diagrams[self.file_type][filename_short]["AX_RATIO"] = self.ax_ratio
                        self.diagrams_setup[self.file_type][filename_short]["FIG_RATIO"] = self.fig_ratio
                        self.diagrams_setup[self.file_type][filename_short]["AX_RATIO"] = self.ax_ratio
                        #
                        self.canvas_ratio = FigureCanvasTkAgg(self.fig_ratio, master=self.parent)
                elif self.file_type == "SMPL":
                    if self.fast_track_smpl == True:
                        self.fig = self.diagrams_setup[self.file_type][filename_short]["FIG"]
                        self.ax = self.diagrams_setup[self.file_type][filename_short]["AX"]
                        self.fig_ratio = self.diagrams_setup[self.file_type][filename_short]["FIG_RATIO"]
                        self.ax_ratio = self.diagrams_setup[self.file_type][filename_short]["AX_RATIO"]
                        #
                        self.canvas_ratio = FigureCanvasTkAgg(self.fig_ratio, master=self.parent)
                    else:
                        self.fig = Figure(figsize=(10, 5), facecolor=self.green_light)
                        self.ax = self.fig.add_subplot()
                        self.fig_ratio = Figure(figsize=(10, 5), facecolor=self.green_light)
                        self.ax_ratio = self.fig_ratio.add_subplot()
                        #
                        self.container_diagrams[self.file_type][filename_short]["FIG"] = self.fig
                        self.container_diagrams[self.file_type][filename_short]["AX"] = self.ax
                        self.diagrams_setup[self.file_type][filename_short]["FIG"] = self.fig
                        self.diagrams_setup[self.file_type][filename_short]["AX"] = self.ax
                        #
                        self.container_diagrams[self.file_type][filename_short]["FIG_RATIO"] = self.fig_ratio
                        self.container_diagrams[self.file_type][filename_short]["AX_RATIO"] = self.ax_ratio
                        self.diagrams_setup[self.file_type][filename_short]["FIG_RATIO"] = self.fig_ratio
                        self.diagrams_setup[self.file_type][filename_short]["AX_RATIO"] = self.ax_ratio
                        #
                        self.canvas_ratio = FigureCanvasTkAgg(self.fig_ratio, master=self.parent)
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    ln = self.ax.plot(
                        self.times, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                        visible=True)
                    self.lines["raw"][isotope] = ln
                    self.diagrams_setup[self.file_type][filename_short]["Time Signal Raw"][isotope] = ln
                self.ax.grid(True)
                self.ax.set_yscale("log")
                self.ax.set_xlim(left=0, right=x_max)
                self.ax.set_xticks(np.arange(0, x_max, 10))
                self.ax.set_ylim(top=1.5 * y_max)
                self.ax.set_axisbelow(True)
                self.ax.set_xlabel("Time (s)", labelpad=0.5)
                self.ax.set_ylabel("Signal (cps)", labelpad=0.5)

                self.fig.subplots_adjust(bottom=0.125, top=0.975, left=0.075, right=0.975)

                legend = self.ax.legend(fontsize="x-small", framealpha=1.0, edgecolor="white",
                                        bbox_to_anchor=(0.10, 0.010), loc=3, borderaxespad=0,
                                        bbox_transform=plt.gcf().transFigure,
                                        ncol=int(len(self.container_lists["ISOTOPES"]) / 2 + 1),
                                        facecolor="white")
                plt.rcParams["savefig.facecolor"] = "white"
                plt.rcParams["savefig.dpi"] = 300

                self.canvas = FigureCanvasTkAgg(self.fig, master=self.parent)
                self.canvas.get_tk_widget().grid(
                    row=0, column=21, rowspan=26, columnspan=59, sticky="nesw")
                self.toolbarFrame = tk.Frame(master=self.parent)
                self.toolbarFrame.grid(
                    row=26, column=21, rowspan=2, columnspan=59, sticky="w")
                self.toolbar = NavigationToolbar2Tk(self.canvas, self.toolbarFrame)
                self.toolbar.config(background=self.green_light)
                self.toolbar._message_label.config(background=self.green_light)
                self.toolbar.winfo_children()[-2].config(background=self.green_light)

                self.container_files[self.file_type][filename_short]["Time Signal Plot"] = [self.canvas,
                                                                                            self.toolbarFrame]
                self.container_files[self.file_type][filename_short]["Plot"] = True
                self.diagrams_setup[self.file_type][filename_short]["CANVAS"] = self.canvas
                self.diagrams_setup[self.file_type][filename_short]["TOOLBARFRAME"] = self.toolbarFrame
                #
                if self.container_settings["FI"]["Start BG"].get() != "":
                    filename = self.file.split("/")[-1]
                    x_nearest_start = min(
                        self.times, key=lambda x: abs(x - float(self.container_settings["FI"]["Start BG"].get())))
                    x_nearest_end = min(
                        self.times, key=lambda x: abs(x - float(self.container_settings["FI"]["End BG"].get())))
                    index_start = self.times[self.times == x_nearest_start].index[0]
                    index_end = self.times[self.times == x_nearest_end].index[0]
                    #
                    self.bg_id += 1
                    self.container_listboxes[self.file_type][filename]["BG"][0].insert(
                        tk.END,
                        "BG" + str(self.bg_id) + " [" + str(x_nearest_start) + "-" + str(x_nearest_end) + "]")
                    #
                    box_bg = self.ax.axvspan(
                        x_nearest_start, x_nearest_end, alpha=0.25, color=self.blue_dark)
                    box_bg_ratio = self.ax_ratio.axvspan(
                        x_nearest_start, x_nearest_end, alpha=0.25, color=self.blue_dark)
                    #
                    self.container_helper["limits BG"][self.file]["ID"].append(self.bg_id)
                    self.container_helper["limits BG"][self.file]["type"].append("custom")
                    self.container_helper["limits BG"][self.file][str(self.bg_id)] = box_bg
                    self.container_helper["limits BG Ratio"][self.file][str(self.bg_id)] = box_bg_ratio
                    #
                    self.canvas.draw()
                    #
                    if self.file_type == "STD":
                        self.container_helper["STD"][filename]["BG"][self.bg_id] = {
                            "Times": [x_nearest_start, x_nearest_end],
                            "Positions": [index_start, index_end],
                            "Object": [box_bg, box_bg_ratio]}
                        self.container_helper["positions"]["BG STD"][filename].append(
                            [x_nearest_start, x_nearest_end, index_start, index_end, self.bg_id])
                    elif self.file_type == "SMPL":
                        self.container_helper["SMPL"][filename]["BG"][self.bg_id] = {
                            "Times": [x_nearest_start, x_nearest_end],
                            "Positions": [index_start, index_end],
                            "Object": [box_bg, box_bg_ratio]}
                        self.container_helper["positions"]["BG SMPL"][filename].append(
                            [x_nearest_start, x_nearest_end, index_start, index_end, self.bg_id])
                    #
                if self.container_settings["FI"]["Start MAT"].get() != "":
                    filename = self.file.split("/")[-1]
                    x_nearest_start = min(self.times,
                                          key=lambda x: abs(
                                              x - float(self.container_settings["FI"]["Start MAT"].get())))
                    x_nearest_end = min(self.times,
                                        key=lambda x: abs(
                                            x - float(self.container_settings["FI"]["End MAT"].get())))
                    index_start = self.times[self.times == x_nearest_start].index[0]
                    index_end = self.times[self.times == x_nearest_end].index[0]
                    #
                    self.mat_id += 1
                    self.container_listboxes[self.file_type][filename]["MAT"][0].insert(
                        tk.END,
                        "MAT" + str(self.mat_id) + " [" + str(x_nearest_start) + "-" + str(x_nearest_end) + "]")
                    #
                    box_mat = self.ax.axvspan(
                        x_nearest_start, x_nearest_end, alpha=0.25, color=self.brown_dark)
                    box_mat_ratio = self.ax_ratio.axvspan(
                        x_nearest_start, x_nearest_end, alpha=0.25, color=self.brown_dark)
                    #
                    self.container_helper["limits MAT"][self.file]["ID"].append(self.mat_id)
                    self.container_helper["limits MAT"][self.file]["type"].append("custom")
                    self.container_helper["limits MAT"][self.file][str(self.mat_id)] = box_mat
                    self.container_helper["limits MAT Ratio"][self.file][str(self.mat_id)] = box_mat_ratio
                    #
                    self.canvas.draw()
                    #
                    if self.file_type == "STD":
                        self.container_helper["STD"][filename]["MAT"][self.mat_id] = {
                            "Times": [x_nearest_start, x_nearest_end],
                            "Positions": [index_start, index_end],
                            "Object": [box_mat, box_mat_ratio]}
                        self.container_helper["positions"]["MAT STD"][filename].append(
                            [x_nearest_start, x_nearest_end, index_start, index_end, self.mat_id])
                    elif self.file_type == "SMPL":
                        self.container_helper["SMPL"][filename]["MAT"][self.mat_id] = {
                            "Times": [x_nearest_start, x_nearest_end],
                            "Positions": [index_start, index_end],
                            "Object": [box_mat, box_mat_ratio]}
                        self.container_helper["positions"]["MAT SMPL"][filename].append(
                            [x_nearest_start, x_nearest_end, index_start, index_end, self.mat_id])
                    #
                if self.container_settings["FI"]["Start INCL"].get() != "":
                    filename = self.file.split("/")[-1]
                    x_nearest_start = min(self.times,
                                          key=lambda x: abs(
                                              x - float(self.container_settings["FI"]["Start INCL"].get())))
                    x_nearest_end = min(self.times,
                                        key=lambda x: abs(
                                            x - float(self.container_settings["FI"]["End INCL"].get())))
                    index_start = self.times[self.times == x_nearest_start].index[0]
                    index_end = self.times[self.times == x_nearest_end].index[0]
                    #
                    self.incl_id += 1
                    self.container_listboxes[self.file_type][filename]["INCL"][0].insert(
                        tk.END,
                        "INCL" + str(self.incl_id) + " [" + str(x_nearest_start) + "-" + str(x_nearest_end) + "]")
                    box_incl = self.ax.axvspan(x_nearest_start, x_nearest_end, alpha=0.25, color=self.slate_grey_dark)
                    self.container_helper["limits INCL"][self.file]["ID"].append(self.incl_id)
                    self.container_helper["limits INCL"][self.file]["type"].append("custom")
                    self.container_helper["limits INCL"][self.file][str(self.incl_id)] = box_incl
                    self.canvas.draw()
                    #
                    if self.file_type == "STD":
                        self.container_helper["STD"][filename]["INCL"][self.incl_id] = {
                            "Times": [x_nearest_start, x_nearest_end],
                            "Positions": [index_start, index_end],
                            "Object": box_incl}
                        self.container_helper["positions"]["INCL STD"][filename].append(
                            [x_nearest_start, x_nearest_end, index_start, index_end, self.incl_id])
                    elif self.file_type == "SMPL":
                        self.container_helper["SMPL"][filename]["INCL"][self.incl_id] = {
                            "Times": [x_nearest_start, x_nearest_end],
                            "Positions": [index_start, index_end],
                            "Object": box_incl}
                        self.container_helper["positions"]["INCL SMPL"][filename].append(
                            [x_nearest_start, x_nearest_end, index_start, index_end, self.incl_id])
                    #
                if self.file_type == "STD" and self.fast_track_std == True:
                    self.container_listboxes[self.file_type][filename_short]["SPK"][0].insert(
                        tk.END, "[" + ", ".join(self.container_lists["ISOTOPES"]) + "] #" + str(1) + " [" + str(
                            self.container_helper["STD"][filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1]["Times"][
                                0])
                                + "-" + str(self.container_helper["STD"][filename_short]["SPK"][
                                                self.container_lists["ISOTOPES"][0]][1]["Times"][1]) + "]")
                    box_spk = self.container_helper["STD"][filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1][
                        "Object"]
                    self.diagrams_setup[self.file_type][filename_short]["CANVAS"].draw()
                    self.show_smoothed_data()
                elif self.file_type == "SMPL" and self.fast_track_smpl == True:
                    self.container_listboxes[self.file_type][filename_short]["SPK"][0].insert(
                        tk.END, "[" + ", ".join(self.container_lists["ISOTOPES"]) + "] #" + str(1) + " [" + str(
                            self.container_helper["SMPL"][filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1]["Times"][
                                0])
                                + "-" + str(self.container_helper["SMPL"][filename_short]["SPK"][
                                                self.container_lists["ISOTOPES"][0]][1]["Times"][1]) + "]")
                    box_spk = self.container_helper["SMPL"][filename_short]["SPK"][self.container_lists["ISOTOPES"][0]][1][
                        "Object"]
                    self.diagrams_setup[self.file_type][filename_short]["CANVAS"].draw()
                    self.show_smoothed_data()
            #
            self.canvas.mpl_connect(
                "button_press_event", lambda event, var=self.container_var["plotting"][filename_short]["RB"][0],
                                             filename=filename_short, ratio_mode=False:
                self.onclick(var, filename, ratio_mode, event))
        else:
            ## Reconstruction
            try:
                # FRAMES
                for frm_item in self.container_gui[filename_short]["Frame"]["General"]:
                    frm_item.grid()
                # LABELS
                for lbl_item in self.container_gui[filename_short]["Label"]["General"]:
                    lbl_item.grid()
                # CHECKBOXES
                for cb_item in self.container_gui[filename_short]["Checkbox"]["General"]:
                    cb_item.grid()
                for isotope in self.container_lists["ISOTOPES"]:
                    for cb_iso_item in self.container_gui[filename_short]["Checkbox"][isotope]:
                        cb_iso_item.grid()
                # RADIOBUTTONS
                for rbtn_item in self.container_gui[filename_short]["Radiobutton"]["General"]:
                    rbtn_item.grid()
                # BUTTONS
                for btn_item in self.container_gui[filename_short]["Button"]["General"]:
                    btn_item.grid()
                # ENTRY
                for entr_item in self.container_gui[filename_short]["Entry"]["General"]:
                    entr_item.grid()
                # OPTION MENUS
                for optmn_item in self.container_gui[filename_short]["Option Menu"]["General"]:
                    optmn_item.grid()
                #
                for lb_item in self.container_listboxes[self.file_type][filename_short]["BG"]:
                    lb_item.grid()
                for lb_item in self.container_listboxes[self.file_type][filename_short]["MAT"]:
                    lb_item.grid()
                for lb_item in self.container_listboxes[self.file_type][filename_short]["INCL"]:
                    lb_item.grid()
                for lb_item in self.container_listboxes[self.file_type][filename_short]["SPK"]:
                    lb_item.grid()
                self.container_listboxes[self.file_type][filename_short]["ISORAT"].grid()
                #
                self.fig = self.diagrams_setup[self.file_type][filename_short]["FIG"]
                self.ax = self.diagrams_setup[self.file_type][filename_short]["AX"]
                self.canvas = self.diagrams_setup[self.file_type][filename_short]["CANVAS"]
                self.toolbarFrame = self.diagrams_setup[self.file_type][filename_short]["TOOLBARFRAME"]
                self.canvas.get_tk_widget().grid(row=0, column=21, rowspan=26, columnspan=59, sticky="nesw")
                self.toolbarFrame.grid(row=26, column=21, rowspan=2, columnspan=59, sticky="w")
                #
            except:
                print("Error! Fehler mit Plotting Recreation")
            #
            self.diagrams_setup[self.file_type][filename_short]["CANVAS"].draw()
            #
            if self.fast_track_std == True:
                self.show_smoothed_data()
            if self.fast_track_smpl == True:
                self.show_smoothed_data()
    #
    def build_plugin_list(self, mode="fi"):
        path = os.getcwd()
        parent = os.path.dirname(path)
        list_files = os.listdir(path=path+str("/plugins/"))
        for file in list_files:
            if mode == "fi":
                key = re.search("(fi_method_)(\w+)", file)
                if key:
                    if key.group(1) == "fi_method_":
                        name_parts = key.group(2).split("_")
                        name = ""
                        for index, part in enumerate(name_parts):
                            if index < len(name_parts)-1:
                                name += str(part.capitalize()+" ")
                            else:
                                name += str(part.capitalize())
                        self.container_lists["Plugins FI"]["Names"].append(name)
                        self.container_lists["Plugins FI"]["Files"].append(file)
            elif mode == "mi":
                key = re.search("(mi_method_)(\w+)", file)
                if key:
                    if key.group(1) == "mi_method_":
                        name_parts = key.group(2).split("_")
                        name = ""
                        for index, part in enumerate(name_parts):
                            if index < len(name_parts) - 1:
                                name += str(part.capitalize() + " ")
                            else:
                                name += str(part.capitalize())
                        self.container_lists["Plugins MI"]["Names"].append(name)
                        self.container_lists["Plugins MI"]["Files"].append(file)
            elif mode == "se":
                key = re.search("(se_method_)(\w+)", file)
                if key:
                    if key.group(1) == "se_method_":
                        name_parts = key.group(2).split("_")
                        name = ""
                        for index, part in enumerate(name_parts):
                            if index < len(name_parts) - 1:
                                name += str(part.capitalize() + " ")
                            else:
                                name += str(part.capitalize())
                        self.container_lists["Plugins SE"]["Names"].append(name)
                        self.container_lists["Plugins SE"]["Files"].append(file)
        #
        ## TESTING
        # print("TESTING: Plugin Detection")
        # key_list = ["Plugins FI", "Plugins MI", "Plugins SE"]
        # for key in key_list:
        #     print(key)
        #     for key2, values in self.container_lists[key].items():
        #         print(key2, values)
        #
        #
    def create_dwell_time_window(self):
        ## Window Settings
        window_dwell = tk.Toplevel(self.parent)
        window_dwell.title("Dwell Times Setup")
        window_dwell.geometry("600x400+0+0")
        window_dwell.resizable(False, False)
        window_dwell["bg"] = self.green_light
        #
        window_width = 600
        window_heigth = 400
        row_min = 25
        n_rows = int(window_heigth / row_min)
        column_min = 20
        n_columns = int(window_width / column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(window_dwell, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(window_dwell, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            window_dwell.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            window_dwell.grid_columnconfigure(i, minsize=column_min)
        #
        n_isotopes = len(self.container_lists["ISOTOPES"])
        n_columns = 3
        a = n_isotopes / n_columns
        a_int = int(a)
        b = n_isotopes - (n_columns - 1) * a_int
        #
        ## Labels
        lbl_01 = SE(
            parent=window_dwell, row_id=0, column_id=0, n_rows=1, n_columns=2*n_columns*4, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Dwell Time Setup", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=window_dwell, row_id=1, column_id=0, n_rows=1, n_columns=8, fg=self.green_light,
            bg=self.green_medium).create_simple_label(
            text="Default Dwell Time", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        self.container_elements["dwell_times"]["Label"].extend([lbl_01, lbl_02])
        #
        if self.container_var["dwell_times"]["Entry"]["Default"].get() != "0.01":
            var_text = self.container_var["dwell_times"]["Entry"]["Default"].get()
        else:
            var_text = "0.01"
        entr_dwell = SE(
            parent=window_dwell, row_id=1, column_id=8, n_rows=1, n_columns=4,
            fg=self.green_light, bg=self.green_dark).create_simple_entry(
            var=self.container_var["dwell_times"]["Entry"]["Default"], text_default=var_text,
            command=lambda event, var_isotope=None, mode="Default":
            self.change_dwell_times(var_isotope, mode, event))
        #
        self.container_elements["dwell_times"]["Entry"].append(entr_dwell)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"][:b]):
            lbl_isotope = SE(
                parent=window_dwell, row_id=3 + index, column_id=0, n_rows=1, n_columns=4, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text=isotope, relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            if self.container_var["dwell_times"]["Entry"][isotope].get() != "0.01":
                var_text = self.container_var["dwell_times"]["Entry"][isotope].get()
            else:
                var_text = "0.01"
            entr_dwell = SE(
                parent=window_dwell, row_id=3 + index, column_id=4, n_rows=1, n_columns=4,
                fg=self.green_light, bg=self.green_dark).create_simple_entry(
                var=self.container_var["dwell_times"]["Entry"][isotope], text_default=var_text,
                command=lambda event, var_isotope=isotope, mode="Specific":
                self.change_dwell_times(var_isotope, mode, event))
            #
            self.container_elements["dwell_times"]["Label"].append(lbl_isotope)
            self.container_elements["dwell_times"]["Entry"].append(entr_dwell)
            #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"][b:int(b+a_int)]):
            lbl_isotope = SE(
                parent=window_dwell, row_id=3 + index, column_id=8, n_rows=1, n_columns=4, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text=isotope, relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            if self.container_var["dwell_times"]["Entry"][isotope].get() != "0.01":
                var_text = self.container_var["dwell_times"]["Entry"][isotope].get()
            else:
                var_text = "0.01"
            entr_dwell = SE(
                parent=window_dwell, row_id=3 + index, column_id=12, n_rows=1, n_columns=4,
                fg=self.green_light, bg=self.green_dark).create_simple_entry(
                var=self.container_var["dwell_times"]["Entry"][isotope], text_default=var_text,
                command=lambda event, var_isotope=isotope, mode="Specific":
                self.change_dwell_times(var_isotope, mode, event))
            #
            self.container_elements["dwell_times"]["Label"].append(lbl_isotope)
            self.container_elements["dwell_times"]["Entry"].append(entr_dwell)
            #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"][-a_int:]):
            lbl_isotope = SE(
                parent=window_dwell, row_id=3 + index, column_id=16, n_rows=1, n_columns=4, fg=self.green_light,
                bg=self.green_medium).create_simple_label(
                text=isotope, relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            if self.container_var["dwell_times"]["Entry"][isotope].get() != "0.01":
                var_text = self.container_var["dwell_times"]["Entry"][isotope].get()
            else:
                var_text = "0.01"
            entr_dwell = SE(
                parent=window_dwell, row_id=3 + index, column_id=20, n_rows=1, n_columns=4,
                fg=self.green_light, bg=self.green_dark).create_simple_entry(
                var=self.container_var["dwell_times"]["Entry"][isotope], text_default=var_text,
                command=lambda event, var_isotope=isotope, mode="Specific":
                self.change_dwell_times(var_isotope, mode, event))
            #
            self.container_elements["dwell_times"]["Label"].append(lbl_isotope)
            self.container_elements["dwell_times"]["Entry"].append(entr_dwell)
    #
    def change_dwell_times(self, var_isotope, mode, event):
        if mode == "Default":
            value = self.container_var["dwell_times"]["Entry"]["Default"].get()
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["dwell_times"]["Entry"][isotope].set(value)
        elif mode == "Specific":
            value = self.container_var["dwell_times"]["Entry"][var_isotope].get()
            self.container_var["dwell_times"]["Entry"][var_isotope].set(value)
    #
    def detect_signal_interval(self, mode="BG"):
        data_interval_detection = {}
        data_calc = {}
        #
        list_files = []
        list_files.extend(self.container_lists["STD"]["Long"])
        list_files.extend(self.container_lists["SMPL"]["Long"])
        #
        for file_long in list_files:
            df_data = self.load_and_assign_data(filename=file_long)
            dataset_time = list(df_data.iloc[:, 0])
            file_short = file_long.split("/")[-1]
            #
            condition = False
            index_isotope = 0
            isotope_is = self.container_var["IS"]["Default STD"].get()
            #
            if isotope_is == "Select IS":
                file_dummy = file_long
                df_data_dummy = self.load_and_assign_data(filename=file_dummy)
                #
                max_values = {"Last": 0}
                for isotope in list(df_data_dummy.keys())[1:]:
                    dataset_isotope = list(df_data[isotope])
                    if np.mean(dataset_isotope) > max_values["Last"]:
                        max_values.clear()
                        max_values[isotope] = np.mean(dataset_isotope)
                        max_values["Last"] = np.mean(dataset_isotope)
                #
                del max_values["Last"]
                isotope_is = list(max_values.keys())[0]
            else:
                max_values = {"Last": 0}
                #
                for isotope in list(df_data.keys())[1:]:
                    dataset_isotope = list(df_data[isotope])
                    if np.mean(dataset_isotope) > max_values["Last"]:
                        max_values.clear()
                        max_values[isotope] = np.mean(dataset_isotope)
                        max_values["Last"] = np.mean(dataset_isotope)
                #
                del max_values["Last"]
                isotope_is = list(max_values.keys())[0]
            #
            while condition == False:
                n = 0
                if file_short not in data_interval_detection:
                    data_interval_detection[file_short] = {"BG": {"Start": None, "End": None, "Index": None},
                                                           "MAT": {"Start": None, "End": None, "Index": None}}
                    data_calc[file_short] = {"Time": [], "Cumulative Average": [], "Change": [], "Ratio": []}
                #
                dataset_isotope = list(df_data[isotope_is])
                condition_2 = False
                index_2 = 10
                while condition_2 == False:
                    mean_first10 = np.mean(dataset_isotope[:index_2])
                    if mean_first10 > 0:
                        condition_2 = True
                    else:
                        index_2 += 1
                #
                for index, value_time in enumerate(dataset_time):
                    data_calc[file_short]["Time"].append(value_time)
                    #
                    if index > 1:
                        value_cumulavg = np.mean(dataset_isotope[:index+1])
                        data_calc[file_short]["Cumulative Average"].append(value_cumulavg)
                        value_change = value_cumulavg - data_calc[file_short]["Cumulative Average"][-2]
                        data_calc[file_short]["Change"].append(value_change)
                        value_ratio = value_cumulavg/mean_first10
                        data_calc[file_short]["Ratio"].append(value_ratio)
                    elif index == 1:
                        value_cumulavg = np.mean(dataset_isotope[:index])
                        data_calc[file_short]["Cumulative Average"].append(value_cumulavg)
                        value_change = value_cumulavg - data_calc[file_short]["Cumulative Average"][0]
                        data_calc[file_short]["Change"].append(value_change)
                        value_ratio = value_cumulavg/mean_first10
                        data_calc[file_short]["Ratio"].append(value_ratio)
                    elif index == 0:
                        value_cumulavg = np.mean(dataset_isotope[0])
                        data_calc[file_short]["Cumulative Average"].append(value_cumulavg)
                        value_change = 0.0
                        data_calc[file_short]["Change"].append(value_change)
                        value_ratio = value_cumulavg/mean_first10
                        data_calc[file_short]["Ratio"].append(value_ratio)
                    #
                    if value_ratio > 20 and data_interval_detection[file_short]["BG"]["End"] == None:
                        offset_bg_start = self.container_var["General Settings"]["BG Offset Start"].get()
                        offset_bg_end = self.container_var["General Settings"]["BG Offset End"].get()
                        offset_mat_start = self.container_var["General Settings"]["MAT Offset Start"].get()
                        #
                        data_interval_detection[file_short]["BG"]["Start"] = dataset_time[offset_bg_start]
                        #
                        index_time = dataset_time.index(value_time)
                        data_interval_detection[file_short]["BG"]["End"] = dataset_time[index_time - offset_bg_end]
                        data_interval_detection[file_short]["MAT"]["Start"] = dataset_time[index_time + offset_mat_start]
                        #
                        index_start = dataset_time.index(dataset_time[offset_bg_start])
                        index_end = dataset_time.index(dataset_time[index_time - offset_bg_end])
                        data_interval_detection[file_short]["BG"]["Index"] = [index_start, index_end]
                        #
                        index_start_mat = dataset_time.index(dataset_time[index_time + offset_mat_start])
                    #
                    if value_change < 0 and index > 0.5*len(dataset_time) \
                            and data_interval_detection[file_short]["MAT"]["End"] == None:
                        offset_mat_end = self.container_var["General Settings"]["MAT Offset End"].get()
                        #
                        index_time = dataset_time.index(value_time)
                        data_interval_detection[file_short]["MAT"]["End"] = dataset_time[index_time - offset_mat_end]
                        #
                        index_end = dataset_time.index(dataset_time[index_time - offset_mat_end])
                        data_interval_detection[file_short]["MAT"]["Index"] = [index_start_mat, index_end]
                #
                for key1, value1 in data_interval_detection[file_short].items():
                    if key1 == mode:
                        for key2, value2 in value1.items():
                            if value2 != None:
                                n += 1
                #
                if n == 3:
                    condition = True
                else:
                    index_isotope += 1
        #
        if mode == "BG":
            if self.pysills_mode == "MA":
                self.container_var["ma_setting"]["Time BG Start"].set("auto-detection used")
                self.container_var["ma_setting"]["Time BG End"].set("auto-detection used")
            else:
                if self.pysills_mode == "FI":
                    self.container_var["fi_setting"]["Time BG Start"].set("auto-detection used")
                    self.container_var["fi_setting"]["Time BG End"].set("auto-detection used")
                else:
                    self.container_var["mi_setting"]["Time BG Start"].set("auto-detection used")
                    self.container_var["mi_setting"]["Time BG End"].set("auto-detection used")
            #
            self.autodetection_bg = True
        elif mode == "MAT":
            self.container_var["ma_setting"]["Time MAT Start"].set("auto-detection used")
            self.container_var["ma_setting"]["Time MAT End"].set("auto-detection used")
            self.autodetection_sig = True
        #
        for filename, dataset in data_interval_detection.items():
            if filename in self.container_lists["STD"]["Short"]:
                filetype = "STD"
            elif filename in self.container_lists["SMPL"]["Short"]:
                filetype = "SMPL"
            #
            t_start = dataset[mode]["Start"]
            t_end = dataset[mode]["End"]
            index_start = dataset[mode]["Index"][0]
            index_end = dataset[mode]["Index"][1]
            #
            if self.pysills_mode == "MA23":
                self.container_helper[filetype][filename][mode][1] = {
                    "Times": [t_start, t_end],
                    "Positions": [index_start, index_end],
                    "Object": [None, None]}
            else:
                self.container_helper[filetype][filename][mode]["Content"][1] = {
                    "Times": [t_start, t_end], "Indices": [index_start, index_end], "Object": None}
                self.container_helper[filetype][filename][mode]["ID"] += 1
                self.container_helper[filetype][filename][mode]["Indices"].append(1)
    #
    def internal_standard_concentration_setup(self):
        try:
            self.srm_isotopes
        except:
            self.srm_isotopes = {}
            for isotope in self.container_lists["ISOTOPES"]:
                self.srm_isotopes[isotope] = {}
                var_srm = self.container_var["SRM"][isotope].get()
                key_element = re.search("(\D+)(\d+)", isotope)
                var_element = key_element.group(1)
                self.srm_isotopes[isotope]["SRM"] = var_srm
                if var_element in self.srm_actual[var_srm]:
                    self.srm_isotopes[isotope]["Concentration"] = self.srm_actual[var_srm][var_element]
                else:
                    self.srm_isotopes[isotope]["Concentration"] = 0.0
        #
        ## Window Settings
        window_issetup = tk.Toplevel(self.parent)
        window_issetup.title("Check-Up - Internal Standard Setup")
        window_issetup.geometry("420x450+0+0")
        window_issetup.resizable(False, False)
        window_issetup["bg"] = self.bg_colors["Super Dark"]
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
        #
        window_width = 420
        window_heigth = 450
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(window_issetup, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(window_issetup, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            window_issetup.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            window_issetup.grid_columnconfigure(i, minsize=column_min)
        #
        if len(self.gui_subwindows["Mineral Analysis"]["Check IS"]["Label"]["Permanent"]) > 0:
            gui_elements = ["Label", "Entry", "Option Menu"]
            #
            for gui_element in gui_elements:
                self.gui_subwindows["Mineral Analysis"]["Check IS"][gui_element]["Permanent"].clear()
        #
        if len(self.gui_subwindows["Mineral Analysis"]["Check IS"]["Label"]["Permanent"]) == 0:
            ## LABELS
            lbl_header_smpl = SE(
                parent=window_issetup, row_id=0, column_id=0, n_rows=1,
                n_columns=20, fg=accent_fg, bg=accent_bg).create_simple_label(
                text="Internal Standard Setup", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            self.gui_subwindows["Mineral Analysis"]["Check IS"]["Label"]["Permanent"].extend(
                [lbl_header_smpl])
            #
            frm_iso = SE(
                parent=window_issetup, row_id=1, column_id=0, n_rows=15, n_columns=20, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_frame()
            vsb_iso = tk.Scrollbar(master=frm_iso, orient="vertical")
            text_iso = tk.Text(
                master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Light"])
            vsb_iso.config(command=text_iso.yview)
            vsb_iso.pack(side="right", fill="y")
            text_iso.pack(side="left", fill="both", expand=True)
            #
            for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
                file = self.container_lists["SMPL"]["Long"][index]
                #
                lbl_i = tk.Label(frm_iso, text=file_smpl, bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"])
                text_iso.window_create("end", window=lbl_i)
                text_iso.insert("end", "\t")
                #
                if len(self.container_lists["Possible IS"]) == 0:
                    var_list_is = self.container_lists["ISOTOPES"]
                else:
                    var_list_is = self.container_lists["Possible IS"]
                #
                opt_is_i = tk.OptionMenu(
                    frm_iso, self.container_var["SMPL"][file]["IS Data"]["IS"], *var_list_is,
                    command=lambda var_is=self.container_var["SMPL"][file]["IS Data"]["IS"], var_file=file,
                                   mode="Specific": self.change_is_setup(var_is, var_file, mode))
                opt_is_i["menu"].config(
                    fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=accent_fg,
                    activebackground=accent_bg)
                opt_is_i.config(
                    bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=accent_bg,
                    activeforeground=accent_fg, highlightthickness=0)
                text_iso.window_create("end", window=opt_is_i)
                text_iso.insert("end", "\t")
                #
                #self.container_files["SMPL"][file_smpl_short]["IS Concentration"]
                if self.container_var["SMPL"][file]["IS Data"]["Concentration"].get() != "0.0":
                    var_txt_smpl_i = self.container_var["SMPL"][file]["IS Data"]["Concentration"].get()
                else:
                    var_txt_smpl_i = "0.0"
                self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(var_txt_smpl_i)
                entr_i = tk.Entry(
                    frm_iso, textvariable=self.container_var["SMPL"][file]["IS Data"]["Concentration"])
                text_iso.window_create("insert", window=entr_i)
                text_iso.insert("end", "\n")
            #
            ## Option Menu
            if self.container_var["IS"]["Default SMPL"].get() != "Select IS":
                var_text_smpl = self.container_var["IS"]["Default SMPL"].get()
            else:
                var_text_smpl = "Select IS"
            #
            opt_smpl_def = SE(
                parent=window_issetup, row_id=16, column_id=8, n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
                bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=self.container_var["IS"]["Default SMPL"], option_list=var_list_is,
                text_set=var_text_smpl, fg_active=self.green_dark, bg_active=self.red_dark,
                command=lambda var_is=self.container_var["IS"]["Default SMPL"]: self.change_is_setup(var_is))
            #
            self.gui_subwindows["Mineral Analysis"]["Check IS"]["Option Menu"]["Permanent"].append(opt_smpl_def)
            #
            ## Entry
            if self.container_var["IS SMPL Default"].get() != "0.0":
                var_txt_default_smpl = self.container_var["IS SMPL Default"].get()
            else:
                var_txt_default_smpl = "0.0"
            #
            entr_smpl_def = SE(
                parent=window_issetup, row_id=16, column_id=14, n_rows=1, n_columns=6, fg=self.green_light,
                bg=self.green_dark).create_simple_entry(
                var=self.container_var["IS SMPL Default"], text_default=var_txt_default_smpl,
                command=lambda event, var_entr=self.container_var["IS SMPL Default"]:
                self.change_is_value_default(var_entr, event))
            #
            self.gui_subwindows["Mineral Analysis"]["Check IS"]["Entry"]["Permanent"].append(entr_smpl_def)
    #
    def change_is_value_default(self, var_entr, event):
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_entr.get())
    #
    def change_is_setup(self, var_is, var_file=None, mode="Default"):
        if mode == "Default":
            try:
                value_is = self.mineral_chem["Unknown"][var_is]
            except:
                value_is = 0.0
            #
            self.container_var["IS SMPL Default"].set(value_is)
            #
            for file in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file]["IS Data"]["IS"].set(var_is)
                self.container_var["SMPL"][file]["IS Data"]["Concentration"].set(value_is)
                #
                file_short = file.split("/")[-1]
                self.container_files["SMPL"][file_short]["IS"].set(var_is)
                self.container_files["SMPL"][file_short]["IS Concentration"].set(value_is)
                #
                self.container_var["SMPL"][file]["IS"].set(var_is)
            #
        else:
            try:
                value_is = self.mineral_chem["Unknown"][var_is]
            except:
                value_is = 0.0
            #
            self.container_var["SMPL"][var_file]["IS Data"]["IS"].set(var_is)
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(value_is)
            #
            file_short = var_file.split("/")[-1]
            self.container_files["SMPL"][file_short]["IS"].set(var_is)
            self.container_files["SMPL"][file_short]["IS Concentration"].set(value_is)
            #
            self.container_var["SMPL"][var_file]["IS"].set(var_is)
    #
    def change_is_concentration(self, var_entr, var_file, event):
        file_short = var_file.split("/")[-1]
        self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(var_entr.get())
        self.container_files["SMPL"][file_short]["IS"].set(
            self.container_var["SMPL"][var_file]["IS Data"]["IS"].get())
        self.container_files["SMPL"][file_short]["IS Concentration"].set(
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].get())
    #
    def srm_window(self):
        ## Window Settings
        window_width = 860
        window_heigth = 625
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        window_srm = tk.Toplevel(self.parent)
        window_srm.title("SRM and Mineral Composition Data")
        window_srm.geometry(var_geometry)
        window_srm.resizable(False, False)
        window_srm["bg"] = self.green_light
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(window_srm, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(window_srm, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            window_srm.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            window_srm.grid_columnconfigure(i, minsize=column_min)
        #
        ###########################################################
        #
        ## Frames
        frm_01 = SE(
            parent=window_srm, row_id=0, column_id=0, n_rows=n_rows, n_columns=9,
            fg=self.green_light, bg=self.green_dark).create_frame(relief=tk.FLAT)
        #
        ## Labels
        lbl_01 = SE(
            parent=window_srm, row_id=0, column_id=0, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Select SRM", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=window_srm, row_id=2, column_id=0, n_rows=1, n_columns=9, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Select Mineral", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=window_srm, row_id=0, column_id=10, n_rows=1, n_columns=32, fg=self.green_light,
            bg=self.green_dark).create_simple_label(
            text="Periodic Table of the Elements", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=window_srm, row_id=n_rows - 4, column_id=0, n_rows=4, n_columns=9, fg=self.green_dark,
            bg=self.red_dark).create_simple_label(
            text="CAUTION!\n The mineral composition\n data reflects only the\n ideal composition of\n pure endmembers",
            relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## Option Menues
        list_srm = np.sort(self.list_srm)
        opt_srm = SE(
            parent=window_srm, row_id=1, column_id=0, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_simple_optionmenu(
            var_opt=self.container_var["srm_window"]["Option Menu"]["SRM"], var_default="Select SRM",
            var_list=list_srm, fg_active=self.green_dark, bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["srm_window"]["Option Menu"]["SRM"]:
            self.change_option_srm_window(var_opt))
        #
        list_minerals = np.sort(self.mineral_list)
        opt_mineral = SE(
            parent=window_srm, row_id=3, column_id=0, n_rows=1, n_columns=9, fg=self.green_dark,
            bg=self.green_medium).create_simple_optionmenu(
            var_opt=self.container_var["srm_window"]["Option Menu"]["Mineral"], var_default="Select Mineral",
            var_list=list_minerals, fg_active=self.green_dark, bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["srm_window"]["Option Menu"]["Mineral"]:
            self.change_option_srm_window(var_opt))
        #
        ## Labels and Entries
        start_column_pse = 10
        for index, element in enumerate(self.list_pse):
            if 0 <= index < 23:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1, column_id=start_column_pse, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1, column_id=start_column_pse + 3, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
            elif 23 <= index < 46:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1 - 23, column_id=start_column_pse + 8, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1 - 23, column_id=start_column_pse + 11, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
            elif 46 <= index < 69:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1 - 46, column_id=start_column_pse + 16, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1 - 46, column_id=start_column_pse + 19, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
            elif 69 <= index < 92:
                lbl_i = SE(
                    parent=window_srm, row_id=index + 1 - 69, column_id=start_column_pse + 24, n_rows=1, n_columns=3,
                    fg=self.green_light, bg=self.green_medium).create_simple_label(
                    text=str(index + 1) + " " + element, relief=tk.GROOVE, fontsize="sans 10 bold", anchor="w")
                #
                if element not in self.container_var["srm_window"]["Entry"]:
                    self.container_var["srm_window"]["Entry"][element] = tk.StringVar()
                #
                entr_i = SE(
                    parent=window_srm, row_id=index + 1 - 69, column_id=start_column_pse + 27, n_rows=1, n_columns=5,
                    fg=self.green_light, bg=self.green_dark).create_simple_entry(
                    var=self.container_var["srm_window"]["Entry"][element], text_default="0.0", command=None)
    #
    def change_option_srm_window(self, var_opt):
        self.srm_values = {}
        self.srm_values[var_opt] = {}
        #
        if var_opt in self.list_srm:
            self.container_var["srm_window"]["Option Menu"]["Mineral"].set("Select Mineral")
            #
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_values)
            #
            for element in self.list_pse:
                if element in self.srm_values[var_opt].keys():
                    self.container_var["srm_window"]["Entry"][element].set(self.srm_values[var_opt][element])
                else:
                    self.container_var["srm_window"]["Entry"][element].set("0.0")
            #
        elif var_opt in self.mineral_list:
            self.container_var["srm_window"]["Option Menu"]["SRM"].set("Select SRM")
            #
            for element in self.list_pse:
                if element in self.mineral_chem[var_opt].keys():
                    self.container_var["srm_window"]["Entry"][element].set(self.mineral_chem[var_opt][element])
                else:
                    self.container_var["srm_window"]["Entry"][element].set("0.0")
    #
    def create_srm_data_list(self):
        for var_srm in self.list_srm:
            self.container_lists["SRM Data"][var_srm] = {}
            ESRM().place_srm_values(srm_name=var_srm, srm_dict=self.container_lists["SRM Data"])
        #
        for var_srm in self.list_srm:
            data_srm = self.container_lists["SRM Data"][var_srm]
            for element in self.list_pse:
                if element not in self.container_lists["SRM Data"]:
                    self.container_lists["SRM Data"][element] = {}
                #
                if element in data_srm:
                    self.container_lists["SRM Data"][element][var_srm] = data_srm[element]
    #
    def subwindow_general_settings(self):
        ## Window Settings
        window_width = 540
        window_heigth = 375
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_generalsettings = tk.Toplevel(self.parent)
        subwindow_generalsettings.title("General Settings")
        subwindow_generalsettings.geometry(var_geometry)
        subwindow_generalsettings.resizable(False, False)
        subwindow_generalsettings["bg"] = self.bg_colors["Super Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_generalsettings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_generalsettings, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_generalsettings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_generalsettings.grid_columnconfigure(i, minsize=column_min)
        #
        ###########################################################
        #
        ## Frames
        # frm_01 = SE(
        #     parent=subwindow_generalsettings, row_id=0, column_id=1, n_rows=n_rows, n_columns=1,
        #     fg=self.green_light, bg=self.accent_color).create_frame(relief=tk.FLAT)
        # frm_02 = SE(
        #     parent=subwindow_generalsettings, row_id=17, column_id=0, n_rows=1, n_columns=n_columns,
        #     fg=self.green_light, bg=self.accent_color).create_frame(relief=tk.FLAT)
        # frm_03 = SE(
        #     parent=subwindow_generalsettings, row_id=0, column_id=0, n_rows=n_rows, n_columns=1,
        #     fg=self.green_light, bg=self.bg_colors["Super Dark"]).create_frame(relief=tk.FLAT)
        # frm_04 = SE(
        #     parent=subwindow_generalsettings, row_id=20, column_id=1, n_rows=1, n_columns=n_columns,
        #     fg=self.green_light, bg=self.bg_colors["Super Dark"]).create_frame(relief=tk.FLAT)
        # #
        # self.gui_elements["general_settings"]["Frame"]["General"].extend([frm_01, frm_02, frm_03, frm_04])
        #
        start_row = 0
        start_column = 0
        #
        ## Labels
        lbl_01 = SE(
            parent=subwindow_generalsettings, row_id=0, column_id=start_column, n_rows=2, n_columns=9,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Project Information", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_generalsettings, row_id=4, column_id=start_column, n_rows=2, n_columns=9,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Reference\n Material (SRM)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_generalsettings, row_id=8, column_id=start_column, n_rows=2, n_columns=9,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Calculation Accuracy", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_generalsettings, row_id=0, column_id=start_column + 10, n_rows=2, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sensitivity Drift", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=subwindow_generalsettings, row_id=5, column_id=start_column + 10, n_rows=2, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Limit of Detection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=subwindow_generalsettings, row_id=10, column_id=start_column + 10, n_rows=2, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Offset Automatic Interval Detection", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        self.gui_elements["general_settings"]["Label"]["General"].extend(
            [lbl_01, lbl_02, lbl_04, lbl_05, lbl_06, lbl_07])
        #
        lbl_01a = SE(
            parent=subwindow_generalsettings, row_id=2, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Default Author", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02a = SE(
            parent=subwindow_generalsettings, row_id=6, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Default SRM", relief=tk.GROOVE, fontsize="sans 10 bold")
        # lbl_04a = SE(
        #     parent=subwindow_generalsettings, row_id=10, column_id=start_column, n_rows=1, n_columns=9,
        #     fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
        #     text="Intensity Analysis", relief=tk.GROOVE, fontsize="sans 10 bold")
        # lbl_04b = SE(
        #     parent=subwindow_generalsettings, row_id=12, column_id=start_column, n_rows=1, n_columns=9,
        #     fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
        #     text="Sensitivity Analysis", relief=tk.GROOVE, fontsize="sans 10 bold")
        # lbl_04c = SE(
        #     parent=subwindow_generalsettings, row_id=14, column_id=start_column, n_rows=1, n_columns=9,
        #     fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
        #     text="Concentration Analysis", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_05a = SE(
            parent=subwindow_generalsettings, row_id=2, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Transform time values into ...", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_06a = SE(
            parent=subwindow_generalsettings, row_id=7, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Calculation formula from ...", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07a = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 10, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Background", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07b = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 10, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Signal", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        self.gui_elements["general_settings"]["Label"]["General"].extend(
            [lbl_01a, lbl_02a, lbl_05a, lbl_06a, lbl_07a, lbl_07b])
        #
        ## Entries
        entr_01a = SE(
            parent=subwindow_generalsettings, row_id=3, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.green_light, bg=self.green_dark).create_simple_entry(
            var=self.container_var["General Settings"]["Default Author"],
            text_default=self.container_var["General Settings"]["Default Author"].get(), command=None)
        # entr_04a = SE(
        #     parent=subwindow_generalsettings, row_id=11, column_id=start_column, n_rows=1, n_columns=9,
        #     fg=self.green_light, bg=self.green_dark).create_simple_entry(
        #     var=self.container_var["General Settings"]["Accuracy Intensity"],
        #     text_default=self.container_var["General Settings"]["Accuracy Intensity"].get(), command=None)
        # entr_04b = SE(
        #     parent=subwindow_generalsettings, row_id=13, column_id=start_column, n_rows=1, n_columns=9,
        #     fg=self.green_light, bg=self.green_dark).create_simple_entry(
        #     var=self.container_var["General Settings"]["Accuracy Sensitivity"],
        #     text_default=self.container_var["General Settings"]["Accuracy Sensitivity"].get(), command=None)
        # entr_04c = SE(
        #     parent=subwindow_generalsettings, row_id=15, column_id=start_column, n_rows=1, n_columns=9,
        #     fg=self.green_light, bg=self.green_dark).create_simple_entry(
        #     var=self.container_var["General Settings"]["Accuracy Concentration"],
        #     text_default=self.container_var["General Settings"]["Accuracy Concentration"].get(), command=None)
        entr_07a = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 16, n_rows=1, n_columns=5,
            fg=self.green_light, bg=self.green_dark).create_simple_entry(
            var=self.container_var["General Settings"]["BG Offset Start"],
            text_default=self.container_var["General Settings"]["BG Offset Start"].get(), command=None)
        entr_07b = SE(
            parent=subwindow_generalsettings, row_id=12, column_id=start_column + 21, n_rows=1, n_columns=5,
            fg=self.green_light, bg=self.green_dark).create_simple_entry(
            var=self.container_var["General Settings"]["BG Offset End"],
            text_default=self.container_var["General Settings"]["BG Offset End"].get(), command=None)
        entr_07c = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 16, n_rows=1, n_columns=5,
            fg=self.green_light, bg=self.green_dark).create_simple_entry(
            var=self.container_var["General Settings"]["MAT Offset Start"],
            text_default=self.container_var["General Settings"]["MAT Offset Start"].get(), command=None)
        entr_07d = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column + 21, n_rows=1, n_columns=5,
            fg=self.green_light, bg=self.green_dark).create_simple_entry(
            var=self.container_var["General Settings"]["MAT Offset End"],
            text_default=self.container_var["General Settings"]["MAT Offset End"].get(), command=None)
        #
        self.gui_elements["general_settings"]["Entry"]["General"].extend(
            [entr_01a, entr_07a, entr_07b, entr_07c, entr_07d])
        #
        ## Option Menus
        list_srm = list(np.sort(self.list_srm))
        list_srm.insert(0, "Select SRM")
        #
        opt_srm = SE(
            parent=subwindow_generalsettings, row_id=7, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=self.container_var["General Settings"]["Default SRM"],
            var_default=self.container_var["General Settings"]["Default SRM"].get(), var_list=list_srm,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        #
        self.gui_elements["general_settings"]["Option Menu"]["General"].extend([opt_srm])
        #
        ## Radiobuttons
        rb_04a = SE(
            parent=subwindow_generalsettings, row_id=10, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Calculation Accuracy"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SILLS",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_04b = SE(
            parent=subwindow_generalsettings, row_id=11, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Calculation Accuracy"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="PySILLS",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_05a = SE(
            parent=subwindow_generalsettings, row_id=3, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Sensitivity Drift"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="seconds",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_05b = SE(
            parent=subwindow_generalsettings, row_id=4, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["Sensitivity Drift"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="decimal numbers", sticky="nesw",
            relief=tk.FLAT, font="sans 10 bold")
        #
        rb_06a = SE(
            parent=subwindow_generalsettings, row_id=8, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["LOD Selection"], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Pettke et al. (2012)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        rb_06b = SE(
            parent=subwindow_generalsettings, row_id=9, column_id=start_column + 10, n_rows=1, n_columns=16,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["General Settings"]["LOD Selection"], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Longerich et al. (1996)",
            sticky="nesw", relief=tk.FLAT, font="sans 10 bold")
        #
        self.gui_elements["general_settings"]["Radiobutton"]["General"].extend(
            [rb_05a, rb_05b, rb_06a, rb_06b])
        #
        ## Buttons
        btn_01 = SE(
            parent=subwindow_generalsettings, row_id=13, column_id=start_column, n_rows=1, n_columns=9,
            fg=self.green_dark, bg=self.red_dark).create_simple_button(
            text="Save Settings", bg_active=self.accent_color, fg_active=self.green_dark,
            command=self.confirm_general_settings)
        #
        self.gui_elements["general_settings"]["Button"]["General"].extend([btn_01])
    #
    def confirm_general_settings(self):
        path_pysills = os.path.dirname(os.path.realpath(__file__))
        filename = os.path.join(path_pysills, "user_settings.txt")
        with open(filename, "w") as file_settings:
            file_settings.write("GENERAL SETTINGS" + ";\n")
            #
            for key, value in self.container_var["General Settings"].items():
                str_key = str(key)+ ";" + str(value.get())+";\n"
                file_settings.write(str_key)
    #
    def check_srm_settings(self):
        ## Window Settings
        window_width = 640
        window_heigth = 575
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_srm_checkup = tk.Toplevel(self.parent)
        subwindow_srm_checkup.title("Check-Up - Standard Reference Material")
        subwindow_srm_checkup.geometry(var_geometry)
        subwindow_srm_checkup.resizable(False, False)
        subwindow_srm_checkup["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_srm_checkup, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_srm_checkup, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_srm_checkup.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_srm_checkup.grid_columnconfigure(i, minsize=column_min)
        #
        ###########################################################
        #
        start_column = 0
        start_row = 0
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
        #
        ## LABELS
        lbl_std = SE(
            parent=subwindow_srm_checkup, row_id=start_row, column_id=start_column, n_rows=1, n_columns=17,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 11, column_id=start_column, n_rows=1, n_columns=17,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_srm_checkup, row_id=start_row, column_id=start_column + 18, n_rows=1, n_columns=13,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="SRM Values", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## TREEVIEW
        tv_std = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 1, column_id=start_column, n_rows=10, n_columns=17,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=2, text_n=["Name", "SRM"], width_n=["120", "220"], individual=True)
        #
        list_srm = ["Select SRM"]
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            var_srm_i = self.container_files["STD"][file_std]["SRM"].get()
            #
            if var_srm_i not in list_srm:
                list_srm.append(var_srm_i)
            #
            entry_std = [file_std, var_srm_i]
            #
            tv_std.insert("", tk.END, values=entry_std)
        #
        if len(list_srm) > 1:
            list_srm.remove("Select SRM")
        #
        tv_isotope = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 12, column_id=start_column, n_rows=10, n_columns=17,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=3, text_n=["Name", "SRM", "Concentration (ppm)"], width_n=["70", "130", "140"],
            individual=True)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            var_srm_i = self.container_var["SRM"][isotope].get()
            #
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            var_isotope_concentration = self.srm_actual[var_srm_i][element]
            #
            entry_isotope = [isotope, var_srm_i, var_isotope_concentration]
            #
            tv_isotope.insert("", tk.END, values=entry_isotope)
        #
        tv_srm = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 2, column_id=start_column + 18, n_rows=20, n_columns=13,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["100", "160"], individual=True)
        #
        ## Option Menus
        var_opt_srm = tk.StringVar()
        if self.container_var["SRM"]["default"][0].get() != "Select SRM":
            var_opt_srm.set(self.container_var["SRM"]["default"][0].get())
        else:
            var_opt_srm.set("Select SRM")
        #
        opt_srm = SE(
            parent=subwindow_srm_checkup, row_id=start_row + 1, column_id=start_column + 18, n_rows=1, n_columns=13,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_optionmenu(
            var_opt=var_opt_srm, var_default=var_opt_srm.get(), var_list=list_srm,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=var_opt_srm, var_tv=tv_srm: self.change_srm_checkup(var_opt, var_tv))
        #
        ## INITIALIZATION
        self.change_srm_checkup(var_opt=var_opt_srm.get(), var_tv=tv_srm)
        #
    def change_srm_checkup(self, var_opt, var_tv):
        if len(var_tv.get_children()) > 0:
            for item in var_tv.get_children():
                var_tv.delete(item)
        #
        if var_opt != "Select SRM":
            for element in np.sort(list(self.srm_actual[var_opt].keys())):
                entry_isotope = [element, self.srm_actual[var_opt][element]]
                #
                var_tv.insert("", tk.END, values=entry_isotope)
    #
    def check_interval_settings(self):
        ## Window Settings
        window_width = 1080
        window_heigth = 825
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_intervals = tk.Toplevel(self.parent)
        subwindow_intervals.title("Check-Up - Calculation Intervals")
        subwindow_intervals.geometry(var_geometry)
        subwindow_intervals.resizable(False, False)
        subwindow_intervals["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_intervals, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_intervals, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_intervals.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_intervals.grid_columnconfigure(i, minsize=column_min)
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
            accent_btn_bg = self.colors_ma["Medium"]
            accent_btn_fg = self.colors_ma["Dark Font"]
            var_categories = ["Filename", "Category", "ID", "Start", "End"]
            var_widths = ["160", "90", "90", "90", "90"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
            accent_btn_bg = self.colors_fi["Medium"]
            accent_btn_fg = self.colors_fi["Dark Font"]
            var_categories = ["Filename", "Category", "ID", "Start", "End"]
            var_widths = ["160", "90", "90", "90", "90"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
            accent_btn_bg = self.colors_mi["Medium"]
            accent_btn_fg = self.colors_mi["Dark Font"]
            var_categories = ["Name", "BG(start)", "BG(end)", "MAT(start)", "MAT(end)", "INCL(start)", "INCL(end)"]
            var_widths = ["120", "67", "67", "67", "67", "67", "67"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
            accent_btn_bg = self.bg_colors["Medium"]
            accent_btn_fg = self.bg_colors["Dark Font"]
        #
        ################################################################################################################
        #
        start_column = 0
        start_row = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column + 26,
            n_rows=n_rows, n_columns=n_columns - 26, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## FIGURES
        fig_checkup_std = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        fig_checkup_smpl = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        #
        canvas_std = FigureCanvasTkAgg(fig_checkup_std, master=subwindow_intervals)
        canvas_std.get_tk_widget().grid(
            row=start_row + 1, column=start_column + 26, rowspan=15, columnspan=27, sticky="nesw")
        canvas_smpl = FigureCanvasTkAgg(fig_checkup_smpl, master=subwindow_intervals)
        canvas_smpl.get_tk_widget().grid(
            row=start_row + 17, column=start_column + 26, rowspan=15, columnspan=27, sticky="nesw")
        #
        self.container_checkup["STD"].append(canvas_std)
        self.container_checkup["SMPL"].append(canvas_smpl)
        self.temp_figure_checkup = {"STD": fig_checkup_std, "SMPL": fig_checkup_smpl}
        self.temp_canvas_checkup = {"STD": canvas_std, "SMPL": canvas_smpl}
        self.temp_axes_checkup = {"STD": {}, "SMPL": {}}
        self.temp_lines_checkup = {"STD": {}, "SMPL": {}}
        #
        ## LABELS
        lbl_std = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## BUTTONS
        btn_std_01 = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", mode="Back", var_fig=fig_checkup_std:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_std_02 = SE(
            parent=subwindow_intervals, row_id=start_row, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", var_fig=fig_checkup_std: self.change_graph_checkup(filetype, var_fig))
        #
        if self.pysills_mode == "MA":
            btn_std_03 = SE(
                parent=subwindow_intervals, row_id=start_row, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.ma_current_file_std, var_type="STD", checkup_mode=True:
                self.ma_check_specific_file(var_file, var_type, checkup_mode))
            #
        elif self.pysills_mode == "FI":
            btn_std_03 = SE(
                parent=subwindow_intervals, row_id=start_row, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.fi_current_file_std, var_type="STD", checkup_mode=True:
                self.fi_check_specific_file(var_file, var_type, checkup_mode))
            #
        elif self.pysills_mode == "MI":
            btn_std_03 = SE(
                parent=subwindow_intervals, row_id=start_row, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.mi_current_file_std, var_type="STD", checkup_mode=True:
                self.mi_check_specific_file(var_file, var_type, checkup_mode))
        #
        btn_smpl_01 = SE(
            parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", mode="Back", var_fig=fig_checkup_smpl:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_smpl_02 = SE(
            parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", var_fig=fig_checkup_smpl: self.change_graph_checkup(filetype, var_fig))
        if self.pysills_mode == "MA":
            btn_smpl_03 = SE(
                parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.ma_current_file_smpl, var_type="SMPL", checkup_mode=True:
                self.ma_check_specific_file(var_file, var_type, checkup_mode))
        elif self.pysills_mode == "FI":
            btn_smpl_03 = SE(
                parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.fi_current_file_smpl, var_type="SMPL", checkup_mode=True:
                self.fi_check_specific_file(var_file, var_type, checkup_mode))
        elif self.pysills_mode == "FI":
            btn_smpl_03 = SE(
                parent=subwindow_intervals, row_id=start_row + 16, column_id=start_column + 38, n_rows=1, n_columns=6,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda var_file=self.mi_current_file_smpl, var_type="SMPL", checkup_mode=True:
                self.mi_check_specific_file(var_file, var_type, checkup_mode))
        #
        ## TREEVIEW
        #
        tv_std = SE(
            parent=subwindow_intervals, row_id=start_row + 1, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
            n_categories=len(var_categories), text_n=var_categories, width_n=var_widths, individual=True)
        #
        if self.pysills_mode == "MA":
            for file_std in self.container_lists["STD"]["Short"]:
                for category in ["BG", "MAT"]:
                    if len(self.container_helper["STD"][file_std][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["STD"][file_std][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_std = [file_std, category, var_id, times[0], times[1]]
                            tv_std.insert("", tk.END, values=entry_std)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_std = [file_std, category, var_id, times[0], times[1]]
                        tv_std.insert("", tk.END, values=entry_std)
                        #
                self.temp_axes_checkup["STD"][file_std] = fig_checkup_std.add_subplot(label=file_std)
                self.temp_lines_checkup["STD"][file_std] = 0
            #
        else:
            for file_std in self.container_lists["STD"]["Short"]:
                for category in ["BG", "MAT"]:
                    if len(self.container_helper["STD"][file_std][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["STD"][file_std][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_std = [file_std, category, var_id, times[0], times[1]]
                            tv_std.insert("", tk.END, values=entry_std)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_std = [file_std, category, var_id, times[0], times[1]]
                        tv_std.insert("", tk.END, values=entry_std)
                        #
                self.temp_axes_checkup["STD"][file_std] = fig_checkup_std.add_subplot(label=file_std)
                self.temp_lines_checkup["STD"][file_std] = 0
        #
        tv_smpl = SE(
            parent=subwindow_intervals, row_id=start_row + 17, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.slate_grey_dark, bg=self.slate_grey_light).create_treeview(
            n_categories=len(var_categories), text_n=var_categories, width_n=var_widths, individual=True)
        #
        if self.pysills_mode == "MA":
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                for category in ["BG", "MAT"]:
                    if len(self.container_helper["SMPL"][file_smpl][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["SMPL"][file_smpl][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                            tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                        tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                self.temp_axes_checkup["SMPL"][file_smpl] = fig_checkup_smpl.add_subplot(label=file_smpl)
                self.temp_lines_checkup["SMPL"][file_smpl] = 0
            #
        else:
            for file_smpl in self.container_lists["SMPL"]["Short"]:
                for category in ["BG", "MAT", "INCL"]:
                    if len(self.container_helper["SMPL"][file_smpl][category]["Content"]) > 0:
                        for var_id, var_content in self.container_helper["SMPL"][file_smpl][category]["Content"].items():
                            if category == "BG":
                                times = var_content["Times"]
                            else:
                                times = var_content["Times"]
                            #
                            entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                            tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                    else:
                        var_id = 0
                        times = ["undefined", "undefined"]
                        #
                        entry_smpl = [file_smpl, category, var_id, times[0], times[1]]
                        tv_smpl.insert("", tk.END, values=entry_smpl)
                        #
                self.temp_axes_checkup["SMPL"][file_smpl] = fig_checkup_smpl.add_subplot(label=file_smpl)
                self.temp_lines_checkup["SMPL"][file_smpl] = 0
        #
        ## INITIALIZATION
        self.change_graph_checkup(filetype="STD", initialization=True, var_fig=fig_checkup_std)
        self.change_graph_checkup(filetype="SMPL", initialization=True, var_fig=fig_checkup_smpl)
    #
    def check_acquisition_times(self):
        ## Window Settings
        window_width = 520
        window_heigth = 825
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_aquisition_times = tk.Toplevel(self.parent)
        subwindow_aquisition_times.title("Check-Up - Acquisition  Times")
        subwindow_aquisition_times.geometry(var_geometry)
        subwindow_aquisition_times.resizable(False, False)
        subwindow_aquisition_times["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_aquisition_times, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_aquisition_times, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_aquisition_times.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_aquisition_times.grid_columnconfigure(i, minsize=column_min)
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
        #
        ###########################################################
        #
        start_column = 0
        start_row = 0
        #
        ## LABELS
        lbl_std = SE(
            parent=subwindow_aquisition_times, row_id=start_row, column_id=start_column, n_rows=1, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 16, column_id=start_column, n_rows=1, n_columns=16,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## ENTRY
        self.var_entr_std_time = tk.StringVar()
        self.var_entr_std_time.set("00:00:00")
        #
        entr_std = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 1, column_id=start_column + 17, n_rows=2,
            n_columns=8, fg=self.green_dark, bg=self.green_medium).create_simple_entry(
            var=self.var_entr_std_time, text_default=self.var_entr_std_time.get(),
            command=lambda event, filetype="STD": self.change_value_acquisition(filetype, event))
        #
        self.var_entr_smpl_time = tk.StringVar()
        self.var_entr_smpl_time.set("00:00:00")
        #
        entr_smpl = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 17, column_id=start_column + 17, n_rows=2,
            n_columns=8, fg=self.green_dark, bg=self.green_medium).create_simple_entry(
            var=self.var_entr_smpl_time, text_default=self.var_entr_smpl_time.get(),
            command=lambda event, filetype="SMPL": self.change_value_acquisition(filetype, event))
        #
        ## TREEVIEWS
        self.tv_std = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 1, column_id=start_column, n_rows=14, n_columns=15,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=2, text_n=["Filename", "Acquisition Time"],
            width_n=["150", "150"], individual=True)
        #
        scb_v = ttk.Scrollbar(subwindow_aquisition_times, orient="vertical")
        scb_h = ttk.Scrollbar(subwindow_aquisition_times, orient="horizontal")
        self.tv_std.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_std.yview)
        scb_h.config(command=self.tv_std.xview)
        scb_v.grid(row=start_row + 1, column=start_column + 15, rowspan=14, columnspan=1, sticky="ns")
        scb_h.grid(row=start_row + 15, column=start_column, rowspan=1, columnspan=15, sticky="ew")
        #
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            #
            dates, times = Data(filename=var_file).import_as_list()
            #
            if index == 0:
                t_start_0 = datetime.timedelta(
                    hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                t_start = datetime.timedelta(
                    hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
            else:
                t_start = datetime.timedelta(
                    hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
            #
            t_delta_0 = (t_start - t_start_0).total_seconds()
            self.container_lists["Acquisition Times Delta"][file_std] = t_delta_0
            #
            if file_std not in self.container_var["acquisition times"]["STD"]:
                self.container_var["acquisition times"]["STD"][file_std] = tk.StringVar()
                self.container_var["acquisition times"]["STD"][file_std].set(
                    times[0][0] + ":" + times[0][1] + ":" + times[0][2])
            #
            entry_std = [file_std, self.container_var["acquisition times"]["STD"][file_std].get()]
            #
            self.tv_std.insert("", tk.END, values=entry_std)
        #
        self.tv_smpl = SE(
            parent=subwindow_aquisition_times, row_id=start_row + 17, column_id=start_column, n_rows=14, n_columns=15,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=2, text_n=["Filename", "Acquisition Time"],
            width_n=["150", "150"], individual=True)
        #
        scb_v = ttk.Scrollbar(subwindow_aquisition_times, orient="vertical")
        scb_h = ttk.Scrollbar(subwindow_aquisition_times, orient="horizontal")
        self.tv_smpl.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_smpl.yview)
        scb_h.config(command=self.tv_smpl.xview)
        scb_v.grid(row=start_row + 17, column=start_column + 15, rowspan=14, columnspan=1, sticky="ns")
        scb_h.grid(row=start_row + 31, column=start_column, rowspan=1, columnspan=15, sticky="ew")
        #
        for index, var_file in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = var_file.split("/")
            file_smpl = parts[-1]
            #
            # df_data = self.load_and_assign_data(filename=var_file)
            dates, times = Data(filename=var_file).import_as_list()
            #
            t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
            #
            t_delta_0 = (t_start - t_start_0).total_seconds()
            self.container_lists["Acquisition Times Delta"][file_smpl] = t_delta_0
            #
            if file_smpl not in self.container_var["acquisition times"]["SMPL"]:
                self.container_var["acquisition times"]["SMPL"][file_smpl] = tk.StringVar()
                self.container_var["acquisition times"]["SMPL"][file_smpl].set(
                    times[0][0] + ":" + times[0][1] + ":" + times[0][2])
            #
            entry_smpl = [file_smpl, self.container_var["acquisition times"]["SMPL"][file_smpl].get()]
            #
            self.tv_smpl.insert("", tk.END, values=entry_smpl)
    #
    def calculate_acquisition_time_deltas(self):
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            #
            dates, times = Data(filename=var_file).import_as_list()
            #
            if index == 0:
                if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                    if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                        t_start_0 = datetime.timedelta(
                            hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                    else:
                        t_start_0 = datetime.timedelta(
                            hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int("00"))
                    #
                else:
                    t_start_0 = int(times[0][0]) + int(times[0][1])/60
            #
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                    t_start = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                else:
                    t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int("00"))
                #
            else:
                t_start = int(times[0][0]) + int(times[0][1])/60
            #
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                t_delta_0 = (t_start - t_start_0).total_seconds()
            else:
                t_delta_0 = t_start - t_start_0
            #
            self.container_lists["Acquisition Times Delta"][file_std] = t_delta_0
            #
        for index, var_file in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = var_file.split("/")
            file_smpl = parts[-1]
            #
            dates, times = Data(filename=var_file).import_as_list()
            #
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                    t_start = datetime.timedelta(
                        hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int(times[0][2]))
                else:
                    t_start = datetime.timedelta(hours=int(times[0][0]), minutes=int(times[0][1]), seconds=int("00"))
                #
            else:
                t_start = int(times[0][0]) + int(times[0][1])/60
            #
            if self.container_var["General Settings"]["Sensitivity Drift"].get() == 0:
                t_delta_0 = (t_start - t_start_0).total_seconds()
            else:
                t_delta_0 = t_start - t_start_0
            #
            self.container_lists["Acquisition Times Delta"][file_smpl] = t_delta_0
            #
    #
    def check_imported_files(self):
        ## Window Settings
        window_width = 1080
        window_heigth = 825
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        subwindow_imported_files = tk.Toplevel(self.parent)
        subwindow_imported_files.title("Check-Up - Imported Files")
        subwindow_imported_files.geometry(var_geometry)
        subwindow_imported_files.resizable(False, False)
        subwindow_imported_files["bg"] = self.bg_colors["Very Dark"]
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_imported_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_imported_files, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_imported_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_imported_files.grid_columnconfigure(i, minsize=column_min)
        #
        if self.pysills_mode == "MA":
            accent_bg = self.colors_ma["Dark"]
            accent_fg = self.colors_ma["Light Font"]
            accent_btn_bg = self.colors_ma["Medium"]
            accent_btn_fg = self.colors_ma["Dark Font"]
        elif self.pysills_mode == "FI":
            accent_bg = self.colors_fi["Dark"]
            accent_fg = self.colors_fi["Light Font"]
            accent_btn_bg = self.colors_fi["Medium"]
            accent_btn_fg = self.colors_fi["Dark Font"]
        elif self.pysills_mode == "MI":
            accent_bg = self.colors_mi["Dark"]
            accent_fg = self.colors_mi["Light Font"]
            accent_btn_bg = self.colors_mi["Medium"]
            accent_btn_fg = self.colors_mi["Dark Font"]
        elif self.pysills_mode == "OA":
            accent_bg = self.bg_colors["Dark"]
            accent_fg = self.bg_colors["Light Font"]
            accent_btn_bg = self.bg_colors["Medium"]
            accent_btn_fg = self.bg_colors["Dark Font"]
        #
        ###########################################################
        #
        start_column = 0
        start_row = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column + 26,
            n_rows=n_rows, n_columns=n_columns - 26, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## LABELS
        lbl_std = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Standard Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=subwindow_imported_files, row_id=start_row + 16, column_id=start_column, n_rows=1, n_columns=26,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## FIGURES
        fig_checkup_std = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        fig_checkup_smpl = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        #
        canvas_std = FigureCanvasTkAgg(fig_checkup_std, master=subwindow_imported_files)
        canvas_std.get_tk_widget().grid(
            row=start_row + 1, column=start_column + 26, rowspan=15, columnspan=28, sticky="nesw")
        canvas_smpl = FigureCanvasTkAgg(fig_checkup_smpl, master=subwindow_imported_files)
        canvas_smpl.get_tk_widget().grid(
            row=start_row + 17, column=start_column + 26, rowspan=15, columnspan=28, sticky="nesw")
        #
        self.container_checkup["STD"].append(canvas_std)
        self.container_checkup["SMPL"].append(canvas_smpl)
        self.temp_figure_checkup = {"STD": fig_checkup_std, "SMPL": fig_checkup_smpl}
        self.temp_canvas_checkup = {"STD": canvas_std, "SMPL": canvas_smpl}
        self.temp_axes_checkup = {"STD": {}, "SMPL": {}}
        self.temp_lines_checkup = {"STD": {}, "SMPL": {}}
        #
        ## BUTTONS
        btn_std_01 = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", mode="Back", var_fig=fig_checkup_std:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_std_02 = SE(
            parent=subwindow_imported_files, row_id=start_row, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="STD", var_fig=fig_checkup_std: self.change_graph_checkup(filetype, var_fig))
        btn_smpl_01 = SE(
            parent=subwindow_imported_files, row_id=start_row + 16, column_id=start_column + 26, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Previous Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", mode="Back", var_fig=fig_checkup_smpl:
            self.change_graph_checkup(filetype, mode, var_fig))
        btn_smpl_02 = SE(
            parent=subwindow_imported_files, row_id=start_row + 16, column_id=start_column + 32, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next Graph", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda filetype="SMPL", var_fig=fig_checkup_smpl: self.change_graph_checkup(filetype, var_fig))
        #
        ## TREEVIEW
        tv_std = SE(
            parent=subwindow_imported_files, row_id=start_row + 1, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=6, text_n=["Name", "N Isotopes", "t(start)", "t(end)", "t(day)", "date"],
            width_n=["120", "80", "80", "80", "80", "80"], individual=True)
        #
        for index, var_file in enumerate(self.container_lists["STD"]["Long"]):
            parts = var_file.split("/")
            file_std = parts[-1]
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            dates, times = Data(filename=var_file).import_as_list()
            #
            entry_std = [file_std, len(list(df_data.keys())[1:]), dataset_time[0], dataset_time[-1],
                         times[0][0]+":"+times[0][1]+":"+times[0][2], dates[0][0]+"/"+dates[0][1]+"/"+dates[0][2]]
            #
            tv_std.insert("", tk.END, values=entry_std)
            #
            self.temp_axes_checkup["STD"][file_std] = fig_checkup_std.add_subplot(label=file_std)
            self.temp_lines_checkup["STD"][file_std] = 0
        #
        tv_smpl = SE(
            parent=subwindow_imported_files, row_id=start_row + 17, column_id=start_column, n_rows=15, n_columns=26,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=6, text_n=["Name", "N Isotopes", "t(start)", "t(end)", "t(day)", "date"],
            width_n=["120", "80", "80", "80", "80", "80"], individual=True)
        #
        for index, var_file in enumerate(self.container_lists["SMPL"]["Long"]):
            parts = var_file.split("/")
            file_smpl = parts[-1]
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            dates, times = Data(filename=var_file).import_as_list()
            #
            entry_smpl = [file_smpl, len(list(df_data.keys())[1:]), dataset_time[0], dataset_time[-1],
                         times[0][0] + ":" + times[0][1] + ":" + times[0][2],
                         dates[0][0] + "/" + dates[0][1] + "/" + dates[0][2]]
            #
            tv_smpl.insert("", tk.END, values=entry_smpl)
            #
            self.temp_axes_checkup["SMPL"][file_smpl] = fig_checkup_smpl.add_subplot(label=file_smpl)
            self.temp_lines_checkup["SMPL"][file_smpl] = 0
        #
        ## INITIALIZATION
        self.change_graph_checkup(filetype="STD", initialization=True, var_fig=fig_checkup_std)
        self.change_graph_checkup(filetype="SMPL", initialization=True, var_fig=fig_checkup_smpl)
    #
    def change_graph_checkup(self, filetype, var_fig, mode="Next", initialization=False):
        counter_key = "Counter " + str(filetype)
        #
        for key, axis_item in self.temp_axes_checkup[filetype].items():
            axis_item.axis("off")
            axis_item.set_visible(False)
        #
        self.temp_canvas_checkup[filetype].draw()
        #
        if initialization == False:
            n_files = len(self.container_lists[filetype]["Long"])
            #
            if mode == "Next":
                if self.container_checkup[counter_key] < n_files - 1:
                    self.container_checkup[counter_key] += 1
                else:
                    self.container_checkup[counter_key] = 0
            else:
                if self.container_checkup[counter_key] > 0:
                    self.container_checkup[counter_key] -= 1
                else:
                    self.container_checkup[counter_key] = n_files - 1
        #
        var_file = self.container_lists[filetype]["Long"][self.container_checkup[counter_key]]
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        var_fig = self.temp_figure_checkup[filetype]
        #
        if filetype == "STD":
            self.fi_current_file_std = var_file
        elif filetype == "SMPL":
            self.fi_current_file_smpl = var_file
        #
        if self.temp_lines_checkup[filetype][var_file_short] == 0:
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            x_max = max(dataset_time)
            icp_measurements = np.array([[df_data[isotope] for isotope in self.container_lists["ISOTOPES"]]])
            y_max = np.amax(icp_measurements)
            #
            ## DIAGRAMS
            ax = var_fig.add_subplot(label=np.random.uniform())
            self.temp_axes_checkup[filetype][var_file_short] = ax
            #
            for isotope in self.container_lists["ISOTOPES"]:
                ln = ax.plot(dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                             linewidth=1, visible=True)
            #
            if self.pysills_mode in ["FI", "MI"]:
                var_check_bg = self.container_helper[filetype][var_file_short]["BG"]["Content"]
            else:
                var_check_bg = self.container_helper[filetype][var_file_short]["BG"]["Content"]
            #
            if len(var_check_bg) > 0:
                if self.pysills_mode in ["FI", "MI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short]["BG"]["Content"].items():
                        times_bg = var_content["Times"]
                        #
                        box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                else:
                    for var_id, var_content in self.container_helper[filetype][var_file_short]["BG"]["Content"].items():
                        times_bg = var_content["Times"]
                        #
                        box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                    # times_bg = self.container_helper[filetype][var_file_short]["BG"][1]["Times"]
                    # #
                    # box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.5, color=self.colors_intervals["BG"])
            #
            if self.pysills_mode == "MA":
                signal_key = "MAT"
                var_check_sig = self.container_helper[filetype][var_file_short][signal_key]["Content"]
                # signal_key = "SIG"
                # var_check_sig = self.container_helper[filetype][var_file_short][signal_key]
            else:
                signal_key = "MAT"
                var_check_sig = self.container_helper[filetype][var_file_short][signal_key]["Content"]
            #
            if len(var_check_sig) > 0:
                if self.pysills_mode in ["FI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][signal_key][
                        "Content"].items():
                        times_sig = var_content["Times"]
                        var_color = self.colors_intervals["MAT"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                elif self.pysills_mode in ["MI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][signal_key][
                        "Content"].items():
                        times_sig = self.container_helper[filetype][var_file_short][signal_key]["Content"][1]["Times"]
                        var_color = self.colors_intervals["MAT"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                else:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][signal_key][
                        "Content"].items():
                        times_sig = var_content["Times"]
                        var_color = self.colors_intervals["MAT"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    # times_sig = times_sig = self.container_helper[filetype][var_file_short][signal_key][1]["Times"]
                    # var_color = self.colors_intervals["SIG"]
                    # #
                    # box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
            #
            if self.pysills_mode == "MA":
                inclusion_key = "INCL"
                var_check_incl = []
            else:
                inclusion_key = "INCL"
                var_check_incl = self.container_helper[filetype][var_file_short][inclusion_key]["Content"]
            #
            if len(var_check_incl) > 0:
                if self.pysills_mode in ["FI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][inclusion_key][
                        "Content"].items():
                        times_sig = var_content["Times"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=self.colors_intervals["INCL"])
                elif self.pysills_mode in ["MI"]:
                    for var_id, var_content in self.container_helper[filetype][var_file_short][inclusion_key][
                        "Content"].items():
                        times_sig = self.container_helper[filetype][var_file_short][inclusion_key]["Content"][1][
                            "Times"]
                        #
                        box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=self.colors_intervals["INCL"])
            #
            ax.grid(True)
            ax.set_yscale("log")
            ax.set_xlim(left=0, right=x_max)
            ax.set_xticks(np.arange(0, x_max, 20))
            ax.set_ylim(bottom=100, top=1.5*y_max)
            ax.grid(which="major", linestyle="-", linewidth=1)
            ax.minorticks_on()
            ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            ax.set_axisbelow(True)
            ax.set_title(var_file_short, fontsize=9)
            ax.set_xlabel("Time (s)", labelpad=0.5, fontsize=8)
            ax.set_ylabel("Signal (cps)", labelpad=0.5, fontsize=8)
            ax.xaxis.set_tick_params(labelsize=8)
            ax.yaxis.set_tick_params(labelsize=8)
            #
            var_fig.subplots_adjust(bottom=0.125, top=0.925, left=0.1125, right=0.95)
            #
            self.temp_canvas_checkup[filetype].draw()
            #
            self.temp_lines_checkup[filetype][var_file_short] = 1
            #
        else:
            self.temp_axes_checkup[filetype][var_file_short].axis("on")
            self.temp_axes_checkup[filetype][var_file_short].set_visible(True)
            #
            self.temp_canvas_checkup[filetype].draw()
    #
    def change_file_acquisition(self, var_file):
        if var_file in self.container_lists["STD"]["Short"]:
            self.var_entr_std_time.set(self.container_var["acquisition times"]["STD"][var_file].get())
        elif var_file in self.container_lists["SMPL"]["Short"]:
            self.var_entr_smpl_time.set(self.container_var["acquisition times"]["SMPL"][var_file].get())
    #
    def change_value_acquisition(self, filetype, event):
        if filetype == "STD":
            selected_item = self.tv_std.selection()[0]
            index = int(str(selected_item)[-1]) - 1
            new_time = self.var_entr_std_time.get()
            var_file = self.container_lists[filetype]["Short"][index]
            #
            self.tv_std.item(item=selected_item, text=var_file, values=(var_file, new_time))
        else:
            selected_item = self.tv_smpl.selection()[0]
            index = int(str(selected_item)[-1]) - 1
            new_time = self.var_entr_smpl_time.get()
            var_file = self.container_lists[filetype]["Short"][index]
            #
            self.tv_smpl.item(item=selected_item, text=var_file, values=(var_file, new_time))
        #
        self.container_var["acquisition times"][filetype][var_file].set(new_time)
#
########################################################################################################################
# MINERAL ANALYSIS #####################################################################################################
########################################################################################################################
#
    def ma_settings(self):
        ## COLORS
        bg_light = self.bg_colors["Very Light"]
        bg_medium = self.bg_colors["Light"]
        #
        if len(self.container_lists["ISOTOPES"]) == 0:
            path = os.getcwd()
            parent = os.path.dirname(path)
            if self.demo_mode == True:
                ma_demo_files = {"ALL": [], "STD": [], "SMPL": []}
                demo_files = os.listdir(path=path + str("/demo_files/"))
                for file in demo_files:
                    if file.startswith("demo_ma"):
                        path_complete = os.path.join(path + str("/demo_files/"), file)
                        path_raw = pathlib.PureWindowsPath(path_complete)
                        ma_demo_files["ALL"].append(str(path_raw.as_posix()))
                ma_demo_files["ALL"].sort()
                ma_demo_files["STD"].extend(ma_demo_files["ALL"][:3])
                ma_demo_files["STD"].extend(ma_demo_files["ALL"][-3:])
                ma_demo_files["SMPL"].extend(ma_demo_files["ALL"][3:-4])
                #
                self.list_std = ma_demo_files["STD"]
                self.list_smpl = ma_demo_files["SMPL"]
            #
            self.ma_current_file_std = self.list_std[0]
            self.ma_current_file_smpl = self.list_smpl[0]
            #
            for file_std in self.list_std:
                file_parts = file_std.split("/")
                if self.demo_mode == True:
                    self.lb_std.insert(tk.END, file_parts[-1])
                #
                for item in ["Quickview", "File Setup", "Results Intensity", "Results Concentration",
                             "Results Sensitivity", "SE STD", "SE SMPL"]:
                    self.container_var["Subwindows"][self.pysills_mode][item] = {}
            #
            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                if self.demo_mode == True:
                    self.lb_smpl.insert(tk.END, file_parts[-1])
            #
            dataset_exmpl = Data(filename=self.list_std[0])
            df_exmpl = dataset_exmpl.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            self.times = df_exmpl.iloc[:, 0]
            self.list_isotopes = list(df_exmpl.columns.values)
            self.list_isotopes.pop(0)
            self.container_lists["ISOTOPES"] = self.list_isotopes
            self.palette_complete = sns.color_palette("nipy_spectral", n_colors=len(self.container_lists["ISOTOPES"])).as_hex()
            if bool(self.container_files["SRM"]) == False:
                self.isotope_colors = {}
                for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                    self.container_files["SRM"][isotope] = tk.StringVar()
                    self.isotope_colors[isotope] = self.palette_complete[index]
        #
        ## Window Settings
        window_width = 1260
        window_heigth = 950
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_ma_settings = tk.Toplevel(self.parent)
        self.subwindow_ma_settings.title("MINERAL ANALYSIS - Setup")
        self.subwindow_ma_settings.geometry(var_geometry)
        self.subwindow_ma_settings.resizable(False, False)
        self.subwindow_ma_settings["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_settings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_settings, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_settings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_settings.grid_columnconfigure(i, minsize=column_min)
        #
        ## INITIALIZATION
        for isotope in self.container_lists["ISOTOPES"]:
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            #
            if element not in self.container_lists["Elements"]:
                self.container_lists["Elements"].append(element)
        #
        ## LABELS
        n_col_header = 18
        n_col_category = 12
        n_col_files = 24
        n_col_iso = 18
        start_row_01 = 0  # Project Information
        start_row_02 = 3  # Standard Reference Material
        start_row_03 = 7  # Matrix Settings
        start_row_04 = 13  # Quantification Method
        start_row_05 = 16  # Assemblage Settings
        start_row_06 = 18  # Dwell Time Settings
        start_row_07 = 20  # Default Time Window (Background)
        start_row_08 = 24  # Default Time Window (Matrix)
        start_row_09 = 28  # Spike Elimination
        start_row_10 = 31  # Check-Up
        start_row_std = start_row_01  # Standard Files Setup
        start_row_smpl = start_row_05  # Sample Files Setup
        start_row_iso = start_row_01  # Measured Isotopes
        #
        ## Static
        lbl_01 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_01, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Project Information", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_01 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Author", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_01 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Source ID", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Standard Reference Material (SRM)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02 + 1, column_id=0, n_rows=1,
            n_columns=n_col_category - 4, fg=self.bg_colors["Very Dark"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02 + 2, column_id=0, n_rows=1,
            n_columns=n_col_category - 4, fg=self.bg_colors["Very Dark"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Isotopes", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02 + 3, column_id=0, n_rows=1,
            n_columns=n_col_category - 4,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Matrix Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 4, column_id=0, n_rows=1,
            n_columns=n_col_category - 4, fg=self.bg_colors["Very Dark"],
            bg=self.bg_colors["Light"]).create_simple_label(
            text="Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_04, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Quantification Method", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_05, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_05 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_06, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=bg_light, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Dwell Time Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_06 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Isotope Dwell Times", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Time Window (Background)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07 + 3, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Auto-Detection", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Time Window (Matrix)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_08a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08 + 3, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Auto-Detection", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_09 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_09, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike Elimination", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_09b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_09 + 1, column_id=0, n_rows=1,
            n_columns=n_col_header - 9,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Calculation Method", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10 = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_header, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Check-Up", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_10a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 1, column_id=n_col_header + n_col_files + 2,
            n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Standard Reference Material", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 2, column_id=n_col_header + n_col_files + 2,
            n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 3, column_id=n_col_header + n_col_files + 2,
            n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Calculation Intervals", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10d = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 4, column_id=n_col_header + n_col_files + 2,
            n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Acquisition Times", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10e = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 5, column_id=n_col_header + n_col_files + 2,
            n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Imported Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_std = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_std, column_id=n_col_header + 1, n_rows=1,
            n_columns=n_col_files, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Standard Files Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_smpl, column_id=n_col_header + 1, n_rows=1,
            n_columns=n_col_files, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_iso = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_iso, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_iso, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## Dynamic
        # Standard Files
        frm_std = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_std + 1, column_id=n_col_header + 1,
            n_rows=start_row_smpl - 3, n_columns=n_col_files, fg=bg_light,
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_std = tk.Scrollbar(master=frm_std, orient="vertical")
        text_std = tk.Text(
            master=frm_std, width=30, height=25, yscrollcommand=vsb_std.set, bg=self.bg_colors["Very Light"])
        vsb_std.config(command=text_std.yview)
        vsb_std.pack(side="right", fill="y")
        text_std.pack(side="left", fill="both", expand=True)
        #
        for index, file_std in enumerate(self.list_std):
            parts = file_std.split("/")
            file_std_short = parts[-1]
            #
            dataset_std_i = Data(filename=file_std)
            df_std_i = dataset_std_i.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            times_std_i = df_std_i.iloc[:, 0]
            #
            if file_std not in self.container_lists["STD"]["Long"] and self.demo_mode == True:
                self.container_lists["STD"]["Long"].append(file_std)
                self.container_lists["STD"]["Short"].append(file_std_short)
                self.container_var["ma_setting"]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["STD"][file_std_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short] = {}
            else:
                if file_std not in self.container_lists["STD"]["Long"]:
                    self.container_lists["STD"]["Long"].append(file_std)
                    self.container_lists["STD"]["Short"].append(file_std_short)
                self.container_var["ma_setting"]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["STD"][file_std_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short] = {}
            #
            if self.file_loaded is False:
                if "Si29" in self.container_lists["ISOTOPES"]:
                    possible_is = "Si29"
                self.container_var["STD"][file_std] = {}
                self.container_var["STD"][file_std]["IS"] = tk.StringVar()
                self.container_var["STD"][file_std]["IS"].set(possible_is)
                self.container_var["STD"][file_std]["IS Data"] = {
                    "IS": tk.StringVar(), "Concentration": tk.StringVar()}
                self.container_var["STD"][file_std]["IS Data"]["IS"].set(possible_is)
                self.container_var["STD"][file_std]["IS Data"]["Concentration"].set("0.0")
                self.container_var["STD"][file_std]["Checkbox"] = tk.IntVar()
                self.container_var["STD"][file_std]["Checkbox"].set(1)
                #
            else:
                self.container_var["ma_setting"]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["STD"][file_std_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short] = {}
                #
                self.container_helper["STD"][file_std_short]["FIGURE"] = None
                self.container_helper["STD"][file_std_short]["CANVAS"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
                self.container_helper["STD"][file_std_short]["AXES"] = {}
                self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
                self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
                self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
                #
                self.container_measurements["EDITED"][file_std_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
                #
                self.spikes_isotopes["STD"][file_std_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_std_short][isotope] = {}
                    self.container_measurements["EDITED"][file_std_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_std_short][isotope]["MAT"] = []
                #
                self.create_container_results(var_filetype="STD", var_file_short=file_std_short)
            #
            if file_std not in self.container_var["SRM"]:
                self.container_var["SRM"][file_std] = tk.StringVar()
                self.container_var["SRM"][file_std].set("Select SRM")
            #
            if file_std_short not in self.container_files["STD"]:
                self.container_files["STD"][file_std_short] = {}
                self.container_files["STD"][file_std_short]["SRM"] = tk.StringVar()
                self.container_files["STD"][file_std_short]["IS"] = tk.StringVar()
                self.container_measurements["EDITED"][file_std_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
                #
                self.create_container_results(var_filetype="STD", var_file_short=file_std_short)

            if len(self.container_lists["STD"]["Long"]) < len(self.list_std) and self.file_loaded == False:
                self.container_helper["STD"][file_std_short] = {}
                self.container_helper["STD"][file_std_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                      "Indices": []}
                self.container_helper["STD"][file_std_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                #
                self.container_helper["STD"][file_std_short]["FIGURE"] = None
                self.container_helper["STD"][file_std_short]["CANVAS"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
                self.container_helper["STD"][file_std_short]["AXES"] = {}
                self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
                self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
                self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_std] = {}
                self.container_helper["limits SPK"][file_std]["ID"] = []
                self.container_helper["limits SPK"][file_std]["type"] = []
                self.container_helper["limits SPK"][file_std]["info"] = []
                self.container_helper["positions"]["SPK"][file_std_short] = []
                self.spikes_isotopes["STD"][file_std_short] = {}
                #
            elif len(self.container_lists["STD"]["Long"]) == len(self.list_std) and self.file_loaded == False:
                self.container_helper["STD"][file_std_short] = {}
                self.container_helper["STD"][file_std_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                      "Indices": []}
                self.container_helper["STD"][file_std_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["FIGURE"] = None
                self.container_helper["STD"][file_std_short]["CANVAS"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
                self.container_helper["STD"][file_std_short]["AXES"] = {}
                self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
                self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
                self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_std] = {}
                self.container_helper["limits SPK"][file_std]["ID"] = []
                self.container_helper["limits SPK"][file_std]["type"] = []
                self.container_helper["limits SPK"][file_std]["info"] = []
                self.container_helper["positions"]["SPK"][file_std_short] = []
                self.spikes_isotopes["STD"][file_std_short] = {}
            #
            categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                          "TOOLBARFRAME_RATIO"]
            self.container_diagrams["STD"][file_std_short] = {}
            self.container_listboxes["STD"][file_std_short] = {}
            self.diagrams_setup["STD"][file_std_short] = {}
            for category in categories:
                self.container_diagrams["STD"][file_std_short][category] = None
                self.diagrams_setup["STD"][file_std_short][category] = None
            categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter", "Time Ratio"]
            for category in categories:
                self.diagrams_setup["STD"][file_std_short][category] = {}
            categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
            for category in categories:
                self.container_listboxes["STD"][file_std_short][category] = None
            #
            cb_i = tk.Checkbutton(
                master=frm_std, text=file_std_short, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Very Light"],
                variable=self.container_var["STD"][file_std]["Checkbox"], onvalue=1, offvalue=0, selectcolor=bg_light,
                activebackground=self.bg_colors["Very Light"], activeforeground=self.bg_colors["Very Dark"],
                anchor=tk.CENTER, highlightthickness=0, bd=0)
            text_std.window_create("end", window=cb_i)
            text_std.insert("end", "\t")
            #
            if self.container_var["SRM"][file_std].get() != "Select SRM":
                var_text = self.container_var["SRM"][file_std].get()
                self.container_files["STD"][file_std_short]["SRM"].set(var_text)
            else:
                if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                    var_text = self.container_var["General Settings"]["Default SRM"].get()
                    self.container_var["SRM"][file_std].set(var_text)
                    self.container_files["STD"][file_std_short]["SRM"].set(var_text)
            #
            opt_srm_i = tk.OptionMenu(
                frm_std, self.container_var["SRM"][file_std], *np.sort(self.list_srm),
                command=lambda var_opt=self.container_var["SRM"][file_std], var_indiv=file_std, mode="STD":
                self.ma_change_srm_individual(var_opt, var_indiv, mode))
            opt_srm_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_srm_i.config(
                bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_std.window_create("end", window=opt_srm_i)
            text_std.insert("end", "\t")
            #
            if self.container_var["STD"][file_std]["IS Data"]["IS"].get() != "Select IS":
                var_text = self.container_var["STD"][file_std]["IS Data"]["IS"].get()
                #
            else:
                var_text = "Select IS"
            #
            opt_is_i = tk.OptionMenu(
                frm_std, self.container_var["STD"][file_std]["IS Data"]["IS"], var_text, *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_is_i.config(
                bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_std.window_create("end", window=opt_is_i)
            text_std.insert("end", "\t")
            #
            btn_i = tk.Button(
                master=frm_std, text="Setup", bg=bg_medium, fg=self.bg_colors["Very Dark"],
                activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                command=lambda var_file=file_std, var_type="STD": self.ma_check_specific_file(var_file, var_type))
            text_std.window_create("end", window=btn_i)
            text_std.insert("end", "\t")
            #
            frm_i = tk.Frame(frm_std, bg=self.sign_red, relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_std.window_create("end", window=frm_i)
            text_std.insert("end", "\n")
            #
            self.container_var["STD"][file_std]["Frame"] = frm_i
        #
        # Sample Files
        frm_smpl = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_smpl + 1, column_id=n_col_header + 1,
            n_rows=n_rows - start_row_smpl - 3, n_columns=n_col_files, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.list_smpl):
            parts = file_smpl.split("/")
            file_smpl_short = parts[-1]
            #
            if self.file_loaded is False:
                if "Si29" in self.container_lists["ISOTOPES"]:
                    possible_is = "Si29"
                self.container_var["SMPL"][file_smpl] = {}
                self.container_var["SMPL"][file_smpl]["IS"] = tk.StringVar()
                self.container_var["SMPL"][file_smpl]["IS"].set(possible_is)
                self.container_var["SMPL"][file_smpl]["IS Data"] = {
                    "IS": tk.StringVar(), "Concentration": tk.StringVar()}
                self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(possible_is)
                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set("0.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"] = {
                    "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].set("Select IS")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set("0.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"].set("Select Element")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].set("100.0")
                self.container_var["SMPL"][file_smpl]["Checkbox"] = tk.IntVar()
                self.container_var["SMPL"][file_smpl]["Checkbox"].set(1)
                self.container_var["SMPL"][file_smpl]["ID"] = tk.StringVar()
                self.container_var["SMPL"][file_smpl]["ID"].set("A")
                #
            else:
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
                self.container_var["SMPL"][file_smpl]["Matrix Setup"] = {
                    "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].set("Select IS")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set("0.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"].set("100.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"].set("Select Element")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].set("100.0")
                #
                self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
                self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
                #
                self.container_measurements["EDITED"][file_smpl_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
                #
                self.spikes_isotopes["STD"][file_smpl_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_smpl_short][isotope] = {}
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["MAT"] = []
                #
                self.create_container_results(var_filetype="STD", var_file_short=file_smpl_short)
            #
            dataset_smpl_i = Data(filename=file_smpl)
            df_smpl_i = dataset_smpl_i.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            times_smpl_i = df_smpl_i.iloc[:, 0]
            #
            if file_smpl not in self.container_lists["SMPL"]["Long"] and self.demo_mode == True:
                self.container_lists["SMPL"]["Long"].append(file_smpl)
                self.container_lists["SMPL"]["Short"].append(file_smpl_short)
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
            else:
                if file_smpl not in self.container_lists["SMPL"]["Long"]:
                    self.container_lists["SMPL"]["Long"].append(file_smpl)
                    self.container_lists["SMPL"]["Short"].append(file_smpl_short)
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
            #
            if self.file_loaded == True:
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["ma_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short] = {}
                self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
                #
                self.container_measurements["EDITED"][file_smpl_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()
                #
                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_smpl_short][isotope] = {}
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["MAT"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["INCL"] = []
                #
                self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short)
            #
            if file_smpl_short not in self.container_files["SMPL"]:
                self.container_files["SMPL"][file_smpl_short] = {}
                self.container_files["SMPL"][file_smpl_short]["IS"] = tk.StringVar()
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"] = tk.StringVar()
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set("0.0")
                self.container_measurements["EDITED"][file_smpl_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()
                #
                self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short)
            #
            if len(self.container_lists["SMPL"]["Long"]) < len(self.list_smpl) and self.file_loaded == False:
                self.container_helper["SMPL"][file_smpl_short] = {}
                self.container_helper["SMPL"][file_smpl_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                        "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["INCL"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                          "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
                self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_smpl] = {}
                self.container_helper["limits SPK"][file_smpl]["ID"] = []
                self.container_helper["limits SPK"][file_smpl]["type"] = []
                self.container_helper["limits SPK"][file_smpl]["info"] = []
                self.container_helper["positions"]["SPK"][file_smpl_short] = []
                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
                #
            elif len(self.container_lists["SMPL"]["Long"]) == len(self.list_smpl) and self.file_loaded == False:
                self.container_helper["SMPL"][file_smpl_short] = {}
                self.container_helper["SMPL"][file_smpl_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                        "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["INCL"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                          "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
                self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_smpl] = {}
                self.container_helper["limits SPK"][file_smpl]["ID"] = []
                self.container_helper["limits SPK"][file_smpl]["type"] = []
                self.container_helper["limits SPK"][file_smpl]["info"] = []
                self.container_helper["positions"]["SPK"][file_smpl_short] = []
                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
            #
            categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                          "TOOLBARFRAME_RATIO"]
            self.container_diagrams["SMPL"][file_smpl_short] = {}
            self.container_listboxes["SMPL"][file_smpl_short] = {}
            self.diagrams_setup["SMPL"][file_smpl_short] = {}
            for category in categories:
                self.container_diagrams["SMPL"][file_smpl_short][category] = None
                self.diagrams_setup["SMPL"][file_smpl_short][category] = None
            categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter", "Time Ratio"]
            for category in categories:
                self.diagrams_setup["SMPL"][file_smpl_short][category] = {}
            categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
            for category in categories:
                self.container_listboxes["SMPL"][file_smpl_short][category] = None
            #
            cb_i = tk.Checkbutton(
                master=frm_smpl, text=file_smpl_short, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Very Light"],
                variable=self.container_var["SMPL"][file_smpl]["Checkbox"], onvalue=1, offvalue=0, selectcolor=bg_light,
                activebackground=self.bg_colors["Very Light"], activeforeground=self.bg_colors["Very Dark"],
                anchor=tk.CENTER, highlightthickness=0, bd=0)
            text_smpl.window_create("end", window=cb_i)
            text_smpl.insert("end", "\t")
            #
            if self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get() != "Select IS":
                var_text = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                #
            else:
                var_text = "Select IS"
            #
            opt_is_i = tk.OptionMenu(frm_smpl, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"], var_text,
                                     *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_is_i.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", "\t")
            #
            if self.container_var["SMPL"][file_smpl]["ID"].get() != "A":
                var_text = self.container_var["SMPL"][file_smpl]["ID"].get()
            else:
                var_text = "A"
            opt_id_i = tk.OptionMenu(frm_smpl, self.container_var["SMPL"][file_smpl]["ID"],
                                     *np.sort(self.list_alphabet))
            opt_id_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_id_i.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_id_i)
            text_smpl.insert("end", "\t")
            #
            btn_i = tk.Button(
                master=frm_smpl, text="Setup", bg=bg_medium, fg=self.bg_colors["Very Dark"],
                activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                command=lambda var_file=file_smpl, var_type="SMPL": self.ma_check_specific_file(var_file, var_type))
            text_smpl.window_create("end", window=btn_i)
            text_smpl.insert("end", "\t")
            #
            frm_i = tk.Frame(frm_smpl, bg=self.sign_red, relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_smpl.window_create("end", window=frm_i)
            text_smpl.insert("end", "\n")
            #
            self.container_var["SMPL"][file_smpl]["Frame"] = frm_i
        #
        # Isotopes
        if self.container_var["SRM"]["default"][0].get() != "Select SRM":
            var_text_std = self.container_var["SRM"]["default"][0].get()
        else:
            if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                var_text_std = self.container_var["General Settings"]["Default SRM"].get()
            else:
                var_text_std = "Select SRM"
        #
        self.container_var["SRM"]["default"][0].set(var_text_std)
        #
        if self.container_var["SRM"]["default"][1].get() != "Select SRM":
            var_text_iso = self.container_var["SRM"]["default"][1].get()
        else:
            if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                var_text_iso = self.container_var["General Settings"]["Default SRM"].get()
            else:
                var_text_iso = "Select SRM"
        #
        self.container_var["SRM"]["default"][1].set(var_text_iso)
        #
        frm_iso = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_iso + 1, column_id=n_col_header + n_col_files + 2,
            n_rows=n_rows - 10, n_columns=n_col_iso, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = tk.Scrollbar(master=frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            if self.container_var["LASER"].get() != "Select Gas":
                var_text = self.container_var["LASER"].get()
            else:
                var_text = "Select Gas"
            #
            if isotope not in self.container_var["SRM"]:
                self.container_var["SRM"][isotope] = tk.StringVar()
                self.container_var["SRM"][isotope].set("Select SRM")
                #
                self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                self.container_var["dwell_times"]["Entry"][isotope].set("0.01")
                #
                for file_std_short in self.container_lists["STD"]["Short"]:
                    self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short][isotope].set(1)
                    self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope].set(0)
                    #
                    if file_std_short not in self.container_var["ma_setting"]["Time-Signal Lines"]["STD"]:
                        self.container_var["ma_setting"]["Time-Signal Lines"]["STD"][file_std_short] = {}
                        self.container_var["ma_setting"]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                        self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                        self.container_var["ma_setting"]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                        self.container_var["ma_setting"]["Calculation Interval"]["STD"][file_std_short].set(3)
                        self.container_var["ma_setting"]["Calculation Interval Visibility"]["STD"][
                            file_std_short] = {}
                    self.container_var["ma_setting"]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                #
                for file_smpl_short in self.container_lists["SMPL"]["Short"]:
                    self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope].set(1)
                    self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope].set(0)
                    #
                    if file_smpl_short not in self.container_var["ma_setting"]["Time-Signal Lines"]["SMPL"]:
                        self.container_var["ma_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var["ma_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
                        self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][file_smpl_short] = tk.IntVar()
                        self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
                        self.container_var["ma_setting"]["Calculation Interval Visibility"]["SMPL"][
                            file_smpl_short] = {}
                    self.container_var["ma_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
            #
            if self.file_loaded == True:
                for file_std_short in self.container_lists["STD"]["Short"]:
                    self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display RAW"]["STD"][file_std_short][isotope].set(1)
                    self.container_var["ma_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope].set(0)
                    #
                    if file_std_short not in self.container_var["ma_setting"]["Time-Signal Lines"]["STD"]:
                        self.container_var["ma_setting"]["Time-Signal Lines"]["STD"][file_std_short] = {}
                        self.container_var["ma_setting"]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                        self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                        self.container_var["ma_setting"]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                        self.container_var["ma_setting"]["Calculation Interval"]["STD"][file_std_short].set(3)
                        self.container_var["ma_setting"]["Calculation Interval Visibility"]["STD"][
                            file_std_short] = {}
                    self.container_var["ma_setting"]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                #
                for file_smpl_short in self.container_lists["SMPL"]["Short"]:
                    self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][
                        isotope] = tk.IntVar()
                    self.container_var["ma_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope].set(1)
                    self.container_var["ma_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope].set(0)
                    #
                    if file_smpl_short not in self.container_var["ma_setting"]["Time-Signal Lines"]["SMPL"]:
                        self.container_var["ma_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var["ma_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
                        self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][
                            file_smpl_short] = tk.IntVar()
                        self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
                        self.container_var["ma_setting"]["Calculation Interval Visibility"]["SMPL"][
                            file_smpl_short] = {}
                    self.container_var["ma_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["ma_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][
                        isotope] = {
                        "RAW": None, "SMOOTHED": None}
            #
            frm_i = tk.Frame(frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")
            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Very Dark"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")
            #
            if self.container_var["SRM"][isotope].get() != "Select SRM":
                var_text = self.container_var["SRM"][isotope].get()
            else:
                if self.container_var["SRM"]["default"][1].get() != "Select SRM":
                    var_text = self.container_var["SRM"]["default"][1].get()
                    self.container_var["SRM"][isotope].set(var_text)
                else:
                    var_text = "Select SRM"
            #
            opt_srm_i = tk.OptionMenu(
                frm_iso, self.container_var["SRM"][isotope], *np.sort(self.list_srm),
                command=lambda var_opt=self.container_var["SRM"][isotope], var_indiv=isotope, mode="ISOTOPES":
                self.ma_change_srm_individual(var_opt, var_indiv, mode))
            opt_srm_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_srm_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_iso.window_create("end", window=opt_srm_i)
            text_iso.insert("end", "\t")
            #
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            self.container_var["charge"][isotope] = {"textvar": tk.StringVar()}
            #
            if float(self.container_var["Gas Energy"].get()) >= float(self.ionization_energies["First"][element]) \
                    and float(self.container_var["Gas Energy"].get()) >= float(self.ionization_energies["Second"][
                                                                                   element]):
                self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                charge_fg = self.accent_color
            else:
                self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                charge_fg = self.bg_colors["Very Dark"]
            #
            lbl_i = tk.Label(
                frm_iso, text=self.container_var["charge"][isotope]["textvar"].get(),
                textvariable=self.container_var["charge"][isotope]["textvar"], bg=self.bg_colors["Very Light"],
                fg=charge_fg)
            self.container_var["charge"][isotope]["labelvar"] = lbl_i
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\n")
        #
        ## BUTTONS
        # Matrix Settings
        btn_03a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 3, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Import Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.ma_matrix_concentration_setup)  # Host - Concentration Setup
        btn_03a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 5, column_id=0, n_rows=1,
            n_columns=n_col_header,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="IS Concentration Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.ma_matrix_concentration_setup)  # Host - Concentration Setup
        # Quantification Methods
        btn_04b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_04 + 2, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        btn_04b.configure(state='disabled')
        btn_06a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_06 + 1, column_id=n_col_category, n_rows=1,
            n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.create_dwell_time_window)
        btn_07c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07 + 3, column_id=n_col_category, n_rows=1,
            n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Run", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="BG": self.detect_signal_interval(mode))
        btn_08c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08 + 3, column_id=n_col_category, n_rows=1,
            n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Run", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="MAT": self.detect_signal_interval(mode))
        btn_10a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 1,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_srm_settings)  # Check-Up - SRM Settings
        btn_10b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 2,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.internal_standard_concentration_setup)  # Check-Up - Internal Standard Settings
        btn_10c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 3,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_interval_settings)  # Check-Up - Calculation Interval Settings
        btn_10d = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 4,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_acquisition_times)  # Check-Up - Acquisition Times
        btn_10e = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_10 + 5,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_imported_files)
        btn_std = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_smpl - 2,
            column_id=n_col_header + 1 + n_col_files - 6,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
            bg=self.colors_fi["Medium"]).create_simple_button(
            text="Confirm All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        btn_smpl = SE(
            parent=self.subwindow_ma_settings, row_id=n_rows - 2, column_id=n_col_header + 1 + n_col_files - 6,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
            bg=self.colors_fi["Medium"]).create_simple_button(
            text="Confirm All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        #
        ## RADIOBUTTONS
        rb_03a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 1, column_id=0, n_rows=1,
            n_columns=n_col_category - 4,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Host Setup Selection"], value_rb=1, color_bg=bg_medium,
            fg=self.bg_colors["Very Dark"], text="Oxide (in wt.%)", sticky="nesw", relief=tk.GROOVE)
        rb_03b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 2, column_id=0, n_rows=1,
            n_columns=n_col_category - 4,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Host Setup Selection"], value_rb=2, color_bg=bg_medium,
            fg=self.bg_colors["Very Dark"], text="Element (in ppm)", sticky="nesw", relief=tk.GROOVE)
        rb_03c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 3, column_id=0, n_rows=1,
            n_columns=n_col_category - 4,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Host Setup Selection"], value_rb=3, color_bg=bg_medium,
            fg=self.bg_colors["Very Dark"], text="Experimental Data", sticky="nesw", relief=tk.GROOVE)
        # Quantification Methods
        rb_04a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_04 + 1, column_id=0, n_rows=1,
            n_columns=n_col_category + 6, fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Quantification Method"], value_rb=1, color_bg=bg_medium,
            fg=self.bg_colors["Very Dark"], text="Sensitivity-based (SILLS)", sticky="nesw", relief=tk.GROOVE)
        rb_04b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_04 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Quantification Method"], value_rb=3, color_bg=bg_medium,
            fg=self.bg_colors["Very Dark"], text="Plugin-based Methods", sticky="nesw", relief=tk.GROOVE)
        rb_04b.configure(state="disabled")
        #
        ## ENTRIES
        self.container_var["ma_setting"]["Author"].set(self.container_var["General Settings"]["Default Author"].get())
        var_entr_01a_default = self.container_var["ma_setting"]["Author"].get()
        var_entr_01b_default = self.container_var["ma_setting"]["Source ID"].get()
        var_entr_03a_default = self.container_var["ma_setting"]["Oxide Concentration"].get()
        var_entr_03b_default = self.container_var["ma_setting"]["Element Concentration"].get()
        var_entr_07a_default = self.container_var["ma_setting"]["Time BG Start"].get()
        var_entr_07b_default = self.container_var["ma_setting"]["Time BG End"].get()
        var_entr_08a_default = self.container_var["ma_setting"]["Time MAT Start"].get()
        var_entr_08b_default = self.container_var["ma_setting"]["Time MAT End"].get()
        #
        entr_01a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_01 + 1, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Author"], text_default=var_entr_01a_default)
        entr_01b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_01 + 2, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Source ID"], text_default=var_entr_01b_default)
        entr_03a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 1, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 8,
            fg=bg_light, bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Oxide Concentration"], text_default=var_entr_03a_default)
        entr_03b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 2, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 8,
            fg=bg_light, bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Element Concentration"], text_default=var_entr_03b_default)
        # Default Background Intervals
        entr_07a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07 + 1, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Time BG Start"], text_default=var_entr_07a_default,
            command=lambda event, var_entr=self.container_var["ma_setting"]["Time BG Start"], var_key="Start",
                           mode="default", var_interval="BG":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        entr_07b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_07 + 2, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Time BG End"], text_default=var_entr_07b_default,
            command=lambda event, var_entr=self.container_var["ma_setting"]["Time BG End"], var_key="End",
                           mode="default", var_interval="BG":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        # Default Matrix Intervals
        entr_08a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08 + 1, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Time MAT Start"], text_default=var_entr_08a_default,
            command=lambda event, var_entr=self.container_var["ma_setting"]["Time MAT Start"], var_key="Start",
                           mode="default", var_interval="MAT":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        entr_08b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_08 + 2, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
            var=self.container_var["ma_setting"]["Time MAT End"], text_default=var_entr_08b_default,
            command=lambda event, var_entr=self.container_var["ma_setting"]["Time MAT End"], var_key="End",
                           mode="default", var_interval="MAT":
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        #
        ## OPTION MENUS
        opt_02a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02 + 1, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_srm(
            var_srm=self.container_var["SRM"]["default"][0], text_set=var_text_std, fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color, command=lambda var_srm=self.container_var["SRM"]["default"][0]:
            self.change_srm_default(var_srm))
        opt_02a["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_02a.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        opt_02b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02 + 2, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_srm(
            var_srm=self.container_var["SRM"]["default"][1], text_set=var_text_iso, fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color, command=lambda var_srm=self.container_var["SRM"]["default"][1]:
            self.change_srm_default(var_srm, key="isotope"))
        opt_02b["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_02b.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["IS"]["Default STD"].get() != "Select IS":
            var_text_std_is = self.container_var["IS"]["Default STD"].get()
        else:
            if self.container_var["SRM"]["default"][0].get() != "Select SRM":
                var_srm = self.container_var["SRM"]["default"][0].get()
                srm_default_std = {}
                srm_default_std[var_srm] = {}
                ESRM().place_srm_values(srm_name=var_srm, srm_dict=srm_default_std)
                element_max = max(srm_default_std[var_srm], key=srm_default_std[var_srm].get)
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    #
                    if element == element_max:
                        var_text_std_is = isotope
                        break
                #
            else:
                var_text_std_is = "Select IS"
        #
        opt_02c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_02 + 3, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_menu(
            var_opt=self.container_var["IS"]["Default STD"], text_set=var_text_std_is, option_list=self.container_lists["ISOTOPES"],
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["IS"]["Default STD"], mode="STD":
            self.ma_select_is_default(var_opt, mode))
        opt_02c.grid(row=start_row_02 + 3, column=n_col_category - 4, rowspan=1, columnspan=n_col_category - 2)
        opt_02c["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_02c.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["ma_setting"]["Oxide"].get() != "Select Oxide":
            var_text = self.container_var["ma_setting"]["Oxide"].get()
        else:
            var_text = "Select Oxide"
        #
        opt_03a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 1, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["ma_setting"]["Oxide"], option_list=self.container_lists["Oxides"],
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        opt_03a["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_03a.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["ma_setting"]["Element"].get() != "Select Element":
            var_text = self.container_var["ma_setting"]["Element"].get()
        else:
            var_text = "Select Element"
        opt_03b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 2, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["ma_setting"]["Element"], option_list=self.container_lists["Elements"],
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        opt_03b["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_03b.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["IS"]["Default SMPL"].get() != "Select IS":
            var_text_std_is = self.container_var["IS"]["Default SMPL"].get()
        else:
            if self.container_var["SRM"]["default"][0].get() != "Select SRM":
                var_srm = self.container_var["SRM"]["default"][0].get()
                srm_default_std = {}
                srm_default_std[var_srm] = {}
                ESRM().place_srm_values(srm_name=var_srm, srm_dict=srm_default_std)
                element_max = max(srm_default_std[var_srm], key=srm_default_std[var_srm].get)
                for isotope in self.container_lists["ISOTOPES"]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element == element_max:
                        var_text_std_is = isotope
                        break
            else:
                var_text_std_is = "Select IS"
        opt_03c = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_03 + 4, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_menu(
            var_opt=self.container_var["IS"]["Default SMPL"], text_set=var_text_std_is, option_list=self.container_lists["ISOTOPES"],
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["IS"]["Default SMPL"], mode="SMPL":
            self.ma_select_is_default(var_opt, mode))
        opt_03c.grid(row=start_row_03 + 4, column=n_col_category - 4, rowspan=1, columnspan=n_col_category - 2)
        opt_03c["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_03c.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"
        opt_06a = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_05 + 1, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["ID"]["Default SMPL"], option_list=self.list_alphabet, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["ID"]["Default SMPL"]: self.fi_select_id_default(var_opt))
        opt_06a["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_06a.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["Spike Elimination Method"].get() != "Select Method":
            var_text = self.container_var["Spike Elimination Method"].get()
        else:
            var_text = "Select Method"
        opt_09b = SE(
            parent=self.subwindow_ma_settings, row_id=start_row_09 + 1, column_id=n_col_header - 9, n_rows=1,
            n_columns=n_col_header - 9, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["Spike Elimination Method"], option_list=self.list_se_methods, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Spike Elimination Method"], start_row=start_row_09:
            self.select_spike_elimination(var_opt, start_row))
        opt_09b["menu"].config(fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_09b.config(bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        list_opt_gas = ["Helium", "Neon", "Argon", "Krypton", "Xenon", "Radon"]
        opt_laser = SE(
            parent=self.subwindow_ma_settings, row_id=n_rows - 9, column_id=n_col_header + n_col_files + 14,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["LASER"], option_list=list_opt_gas, text_set="Argon",
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["LASER"]: self.change_carrier_gas(var_opt))
        opt_laser["menu"].config(fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                                 activebackground=self.accent_color)
        opt_laser.config(bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                         activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## INITIALIZATION
        self.select_spike_elimination(
            var_opt=self.container_var["Spike Elimination Method"].get(), start_row=start_row_09, mode="MA")
        #
        if self.file_loaded == True:
            if self.container_var["Spike Elimination"]["STD"]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                #
                self.spike_elimination_all(filetype="STD", algorithm=var_method)
                #
            if self.container_var["Spike Elimination"]["SMPL"]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                #
                self.spike_elimination_all(filetype="SMPL", algorithm=var_method)
        else:
            self.ma_select_is_default(var_opt=self.container_var["IS"]["Default STD"].get())
            self.ma_select_id_default(var_opt=self.container_var["ID"]["Default SMPL"].get())
            self.ma_select_srm_default(var_opt=self.container_var["SRM"]["default"][0].get())
            self.ma_select_srm_default(var_opt=self.container_var["SRM"]["default"][1].get(), mode="ISOTOPES")

    #
    ## MATRIX SETTINGS #################################################################################################
    #
    def ma_matrix_concentration_setup(self):
        ## Window Settings
        window_width = 800
        window_heigth = 450
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_ma_matrix_concentration = tk.Toplevel(self.parent)
        subwindow_ma_matrix_concentration.title("MINERAL ANALYSIS - Matrix Concentration Setup")
        subwindow_ma_matrix_concentration.geometry(var_geometry)
        subwindow_ma_matrix_concentration.resizable(False, False)
        subwindow_ma_matrix_concentration["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_ma_matrix_concentration, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_ma_matrix_concentration, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_ma_matrix_concentration.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_ma_matrix_concentration.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:
            var_text_02 = "Oxide Settings (default)"
        else:
            var_text_02 = "Element Settings (default)"
        #
        lbl_01 = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=19,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text=var_text_02, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 3, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Internal Standard (default)", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## OPTION MENUS
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:
            list_elements = []
            list_compound = []
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for oxide in self.container_lists["Oxides"]:
                key = re.search("(\D+)(\d*)(\D+)(\d*)", oxide)
                element_oxide = key.group(1)
                if element_oxide in list_elements:
                    if oxide not in list_compound:
                        list_compound.append(oxide)
            var_list_is = self.container_lists["Oxides"]
            var_opt_default = self.container_var["ma_setting"]["Oxide"]
            var_entr_default = self.container_var["ma_setting"]["Oxide Concentration"]
            #
            if self.container_var["ma_setting"]["Oxide"].get() != "Select Oxide" \
                    and self.container_var["ma_setting"]["Oxide"].get() not in self.container_lists["Elements"]:
                var_opt_default_text = self.container_var["ma_setting"]["Oxide"].get()
            else:
                var_opt_default_text = "Select Oxide"
            #
            if self.container_var["ma_setting"]["Oxide Concentration"].get() != "100.0":
                var_entr_default_text = self.container_var["ma_setting"]["Oxide Concentration"].get()
            else:
                var_entr_default_text = "100.0"
            #
        elif self.container_var["ma_setting"]["Host Setup Selection"].get() == 2:
            list_elements = []
            list_compound = []
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for element in self.container_lists["Elements"]:
                if element in list_elements:
                    if element not in list_compound:
                        list_compound.append(element)
            var_list_is = self.container_lists["Elements"]
            var_opt_default = self.container_var["ma_setting"]["Element"]
            var_entr_default = self.container_var["ma_setting"]["Element Concentration"]
            #
            if self.container_var["ma_setting"]["Element"].get() != "Select Element" \
                    and self.container_var["ma_setting"]["Element"].get() not in self.container_lists["Oxides"]:
                var_opt_default_text = self.container_var["ma_setting"]["Element"].get()
            else:
                var_opt_default_text = "Select Element"
            #
            if self.container_var["ma_setting"]["Element Concentration"].get() != "1000000":
                var_entr_default_text = self.container_var["ma_setting"]["Element Concentration"].get()
            else:
                var_entr_default_text = "1000000"
        #
        var_opt_is_default = self.container_var["IS"]["Default SMPL"]
        var_opt_is_list = self.container_lists["ISOTOPES"]
        var_entr_is_default = self.container_var["IS"]["Default SMPL Concentration"]
        #
        if var_opt_is_default.get() != "Select IS":
            var_opt_is_default_text = var_opt_is_default.get()
        else:
            var_opt_is_default_text = "Select IS"
        #
        var_entr_is_default_text = self.container_var["IS"]["Default SMPL Concentration"].get()
        #
        opt_02a = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 1, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=var_opt_default, option_list=list_compound, text_set=var_opt_default_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=var_opt_default, var_file=None, state_default=True:
            self.ma_change_matrix_compound(var_opt, var_file, state_default))
        opt_02a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_02a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_02b = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 4, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=var_opt_is_default, option_list=var_opt_is_list, text_set=var_opt_is_default_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=var_opt_is_default, var_file=None, state_default=True:
            self.ma_change_is_smpl(var_opt, var_file, state_default))
        self.opt_02b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        self.opt_02b.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        ## ENTRIES
        entr_02a = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 2, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=var_entr_default, text_default=var_entr_default_text,
            command=lambda event, var_entr=var_entr_default, var_file=None, state_default=True:
            self.ma_change_matrix_concentration(var_entr, var_file, state_default, event))
        entr_02b = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 5, column_id=start_column + 30, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=var_entr_is_default, text_default=var_entr_is_default_text,
            command=lambda event, var_entr=var_entr_is_default, var_file=None, state_default=True:
            self.ma_change_is_concentration(var_entr, var_file, state_default, event))
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_ma_matrix_concentration, row_id=start_row + 1, column_id=start_column, n_rows=16,
            n_columns=29, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:  # Oxide Selection
                var_list_is = self.container_lists["ISOTOPES"]
                var_list_comp = self.container_lists["Oxides"]
                var_opt_comp_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"]
                var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"]
                var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]
                #
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].get() != "Select Oxide":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].get()
                else:
                    if var_opt_default.get() != "Select Oxide" \
                            and var_opt_default.get() not in self.container_lists["Elements"]:
                        var_opt_i_default = var_opt_default.get()
                    else:
                        var_opt_i_default = "Select Oxide"
                #
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"].get() != "100.0":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "100.0"
                #
                if self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get() != "1000000":
                    var_entr_is_default = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get()
                else:
                    var_entr_is_default = "1000000"
                #
            elif self.container_var["ma_setting"]["Host Setup Selection"].get() == 2:  # Element Selection
                var_list_is = self.container_lists["ISOTOPES"]
                var_list_comp = self.container_lists["Elements"]
                var_opt_comp_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"]
                var_opt_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"]
                var_entr_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"]
                #
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"].get() != "Select Element":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                        "Name"].get()
                else:
                    if var_opt_default.get() != "Select Element" \
                            and var_opt_default.get() not in self.container_lists["Oxides"]:
                        var_opt_i_default = var_opt_default.get()
                    else:
                        var_opt_i_default = "Select Element"
                #
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].get() != "100.0":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "100.0"
                #
                if self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get() != "1000000":
                    var_entr_is_default = self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].get()
                else:
                    var_entr_is_default = "1000000"
                #
            #
            var_opt_comp_i.set(var_opt_i_default)
            var_entr_i.set(var_entr_i_default)
            var_entr_is_i.set(var_entr_is_default)
            #
            opt_comp_i = tk.OptionMenu(
                frm_smpl, var_opt_comp_i, *var_list_comp,
                command=lambda var_opt=var_opt_comp_i, var_file=file_smpl, state_default=False:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_comp_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.colors_fi["Dark Font"],
                                    activebackground=self.accent_color)
            opt_comp_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            text_smpl.window_create("end", window=opt_comp_i)
            text_smpl.insert("end", " \t")
            #
            entr_i = tk.Entry(frm_smpl, textvariable=var_entr_i, width=15)
            entr_i.bind(
                "<Return>", lambda event, var_entr=var_entr_i, var_file=file_smpl, state_default=False:
                self.ma_change_matrix_concentration(var_entr, var_file, state_default, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\t")
            #
            opt_is_i = tk.OptionMenu(
                frm_smpl, var_opt_is_i, *var_list_is,
                command=lambda var_opt=var_opt_is_i, var_file=file_smpl, state_default=False:
                self.ma_change_matrix_compound(var_opt, var_file, state_default))
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.colors_fi["Dark Font"],
                                    activebackground=self.accent_color)
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.colors_fi["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            entr_is_i = tk.Entry(frm_smpl, textvariable=var_entr_is_i, width=15)
            entr_is_i.bind(
                "<Return>", lambda event, var_entr=var_entr_is_i, var_file=file_smpl, state_default=False:
                self.ma_change_is_concentration(var_entr, var_file, state_default, event))
            text_smpl.window_create("insert", window=entr_is_i)
            text_smpl.insert("end", "\n")
            #
        #
    def ma_change_matrix_compound(self, var_opt, var_file=None, state_default=False):
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].set(var_opt)
            #
            self.container_var["IS"]["Default SMPL Concentration"].set(1000000)
            if var_key == "Oxide":
                key = re.search("(\D+)(\d*)(\D+)(\d*)", var_opt)
                var_opt_element = key.group(1)
            else:
                var_opt_element = var_opt
            possible_is = []
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_02 = re.search("(\D+)(\d+)", isotope)
                element = key_02.group(1)
                if element == var_opt_element:
                    possible_is.append(isotope)
            #
            self.container_var["IS"]["Default SMPL"].set("Select IS")
            for index, isotope in enumerate(possible_is):
                if index == 0:
                    self.opt_02b["menu"].delete(0, "end")
                #
                self.opt_02b["menu"].add_command(
                    label=isotope, command=lambda var_opt=isotope, var_file=None, state_default=True:
                    self.ma_change_is_smpl(var_opt, var_file, state_default))
            #
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"][var_key]["Name"].set(var_opt)
    #
    def ma_change_matrix_concentration(self, var_entr, var_file, state_default, event):
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Concentration"].set(var_entr.get())
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"][var_key]["Concentration"].set(var_entr.get())
            #
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(
                int(float(var_entr.get())/100*float(self.container_var["IS"]["Default SMPL Concentration"].get())))
    #
    def ma_change_is_smpl(self, var_opt, var_file=None, state_default=False):
        if self.container_var["ma_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        self.container_var["IS"]["Default SMPL"].set(var_opt)
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_opt)
                if var_key == "Oxide":
                    var_oxide = self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].get()
                    key = re.search("(\D+)(\d*)(\D+)(\d*)", var_oxide)
                    list_elements = []
                    list_amounts = []
                    list_fraction = {}
                    #
                    for index, item in enumerate(key.groups()):
                        if index in [0, 2]:
                            list_elements.append(item)
                        else:
                            if item == "":
                                list_amounts.append(1)
                            else:
                                list_amounts.append(int(item))
                    #
                    mass_total = 0
                    for index, element in enumerate(list_elements):
                        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                            mass_total += list_amounts[index]*self.chemistry_data[element]
                        else:
                            mass_total += list_amounts[index]*self.chemistry_data_sills[element]
                    #
                    for index, element in enumerate(list_elements):
                        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                            list_fraction[element] = (list_amounts[index]*self.chemistry_data[element])/mass_total
                        else:
                            list_fraction[element] = (list_amounts[index]*self.chemistry_data_sills[element])/mass_total
                        #
                        if index == 0:
                            oxide_weight = (float(self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"][
                                "Concentration"].get()))/100
                            is_concentration = round(list_fraction[element]*10**6, 4)
                            self.container_var["IS"]["Default SMPL Concentration"].set(is_concentration)
                            self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(round(
                                oxide_weight*is_concentration, 4))
                #
                else:
                    oxide_weight = (float(self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"][
                                              "Concentration"].get())) / 100
                    is_concentration = round(1*10**6, 4)
                    self.container_var["IS"]["Default SMPL Concentration"].set(is_concentration)
                    self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(
                        round(oxide_weight*is_concentration, 4))
        else:
            self.container_var["SMPL"][var_file]["IS Data"]["IS"].set(var_opt)
            self.container_var["SMPL"][var_file]["IS"].set(var_opt)
    #
    def ma_change_is_concentration(self, var_entr, var_file, state_default, event):
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_entr.get())
        else:
            self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(var_entr.get())
    #
    ####################################################################################################################
    #
    def ma_select_srm_default(self, var_opt, mode="STD"):
        if mode == "STD":
            for file_std in self.list_std:
                parts = file_std.split("/")
                #
                self.container_var["SRM"][file_std].set(var_opt)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["SRM"][isotope].set(var_opt)
                #self.container_files["SRM"][isotope].set(var_opt)
        #
        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
        #
        self.fill_srm_values(var_srm=var_opt)
        #
        if mode == "STD":
            for file_std in self.container_lists["STD"]["Long"]:
                var_srm = self.container_var["SRM"][file_std].get()
                var_is = self.container_var["STD"][file_std]["IS Data"]["IS"].get()
                key = re.search("(\D+)(\d*)", var_is)
                element_is = key.group(1)
                if var_srm != "Select SRM":
                    self.container_var["STD"][file_std]["IS Data"]["Concentration"].set(
                        self.srm_actual[var_srm][element_is])

    # def ma_select_is_default(self, var_opt, mode="STD"):
    #     if mode == "STD":
    #         var_is = var_opt
    #         for file_std in self.list_std:
    #             self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)

    #
    def ma_select_id_default(self, var_opt):
        var_id = var_opt
        for file_smpl in self.list_smpl:
            self.container_var["SMPL"][file_smpl]["ID"].set(var_id)
    #
    def ma_change_srm_individual(self, var_opt, var_indiv, mode="STD"):
        if mode == "STD":
            parts = var_indiv.split("/")
            #
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["SRM"][var_indiv].set(var_opt)
        #
        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
        #
        self.fill_srm_values(var_srm=var_opt)
    #
    ## FILE-SPECIFIC ANALYSIS ##########################################################################################
    #
    def ma_check_specific_file(self, var_file, var_type="STD", checkup_mode=False):
        if checkup_mode == True:
            if var_type == "STD":
                var_file = self.ma_current_file_std
            elif var_type == "SMPL":
                var_file = self.ma_current_file_smpl
        #
        ## INPUT
        parts = var_file.split("/")
        var_file_short = parts[-1]
        self.helper_intervals = {"BG": [], "MAT": []}
        #
        ## Window Settings
        window_width = 1060
        window_heigth = 750
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_ma_checkfile = tk.Toplevel(self.parent)
        self.subwindow_ma_checkfile.title("MINERAL ANALYSIS - File Analysis of " + str(var_file_short))
        self.subwindow_ma_checkfile.geometry(var_geometry)
        self.subwindow_ma_checkfile.resizable(False, False)
        self.subwindow_ma_checkfile["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_checkfile, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_checkfile, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_checkfile.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_checkfile.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row, column_id=start_column + 14, n_rows=n_rows - 8,
            n_columns=n_columns - 11, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(
            relief=tk.SOLID)
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Display Options", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 18, column_id=start_column, n_rows=1,
            n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Anaylsis Mode", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 22, column_id=start_column, n_rows=1,
            n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Interval Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column, n_rows=1,
            n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=start_column, n_rows=1,
            n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## BUTTONS
        btn_02a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 16, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Show All", bg_active=self.bg_colors["Dark"], fg_active=self.bg_colors["Light Font"],
            command=lambda var_type=var_type, var_file_short=var_file_short: self.ma_show_all_lines(
                var_type, var_file_short, ))
        btn_02b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 17, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Hide All", bg_active=self.bg_colors["Dark"], fg_active=self.bg_colors["Light Font"],
            command=lambda var_type=var_type, var_file_short=var_file_short: self.ma_hide_all_lines(
                var_type, var_file_short))
        btn_04a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 25, column_id=0, n_rows=2, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Remove Interval", bg_active=self.bg_colors["Dark"], fg_active=self.bg_colors["Light Font"],
            command=lambda var_type=var_type, var_file_short=var_file_short: self.ma_remove_interval(var_type,
                                                                                                     var_file_short))
        btn_08 = SE(
            parent=self.subwindow_ma_checkfile, row_id=n_rows - 2, column_id=0, n_rows=2, n_columns=14,
            fg=self.colors_fi["Dark Font"], bg=self.accent_color).create_simple_button(
            text="Confirm and Update \nData", bg_active=self.bg_colors["Dark"],
            fg_active=self.bg_colors["Light Font"])
        #
        ## RADIOBUTTONS
        rb_02a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 16, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="RAW", sticky="nesw",
            relief=tk.GROOVE)
        rb_02b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 17, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SMOOTHED", sticky="nesw",
            relief=tk.GROOVE)
        #
        rb_03a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 19, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Analyse Mode Plot"][var_type][var_file_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Signal Plot", sticky="nesw",
            relief=tk.GROOVE, command=lambda var_file=var_file, var_type=var_type, var_lb_state=False:
            self.ma_show_time_signal_diagram(var_file, var_type, var_lb_state))
        rb_03b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 20, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Analyse Mode Plot"][var_type][var_file_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Ratio Plot", sticky="nesw",
            relief=tk.GROOVE, command=lambda var_file=var_file, var_type=var_type:
            self.ma_show_time_ratio_diagram(var_file, var_type))
        rb_03c = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 21, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Analyse Mode Plot"][var_type][var_file_short], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Quick Results", sticky="nesw",
            relief=tk.GROOVE, command=lambda var_file=var_file, var_type=var_type:
            self.ma_show_quick_results(var_file, var_type))
        #
        rb_05 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 14, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["BG"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=0,
            color_bg=self.colors_intervals["BG"], fg=self.bg_colors["Light Font"], text="Background Interval",
            sticky="nesw", relief=tk.GROOVE)
        rb_06 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 27, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["MAT"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=1,
            color_bg=self.colors_intervals["MAT"], fg=self.bg_colors["Light Font"], text="Matrix Interval",
            sticky="nesw",
            relief=tk.GROOVE)
        rb_08 = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 22, column_id=start_column + 14, n_rows=1,
            n_columns=26, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="No Selection",
            sticky="nesw", relief=tk.GROOVE)
        #
        ## CHECKBOXES
        if "BG" not in self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][
            var_file_short]:
            self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short] = {
                "BG": tk.IntVar(), "MAT": tk.IntVar(), "INCL": tk.IntVar()}
            self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["BG"].set(
                1)
            self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
                "MAT"].set(1)
        #
        cb_bg = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 25,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["BG"]).create_simple_checkbox(
            var_cb=self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
                "BG"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="BG", var_type=var_type, var_file_short=var_file_short:
            self.ma_change_interval_visibility(var_key, var_type, var_file_short))
        cb_mat = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=start_column + 38,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["MAT"]).create_simple_checkbox(
            var_cb=self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
                "MAT"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="MAT", var_type=var_type, var_file_short=var_file_short:
            self.ma_change_interval_visibility(var_key, var_type, var_file_short))
        #
        ## ENTRIES
        var_entr_start = tk.StringVar()
        var_entr_start.set("Set start value")
        var_entr_end = tk.StringVar()
        var_entr_end.set("Set end value")
        self.helper_time_entries = {"Start": var_entr_start, "End": var_entr_end}
        #
        entr_04a = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 23, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=var_entr_start, text_default=var_entr_start.get(),
            command=lambda event, var_entr=var_entr_start, var_key="Start", mode=var_file, var_interval=None:
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        entr_04b = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=var_entr_end, text_default=var_entr_end.get(),
            command=lambda event, var_entr=var_entr_end, var_key="End", mode=var_file, var_interval=None:
            self.ma_set_bg_interval(var_entr, var_key, mode, var_interval, event))
        #
        ## MEASURED ISOTOPES
        frm_iso = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 1, column_id=start_column, n_rows=14,
            n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = tk.Scrollbar(master=frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            frm_i = tk.Frame(frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")
            #
            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")
            #
            cb_raw_i = tk.Checkbutton(
                frm_iso,
                variable=self.container_var["ma_setting"]["Display RAW"][var_type][var_file_short][isotope],
                text="RAW", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"],
                command=lambda var_type=var_type, var_file_short=var_file_short, var_datatype="RAW",
                               var_isotope=isotope: self.ma_change_line_visibility(var_type, var_file_short,
                                                                                   var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_raw_i)
            text_iso.insert("end", "\t")
            #
            cb_smoothed_i = tk.Checkbutton(
                frm_iso, variable=self.container_var["ma_setting"]["Display SMOOTHED"][var_type][var_file_short][
                    isotope], text="SMOOTHED", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"],
                fg=self.bg_colors["Dark Font"],
                command=lambda var_type=var_type, var_file_short=var_file_short, var_datatype="SMOOTHED",
                               var_isotope=isotope: self.ma_change_line_visibility(var_type, var_file_short,
                                                                                   var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_smoothed_i)
            text_iso.insert("end", "\n")
        #
        ## BACKGROUND INTERVAL
        lb_bg, scrollbar_bg_y = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=start_column + 14, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["BG LB"]).create_simple_listbox_grid(
            include_scrb_x=False)
        self.container_helper[var_type][var_file_short]["BG"]["Listbox"] = lb_bg
        #
        ## MATRIX INTERVAL
        lb_mat, scrollbar_mat_y = SE(
            parent=self.subwindow_ma_checkfile, row_id=start_row + 24, column_id=start_column + 27, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["MAT LB"]).create_simple_listbox_grid(include_scrb_x=False)
        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"] = lb_mat
        #
        ## INITIALIZATION
        #
        self.ma_show_time_signal_diagram(var_file=var_file, var_type=var_type)
    #
    def ma_show_time_signal_diagram(self, var_file, var_type, var_lb_state=True):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas_ratio = self.container_helper[var_type][var_file_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass
        #
        try:
            resultsframe = self.container_helper[var_type][var_file_short]["RESULTS FRAME"]
            #
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass
        #
        self.fig_specific = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_specific = FigureCanvasTkAgg(self.fig_specific, master=self.subwindow_ma_checkfile)
        self.canvas_specific.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame_specific = tk.Frame(master=self.subwindow_ma_checkfile)
        self.toolbarFrame_specific.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific = NavigationToolbar2Tk(self.canvas_specific, self.toolbarFrame_specific)
        self.toolbar_specific.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific._message_label.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific.winfo_children()[-2].config(background=self.bg_colors["Very Light"])
        #
        self.container_helper[var_type][var_file_short]["FIGURE"] = self.fig_specific
        self.container_helper[var_type][var_file_short]["CANVAS"] = self.canvas_specific
        self.container_helper[var_type][var_file_short]["TOOLBARFRAME"] = self.toolbarFrame_specific
        #
        df_data = self.load_and_assign_data(filename=var_file)
        self.dataset_time = list(df_data.iloc[:, 0])
        x_max = max(self.dataset_time)
        icp_measurements = np.array([[df_data[isotope] for isotope in self.container_lists["ISOTOPES"]]])
        y_max = np.amax(icp_measurements)
        #
        ## DIAGRAMS
        ax = self.fig_specific.add_subplot(label=np.random.uniform())
        self.container_helper[var_type][var_file_short]["AXES"] = {"Time-Signal": ax}
        #
        for isotope in self.container_lists["ISOTOPES"]:
            ln_raw = ax.plot(self.dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                             linewidth=1, visible=True)
            self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope]["RAW"] = ln_raw
            #
            if "Uncut" in self.container_measurements["EDITED"][var_file_short][isotope]:
                ln_smoothed = ax.plot(
                    self.dataset_time, self.container_measurements["EDITED"][var_file_short][isotope]["Uncut"],
                    label=isotope, color=self.isotope_colors[isotope], linewidth=1, visible=True)
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "SMOOTHED"] = ln_smoothed
                self.container_var["ma_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(1)
                #
        #
        if self.pysills_mode in ["FI", "MI"]:
            var_check_bg = self.container_helper[var_type][var_file_short]["BG"]["Content"]
        else:
            var_check_bg = self.container_helper[var_type][var_file_short]["BG"]["Content"]
        #
        if len(var_check_bg) > 0:
            if self.pysills_mode in ["MA", "FI", "MI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short]["BG"]["Content"].items():
                    times_bg = var_content["Times"]
                    #
                    box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                    var_content["Object"] = box_bg
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["BG"]["Listbox"].insert(
                            tk.END, "BG" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            else:
                times_bg = self.container_helper[var_type][var_file_short]["BG"][1]["Times"]
                #
                box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                self.container_helper[var_type][var_file_short]["BG"][1]["Object"] = box_bg
        #
        if self.pysills_mode == "MA":
            signal_key = "MAT"
            var_check_sig = self.container_helper[var_type][var_file_short][signal_key]["Content"]
        else:
            signal_key = "MAT"
            var_check_sig = self.container_helper[var_type][var_file_short][signal_key]["Content"]
        #
        if len(var_check_sig) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][signal_key][
                    "Content"].items():
                    times_sig = var_content["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][signal_key][
                    "Content"].items():
                    times_sig = self.container_helper[var_type][var_file_short][signal_key]["Content"][1]["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            else:
                for var_id, var_content in self.container_helper[var_type][var_file_short][signal_key][
                    "Content"].items():
                    times_sig = var_content["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
        #
        if self.pysills_mode == "MA":
            inclusion_key = "INCL"
            var_check_incl = []
        else:
            inclusion_key = "INCL"
            var_check_incl = self.container_helper[var_type][var_file_short][inclusion_key]["Content"]
        #
        if len(var_check_incl) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][inclusion_key][
                    "Content"].items():
                    times_incl = var_content["Times"]
                    #
                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35,
                                          color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][inclusion_key][
                    "Content"].items():
                    times_incl = self.container_helper[var_type][var_file_short][inclusion_key]["Content"][1][
                        "Times"]
                    #
                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35,
                                          color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
        #
        ax.grid(True)
        ax.set_yscale("log")
        ax.set_xlim(left=0, right=x_max)
        ax.set_xticks(np.arange(0, x_max, 20))
        ax.set_ylim(bottom=100, top=1.5*y_max)
        ax.grid(which="major", linestyle="-", linewidth=1)
        ax.minorticks_on()
        ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        ax.set_axisbelow(True)
        ax.set_title(var_file_short, fontsize=9)
        ax.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        ax.set_ylabel("Signal Intensity $I$ (cps)", labelpad=0.5, fontsize=8)
        ax.xaxis.set_tick_params(labelsize=8)
        ax.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_specific.draw()
        #
        self.canvas_specific.mpl_connect(
            "button_press_event", lambda event, var_type=var_type, var_file_short=var_file_short:
            self.ma_add_interval_to_diagram(var_type, var_file_short, event))
    #
    def ma_show_time_ratio_diagram(self, var_file, var_type):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass
        #
        try:
            resultsframe = self.container_helper[var_type][var_file_short]["RESULTS FRAME"]
            #
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass
        #
        ##
        var_is = self.container_var[var_type][var_file]["IS Data"]["IS"].get()
        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]
        #
        self.fig_specific_ratio = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        ax_ratio = self.fig_specific_ratio.add_subplot(label=np.random.uniform())
        self.container_helper[var_type][var_file_short]["AXES"] = {"Time-Ratio": ax_ratio}
        #
        self.canvas_specific_ratio = FigureCanvasTkAgg(self.fig_specific_ratio, master=self.subwindow_ma_checkfile)
        self.canvas_specific_ratio.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame_specific_ratio = tk.Frame(master=self.subwindow_ma_checkfile)
        self.toolbarFrame_specific_ratio.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific_ratio = NavigationToolbar2Tk(self.canvas_specific_ratio, self.toolbarFrame_specific_ratio)
        self.toolbar_specific_ratio.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific_ratio._message_label.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific_ratio.winfo_children()[-2].config(background=self.bg_colors["Very Light"])
        #
        self.container_helper[var_type][var_file_short]["FIGURE RATIO"] = self.fig_specific_ratio
        self.container_helper[var_type][var_file_short]["CANVAS RATIO"] = self.canvas_specific_ratio
        self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"] = self.toolbarFrame_specific_ratio
        #
        df_data = self.load_and_assign_data(filename=var_file)
        self.dataset_time = list(df_data.iloc[:, 0])
        x_max = max(self.dataset_time)
        icp_measurements = np.array([[df_data[isotope]/df_data[var_is] for isotope in self.container_lists["ISOTOPES"]]])
        y_max = np.amax(icp_measurements)
        #
        for isotope in self.container_lists["ISOTOPES"]:
            ln_raw = ax_ratio.plot(self.dataset_time, df_data[isotope]/df_data[var_is], label=isotope,
                                   color=self.isotope_colors[isotope], linewidth=1, visible=True)
        #
        ax_ratio.grid(True)
        ax_ratio.set_yscale("log")
        ax_ratio.set_xlim(left=0, right=x_max)
        ax_ratio.set_xticks(np.arange(0, x_max, 20))
        ax_ratio.set_ylim(bottom=10**(-5), top=1.5*y_max)
        ax_ratio.grid(which="major", linestyle="-", linewidth=1)
        ax_ratio.minorticks_on()
        ax_ratio.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        ax_ratio.set_axisbelow(True)
        ax_ratio.set_title(var_file_short, fontsize=9)
        ax_ratio.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        ax_ratio.set_ylabel("Signal Intensity Ratio $I$ (cps/cps)", labelpad=0.5, fontsize=8)
        ax_ratio.xaxis.set_tick_params(labelsize=8)
        ax_ratio.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_specific_ratio.draw()
        #
    #
    def ma_show_quick_results(self, var_file, var_type):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass
        #
        try:
            canvas_ratio = self.container_helper[var_type][var_file_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass
        #
        ##
        var_is = self.container_var[var_type][var_file]["IS Data"]["IS"].get()
        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]
        #
        ## FRAMES
        frm_quick = SE(
            parent=self.subwindow_ma_checkfile, row_id=0, column_id=14, n_rows=30, n_columns=39,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        self.container_helper[var_type][var_file_short]["RESULTS FRAME"] = frm_quick
        #
        ## TREEVIEWS
        list_categories = ["Category"]
        list_categories.extend(self.container_lists["ISOTOPES"])
        list_width = list(85*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 175
        #
        self.tv_results_quick = SE(
            parent=self.subwindow_ma_checkfile, row_id=0, column_id=14, n_rows=14, n_columns=38,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(list_categories), text_n=list_categories,
            width_n=list_width, individual=True)
        #
        scb_v = ttk.Scrollbar(self.subwindow_ma_checkfile, orient="vertical")
        scb_h = ttk.Scrollbar(self.subwindow_ma_checkfile, orient="horizontal")
        self.tv_results_quick.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_results_quick.yview)
        scb_h.config(command=self.tv_results_quick.xview)
        scb_v.grid(row=0, column=52, rowspan=14, columnspan=1, sticky="ns")
        scb_h.grid(row=14, column=14, rowspan=1, columnspan=38, sticky="ew")
        #
        ## INITIALIZATION
        # Intensity-related parameters
        if var_type == "STD":
            self.ma_get_intensity(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="All",
                mode="Specific")
            self.ma_get_intensity_corrected(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                mode="Specific")
        else:
            for index, file_std_short in enumerate(self.container_lists["STD"]["Short"]):
                file_std_long = self.container_lists["STD"]["Long"][index]
                self.ma_get_intensity(
                    var_filetype="STD", var_datatype="RAW", var_file_short=file_std_short, var_focus="All",
                    mode="Specific")
            self.ma_get_intensity_corrected(
                var_filetype="STD", var_datatype="RAW", var_file_short=None,
                var_file_long=None, mode="only STD")
            #
            self.ma_get_intensity(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="All",
                mode="Specific")
            self.ma_get_intensity_corrected(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                mode="Specific")
            #
        self.ma_get_intensity_ratio(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
            var_focus="MAT")
        # Sensitivity-related parameters
        self.ma_get_analytical_sensitivity(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.ma_get_normalized_sensitivity(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.ma_get_rsf(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        # Concentration-related parameters
        self.ma_get_concentration(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.ma_get_concentration_ratio(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.ma_get_lod(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        #
        entries_intensity_bg_i = ["Intensity BG"]
        entries_intensity_mat_i = ["Intensity MAT"]
        entries_intensity_ratio_i = ["Intensity Ratio"]
        entries_analytical_sensitivity_i = ["Analytical Sensitivity"]
        entries_normalized_sensitivity_i = ["Normalized Sensitivity"]
        entries_rsf_i = ["Relative Sensitivity Factor"]
        entries_concentration_i = ["Concentration"]
        entries_concentration_ratio_i = ["Concentration Ratio"]
        entries_lod_i = ["Limit of Detection"]
        #
        for isotope in self.container_lists["ISOTOPES"]:
            # Intensity Results
            intensity_bg_i = self.container_intensity[var_type]["RAW"][var_file_short]["BG"][isotope]
            intensity_mat_i = self.container_intensity_corrected[var_type]["RAW"][var_file_short]["MAT"][isotope]
            intensity_ratio_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short]["MAT"][isotope]
            # Sensitivity Results
            analytical_sensitivity_i = self.container_analytical_sensitivity[var_type]["RAW"][var_file_short]["MAT"][
                isotope]
            normalized_sensitivity_i = self.container_normalized_sensitivity[var_type]["RAW"][var_file_short]["MAT"][
                isotope]
            rsf_i = self.container_rsf[var_type]["RAW"][var_file_short]["MAT"][isotope]
            # Concentration Results
            concentration_i = self.container_concentration[var_type]["RAW"][var_file_short]["MAT"][isotope]
            concentration_ratio_i = self.container_concentration_ratio[var_type]["RAW"][var_file_short]["MAT"][isotope]
            lod_i = self.container_lod[var_type]["RAW"][var_file_short]["MAT"][isotope]
            #
            entries_intensity_bg_i.append(f"{intensity_bg_i:.{1}f}")
            entries_intensity_mat_i.append(f"{intensity_mat_i:.{1}f}")
            entries_intensity_ratio_i.append(f"{intensity_ratio_i:.{3}E}")
            entries_analytical_sensitivity_i.append(f"{analytical_sensitivity_i:.{3}f}")
            entries_normalized_sensitivity_i.append(f"{normalized_sensitivity_i:.{3}f}")
            entries_rsf_i.append(f"{rsf_i:.{3}f}")
            entries_concentration_i.append(f"{concentration_i:.{3}f}")
            entries_concentration_ratio_i.append(f"{concentration_ratio_i:.{3}E}")
            entries_lod_i.append(f"{lod_i:.{3}f}")
            #
        self.tv_results_quick.insert("", tk.END, values=entries_intensity_bg_i)
        self.tv_results_quick.insert("", tk.END, values=entries_intensity_mat_i)
        self.tv_results_quick.insert("", tk.END, values=entries_intensity_ratio_i)
        self.tv_results_quick.insert("", tk.END, values=entries_analytical_sensitivity_i)
        self.tv_results_quick.insert("", tk.END, values=entries_normalized_sensitivity_i)
        self.tv_results_quick.insert("", tk.END, values=entries_rsf_i)
        self.tv_results_quick.insert("", tk.END, values=entries_concentration_i)
        self.tv_results_quick.insert("", tk.END, values=entries_concentration_ratio_i)
        self.tv_results_quick.insert("", tk.END, values=entries_lod_i)
    #
    def ma_show_all_lines(self, var_type, var_file_short):
        if self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "RAW"][0].set_visible(True)
                self.container_var["ma_setting"]["Display RAW"][var_type][var_file_short][isotope].set(1)
        elif self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "SMOOTHED"][0].set_visible(True)
                self.container_var["ma_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(1)
        #
        self.canvas_specific.draw()

    #
    def ma_hide_all_lines(self, var_type, var_file_short):
        if self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "RAW"][0].set_visible(False)
                self.container_var["ma_setting"]["Display RAW"][var_type][var_file_short][isotope].set(0)
        elif self.container_var["ma_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "SMOOTHED"][0].set_visible(False)
                self.container_var["ma_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(0)
        #
        self.canvas_specific.draw()

    #
    def ma_change_line_visibility(self, var_type, var_file_short, var_datatype, var_isotope):
        var_key = "Display " + str(var_datatype)
        if self.container_var["ma_setting"][var_key][var_type][var_file_short][var_isotope].get() == 1:
            self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                var_datatype][
                0].set_visible(True)
        elif self.container_var["ma_setting"][var_key][var_type][var_file_short][var_isotope].get() == 0:
            self.container_var["ma_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                var_datatype][
                0].set_visible(False)
        #
        self.canvas_specific.draw()
    #
    def ma_add_interval_to_diagram(self, var_type, var_file_short, event):
        if self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:  # BG
            var_key = "BG"
            var_color = self.colors_intervals[var_key]
        elif self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1:  # MAT
            var_key = "MAT"
            var_color = self.colors_intervals[var_key]
        #
        if self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() in [0, 1, 2]:
            x_nearest = min(self.dataset_time, key=lambda x: abs(x - event.xdata))
            #
            if len(self.helper_intervals[var_key]) < 1:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
            else:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
                #
                key_id = self.container_helper[var_type][var_file_short][var_key]["ID"] + 1
                time_0 = self.helper_intervals[var_key][0][0]
                time_1 = self.helper_intervals[var_key][1][0]
                index_0 = self.helper_intervals[var_key][0][1]
                index_1 = self.helper_intervals[var_key][1][1]
                #
                box_key = self.container_helper[var_type][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.35, color=var_color)
                self.canvas_specific.draw()
                #
                self.container_helper[var_type][var_file_short][var_key]["Content"][key_id] = {
                    "Times": [time_0, time_1], "Indices": [index_0, index_1], "Object": box_key}
                #
                self.container_helper[var_type][var_file_short][var_key]["Listbox"].insert(
                    tk.END, var_key + str(key_id) + " [" + str(self.helper_intervals[var_key][0][0]) + "-" +
                            str(self.helper_intervals[var_key][1][0]) + "]")
                #
                self.helper_intervals[var_key].clear()
                self.container_helper[var_type][var_file_short][var_key]["ID"] = key_id
                self.container_helper[var_type][var_file_short][var_key]["Indices"].append(key_id)
                #
                self.canvas_specific.draw()
    #
    def ma_change_interval_visibility(self, var_key, var_type, var_file_short):
        if self.container_var["ma_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
            var_key].get() == 0:
            var_state = False
        else:
            var_state = True
        #
        for var_id, var_content in self.container_helper[var_type][var_file_short][var_key]["Content"].items():
            var_content["Object"].set_visible(var_state)
        #
        self.canvas_specific.draw()
    #
    def ma_remove_interval(self, var_type, var_file_short):
        if self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:
            var_key = "BG"
        elif self.container_var["ma_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1:
            var_key = "MAT"
        #
        var_lb = self.container_helper[var_type][var_file_short][var_key]["Listbox"]
        #
        item = self.container_helper[var_type][var_file_short][var_key]["Listbox"].curselection()[0]
        value = var_lb.get(item)
        value_parts = value.split(" ")
        key_id = re.search("(\D+)(\d+)", value_parts[0])
        var_id = int(key_id.group(2))
        #
        self.container_helper[var_type][var_file_short][var_key]["Indices"].remove(var_id)
        var_lb.delete(tk.ANCHOR)
        self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]["Object"].set_visible(False)
        del self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]
        #
        self.canvas_specific.draw()
    #
    def ma_set_bg_interval(self, var_entr, var_key, mode, var_interval, event):
        if mode == "default":
            time = var_entr.get()
            time = time.replace(",", ".")
            #
            for var_type in ["STD", "SMPL"]:
                for var_file in self.container_lists[var_type]["Long"]:
                    df_data = self.load_and_assign_data(filename=var_file)
                    dataset_time = list(df_data.iloc[:, 0])
                    var_file_short = var_file.split("/")[-1]
                    #
                    if 1 not in self.container_helper[var_type][var_file_short][var_interval]["Content"]:
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1] = {
                            "Times": [None, None], "Indices": [None, None], "Object": None}
                        self.container_helper[var_type][var_file_short][var_interval]["ID"] += 1
                        self.container_helper[var_type][var_file_short][var_interval]["Indices"].append(1)
                    #
                    x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
                    if var_key == "Start":
                        var_entr.set("Start value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Times"][
                            0] = var_time
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Indices"][
                            0] = var_index
                    elif var_key == "End":
                        var_entr.set("End value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Times"][
                            1] = var_time
                        self.container_helper[var_type][var_file_short][var_interval]["Content"][1]["Indices"][
                            1] = var_index
                    #
        elif mode in self.container_lists["STD"]["Long"]:
            var_file = mode
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["ma_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["ma_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 1:
                var_category = "MAT"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["STD"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["STD"][var_file_short][var_category]["Content"]:
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["STD"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["STD"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    0] = var_index
            elif var_key == "End":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    1] = var_index
                #
                time_0 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["STD"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["STD"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
            #
        elif mode in self.container_lists["SMPL"]["Long"]:
            var_file = mode
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["ma_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 1:
                var_category = "MAT"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["SMPL"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["SMPL"][var_file_short][var_category]["Content"]:
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["SMPL"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["SMPL"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][
                    0] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    0] = var_index
            elif var_key == "End":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][
                    1] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][
                    1] = var_index
                #
                time_0 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["SMPL"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["SMPL"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
    #
    def ma_datareduction_tables(self, init=False): # MA - data reduction tables #######################
        ## Initialization
        if init == True:
            var_filetype = "None"
            var_file_short = "None"
            var_file_long = "None"
            var_focus = "None"
            #
            for var_datatype in ["RAW", "SMOOTHED"]:
                # Intensity Analysis
                self.ma_get_intensity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_focus=var_focus, mode="All")
                self.ma_get_intensity_corrected(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.ma_get_intensity_ratio(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                # Sensitivity Analysis
                self.ma_get_analytical_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.ma_get_normalized_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.ma_get_rsf(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                # Compositional Analysis
                self.ma_get_concentration(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.ma_get_concentration_ratio(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.ma_get_lod(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
        #
        if self.container_var["ma_datareduction_files"]["File Type"].get() == 0:
            var_filetype = "STD"
        elif self.container_var["ma_datareduction_files"]["File Type"].get() == 1:
            var_filetype = "SMPL"
        #
        if self.container_var["ma_datareduction_files"]["Data Type"].get() == 0:
            var_datatype = "RAW"
        elif self.container_var["ma_datareduction_files"]["Data Type"].get() == 1:
            var_datatype = "SMOOTHED"
        #
        if self.container_var["ma_datareduction_files"]["Focus"].get() == 0:
            var_focus = "MAT"
        #
        var_id = self.container_var["ID"]["Results Files"].get()
        #
        if len(self.tv_results_files.get_children()) > 0:
            for item in self.tv_results_files.get_children():
                self.tv_results_files.delete(item)
        #
        helper_values = {}
        helper_separator = ["-"]
        for isotope in self.container_lists["ISOTOPES"]:
            if isotope not in helper_values:
                helper_values[isotope] = []
                helper_separator.append("-")
        #
        if self.container_var["ma_datareduction_files"]["Result Category"].get() == 0:  # Concentrations
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            try:
                                value = self.container_concentration[var_filetype][var_datatype][file_short][
                                    var_focus][isotope]
                                value_lod_i = self.container_lod[var_filetype][var_datatype][file_short][var_focus][
                                    isotope]
                                #
                                if value >= value_lod_i:
                                    n_digits = self.ma_determine_ndigits(var_value=value)
                                    entries_category.append(f"{value:.{n_digits}f}")
                                    helper_values[isotope].append(value)
                                else:
                                    entries_category.append("< LoD")
                            except:
                                entries_category.append(None)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                        #
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 1:  # Concentration Ratios
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_concentration_ratio[var_filetype][var_datatype][file_short][
                                var_focus][isotope]
                            entries_category.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values, ratio=True)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 2:  # LoDs
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_lod[var_filetype][var_datatype][file_short][var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            entries_category.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 3:  # Intensities (corrected)
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_intensity_corrected[var_filetype][var_datatype][file_short][
                                var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            entries_category.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 4:  # Intensity Ratios
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_intensity_ratio[var_filetype][var_datatype][file_short][
                                var_focus][isotope]
                            entries_category.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values, ratio=True)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 5:  # Analytical Sensitivities
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_analytical_sensitivity[var_filetype][var_datatype][file_short][
                                var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            entries_category.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 6:  # Normalized Sensitivities
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_normalized_sensitivity[var_filetype][var_datatype][file_short][
                                var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            entries_category.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["ma_datareduction_files"]["Result Category"].get() == 7:  # RSFs
            for index, file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_category = [file_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_rsf[var_filetype][var_datatype][file_short][var_focus][isotope]
                            entries_category.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_category)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values, ratio=True)
    #
    def ma_determine_ndigits(self, var_value):
        trunc_value = math.trunc(var_value)
        #
        if len(str(trunc_value)) >= 9:
            n_digits = 0
        elif len(str(trunc_value)) >= 8:
            n_digits = 1
        elif len(str(trunc_value)) >= 7:
            n_digits = 2
        elif len(str(trunc_value)) >= 6:
            n_digits = 3
        else:
            n_digits = 4
        #
        return n_digits
    #
    def ma_calculate_statistics_table(self, var_data, ratio=False):
        entries_mean = ["Arithmetic Mean"]
        entries_std = ["Standard Deviation"]
        #
        for isotope in self.container_lists["ISOTOPES"]:
            value = np.mean(var_data[isotope])
            if len(var_data[isotope]) > 1:
                value_std = np.std(var_data[isotope], ddof=1)
            else:
                value_std = 0.0
            if len(var_data[isotope]) > 0:
                n_digits = self.ma_determine_ndigits(var_value=value)
                n_digits_std = self.ma_determine_ndigits(var_value=value_std)
                #
                if ratio == False:
                    entries_mean.append(f"{value:.{n_digits}f}")
                    entries_std.append(f"{value_std:.{n_digits_std}f}")
                else:
                    entries_mean.append(f"{value:.{4}E}")
                    entries_std.append(f"{value_std:.{4}E}")
            else:
                entries_mean.append("---")
                entries_std.append("---")
            #
        self.tv_results_files.insert("", tk.END, values=entries_mean)
        self.tv_results_files.insert("", tk.END, values=entries_std)
    #
    def ma_get_intensity(self, var_filetype, var_datatype, var_file_short, var_focus, mode="Specific",
                              check=False):
        if mode == "Specific":
            if var_focus in ["BG", "MAT"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short][var_focus]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        helper_results.append(np.mean(var_data))
                    #
                    var_result = round(np.mean(helper_results), 3)
                    self.container_intensity[var_filetype][var_datatype][var_file_short][var_focus][
                        isotope] = var_result
                #
            else:
                for var_focus in ["BG", "MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        for key, items in self.container_helper[var_filetype][var_file_short][var_focus][
                            "Content"].items():
                            var_indices = items["Indices"]
                            var_key = "Data " + str(var_datatype)
                            var_data = self.container_spikes[var_file_short][isotope][var_key][
                                       var_indices[0]:var_indices[1] + 1]
                            helper_results.append(np.mean(var_data))
                        #
                        var_result = round(np.mean(helper_results), 3)
                        self.container_intensity[var_filetype][var_datatype][var_file_short][var_focus][
                            isotope] = var_result
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["BG", "MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                if var_filetype == "SMPL":
                                    var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                    var_id_selected = self.container_var["ID"]["Results Files"].get()
                                    #
                                    if var_id == var_id_selected:
                                        self.ma_get_intensity(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_focus=var_focus)
                                        var_result_i = self.container_intensity[var_filetype][var_datatype][
                                            var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)
                                    #
                                else:
                                    self.ma_get_intensity(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_focus=var_focus)
                                    #
                                    var_result_i = self.container_intensity[var_filetype][var_datatype][var_file_short][
                                        var_focus][isotope]
                                    #
                                    helper_results.append(var_result_i)
                            #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity[var_filetype][var_datatype][isotope] = var_result_i
        #
        ## CHECK
        if check == True:
            for key_01, item_01 in self.container_intensity.items():
                print("Filetype:", key_01)
                for key_02, item_02 in item_01.items():
                    print("Datatype:", key_02)
                    print(item_02)
    #
    def ma_get_intensity_corrected(self, var_filetype, var_datatype, var_file_short, var_file_long,
                                        mode="Specific"):
        if mode == "Specific":
            for isotope in self.container_lists["ISOTOPES"]:
                var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][isotope]
                var_intensity_mat_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope]
                #
                var_result = var_intensity_mat_i - var_intensity_bg_i
                #
                if var_result < 0:
                    var_result = 0.0
                #
                self.container_intensity_corrected[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope] = var_result
            #
        elif mode == "only STD":
            for var_filetype in ["STD"]:
                for var_focus in ["MAT"]:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.ma_get_intensity_corrected(
                                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                var_file_long=var_file_long)
                            var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short][var_focus][isotope]
                            helper_results.append(var_result_i)
                            #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.ma_get_intensity_corrected(
                                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                var_file_long=var_file_long)
                            var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short][var_focus][isotope]
                            helper_results.append(var_result_i)
                            #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_intensity_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus, 
                                    mode="Specific"):
        if mode == "Specific":
            var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            #
            if var_focus == "MAT":
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            else:
                var_intensity_is = self.container_intensity[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            #
            for isotope in self.container_lists["ISOTOPES"]:
                if var_focus == "MAT":
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                else:
                    var_intensity_i = self.container_intensity[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                #
                var_result = var_intensity_i/var_intensity_is
                self.container_intensity_ratio[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["BG", "MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.ma_get_intensity_ratio(
                                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                var_file_long=var_file_long, var_focus=var_focus)
                            var_result_i = self.container_intensity_ratio[var_filetype][var_datatype][var_file_short][
                                var_focus][isotope]
                            helper_results.append(var_result_i)
                            #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_ratio[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_normalized_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long,
                                           mode="Specific"):
        if mode == "Specific":
            for isotope in self.container_lists["ISOTOPES"]:
                if var_filetype == "STD":
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    #
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_concentration_i = self.srm_actual[var_srm_i][element]
                    #
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    #
                    var_result_i = var_intensity_i/var_concentration_i
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                    #
                else:
                    sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                 "Concentration"].get())
                    #
                    var_result_i = sensitivity_i*(intensity_is/concentration_is)
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.ma_get_normalized_sensitivity(
                                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                var_file_long=var_file_long)
                            var_result_i = self.container_normalized_sensitivity[var_filetype][var_datatype][
                                var_file_short][var_focus][isotope]
                            helper_results.append(var_result_i)
                            #
                        var_result_i = np.mean(helper_results)
                        self.container_normalized_sensitivity[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_analytical_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long,
                                           mode="Specific"):
        if mode == "Specific":
            if var_filetype == "STD":
                var_srm_file = self.container_var["SRM"][var_file_long].get()
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                var_concentration_is = float(
                    self.container_var[var_filetype][var_file_long]["IS Data"]["Concentration"].get())
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]

                for isotope in self.container_lists["ISOTOPES"]:
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    if var_srm_i == var_srm_file:
                        key_element = re.search("(\D+)(\d+)", isotope)
                        element = key_element.group(1)
                        var_concentration_i = self.srm_actual[var_srm_i][element]
                        var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                            "MAT"][isotope]
                        var_result_i = (var_intensity_i/var_intensity_is)*(var_concentration_is/var_concentration_i)

                        self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
            else:
                self.calculate_acquisition_time_deltas()
                xi_opt = {}
                xi_std_helper = {}
                list_valid_std = []
                #
                for index, file_std in enumerate(self.container_lists["STD"]["Long"]):
                    file_std_short = self.container_lists["STD"]["Short"][index]
                    var_srm_file = self.container_var["SRM"][file_std].get()
                    #
                    if self.container_var["STD"][file_std]["Checkbox"].get() == 1:
                        self.ma_get_analytical_sensitivity(
                            var_filetype="STD", var_datatype=var_datatype, var_file_short=file_std_short,
                            var_file_long=file_std)
                        xi_std_helper[file_std_short] = {}
                        delta_std_i = self.container_lists["Acquisition Times Delta"][file_std_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_i == var_srm_file:
                                list_valid_std.append(file_std_short)
                                if isotope not in xi_opt:
                                    xi_opt[isotope] = []

                                sensitivity_i = self.container_analytical_sensitivity["STD"][var_datatype][
                                    file_std_short]["MAT"][isotope]

                                xi_std_helper[file_std_short][isotope] = [delta_std_i, sensitivity_i]
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    xi_regr = self.calculate_regression(
                        data=xi_std_helper, isotope=isotope, file_data=list_valid_std)
                    xi_opt[isotope].extend(xi_regr)
                #
                for file_smpl in self.container_lists["SMPL"]["Short"]:
                    delta_i = self.container_lists["Acquisition Times Delta"][file_smpl]
                    for isotope in self.container_lists["ISOTOPES"]:
                        var_result_i = xi_opt[isotope][0]*delta_i + xi_opt[isotope][1]
                        self.container_lists["Analytical Sensitivity Regression"][isotope] = {
                            "a": xi_opt[isotope][0], "b": xi_opt[isotope][1]}
                        self.container_analytical_sensitivity[var_filetype][var_datatype][file_smpl]["MAT"][
                            isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        var_srm_i = self.container_var["SRM"][isotope].get()
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                if var_filetype == "STD":
                                    var_srm_file = self.container_var["SRM"][var_file_long].get()
                                    if var_srm_i == var_srm_file:
                                        self.ma_get_analytical_sensitivity(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_analytical_sensitivity[var_filetype][
                                            var_datatype][var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)
                                else:
                                    self.ma_get_analytical_sensitivity(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)
                            #
                        var_result_i = np.mean(helper_results)
                        self.container_analytical_sensitivity[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_rsf(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the Relative Sensitivity Factor, RSF, based on the following two equations:
        1) Standard Files:  RSF_i = sensitivity_i*(concentration_std_i/intensity_std_i)*
                                    (intensity_std_is/concentration_std_is) = 1
        2) Sample Files:    RSF_i = sensitivity_i*(concentration_std_i/intensity_std_i)*
                                    (intensity_smpl_is/concentration_smpl_is)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        #
        if mode == "Specific":
            if var_filetype == "STD":
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    var_result_i = 1
                    self.container_rsf[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
                #
            elif var_filetype == "SMPL":
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                var_concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                 "Concentration"].get())
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                        var_file_short]["MAT"][isotope]
                    #
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_concentration_i = self.srm_actual[var_srm_i][element]
                    #
                    var_intensity_i = self.container_intensity_corrected["STD"][var_datatype][isotope]
                    #
                    var_result_i = var_sensitivity_i*(var_concentration_i/var_intensity_i)*\
                                   (var_intensity_is/var_concentration_is)
                    self.container_rsf[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        var_file_short = self.container_lists[var_filetype]["Short"][index]
                        #
                        self.ma_get_rsf(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_file_long=var_file_long)
                        var_result_i = self.container_rsf[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope]
                        helper_results.append(var_result_i)
                    #
                    var_result_i = np.mean(helper_results)
                    self.container_rsf[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_concentration(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the concentration, C, based on the following two equations:
        1) Standard Files:  C_i = SRM_dataset(element)
        2) Sample Files:    C_i = (intensity_smpl_i/intensity_smpl_is)*(concentration_smpl_is/sensitivity_i)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        #
        if mode == "Specific":
            if var_filetype == "STD":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    #
                    var_result_i = self.srm_actual[var_srm_i][element]
                    self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                #
            elif var_filetype == "SMPL":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    var_concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                     "Concentration"].get())
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                        var_file_short]["MAT"][isotope]

                    var_result_i = (var_intensity_i/var_intensity_is)*(var_concentration_is/var_sensitivity_i)
                    self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        var_file_short = self.container_lists[var_filetype]["Short"][index]
                        #
                        self.ma_get_concentration(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_file_long=var_file_long)
                        var_result_i = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope]
                        helper_results.append(var_result_i)
                        #
                    var_result_i = np.mean(helper_results)
                    self.container_concentration[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_concentration_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long,
                                        mode="Specific"):
        """ Calculates the concentration ratio, C_i/C_is, based on the following two equations:
                1) Standard Files:  C_i = C_std_i/C_std_is
                2) Sample Files:    C_i = C_smpl_i/C_smpl_is

                Parameters
                ----------
                var_filetype : str
                    The file category, e.g. STD
                var_datatype : str
                    The data category, e.g. RAW
                var_file_short : str
                    The file as a short version (without the complete filepath)
                var_file_long : str
                    The file as the long version (with the complete filepath)

                Returns
                -------
                """
        #
        if mode == "Specific":
            var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                var_is]
            #
            for isotope in self.container_lists["ISOTOPES"]:
                var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope]
                #
                var_result_i = var_concentration_i/var_concentration_is
                self.container_concentration_ratio[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        var_file_short = self.container_lists[var_filetype]["Short"][index]
                        #
                        self.ma_get_concentration_ratio(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_file_long=var_file_long)
                        var_result_i = self.container_concentration_ratio[var_filetype][var_datatype][var_file_short][
                            "MAT"][isotope]
                        helper_results.append(var_result_i)
                        #
                    var_result_i = np.mean(helper_results)
                    self.container_concentration_ratio[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_get_lod(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        """ Calculates the Limit of Detection, LoD, based on the following two equations:
        1) Standard Files:  C_i = C_std_i/C_std_is
        2) Sample Files:    C_i = C_smpl_i/C_smpl_is

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        #
        if mode == "Specific":
            if var_filetype == "STD":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []

                    for key, items in self.container_helper[var_filetype][var_file_short]["BG"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][var_indices[0]:var_indices[1]]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short]["MAT"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][var_indices[0]:var_indices[1]]
                        var_n_mat += len(var_data)
                    #
                    var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope]
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    #
                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        #
                        var_result_i = (3.29*(
                                var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                var_n_mat*var_tau_i)*(var_concentration_i/var_intensity_i)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
                        #
                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        var_sigma_bg_i = np.mean(helper_sigma_i)
                        #
                        var_result_i = (3*var_sigma_bg_i*var_concentration_i)/(var_intensity_i)*(
                                1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
                    #
            elif var_filetype == "SMPL":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short]["BG"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short]["MAT"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_mat += len(var_data)
                    #
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    #
                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        var_sensitivity_i = \
                        self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                            "MAT"][isotope]
                        #
                        var_result_i = (3.29*(
                                var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                var_n_mat*var_tau_i*var_sensitivity_i)*(var_concentration_is/var_intensity_is)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
                        #
                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        var_sigma_bg_i = np.mean(helper_sigma_i)
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        #
                        var_result_i = (3*var_sigma_bg_i*var_concentration_is)/(var_sensitivity_i*var_intensity_is)*(
                                1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        var_file_short = self.container_lists[var_filetype]["Short"][index]
                        #
                        self.ma_get_lod(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_file_long=var_file_long)
                        var_result_i = self.container_lod[var_filetype][var_datatype][var_file_short][
                            "MAT"][isotope]
                        helper_results.append(var_result_i)
                        #
                    var_result_i = np.mean(helper_results)
                    self.container_lod[var_filetype][var_datatype][isotope] = var_result_i
    #
    def ma_datareduction_histograms(self, mode):
        if mode == "Isotopes":
            pass
            #
        elif mode == "Files":
            pass
        #
    def ma_datareduction_scatterplots(self, mode):
        if mode == "Isotopes":
            pass
            #
        elif mode == "Files":
            pass
        #

    def ma_datareduction_boxplots(self, mode):
        if mode == "Isotopes":
            pass
            #
        elif mode == "Files":
            pass
        #
    def ma_datareduction_files(self):  # MA - DATAREDUCTION FILES ######################################################
        ## Window Settings
        window_width = 1260
        window_heigth = 675
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_ma_datareduction_files = tk.Toplevel(self.parent)
        self.subwindow_ma_datareduction_files.title("MINERAL ANALYSIS - Data Reduction (Files)")
        self.subwindow_ma_datareduction_files.geometry(var_geometry)
        self.subwindow_ma_datareduction_files.resizable(False, False)
        self.subwindow_ma_datareduction_files["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_ma_datareduction_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_ma_datareduction_files, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_ma_datareduction_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_ma_datareduction_files.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Data Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Focus Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 10, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Result Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 19, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Export Results", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 22, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Display Options", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## RADIOBUTTONS
        rb_01a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["File Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Standard Files", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_01b = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["File Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Sample Files", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        rb_02a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Data Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="RAW Data", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_02b = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Data Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="SMOOTHED Data", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        rb_04a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Focus"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Matrix", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        rb_05a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 11, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05b = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration Ratio", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05c = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 13, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=2,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Limit of Detection", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05d = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 14, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05e = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=4,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity Ratio", sticky="nesw",
            relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05f = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 16, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=5,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Analytical Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05g = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 17, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=6,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Normalized Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.ma_datareduction_tables)
        rb_05h = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 18, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["ma_datareduction_files"]["Result Category"], value_rb=7,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Relative Sensitivity Factor",
            sticky="nesw", relief=tk.FLAT, command=self.ma_datareduction_tables)
        #
        ## OPTION MENUS
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"
        #
        list_id_found = []
        for var_file_long in self.container_lists["SMPL"]["Long"]:
            var_id_i = self.container_var["SMPL"][var_file_long]["ID"].get()
            if var_id_i not in list_id_found:
                list_id_found.append(var_id_i)
        #
        opt_03a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 7, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_option_isotope(
            var_iso=self.container_var["ID"]["Results Files"], option_list=list_id_found,
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.red_dark,
            command=lambda var_opt=self.container_var["ID"]["Results Files"]: self.change_id_results(var_opt))
        opt_03a["menu"].config(
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.red_dark)
        opt_03a.config(
            bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], activebackground=self.red_dark,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## BUTTONS
        btn_06a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 20, column_id=start_column, n_rows=2,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_button(
            text="Export Results", bg_active=self.red_dark, fg_active=self.bg_colors["Dark Font"],
            command=self.ma_export_calculation_report)
        #
        btn_07a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 23, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Concentration Diagrams", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_show_diagrams_concentration)
        btn_07a.configure(state="disabled")
        #
        btn_07b = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 24, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Intensity Diagrams", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_show_diagrams_intensity)
        btn_07b.configure(state="disabled")
        #
        self.var_rb_01 = tk.IntVar()
        self.var_rb_01.set(1)
        self.var_rb_02 = tk.IntVar()
        self.var_rb_02.set(0)
        self.var_rb_03 = tk.IntVar()
        self.var_rb_03.set(0)
        #
        btn_07c = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row + 25, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Sensitivity Diagrams", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_show_diagrams_sensitivity)
        #
        ## FRAMES
        frm_a = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=start_row, column_id=start_column + 11,
            n_rows=n_rows, n_columns=n_columns - 11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## TREEVIEWS
        list_categories = ["Files"]
        list_categories.extend(self.container_lists["ISOTOPES"])
        list_width = list(75*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 125
        #
        self.tv_results_files = SE(
            parent=self.subwindow_ma_datareduction_files, row_id=0, column_id=12, n_rows=15, n_columns=50,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(list_categories), text_n=list_categories,
            width_n=list_width, individual=True)
        #
        scb_v = ttk.Scrollbar(self.subwindow_ma_datareduction_files, orient="vertical")
        scb_h = ttk.Scrollbar(self.subwindow_ma_datareduction_files, orient="horizontal")
        self.tv_results_files.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_results_files.yview)
        scb_h.config(command=self.tv_results_files.xview)
        scb_v.grid(row=0, column=62, rowspan=15, columnspan=1, sticky="ns")
        scb_h.grid(row=15, column=12, rowspan=1, columnspan=50, sticky="ew")
        #
        ## INITIALIZATION
        self.ma_datareduction_tables(init=True)
    #
    def change_id_results(self, var_opt, mode="MA"):
        if mode == "MA":
            self.ma_datareduction_tables()
        elif mode == "FI":
            self.fi_datareduction_tables()
#
########################################################################################################################
# FLUID INCLUSION ANALYSIS #############################################################################################
########################################################################################################################
    #
    def fi_settings(self):
        ## COLORS
        bg_light = self.bg_colors["Very Light"]
        bg_medium = self.bg_colors["Light"]
        #
        if len(self.container_lists["ISOTOPES"]) == 0:
            path = os.getcwd()
            parent = os.path.dirname(path)
            fi_demo_files = {"ALL": [], "STD": [], "SMPL": []}
            demo_files = os.listdir(path=path + str("/demo_files/"))
            for file in demo_files:
                if file.startswith("demo_fi"):
                    path_complete = os.path.join(path + str("/demo_files/"), file)
                    path_raw = pathlib.PureWindowsPath(path_complete)
                    fi_demo_files["ALL"].append(str(path_raw.as_posix()))
            fi_demo_files["ALL"].sort()
            fi_demo_files["STD"].extend(fi_demo_files["ALL"][:2])
            fi_demo_files["STD"].extend(fi_demo_files["ALL"][-2:])
            fi_demo_files["SMPL"].extend(fi_demo_files["ALL"][2:-2])
            # fi_demo_files["STD"].extend(fi_demo_files["ALL"][:1])
            # fi_demo_files["STD"].extend(fi_demo_files["ALL"][-1:])
            # fi_demo_files["SMPL"].extend(fi_demo_files["ALL"][2:-7])
            #
            self.list_std = fi_demo_files["STD"]
            self.list_smpl = fi_demo_files["SMPL"]
            #
            self.fi_current_file_std = self.list_std[0]
            self.fi_current_file_smpl = self.list_smpl[0]
            #
            for file_std in self.list_std:
                file_parts = file_std.split("/")
                self.lb_std.insert(tk.END, file_parts[-1])
            for file_smpl in self.list_smpl:
                file_parts = file_smpl.split("/")
                self.lb_smpl.insert(tk.END, file_parts[-1])
            #
            dataset_exmpl = Data(filename=self.list_std[0])
            df_exmpl = dataset_exmpl.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            self.times = df_exmpl.iloc[:, 0]
            self.list_isotopes = list(df_exmpl.columns.values)
            self.list_isotopes.pop(0)
            self.container_lists["ISOTOPES"] = self.list_isotopes
            self.palette_complete = sns.color_palette(
                "nipy_spectral", n_colors=len(self.container_lists["ISOTOPES"])).as_hex()
            #
            if bool(self.container_files["SRM"]) == False:
                self.isotope_colors = {}
                for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
                    self.container_files["SRM"][isotope] = tk.StringVar()
                    self.isotope_colors[isotope] = self.palette_complete[index]
        #
        ## Window Settings
        window_width = 1260
        window_heigth = 950
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_settings = tk.Toplevel(self.parent)
        self.subwindow_fi_settings.title("FLUID INCLUSION ANALYSIS - Setup")
        self.subwindow_fi_settings.geometry(var_geometry)
        self.subwindow_fi_settings.resizable(False, False)
        self.subwindow_fi_settings["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_settings, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_settings, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_settings.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_settings.grid_columnconfigure(i, minsize=column_min)
        #
        ## INITIALIZATION
        for isotope in self.container_lists["ISOTOPES"]:
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            #
            if element not in self.container_lists["Elements"]:
                self.container_lists["Elements"].append(element)
        #
        ## LABELS
        n_col_header = 18
        n_col_category = 12
        n_col_files = 24
        n_col_iso = 18
        start_row_01 = 0    # Project Information
        start_row_02 = 3    # Standard Reference Material
        start_row_03 = 7    # Matrix Settings
        start_row_04 = 11   # Inclusion Settings
        start_row_05 = 15   # Quantification Method
        start_row_06 = 19   # Assemblage Settings
        start_row_07 = 21   # Dwell Time Settings
        start_row_08 = 23   # Default Time Window (Background)
        start_row_09 = 27   # Spike Elimination
        start_row_10 = 31   # Check-Up
        start_row_std = start_row_01    # Standard Files Setup
        start_row_smpl = start_row_05   # Sample Files Setup
        start_row_iso = start_row_01    # Measured Isotopes
        #
        ## Static
        lbl_01 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_01, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Project Information", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_01 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Author", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_01 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Source ID", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Standard Reference Material (SRM)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02 + 1, column_id=0, n_rows=1,
            n_columns=n_col_category - 4, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02 + 2, column_id=0, n_rows=1,
            n_columns=n_col_category - 4, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Isotopes", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02 + 3, column_id=0, n_rows=1,
            n_columns=n_col_category - 4,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Matrix Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Inclusion Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Quantification Method", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_06, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_06 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_07, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=bg_light, bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Dwell Time Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_07 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Isotope Dwell Times", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Time Window (Background)", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_08a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_08c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08 + 3, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Auto-Detection", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_09 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_09, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike Elimination", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_09b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_09 + 2, column_id=0, n_rows=1, n_columns=n_col_header - 9,
            fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Calculation Method", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10 = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_header, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Check-Up", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_10a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 1, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Standard Reference Material", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 2, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 3, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Calculation Intervals", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10d = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 4, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Acquisition Times", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_10e = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 5, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_category, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
            text="Imported Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_std = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_std, column_id=n_col_header + 1, n_rows=1,
            n_columns=n_col_files, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Standard Files Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_smpl = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_smpl, column_id=n_col_header + 1, n_rows=1,
            n_columns=n_col_files, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_iso = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_iso, column_id=n_col_header + n_col_files + 2, n_rows=1,
            n_columns=n_col_iso, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## Dynamic
        # Standard Files
        frm_std = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_std + 1, column_id=n_col_header + 1,
            n_rows=start_row_smpl - 3, n_columns=n_col_files, fg=bg_light,
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_std = tk.Scrollbar(master=frm_std, orient="vertical")
        text_std = tk.Text(
            master=frm_std, width=30, height=25, yscrollcommand=vsb_std.set, bg=self.bg_colors["Very Light"])
        vsb_std.config(command=text_std.yview)
        vsb_std.pack(side="right", fill="y")
        text_std.pack(side="left", fill="both", expand=True)
        #
        for index, file_std in enumerate(self.list_std):
            parts = file_std.split("/")
            file_std_short = parts[-1]
            #
            dataset_std_i = Data(filename=file_std)
            df_std_i = dataset_std_i.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            times_std_i = df_std_i.iloc[:, 0]
            #
            if file_std not in self.container_lists["STD"]["Long"]:
                self.container_lists["STD"]["Long"].append(file_std)
                self.container_lists["STD"]["Short"].append(file_std_short)
                self.container_var["fi_setting"]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["fi_setting"]["Data Type Plot"]["STD"][file_std_short].set(0)
                self.container_var["fi_setting"]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["fi_setting"]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
                self.container_var["fi_setting"]["Display RAW"]["STD"][file_std_short] = {}
                self.container_var["fi_setting"]["Display SMOOTHED"]["STD"][file_std_short] = {}
            #
            if self.file_loaded is False:
                self.container_var["STD"][file_std] = {}
                self.container_var["STD"][file_std]["IS Data"] = {
                    "IS": tk.StringVar(), "Concentration": tk.StringVar()}
                self.container_var["STD"][file_std]["IS Data"]["IS"].set("Select IS")
                self.container_var["STD"][file_std]["IS Data"]["Concentration"].set("0.0")
                self.container_var["STD"][file_std]["Checkbox"] = tk.IntVar()
                self.container_var["STD"][file_std]["Checkbox"].set(1)
                #
            else:
                self.container_measurements["EDITED"][file_std_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
                #
                self.spikes_isotopes["STD"][file_std_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_std_short][isotope] = {}
                    self.container_measurements["EDITED"][file_std_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_std_short][isotope]["MAT"] = []
                    self.container_measurements["EDITED"][file_std_short][isotope]["INCL"] = []
                #
                self.create_container_results(var_filetype="STD", var_file_short=file_std_short, mode="FI")
                #
                file_std_short = parts[-1]
                #
                self.container_var["fi_setting"]["Data Type Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["fi_setting"]["Data Type Plot"]["STD"][file_std_short].set(0)
                self.container_var["fi_setting"]["Analyse Mode Plot"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["fi_setting"]["Analyse Mode Plot"]["STD"][file_std_short].set(0)
                self.container_var["fi_setting"]["Display RAW"]["STD"][file_std_short] = {}
                self.container_var["fi_setting"]["Display SMOOTHED"]["STD"][file_std_short] = {}
                #
                self.container_helper["STD"][file_std_short]["FIGURE"] = None
                self.container_helper["STD"][file_std_short]["CANVAS"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
                self.container_helper["STD"][file_std_short]["AXES"] = {}
                self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
                self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
                self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
                #
                self.container_var["fi_setting"]["Time-Signal Lines"]["STD"][file_std_short] = {}
                self.container_var["fi_setting"]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                self.container_var["fi_setting"]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                self.container_var["fi_setting"]["Calculation Interval"]["STD"][file_std_short].set(3)
                self.container_var["fi_setting"]["Calculation Interval Visibility"]["STD"][
                    file_std_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_var["fi_setting"]["Display RAW"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display RAW"]["STD"][file_std_short][isotope].set(1)
                    self.container_var["fi_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope].set(0)
                    #
                    self.container_var["fi_setting"]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                #
                if file_std_short not in self.container_var["fi_setting"]["Time-Signal Lines"]["STD"]:
                    self.container_var["fi_setting"]["Time-Signal Lines"]["STD"][file_std_short] = {}
                    self.container_var["fi_setting"]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                    self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                    self.container_var["fi_setting"]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                    self.container_var["fi_setting"]["Calculation Interval"]["STD"][file_std_short].set(3)
                    self.container_var["fi_setting"]["Calculation Interval Visibility"]["STD"][
                        file_std_short] = {}
                self.container_var["fi_setting"]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                    "RAW": None, "SMOOTHED": None}
                self.container_var["fi_setting"]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                    "RAW": None, "SMOOTHED": None}
                self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                    "RAW": None, "SMOOTHED": None}
            #
            if file_std not in self.container_var["SRM"]:
                self.container_var["SRM"][file_std] = tk.StringVar()
                self.container_var["SRM"][file_std].set("Select SRM")
            #
            if file_std_short not in self.container_files["STD"]:
                self.container_files["STD"][file_std_short] = {}
                self.container_files["STD"][file_std_short]["SRM"] = tk.StringVar()
                self.container_files["STD"][file_std_short]["IS"] = tk.StringVar()
                self.container_measurements["EDITED"][file_std_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_std_i.tolist()
                #
                self.create_container_results(var_filetype="STD", var_file_short=file_std_short, mode="FI")
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_std_short][isotope] = {}
                    self.container_measurements["EDITED"][file_std_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_std_short][isotope]["MAT"] = []
                    self.container_measurements["EDITED"][file_std_short][isotope]["INCL"] = []
            #
            if len(self.container_lists["STD"]["Long"]) < len(self.list_std) and self.file_loaded == False:
                self.container_helper["STD"][file_std_short] = {}
                self.container_helper["STD"][file_std_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                      "Indices": []}
                self.container_helper["STD"][file_std_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["INCL"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                        "Indices": []}
                self.container_helper["STD"][file_std_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["FIGURE"] = None
                self.container_helper["STD"][file_std_short]["CANVAS"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
                self.container_helper["STD"][file_std_short]["AXES"] = {}
                self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
                self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
                self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_std] = {}
                self.container_helper["limits SPK"][file_std]["ID"] = []
                self.container_helper["limits SPK"][file_std]["type"] = []
                self.container_helper["limits SPK"][file_std]["info"] = []
                self.container_helper["positions"]["SPK"][file_std_short] = []
                self.spikes_isotopes["STD"][file_std_short] = {}
                #
            elif len(self.container_lists["STD"]["Long"]) == len(self.list_std) and self.file_loaded == False:
                self.container_helper["STD"][file_std_short] = {}
                self.container_helper["STD"][file_std_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                      "Indices": []}
                self.container_helper["STD"][file_std_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["INCL"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                        "Indices": []}
                self.container_helper["STD"][file_std_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                       "Indices": []}
                self.container_helper["STD"][file_std_short]["FIGURE"] = None
                self.container_helper["STD"][file_std_short]["CANVAS"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME"] = None
                self.container_helper["STD"][file_std_short]["AXES"] = {}
                self.container_helper["STD"][file_std_short]["RESULTS FRAME"] = None
                self.container_helper["STD"][file_std_short]["FIGURE RATIO"] = None
                self.container_helper["STD"][file_std_short]["CANVAS RATIO"] = None
                self.container_helper["STD"][file_std_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["STD"][file_std_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_std] = {}
                self.container_helper["limits SPK"][file_std]["ID"] = []
                self.container_helper["limits SPK"][file_std]["type"] = []
                self.container_helper["limits SPK"][file_std]["info"] = []
                self.container_helper["positions"]["SPK"][file_std_short] = []
                self.spikes_isotopes["STD"][file_std_short] = {}
            #
            categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                          "TOOLBARFRAME_RATIO"]
            self.container_diagrams["STD"][file_std_short] = {}
            self.container_listboxes["STD"][file_std_short] = {}
            self.diagrams_setup["STD"][file_std_short] = {}
            for category in categories:
                self.container_diagrams["STD"][file_std_short][category] = None
                self.diagrams_setup["STD"][file_std_short][category] = None
            categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter", "Time Ratio"]
            for category in categories:
                self.diagrams_setup["STD"][file_std_short][category] = {}
            categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
            for category in categories:
                self.container_listboxes["STD"][file_std_short][category] = None
            #
            cb_i = tk.Checkbutton(
                master=frm_std, text=file_std_short, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Very Light"],
                variable=self.container_var["STD"][file_std]["Checkbox"], onvalue=1, offvalue=0, selectcolor=bg_light,
                activebackground=self.bg_colors["Very Light"], activeforeground=self.bg_colors["Very Dark"],
                anchor=tk.CENTER, highlightthickness=0, bd=0)
            text_std.window_create("end", window=cb_i)
            text_std.insert("end", "\t")
            #
            if self.container_var["SRM"][file_std].get() != "Select SRM":
                var_text = self.container_var["SRM"][file_std].get()
                self.container_files["STD"][file_std_short]["SRM"].set(var_text)
            else:
                if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                    var_text = self.container_var["General Settings"]["Default SRM"].get()
                    self.container_var["SRM"][file_std].set(var_text)
                    self.container_files["STD"][file_std_short]["SRM"].set(var_text)
            #
            opt_srm_i = tk.OptionMenu(
                frm_std, self.container_var["SRM"][file_std], *np.sort(self.list_srm),
                command=lambda var_opt=self.container_var["SRM"][file_std], var_indiv=file_std, mode="STD":
                self.fi_change_srm_individual(var_opt, var_indiv, mode))
            opt_srm_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_srm_i.config(
                bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_std.window_create("end", window=opt_srm_i)
            text_std.insert("end", "\t")
            #
            if self.container_var["STD"][file_std]["IS Data"]["IS"].get() != "Select IS":
                var_text = self.container_var["STD"][file_std]["IS Data"]["IS"].get()
                #
            else:
                var_text = "Select IS"
            #
            opt_is_i = tk.OptionMenu(
                frm_std, self.container_var["STD"][file_std]["IS Data"]["IS"], *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_is_i.config(
                bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_std.window_create("end", window=opt_is_i)
            text_std.insert("end", "\t")
            #
            btn_i = tk.Button(
                master=frm_std, text="Setup", bg=bg_medium, fg=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                command=lambda var_file=file_std, var_type="STD": self.fi_check_specific_file(var_file, var_type))
            text_std.window_create("end", window=btn_i)
            text_std.insert("end", "\t")
            #
            frm_i = tk.Frame(frm_std, bg=self.sign_red, relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_std.window_create("end", window=frm_i)
            text_std.insert("end", "\n")
            #
            self.container_var["STD"][file_std]["Frame"] = frm_i
        #
        # Sample Files
        frm_smpl = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_smpl + 1, column_id=n_col_header + 1,
            n_rows=n_rows - start_row_smpl - 3, n_columns=n_col_files, fg=bg_light,
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.list_smpl):
            parts = file_smpl.split("/")
            file_smpl_short = parts[-1]
            #
            if self.file_loaded is False:
                if "Na23" in self.container_lists["ISOTOPES"]:
                    possible_is = "Na23"
                self.container_var["SMPL"][file_smpl] = {}
                self.container_var["SMPL"][file_smpl]["IS"] = tk.StringVar()
                self.container_var["SMPL"][file_smpl]["IS"].set(possible_is)
                self.container_var["SMPL"][file_smpl]["IS Data"] = {
                    "IS": tk.StringVar(), "Concentration": tk.StringVar()}
                self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(possible_is)
                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set("0.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"] = {
                    "IS": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Oxide": {"Name": tk.StringVar(), "Concentration": tk.StringVar()},
                    "Element": {"Name": tk.StringVar(), "Concentration": tk.StringVar()}}
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].set("Select IS")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set("1000000")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Name"].set("Select Oxide")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Oxide"]["Concentration"].set("0.0")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Name"].set("Select Element")
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["Element"]["Concentration"].set("100.0")
                self.container_var["SMPL"][file_smpl]["Checkbox"] = tk.IntVar()
                self.container_var["SMPL"][file_smpl]["Checkbox"].set(1)
                self.container_var["SMPL"][file_smpl]["ID"] = tk.StringVar()
                self.container_var["SMPL"][file_smpl]["ID"].set("A")
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"] = {
                    "Name": tk.StringVar(), "Value": tk.StringVar(), "Matrix": tk.StringVar(), "Amount": tk.StringVar()}
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Name"].set("Select Isotope")
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set("0")
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Matrix"].set("Select Oxide")
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Amount"].set("100")
                self.container_var["SMPL"][file_smpl]["Second Internal Standard"] = {
                    "Name": tk.StringVar(), "Value": tk.StringVar()}
                self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Name"].set("Select Isotope")
                self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Value"].set("0")
                #
            else:
                self.container_var["fi_setting"]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["fi_setting"]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["fi_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["fi_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["fi_setting"]["Display RAW"]["SMPL"][file_smpl_short] = {}
                self.container_var["fi_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
                #
                self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
                self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
                #
                self.container_var["fi_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
                self.container_var["fi_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
                self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
                self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
                self.container_var["fi_setting"]["Calculation Interval Visibility"]["SMPL"][
                    file_smpl_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_var["fi_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope].set(1)
                    self.container_var["fi_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope].set(0)
                    #
                    self.container_var["fi_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
            #
            parts = file_smpl.split("/")
            file_smpl_short = parts[-1]
            #
            dataset_smpl_i = Data(filename=file_smpl)
            df_smpl_i = dataset_smpl_i.import_data_to_pandas(delimiter=",", skip_header=3, skip_footer=1)
            times_smpl_i = df_smpl_i.iloc[:, 0]
            #
            if file_smpl not in self.container_lists["STD"]["Long"] and self.file_loaded == False:
                self.container_lists["SMPL"]["Long"].append(file_smpl)
                self.container_lists["SMPL"]["Short"].append(file_smpl_short)
                self.container_var["fi_setting"]["Data Type Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["fi_setting"]["Data Type Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["fi_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short] = tk.IntVar()
                self.container_var["fi_setting"]["Analyse Mode Plot"]["SMPL"][file_smpl_short].set(0)
                self.container_var["fi_setting"]["Display RAW"]["SMPL"][file_smpl_short] = {}
                self.container_var["fi_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short] = {}
            #
            if file_smpl_short not in self.container_files["SMPL"]:
                self.container_files["SMPL"][file_smpl_short] = {}
                self.container_files["SMPL"][file_smpl_short]["IS"] = tk.StringVar()
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"] = tk.StringVar()
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set("0.0")
                self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short] = tk.StringVar()
                self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
                    "Set salinity")
                self.container_measurements["EDITED"][file_smpl_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()
                #
                self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short, mode="FI")
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_smpl_short][isotope] = {}
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["MAT"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["INCL"] = []
            #
            if self.file_loaded == True:
                self.container_measurements["EDITED"][file_smpl_short] = {}
                self.container_measurements["EDITED"]["Time"] = times_smpl_i.tolist()
                #
                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    self.container_measurements["EDITED"][file_smpl_short][isotope] = {}
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["BG"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["MAT"] = []
                    self.container_measurements["EDITED"][file_smpl_short][isotope]["INCL"] = []
                    #
                self.create_container_results(var_filetype="SMPL", var_file_short=file_smpl_short, mode="FI")
            #
            if len(self.container_lists["SMPL"]["Long"]) < len(self.list_smpl) and self.file_loaded == False:
                self.container_helper["SMPL"][file_smpl_short] = {}
                self.container_helper["SMPL"][file_smpl_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                        "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["INCL"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                          "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
                self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_smpl] = {}
                self.container_helper["limits SPK"][file_smpl]["ID"] = []
                self.container_helper["limits SPK"][file_smpl]["type"] = []
                self.container_helper["limits SPK"][file_smpl]["info"] = []
                self.container_helper["positions"]["SPK"][file_smpl_short] = []
                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
                #
            elif len(self.container_lists["SMPL"]["Long"]) == len(self.list_smpl) and self.file_loaded == False:
                self.container_helper["SMPL"][file_smpl_short] = {}
                self.container_helper["SMPL"][file_smpl_short]["BG"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                        "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["MAT"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["INCL"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                          "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["SPK"] = {"Listbox": None, "Content": {}, "ID": 0,
                                                                         "Indices": []}
                self.container_helper["SMPL"][file_smpl_short]["FIGURE"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES"] = {}
                self.container_helper["SMPL"][file_smpl_short]["RESULTS FRAME"] = None
                self.container_helper["SMPL"][file_smpl_short]["FIGURE RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["CANVAS RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["TOOLBARFRAME RATIO"] = None
                self.container_helper["SMPL"][file_smpl_short]["AXES RATIO"] = {}
                #
                self.container_helper["limits SPK"][file_smpl] = {}
                self.container_helper["limits SPK"][file_smpl]["ID"] = []
                self.container_helper["limits SPK"][file_smpl]["type"] = []
                self.container_helper["limits SPK"][file_smpl]["info"] = []
                self.container_helper["positions"]["SPK"][file_smpl_short] = []
                self.spikes_isotopes["SMPL"][file_smpl_short] = {}
            #
            categories = ["FIG", "AX", "CANVAS", "TOOLBARFRAME", "FIG_RATIO", "AX_RATIO", "CANVAS_RATIO",
                          "TOOLBARFRAME_RATIO"]
            self.container_diagrams["SMPL"][file_smpl_short] = {}
            self.container_listboxes["SMPL"][file_smpl_short] = {}
            self.diagrams_setup["SMPL"][file_smpl_short] = {}
            for category in categories:
                self.container_diagrams["SMPL"][file_smpl_short][category] = None
                self.diagrams_setup["SMPL"][file_smpl_short][category] = None
            categories = ["Time Signal Raw", "Time Signal Smoothed", "Histogram", "Scatter", "Time Ratio"]
            for category in categories:
                self.diagrams_setup["SMPL"][file_smpl_short][category] = {}
            categories = ["BG", "MAT", "INCL", "SPK", "ISORAT"]
            for category in categories:
                self.container_listboxes["SMPL"][file_smpl_short][category] = None
            #
            cb_i = tk.Checkbutton(
                master=frm_smpl, text=file_smpl_short, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Very Light"],
                variable=self.container_var["SMPL"][file_smpl]["Checkbox"], onvalue=1, offvalue=0, selectcolor=bg_light,
                activebackground=self.bg_colors["Very Light"], activeforeground=self.bg_colors["Very Dark"],
                anchor=tk.CENTER, highlightthickness=0, bd=0)
            text_smpl.window_create("end", window=cb_i)
            text_smpl.insert("end", "\t")
            #
            #if self.container_var["SMPL"][file_smpl]["IS"].get() != "Select IS":
            if self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get() != "Select IS":
                var_text = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                #self.container_files["SMPL"][file_smpl_short]["IS"].set(var_text)
                #self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_text)
                #
            else:
                var_text = "Select IS"
            # before: self.container_var["SMPL"][file_smpl]["IS"]
            opt_is_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"], *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_is_i.config(
                bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", "\t")
            #
            if self.container_var["SMPL"][file_smpl]["ID"].get() != "A":
                var_text = self.container_var["SMPL"][file_smpl]["ID"].get()
            else:
                var_text = "A"
            opt_id_i = tk.OptionMenu(frm_smpl, self.container_var["SMPL"][file_smpl]["ID"],
                                     *np.sort(self.list_alphabet))
            opt_id_i["menu"].config(
                fg=self.bg_colors["Very Dark"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_id_i.config(
                bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_id_i)
            text_smpl.insert("end", "\t")
            #
            btn_i = tk.Button(
                master=frm_smpl, text="Setup", bg=bg_medium, fg=self.bg_colors["Very Dark"],
                activebackground=self.accent_color, activeforeground=self.bg_colors["Dark Font"],
                command=lambda var_file=file_smpl, var_type="SMPL": self.fi_check_specific_file(var_file, var_type))
            text_smpl.window_create("end", window=btn_i)
            text_smpl.insert("end", "\t")
            #
            frm_i = tk.Frame(frm_smpl, bg=self.sign_red, relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_smpl.window_create("end", window=frm_i)
            text_smpl.insert("end", "\n")
            #
            self.container_var["SMPL"][file_smpl]["Frame"] = frm_i
        #
        # Isotopes
        if self.container_var["SRM"]["default"][0].get() != "Select SRM":
            var_text_std = self.container_var["SRM"]["default"][0].get()
        else:
            if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                var_text_std = self.container_var["General Settings"]["Default SRM"].get()
            else:
                var_text_std = "Select SRM"
        #
        self.container_var["SRM"]["default"][0].set(var_text_std)
        #
        if self.container_var["SRM"]["default"][1].get() != "Select SRM":
            var_text_iso = self.container_var["SRM"]["default"][1].get()
        else:
            if self.container_var["General Settings"]["Default SRM"].get() != "Select SRM":
                var_text_iso = self.container_var["General Settings"]["Default SRM"].get()
            else:
                var_text_iso = "Select SRM"
        #
        self.container_var["SRM"]["default"][1].set(var_text_iso)
        #
        frm_iso = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_iso + 1, column_id=n_col_header + n_col_files + 2,
            n_rows=n_rows - 10, n_columns=n_col_iso, fg=bg_light, bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = tk.Scrollbar(master=frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            if self.container_var["LASER"].get() != "Select Gas":
                var_text = self.container_var["LASER"].get()
            else:
                var_text = "Select Gas"
            #
            if isotope not in self.container_var["SRM"]:
                self.container_var["SRM"][isotope] = tk.StringVar()
                self.container_var["SRM"][isotope].set("Select SRM")
                #
                self.container_var["dwell_times"]["Entry"][isotope] = tk.StringVar()
                self.container_var["dwell_times"]["Entry"][isotope].set("0.01")
                #
                for file_std_short in self.container_lists["STD"]["Short"]:
                    self.container_var["fi_setting"]["Display RAW"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display RAW"]["STD"][file_std_short][isotope].set(1)
                    self.container_var["fi_setting"]["Display SMOOTHED"]["STD"][file_std_short][isotope].set(0)
                    #
                    if file_std_short not in self.container_var["fi_setting"]["Time-Signal Lines"]["STD"]:
                        self.container_var["fi_setting"]["Time-Signal Lines"]["STD"][file_std_short] = {}
                        self.container_var["fi_setting"]["Time-Ratio Lines"]["STD"][file_std_short] = {}
                        self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short] = {}
                        self.container_var["fi_setting"]["Calculation Interval"]["STD"][file_std_short] = tk.IntVar()
                        self.container_var["fi_setting"]["Calculation Interval"]["STD"][file_std_short].set(3)
                        self.container_var["fi_setting"]["Calculation Interval Visibility"]["STD"][
                            file_std_short] = {}
                    self.container_var["fi_setting"]["Time-Signal Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Time-Ratio Lines"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["STD"][file_std_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                #
                for file_smpl_short in self.container_lists["SMPL"]["Short"]:
                    self.container_var["fi_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope] = tk.IntVar()
                    self.container_var["fi_setting"]["Display RAW"]["SMPL"][file_smpl_short][isotope].set(1)
                    self.container_var["fi_setting"]["Display SMOOTHED"]["SMPL"][file_smpl_short][isotope].set(0)
                    #
                    if file_smpl_short not in self.container_var["fi_setting"]["Time-Signal Lines"]["SMPL"] \
                            or self.file_loaded == True:
                        self.container_var["fi_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var["fi_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short] = {}
                        self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short] = {}
                        self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][file_smpl_short] = tk.IntVar()
                        self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][file_smpl_short].set(3)
                        self.container_var["fi_setting"]["Calculation Interval Visibility"]["SMPL"][
                            file_smpl_short] = {}
                    self.container_var["fi_setting"]["Time-Signal Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Time-Ratio Lines"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
                    self.container_var["fi_setting"]["Checkboxes Isotope Diagram"]["SMPL"][file_smpl_short][isotope] = {
                        "RAW": None, "SMOOTHED": None}
            #
            frm_i = tk.Frame(frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")
            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Very Dark"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")
            #
            if self.container_var["SRM"][isotope].get() != "Select SRM":
                var_text = self.container_var["SRM"][isotope].get()
            else:
                if self.container_var["SRM"]["default"][1].get() != "Select SRM":
                    var_text = self.container_var["SRM"]["default"][1].get()
                    self.container_var["SRM"][isotope].set(var_text)
                else:
                    var_text = "Select SRM"
            #
            opt_srm_i = tk.OptionMenu(
                frm_iso, self.container_var["SRM"][isotope], *np.sort(self.list_srm),
                command=lambda var_opt=self.container_var["SRM"][isotope], var_indiv=isotope, mode="ISOTOPES":
                self.fi_change_srm_individual(var_opt, var_indiv, mode))
            opt_srm_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_srm_i.config(
                bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_iso.window_create("end", window=opt_srm_i)
            text_iso.insert("end", "\t")
            #
            key_element = re.search("(\D+)(\d+)", isotope)
            element = key_element.group(1)
            self.container_var["charge"][isotope] = {"textvar": tk.StringVar()}
            #
            if float(self.container_var["Gas Energy"].get()) >= float(self.ionization_energies["First"][element]) \
                    and float(self.container_var["Gas Energy"].get()) >= float(self.ionization_energies["Second"][
                                                                   element]):
                self.container_var["charge"][isotope]["textvar"].set("2+ charged")
                charge_fg = self.accent_color
            else:
                self.container_var["charge"][isotope]["textvar"].set("1+ charged")
                charge_fg = self.bg_colors["Dark Font"]
            #
            lbl_i = tk.Label(
                frm_iso, text=self.container_var["charge"][isotope]["textvar"].get(),
                textvariable=self.container_var["charge"][isotope]["textvar"], bg=self.bg_colors["Very Light"],
                fg=charge_fg)
            self.container_var["charge"][isotope]["labelvar"] = lbl_i
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\n")
            #
        #
        ## BUTTONS
        btn_03c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 3, column_id=0, n_rows=1, n_columns=n_col_header,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="IS Concentration Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_matrix_concentration_setup) # Host - Concentration Setup
        #
        self.btn_setup_massbalance = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04 + 1, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_mass_balance)
        self.btn_setup_chargebalance = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04 + 2, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_charge_balance)
        self.btn_setup_plugin = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04 + 3, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_inclusion_setup_plugin)
        #
        self.btn_setup_quantification_matrixonly = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05 + 1, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_setup_matrix_only_tracer)
        self.btn_setup_quantification_secondinternal = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05 + 2, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_setup_second_internal_standard)
        self.btn_setup_quantification_plugin = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05 + 3, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        self.btn_setup_quantification_plugin.configure(state='disabled')
        #
        btn_07a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_07 + 1, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Setup", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.create_dwell_time_window)
        #
        btn_08c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08 + 3, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Run", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="BG": self.detect_signal_interval(mode))
        #
        btn_10a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 1,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_srm_settings)    # Check-Up - SRM Settings
        btn_10b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 2,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.internal_standard_concentration_setup) # Check-Up - Internal Standard Settings
        btn_10c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 3,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_interval_settings)   # Check-Up - Calculation Interval Settings
        btn_10d = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 4,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_acquisition_times)   # Check-Up - Acquisition Times
        btn_10e = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_10 + 5,
            column_id=n_col_header + n_col_files + 2 + n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_button(
            text="Check Data", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.check_imported_files)
        #
        btn_std = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_smpl - 2, column_id=n_col_header + 1 + n_col_files - 6,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.colors_fi["Medium"]).create_simple_button(
            text="Confirm All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        btn_smpl = SE(
            parent=self.subwindow_fi_settings, row_id=n_rows - 2, column_id=n_col_header + 1 + n_col_files - 6,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.colors_fi["Medium"]).create_simple_button(
            text="Confirm All", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
        #
        ## RADIOBUTTONS
        rb_03a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 1, column_id=0, n_rows=1, n_columns=n_col_category - 4,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Host Setup Selection"], value_rb=1, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Oxide (in wt.%)", sticky="nesw", relief=tk.GROOVE)
        rb_03b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 2, column_id=0, n_rows=1, n_columns=n_col_category - 4,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Host Setup Selection"], value_rb=2, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Element (in ppm)", sticky="nesw", relief=tk.GROOVE)
        #
        rb_04a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Setup Selection"], value_rb=1, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Mass Balance", sticky="nesw", relief=tk.GROOVE,
            command=self.change_rb_inclusion_setup)
        rb_04b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Setup Selection"], value_rb=2, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Charge Balance", sticky="nesw", relief=tk.GROOVE,
            command=self.change_rb_inclusion_setup)
        rb_04c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_04 + 3, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Inclusion Setup Selection"], value_rb=3, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Plugin-based Methods", sticky="nesw", relief=tk.GROOVE,
            command=self.change_rb_inclusion_setup)
        #
        if self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 1:
            self.btn_setup_massbalance.configure(state="normal")
            self.btn_setup_chargebalance.configure(state="disabled")
            self.btn_setup_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 2:
            self.btn_setup_massbalance.configure(state="disabled")
            self.btn_setup_chargebalance.configure(state="normal")
            self.btn_setup_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 3:
            self.btn_setup_massbalance.configure(state="disabled")
            self.btn_setup_chargebalance.configure(state="disabled")
            self.btn_setup_plugin.configure(state="normal")
        #
        rb_05a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05 + 1, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Quantification Method"], value_rb=1, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Matrix-only Tracer", sticky="nesw", relief=tk.GROOVE,
            command=self.change_rb_quantification_setup)
        rb_05b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05 + 2, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Quantification Method"], value_rb=2, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="2nd Internal Standard", sticky="nesw", relief=tk.GROOVE,
            command=self.change_rb_quantification_setup)
        rb_05c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_05 + 3, column_id=0, n_rows=1, n_columns=n_col_category,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Quantification Method"], value_rb=3, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Plugin-based Methods", sticky="nesw", relief=tk.GROOVE,
            command=self.change_rb_quantification_setup)
        rb_05c.configure(state="disabled")
        #
        if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
            self.btn_setup_quantification_matrixonly.configure(state="normal")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            self.btn_setup_quantification_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="normal")
            self.btn_setup_quantification_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Quantification Method"].get() == 3:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            self.btn_setup_quantification_plugin.configure(state="normal")
        #
        rb_09a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_09 + 1, column_id=0, n_rows=1, n_columns=n_col_header - 9,
            fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Spike Elimination Inclusion"], value_rb=1, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Include Inclusion", sticky="nesw", relief=tk.GROOVE)
        rb_09b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_09 + 1, column_id=n_col_header - 9, n_rows=1,
            n_columns=n_col_header - 9, fg=bg_light, bg=bg_medium).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Spike Elimination Inclusion"], value_rb=2, color_bg=bg_medium,
            fg=self.bg_colors["Dark Font"], text="Exclude Inclusion", sticky="nesw", relief=tk.GROOVE)
        #
        ## ENTRIES
        self.container_var["fi_setting"]["Author"].set(self.container_var["General Settings"]["Default Author"].get())
        self.container_var["fi_setting"]["Time BG Start"].set("Set start time")
        self.container_var["fi_setting"]["Time BG End"].set("Set end time")
        var_entr_01a_default = self.container_var["fi_setting"]["Author"].get()
        var_entr_01b_default = self.container_var["fi_setting"]["Source ID"].get()
        var_entr_03a_default = self.container_var["fi_setting"]["Oxide Concentration"].get()
        var_entr_03b_default = self.container_var["fi_setting"]["Element Concentration"].get()
        var_entr_07a_default = self.container_var["fi_setting"]["Time BG Start"].get()
        var_entr_07b_default = self.container_var["fi_setting"]["Time BG End"].get()
        #
        entr_01a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_01 + 1, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_entry(
            var=self.container_var["fi_setting"]["Author"], text_default=var_entr_01a_default)
        entr_01b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_01 + 2, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_entry(
            var=self.container_var["fi_setting"]["Source ID"], text_default=var_entr_01b_default)
        #
        entr_03a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 1, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 8,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_entry(
            var=self.container_var["fi_setting"]["Oxide Concentration"], text_default=var_entr_03a_default)
        entr_03b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 2, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 8,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_entry(
            var=self.container_var["fi_setting"]["Element Concentration"], text_default=var_entr_03b_default)
        #
        entr_08a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08 + 1, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_entry(
            var=self.container_var["fi_setting"]["Time BG Start"], text_default=var_entr_07a_default,
            command=lambda event, var_entr=self.container_var["fi_setting"]["Time BG Start"], var_key="Start",
                           mode="default": self.fi_set_bg_interval(var_entr, var_key, mode, event))
        entr_08b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_08 + 2, column_id=n_col_category, n_rows=1, n_columns=6,
            fg=self.bg_colors["Dark Font"], bg=bg_medium).create_simple_entry(
            var=self.container_var["fi_setting"]["Time BG End"], text_default=var_entr_07b_default,
            command=lambda event, var_entr=self.container_var["fi_setting"]["Time BG End"], var_key="End",
                           mode="default": self.fi_set_bg_interval(var_entr, var_key, mode, event))
        #
        ## OPTION MENUS
        opt_02a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02 + 1, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_srm(
            var_srm=self.container_var["SRM"]["default"][0], text_set=var_text_std,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_srm=self.container_var["SRM"]["default"][0]: self.change_srm_default(var_srm))
        opt_02a["menu"].config(fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_02a.config(bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        opt_02b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02 + 2, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_srm(
            var_srm=self.container_var["SRM"]["default"][1], text_set=var_text_iso,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_srm=self.container_var["SRM"]["default"][1]:
            self.change_srm_default(var_srm, key="isotope"))
        opt_02b["menu"].config(fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
                               activebackground=self.accent_color)
        opt_02b.config(bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                       activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["IS"]["Default STD"].get() != "Select IS":
            var_text_std_is = self.container_var["IS"]["Default STD"].get()
        else:
            if self.container_var["SRM"]["default"][0].get() != "Select SRM":
                var_srm = self.container_var["SRM"]["default"][0].get()
                srm_default_std = {}
                srm_default_std[var_srm] = {}
                ESRM().place_srm_values(srm_name=var_srm, srm_dict=srm_default_std)
                element_max = max(srm_default_std[var_srm], key=srm_default_std[var_srm].get)
                for isotope in self.container_lists["ISOTOPES"]:
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    if element == element_max:
                        var_text_std_is = isotope
                        break
            else:
                var_text_std_is = "Select IS"
        opt_02c = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_02 + 3, column_id=n_col_category - 4, n_rows=1,
            n_columns=n_col_category - 2, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_menu(
            var_opt=self.container_var["IS"]["Default STD"], text_set=var_text_std_is,
            option_list=self.container_lists["ISOTOPES"], fg_active=self.bg_colors["Dark Font"],
            bg_active=self.accent_color, command=lambda var_opt=self.container_var["IS"]["Default STD"], mode="STD":
            self.fi_select_is_default(var_opt, mode))
        opt_02c.grid(row=start_row_02 + 3, column=n_col_category - 4, rowspan=1, columnspan=n_col_category - 2)
        opt_02c["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_02c.config(
            bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["fi_setting"]["Oxide"].get() != "Select Oxide":
            var_text = self.container_var["fi_setting"]["Oxide"].get()
        else:
            var_text = "Select Oxide"
        #
        opt_03a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 1, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Oxide"], option_list=self.container_lists["Oxides"],
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        opt_03a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_03a.config(
            bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["fi_setting"]["Element"].get() != "Select Element":
            var_text = self.container_var["fi_setting"]["Element"].get()
        else:
            var_text = "Select Element"
        opt_03b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_03 + 2, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Element"], option_list=self.container_lists["Elements"],
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color)
        opt_03b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_03b.config(
            bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"
        opt_06a = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_06 + 1, column_id=n_col_category, n_rows=1,
            n_columns=n_col_category - 6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["ID"]["Default SMPL"], option_list=self.list_alphabet, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["ID"]["Default SMPL"]: self.fi_select_id_default(var_opt))
        opt_06a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_06a.config(
            bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        if self.container_var["Spike Elimination Method"].get() != "Select Method":
            var_text = self.container_var["Spike Elimination Method"].get()
        else:
            var_text = "Select Method"
        opt_09b = SE(
            parent=self.subwindow_fi_settings, row_id=start_row_09 + 2, column_id=n_col_header - 9, n_rows=1,
            n_columns=n_col_header - 9, fg=self.bg_colors["Very Dark"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["Spike Elimination Method"], option_list=self.list_se_methods, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["Spike Elimination Method"], start_row=start_row_09:
            self.select_spike_elimination(var_opt, start_row))
        opt_09b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_09b.config(
            bg=bg_medium, fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        list_opt_gas = ["Helium", "Neon", "Argon", "Krypton", "Xenon", "Radon"]
        opt_laser = SE(
            parent=self.subwindow_fi_settings, row_id=n_rows - 9, column_id=n_col_header + n_col_files + 14,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=bg_medium).create_option_isotope(
            var_iso=self.container_var["LASER"], option_list=list_opt_gas, text_set="Argon",
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["LASER"]: self.change_carrier_gas(var_opt))
        opt_laser["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=bg_medium, activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_laser.config(
            bg=bg_medium, fg=self.bg_colors["Very Dark"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## INITIALIZATION
        self.select_spike_elimination(
            var_opt=self.container_var["Spike Elimination Method"].get(), start_row=start_row_09)
        if self.file_loaded == False:
            self.fi_select_is_default(var_opt=self.container_var["IS"]["Default STD"].get())
            self.fi_select_id_default(var_opt=self.container_var["ID"]["Default SMPL"].get())
            #self.change_srm_default(var_srm=self.container_var["SRM"]["default"][0].get())
            #self.change_srm_default(var_srm=self.container_var["SRM"]["default"][1].get(), key="isotope")
            self.fi_select_srm_default(var_opt=self.container_var["SRM"]["default"][0].get())
            self.fi_select_srm_default(var_opt=self.container_var["SRM"]["default"][1].get(), mode="ISOTOPES")
            #
        else:
            self.fi_select_srm_initialization()
        #
        for filetype in ["STD", "SMPL"]:
            if self.container_var["Spike Elimination"][filetype]["State"] == True:
                if self.container_var["Spike Elimination Method"].get() in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
                    var_method = "Grubbs"
                    #
                    self.spike_elimination_all(filetype=filetype, algorithm=var_method)
        #
        #if self.file_loaded == True:
        #    self.spike_elimination_all(filetype, algorithm)
        #    self.spike_elimination_all(filetype, algorithm)
        #
    #
    def change_rb_inclusion_setup(self):
        if self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 1:
            self.btn_setup_massbalance.configure(state="normal")
            self.btn_setup_chargebalance.configure(state="disabled")
            self.btn_setup_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 2:
            self.btn_setup_massbalance.configure(state="disabled")
            self.btn_setup_chargebalance.configure(state="normal")
            self.btn_setup_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Inclusion Setup Selection"].get() == 3:
            self.btn_setup_massbalance.configure(state="disabled")
            self.btn_setup_chargebalance.configure(state="disabled")
            self.btn_setup_plugin.configure(state="normal")
    #
    def change_rb_quantification_setup(self):
        if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
            self.btn_setup_quantification_matrixonly.configure(state="normal")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            self.btn_setup_quantification_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="normal")
            self.btn_setup_quantification_plugin.configure(state="disabled")
        elif self.container_var["fi_setting"]["Quantification Method"].get() == 3:
            self.btn_setup_quantification_matrixonly.configure(state="disabled")
            self.btn_setup_quantification_secondinternal.configure(state="disabled")
            self.btn_setup_quantification_plugin.configure(state="normal")
    #
    #########################
    ## Calculation Methods ##
    #########################
    #
    def fi_get_intensity(self, var_filetype="", var_datatype="", var_file_short="", mode="All"):
        """ Extract the intensity data based on the set interval limits.

        Parameters
        ----------
        var_filetype : str
            Defines the filetype, e.g. "STD" or "SMPL".
        var_datatype : str
            Defines the datatype, e.g. "RAW" or "SMOOTHED".
        var_file_short : str
            Defines the filename as short written version.
        mode : str
            Defines the extraction mode, e.g. "All" says that it has to be done for all files.

        Returns
        -------
        """
        #
        if mode == "All":
            for var_filetype in ["STD", "SMPL"]:
                for var_datatype in ["RAW", "SMOOTHED"]:
                    for var_focus in ["BG", "MAT", "INCL"]:
                        if var_filetype == "STD" and var_focus == "INCL":
                            pass
                            #
                        else:
                            for isotope in self.container_lists["ISOTOPES"]:
                                helper_results = []
                                #
                                for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                                    var_file_short = self.container_lists[var_filetype]["Short"][index]
                                    #
                                    if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                        if var_filetype == "SMPL":
                                            var_id = self.container_var[var_filetype][var_file_long]["ID"].get()
                                            var_id_selected = self.container_var["ID"]["Default SMPL"].get()
                                            #
                                            if var_id == var_id_selected:
                                                self.fi_get_intensity(
                                                    var_filetype=var_filetype, var_datatype=var_datatype,
                                                    var_file_short=var_file_short, mode="Specific")
                                                var_result_i = self.container_intensity[var_filetype][var_datatype][
                                                    var_file_short][var_focus][isotope]
                                                helper_results.append(var_result_i)
                                            #
                                        else:
                                            self.fi_get_intensity(
                                                var_filetype=var_filetype, var_datatype=var_datatype,
                                                var_file_short=var_file_short, mode="Specific")
                                            #
                                            var_result_i = self.container_intensity[var_filetype][var_datatype][
                                                var_file_short][var_focus][isotope]
                                            #
                                            helper_results.append(var_result_i)
                                            #
                                var_result_i = np.mean(helper_results)
                                self.container_intensity[var_filetype][var_datatype][isotope] = var_result_i
            #
        elif mode == "Specific":
            for var_focus in ["BG", "MAT", "INCL"]:
                if var_filetype == "STD" and var_focus in ["INCL"]:
                    pass
                    #
                else:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for key, items in self.container_helper[var_filetype][var_file_short][var_focus][
                            "Content"].items():
                            var_indices = items["Indices"]
                            var_key = "Data " + str(var_datatype)
                            var_data = self.container_spikes[var_file_short][isotope][var_key][
                                       var_indices[0]:var_indices[1] + 1]
                            helper_results.extend(var_data)
                        #
                        var_result = np.mean(helper_results)
                        self.container_intensity[var_filetype][var_datatype][var_file_short][var_focus][
                            isotope] = var_result
    #
    def fi_get_intensity_mix(self, var_filetype, var_datatype, var_file_short, mode="Specific"):
        if mode == "Specific":
            for isotope in self.container_lists["ISOTOPES"]:
                var_intensity_incl_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["INCL"][
                            isotope]
                var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                #
                var_result_i = var_intensity_incl_i - var_intensity_bg_i
                #
                if var_result_i < 0:
                    var_result_i = 0.0
                #
                self.container_intensity_mix[var_filetype][var_datatype][var_file_short][isotope] = var_result_i
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.fi_get_intensity_mix(
                                var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short)
                            var_result_i = self.container_intensity_mix[var_filetype][var_datatype][var_file_short][
                                isotope]
                            helper_results.append(var_result_i)
                            #
                    var_result_i = np.mean(helper_results)
                    self.container_intensity_mix[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_intensity_corrected(self, var_filetype, var_datatype, var_file_short, var_focus, mode="Specific"):
        if mode == "Specific":
            for isotope in self.container_lists["ISOTOPES"]:
                var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                    isotope]
                var_intensity_mat_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["MAT"][
                    isotope]
                #
                if var_focus == "MAT":
                    var_result = var_intensity_mat_i - var_intensity_bg_i
                    #
                elif var_focus == "INCL":
                    ## Heinrich et al., (2003)
                    var_index = self.container_lists[var_filetype]["Short"].index(var_file_short)
                    var_file_long = self.container_lists[var_filetype]["Long"][var_index]
                    #
                    if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                        var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                    else:
                        var_t = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
                    #
                    var_intensity_bg_t = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                        var_t]
                    var_intensity_mat_t = self.container_intensity[var_filetype][var_datatype][var_file_short]["MAT"][
                        var_t]
                    var_intensity_incl_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["INCL"][
                        isotope]
                    var_intensity_incl_t = self.container_intensity[var_filetype][var_datatype][var_file_short]["INCL"][
                        var_t]
                    #
                    var_intensity_mix_i = var_intensity_incl_i - var_intensity_bg_i
                    var_intensity_mix_t = var_intensity_incl_t - var_intensity_bg_t
                    var_intensity_host_i = var_intensity_mat_i - var_intensity_bg_i
                    var_intensity_host_t = var_intensity_mat_t - var_intensity_bg_t
                    #
                    var_result = var_intensity_mix_i - var_intensity_mix_t*(var_intensity_host_i/var_intensity_host_t)
                    #
                elif var_focus == "BG":
                    var_result = var_intensity_bg_i
                #
                if var_result < 0:
                    var_result = 0.0
                #
                self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result
            #
        elif mode == "All":
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["BG", "MAT"]
                else:
                    focus_set = ["BG", "MAT", "INCL"]
                #
                for var_focus in focus_set:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_intensity_corrected(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_focus=var_focus)
                                var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short][var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
            #
        elif mode == "only STD":
            for var_filetype in ["STD"]:
                for var_focus in ["MAT"]:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_intensity_corrected(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_focus=var_focus)
                                var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short][var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
            #
        elif mode == "only SMPL":
            for var_filetype in ["SMPL"]:
                for var_focus in ["MAT", "INCL"]:
                    if var_focus not in self.container_intensity_corrected[var_filetype][var_datatype]:
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_intensity_corrected(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_focus=var_focus)
                                var_result_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                    var_file_short][var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_corrected[var_filetype][var_datatype][isotope] = var_result_i
                        self.container_intensity_corrected[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
    #
    def fi_get_intensity_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus,
                                    mode="Specific"):
        if mode == "Specific":
            var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            #
            if var_focus in ["MAT", "INCL"]:
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            else:
                var_intensity_is = self.container_intensity[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
            #
            for isotope in self.container_lists["ISOTOPES"]:
                if var_focus in ["MAT", "INCL"]:
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                else:
                    var_intensity_i = self.container_intensity[var_filetype][var_datatype][var_file_short][
                        var_focus][isotope]
                #
                var_result = var_intensity_i/var_intensity_is
                self.container_intensity_ratio[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["BG", "MAT", "INCL"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_intensity_ratio(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long, var_focus=var_focus)
                                var_result_i = self.container_intensity_ratio[var_filetype][var_datatype][
                                    var_file_short][var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_intensity_ratio[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_analytical_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            if var_filetype == "STD":
                var_srm_file = self.container_var["SRM"][var_file_long].get()
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                var_srm_is = self.container_var["SRM"][var_is].get()
                #
                key_element = re.search("(\D+)(\d+)", var_is)
                element = key_element.group(1)
                var_concentration_is = self.srm_actual[var_srm_is][element]
                self.container_var[var_filetype][var_file_long]["IS Data"]["Concentration"].set(var_concentration_is)
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    if var_srm_i == var_srm_file:
                        key_element = re.search("(\D+)(\d+)", isotope)
                        element = key_element.group(1)
                        var_concentration_i = self.srm_actual[var_srm_i][element]

                        var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]

                        var_result_i = (var_intensity_i/var_intensity_is)*(var_concentration_is/var_concentration_i)
                        self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
                #
            else:
                self.calculate_acquisition_time_deltas()
                xi_opt = {}
                xi_std_helper = {}
                list_valid_std = []
                #
                for index, file_std in enumerate(self.container_lists["STD"]["Long"]):
                    var_srm_file = self.container_var["SRM"][file_std].get()
                    file_std_short = self.container_lists["STD"]["Short"][index]
                    #
                    if self.container_var["STD"][file_std]["Checkbox"].get() == 1:
                        self.fi_get_analytical_sensitivity(
                            var_filetype="STD", var_datatype=var_datatype, var_file_short=file_std_short,
                            var_file_long=file_std)
                        xi_std_helper[file_std_short] = {}
                        delta_std_i = self.container_lists["Acquisition Times Delta"][file_std_short]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            if var_srm_i == var_srm_file:
                                list_valid_std.append(file_std_short)
                                if isotope not in xi_opt:
                                    xi_opt[isotope] = []

                                sensitivity_i = self.container_analytical_sensitivity["STD"][var_datatype][
                                    file_std_short]["MAT"][isotope]

                                xi_std_helper[file_std_short][isotope] = [delta_std_i, sensitivity_i]
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    xi_regr = self.calculate_regression(
                        data=xi_std_helper, isotope=isotope, file_data=list_valid_std)
                    xi_opt[isotope].extend(xi_regr)
                #
                for file_smpl in self.container_lists["SMPL"]["Short"]:
                    delta_i = self.container_lists["Acquisition Times Delta"][file_smpl]
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        var_result_i = xi_opt[isotope][0]*delta_i + xi_opt[isotope][1]
                        self.container_lists["Analytical Sensitivity Regression"][isotope] = {
                            "a": xi_opt[isotope][0], "b": xi_opt[isotope][1]}
                        self.container_analytical_sensitivity[var_filetype][var_datatype][file_smpl]["MAT"][
                            isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        var_srm_i = self.container_var["SRM"][isotope].get()
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if var_filetype == "STD":
                                var_srm_file = self.container_var["SRM"][var_file_long].get()
                                if var_srm_i == var_srm_file:
                                    if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                        var_file_short = self.container_lists[var_filetype]["Short"][index]
                                        #
                                        self.fi_get_analytical_sensitivity(
                                            var_filetype=var_filetype, var_datatype=var_datatype,
                                            var_file_short=var_file_short, var_file_long=var_file_long)
                                        var_result_i = self.container_analytical_sensitivity[var_filetype][
                                            var_datatype][var_file_short][var_focus][isotope]
                                        helper_results.append(var_result_i)
                            else:
                                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                    var_file_short = self.container_lists[var_filetype]["Short"][index]
                                    #
                                    self.fi_get_analytical_sensitivity(
                                        var_filetype=var_filetype, var_datatype=var_datatype,
                                        var_file_short=var_file_short, var_file_long=var_file_long)
                                    var_result_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                        var_file_short][var_focus][isotope]
                                    helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_analytical_sensitivity[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_normalized_sensitivity(self, var_filetype, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            for isotope in self.container_lists["ISOTOPES"]:
                if var_filetype == "STD":
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    #
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_concentration_i = self.srm_actual[var_srm_i][element]
                    #
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    #
                    var_result_i = var_intensity_i/var_concentration_i
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                    #
                else:
                    sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    var_srm_is = self.container_var["SRM"][var_is].get()
                    #
                    key_element = re.search("(\D+)(\d+)", var_is)
                    element = key_element.group(1)
                    concentration_is = self.srm_actual[var_srm_is][element]
                    #
                    intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][var_is]
                    #
                    var_result_i = sensitivity_i*(intensity_is/concentration_is)
                    self.container_normalized_sensitivity[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                for var_focus in ["MAT"]:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_normalized_sensitivity(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long)
                                var_result_i = self.container_normalized_sensitivity[var_filetype][var_datatype][
                                    var_file_short][var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_normalized_sensitivity[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_rsf(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus, mode="Specific"):
        """ Calculates the Relative Sensitivity Factor, RSF, based on the following two equations:
        1) Standard Files:  RSF_i = 1
        2) Sample Files:    RSF_i = sensitivity_i*(concentration_std_i/intensity_std_i)*
                                    (intensity_smpl_is/concentration_smpl_is)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)
        var_focus : str
            The focus category, e.g. MAT

        Returns
        -------
        """
        #
        if mode == "Specific":
            if var_filetype == "STD":
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    var_result_i = 1
                    self.container_rsf[var_filetype][var_datatype][var_file_short][var_focus][isotope] = var_result_i
                #
            elif var_filetype == "SMPL":
                var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                var_concentration_is = float(self.container_var[var_filetype][var_file_long]["IS Data"][
                                                 "Concentration"].get())
                var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    var_focus][var_is]
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                        var_file_short]["MAT"][isotope]
                    #
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    var_concentration_i = self.srm_actual[var_srm_i][element]
                    #
                    var_intensity_i = self.container_intensity_corrected["STD"][var_datatype]["MAT"][isotope]
                    #
                    if var_concentration_is > 0 and var_intensity_i > 0:
                        var_result_i = var_sensitivity_i*(var_concentration_i/var_intensity_i)*\
                                       (var_intensity_is/var_concentration_is)
                    else:
                        var_result_i = 0
                    #
                    self.container_rsf[var_filetype][var_datatype][var_file_short][var_focus][isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]
                #
                for var_focus in focus_set:
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_rsf(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long, var_focus=var_focus)
                                var_result_i = self.container_rsf[var_filetype][var_datatype][var_file_short][var_focus][
                                    isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_rsf[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_concentration(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus="MAT",
                             mode="Specific"):
        """ Calculates the concentration, C, based on the following two equations:
        1) Standard Files:  C_i = SRM_dataset(element)
        2) Sample Files:    C_i = (intensity_smpl_i/intensity_smpl_is)*(concentration_smpl_is/sensitivity_i)

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        #
        if mode == "Specific":
            if var_filetype == "STD":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_srm_i = self.container_var["SRM"][isotope].get()
                    key_element = re.search("(\D+)(\d+)", isotope)
                    element = key_element.group(1)
                    #
                    var_result_i = self.srm_actual[var_srm_i][element]
                    self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope] = var_result_i
                #
            elif var_filetype == "SMPL":
                var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
                #
                if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                    var_t = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
                    var_concentration_host_t = float(self.container_var["SMPL"][var_file_long]["Host Only Tracer"][
                                                         "Value"].get())
                elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
                    var_t = self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Name"].get()
                    var_concentration_host_t = float(
                        self.container_var["SMPL"][var_file_long]["Matrix Setup"]["IS"]["Concentration"].get())
                #
                var_intensity_host_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_is]
                var_intensity_host_t = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_t]
                var_sensitivity_t = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file_short][
                    "MAT"][var_t]
                #
                var_concentration_host_is = (var_intensity_host_is*var_sensitivity_t*var_concentration_host_t)/\
                                            (var_intensity_host_t)
                #
                for isotope in self.container_lists["ISOTOPES"]:
                    if var_focus == "MAT":
                        # Classical Mineral Analysis
                        var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        #
                        var_result_i = (var_intensity_i/var_intensity_host_is)*\
                                       (var_concentration_host_is/var_sensitivity_i)
                        #
                        self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
                        #
                    else:
                        if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                            ## Matrix-Only Tracer
                            ## Heinrich et al. (2003)
                            var_concentration_incl_is = float(self.container_var["SMPL"][var_file_long]["IS Data"][
                                                                  "Concentration"].get())
                            #
                            var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
                            var_srm_is = self.container_var["SRM"][var_is].get()
                            key_element = re.search("(\D+)(\d+)", var_is)
                            element = key_element.group(1)
                            #
                            var_srm_i = self.container_var["SRM"][isotope].get()
                            key_element = re.search("(\D+)(\d+)", isotope)
                            element = key_element.group(1)
                            #
                            var_intensity_incl_i = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["INCL"][isotope]
                            var_intensity_incl_is = self.container_intensity_corrected[var_filetype][var_datatype][
                                var_file_short]["INCL"][var_is]
                            #
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            #
                            var_result_i = (var_intensity_incl_i/var_intensity_incl_is)*\
                                           (var_concentration_incl_is/var_sensitivity_i)
                            #
                            if var_result_i < 0:
                                var_result_i = 0.0
                            #
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["INCL"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["Matrix-Only"][
                                isotope] = var_result_i
                            #
                        elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
                            ## Second Internal Standard
                            var_is1 = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
                            var_is2 = self.container_var["SMPL"][var_file_long]["Second Internal Standard"][
                                "Name"].get()
                            #
                            ## Factor a
                            var_intensity_mix_is1 = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                var_is1]
                            var_intensity_mix_is2 = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                var_is2]
                            var_sensitivity_is2 = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][var_is2]
                            #
                            var_a = (var_intensity_mix_is2/var_intensity_mix_is1)*(1/var_sensitivity_is2)
                            #
                            ## Factor x
                            var_concentration_host_is1 = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][var_is1]
                            var_concentration_host_is2 = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][var_is2]
                            var_concentration_incl_is1 = float(self.container_var["SMPL"][var_file_long]["IS Data"][
                                "Concentration"].get())
                            var_concentration_incl_is2 = float(self.container_var["SMPL"][var_file_long][
                                "Second Internal Standard"]["Value"].get())
                            #
                            upper_term = var_concentration_host_is2 - var_a*var_concentration_host_is1
                            lower_term = var_concentration_host_is2 - var_concentration_incl_is2 - var_a*(
                                    var_concentration_host_is1 - var_concentration_incl_is1)
                            #
                            var_x = upper_term/lower_term
                            #
                            ## Mixed Concentration IS1
                            var_concentration_mix_is1 = (1 - var_x)*var_concentration_host_is1 + var_x*var_concentration_incl_is1
                            #
                            ## Mixed Concentrations
                            var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                                isotope]
                            var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                                var_file_short]["MAT"][isotope]
                            #
                            var_concentration_mix_i = (var_intensity_mix_i/var_intensity_mix_is1)*(
                                    var_concentration_mix_is1/var_sensitivity_i)
                            #
                            ## Inclusion Concentrations
                            var_concentration_host_i = self.container_concentration["SMPL"][var_datatype][
                                var_file_short]["MAT"][isotope]
                            #
                            var_result_i = (var_concentration_mix_i - (1 - var_x)*var_concentration_host_i)/var_x
                            #
                            if var_result_i < 0:
                                var_result_i = 0.0
                            #
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["INCL"][
                                isotope] = var_result_i
                            self.container_concentration[var_filetype][var_datatype][var_file_short]["Second-Internal"][
                                isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]
                #
                for var_focus in focus_set:
                    if var_focus not in self.container_concentration[var_filetype][var_datatype]:
                        self.container_concentration[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_concentration(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long, var_focus=var_focus)
                                var_result_i = self.container_concentration[var_filetype][var_datatype][var_file_short][
                                    var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_concentration[var_filetype][var_datatype][var_focus][isotope] = var_result_i
    #
    def fi_get_mixed_concentration_ratio(self, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
            #
            if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                var_mo = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
            elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
                var_mo = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                    var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_mo]
                    var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
                    var_intensity_mix_i = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_mo]
                    var_intensity_mix_is = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][var_is]
                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]

                var_result_i = var_intensity_mix_i/(var_intensity_mix_is*var_sensitivity_i)
                self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope] = var_result_i
                #
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.fi_get_mixed_concentration_ratio(
                                var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long)
                            var_result_i = self.container_mixed_concentration_ratio[var_filetype][var_datatype][
                                var_file_short][isotope]
                            helper_results.append(var_result_i)
                            #
                    var_result_i = np.mean(helper_results)
                    self.container_mixed_concentration_ratio[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_mixing_ratio(self, var_datatype, var_file_short, var_file_long, mode="Specific"):
        if mode == "Specific":
            var_is = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
            #
            if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                var_mo = self.container_var["SMPL"][var_file_long]["Host Only Tracer"]["Name"].get()
            elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
                var_is1 = self.container_var["SMPL"][var_file_long]["IS Data"]["IS"].get()
                var_is2 = self.container_var["SMPL"][var_file_long]["Second Internal Standard"]["Name"].get()
            #
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                    var_a = self.container_mixed_concentration_ratio["SMPL"][var_datatype][var_file_short][isotope]
                    var_concentration_host_mo = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_mo]
                    var_concentration_host_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_is]
                    var_concentration_incl_is = self.container_concentration["SMPL"][var_datatype][var_file_short][
                        "INCL"][var_is]
                    #
                    upper_term = var_a*var_concentration_host_mo*var_concentration_incl_is
                    lower_term = var_concentration_host_mo - var_a*\
                                 (var_concentration_host_is - var_concentration_incl_is)
                    #
                    var_concentration_mix_mo = upper_term/lower_term
                    #
                    upper_term = (var_concentration_host_mo - var_concentration_mix_mo)
                    lower_term = var_concentration_host_mo
                    #
                elif self.container_var["fi_setting"]["Quantification Method"].get() == 2:
                    var_intensity_mix_is1 = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                        var_is1]
                    var_intensity_mix_is2 = self.container_intensity_mix["SMPL"][var_datatype][var_file_short][
                        var_is2]
                    var_sensitivity_is2 = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file_short][
                        "MAT"][var_is2]
                    #
                    var_a = (var_intensity_mix_is2/var_intensity_mix_is1)*(1/var_sensitivity_is2)
                    #
                    var_concentration_host_is1 = self.container_concentration["SMPL"][var_datatype][
                        var_file_short]["MAT"][var_is1]
                    var_concentration_host_is2 = self.container_concentration["SMPL"][var_datatype][
                        var_file_short]["MAT"][var_is2]
                    var_concentration_incl_is1 = float(self.container_var["SMPL"][var_file_long]["IS Data"][
                                                           "Concentration"].get())
                    var_concentration_incl_is2 = float(self.container_var["SMPL"][var_file_long][
                                                           "Second Internal Standard"]["Value"].get())
                    #
                    upper_term = var_concentration_host_is2 - var_a*var_concentration_host_is1
                    lower_term = var_concentration_host_is2 - var_concentration_incl_is2 - var_a*(
                            var_concentration_host_is1 - var_concentration_incl_is1)
                #
                if lower_term != 0:
                    var_result_i = upper_term/lower_term
                else:
                    var_result_i = 0
                #
                self.container_mixing_ratio["SMPL"][var_datatype][var_file_short][isotope] = var_result_i
            #
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.fi_get_mixing_ratio(
                                var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long)
                            var_result_i = self.container_mixing_ratio[var_filetype][var_datatype][var_file_short][
                                isotope]
                            helper_results.append(var_result_i)
                            #
                    var_result_i = np.mean(helper_results)
                    self.container_mixing_ratio["SMPL"][var_datatype][isotope] = var_result_i
    #
    def fi_get_concentration_mixed(self, var_datatype, var_file_short, mode="Specific"):
        if mode == "Specific":
            for isotope in self.container_lists["ISOTOPES"]:
                var_x = self.container_mixing_ratio["SMPL"][var_datatype][var_file_short][isotope]
                var_concentration_host_i = self.container_concentration["SMPL"][var_datatype][var_file_short]["MAT"][
                    isotope]
                var_concentration_incl_i = self.container_concentration["SMPL"][var_datatype][var_file_short]["INCL"][
                    isotope]
                #
                var_result_i = (1 - var_x)*var_concentration_host_i + var_x*var_concentration_incl_i
                self.container_mixed_concentration["SMPL"][var_datatype][var_file_short][isotope] = var_result_i
            #
        else:
            for var_filetype in ["SMPL"]:
                for isotope in self.container_lists["ISOTOPES"]:
                    helper_results = []
                    #
                    for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                        if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                            var_file_short = self.container_lists[var_filetype]["Short"][index]
                            #
                            self.fi_get_concentration_mixed(var_datatype=var_datatype, var_file_short=var_file_short)
                            #
                            var_result_i = self.container_mixed_concentration[var_filetype][var_datatype][
                                var_file_short][isotope]
                            helper_results.append(var_result_i)
                            #
                    var_result_i = np.mean(helper_results)
                    self.container_mixed_concentration[var_filetype][var_datatype][isotope] = var_result_i
    #
    def fi_get_concentration_ratio(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus,
                                   mode="Specific"):
        """ Calculates the concentration ratio, C_i/C_is, based on the following two equations:
                1) Standard Files:  C_i = C_std_i/C_std_is
                2) Sample Files:    C_i = C_smpl_i/C_smpl_is

                Parameters
                ----------
                var_filetype : str
                    The file category, e.g. STD
                var_datatype : str
                    The data category, e.g. RAW
                var_file_short : str
                    The file as a short version (without the complete filepath)
                var_file_long : str
                    The file as the long version (with the complete filepath)
                var_focus : str
                    The focus category, e.g. MAT

                Returns
                -------
                """
        #
        if mode == "Specific":
            var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
            var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short][var_focus][
                var_is]
            #
            for isotope in self.container_lists["ISOTOPES"]:
                var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short][
                    var_focus][isotope]
                #
                if var_concentration_is > 0:
                    var_result_i = var_concentration_i/var_concentration_is
                else:
                    var_result_i = 0
                #
                self.container_concentration_ratio[var_filetype][var_datatype][var_file_short][var_focus][
                    isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]
                #
                for var_focus in focus_set:
                    if var_focus not in self.container_concentration_ratio[var_filetype][var_datatype]:
                        self.container_concentration_ratio[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_concentration_ratio(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long, var_focus=var_focus)
                                var_result_i = self.container_concentration_ratio[var_filetype][var_datatype][
                                    var_file_short][var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_concentration_ratio[var_filetype][var_datatype][var_focus][
                            isotope] = var_result_i
    #
    def fi_get_lod(self, var_filetype, var_datatype, var_file_short, var_file_long, var_focus, mode="Specific"):
        """ Calculates the Limit of Detection, LoD, based on the following two equations:
        1) Standard Files:  C_i = C_std_i/C_std_is
        2) Sample Files:    C_i = C_smpl_i/C_smpl_is

        Parameters
        ----------
        var_filetype : str
            The file category, e.g. STD
        var_datatype : str
            The data category, e.g. RAW
        var_file_short : str
            The file as a short version (without the complete filepath)
        var_file_long : str
            The file as the long version (with the complete filepath)

        Returns
        -------
        """
        #
        if mode == "Specific":
            if var_filetype == "STD":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []

                    for key, items in self.container_helper[var_filetype][var_file_short]["BG"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1]]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short]["MAT"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1]]
                        var_n_mat += len(var_data)
                    #
                    var_concentration_i = self.container_concentration[var_filetype][var_datatype][var_file_short]["MAT"][
                        isotope]
                    var_intensity_i = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        "MAT"][isotope]
                    #
                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        #
                        var_result_i = (3.29*(
                                var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                               var_n_mat*var_tau_i)*(var_concentration_i/var_intensity_i)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
                        #
                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        var_sigma_bg_i = np.mean(helper_sigma_i)
                        #
                        var_result_i = (3*var_sigma_bg_i*var_concentration_i)/(var_intensity_i)*(
                                1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short]["MAT"][
                            isotope] = var_result_i
                    #
            elif var_filetype == "SMPL":
                for isotope in self.container_lists["ISOTOPES"]:
                    var_n_bg = 0
                    var_n_mat = 0
                    helper_sigma_i = []
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short]["BG"]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_bg += len(var_data)
                        helper_sigma_i.append(np.std(var_data, ddof=1))
                    #
                    for key, items in self.container_helper[var_filetype][var_file_short][var_focus]["Content"].items():
                        var_indices = items["Indices"]
                        var_key = "Data " + str(var_datatype)
                        var_data = self.container_spikes[var_file_short][isotope][var_key][
                                   var_indices[0]:var_indices[1] + 1]
                        var_n_mat += len(var_data)
                    #
                    var_is = self.container_var[var_filetype][var_file_long]["IS Data"]["IS"].get()
                    var_concentration_is = self.container_concentration[var_filetype][var_datatype][var_file_short][
                        var_focus][var_is]
                    var_intensity_is = self.container_intensity_corrected[var_filetype][var_datatype][var_file_short][
                        var_focus][var_is]
                    #
                    if self.container_var["General Settings"]["LOD Selection"].get() == 0:
                        var_intensity_bg_i = self.container_intensity[var_filetype][var_datatype][var_file_short]["BG"][
                            isotope]
                        var_tau_i = float(self.container_var["dwell_times"]["Entry"][isotope].get())
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        #
                        var_result_i = (3.29*(
                                var_intensity_bg_i*var_tau_i*var_n_mat*(1 + var_n_mat/var_n_bg))**(0.5) + 2.71)/(
                                               var_n_mat*var_tau_i*var_sensitivity_i)*(
                                                   var_concentration_is/var_intensity_is)
                        self.container_lod[var_filetype][var_datatype][var_file_short][var_focus][
                            isotope] = var_result_i
                        #
                    elif self.container_var["General Settings"]["LOD Selection"].get() == 1:
                        var_sigma_bg_i = np.mean(helper_sigma_i)
                        var_sensitivity_i = self.container_analytical_sensitivity[var_filetype][var_datatype][
                            var_file_short]["MAT"][isotope]
                        #
                        var_result_i = (3*var_sigma_bg_i*var_concentration_is)/(
                                    var_sensitivity_i*var_intensity_is)*(
                                               1/var_n_bg + 1/var_n_mat)**(0.5)
                        self.container_lod[var_filetype][var_datatype][var_file_short][var_focus][
                            isotope] = var_result_i
            #
        else:
            for var_filetype in ["STD", "SMPL"]:
                if var_filetype == "STD":
                    focus_set = ["MAT"]
                else:
                    focus_set = ["MAT", "INCL"]
                #
                for var_focus in focus_set:
                    if var_focus not in self.container_lod[var_filetype][var_datatype]:
                        self.container_lod[var_filetype][var_datatype][var_focus] = {}
                        #
                    for isotope in self.container_lists["ISOTOPES"]:
                        helper_results = []
                        #
                        for index, var_file_long in enumerate(self.container_lists[var_filetype]["Long"]):
                            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                                var_file_short = self.container_lists[var_filetype]["Short"][index]
                                #
                                self.fi_get_lod(
                                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                                    var_file_long=var_file_long, var_focus=var_focus)
                                var_result_i = self.container_lod[var_filetype][var_datatype][var_file_short][
                                    var_focus][isotope]
                                helper_results.append(var_result_i)
                                #
                        var_result_i = np.mean(helper_results)
                        self.container_lod[var_filetype][var_datatype][var_focus][isotope] = var_result_i
    #
    ####################################################################################################################
    #
    def fi_datareduction_tables(self, init=False):
        ## Initialization
        if init == True:
            var_filetype = "None"
            var_file_short = "None"
            var_file_long = "None"
            var_focus = "None"
            #
            for var_datatype in ["RAW", "SMOOTHED"]:
                # Intensity Results
                self.fi_get_intensity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short, mode="All")
                self.fi_get_intensity_corrected(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_focus=var_focus, mode="All")
                self.fi_get_intensity_mix(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short, mode="All")
                # Sensitivity Results
                self.fi_get_analytical_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.fi_get_normalized_sensitivity(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, mode="All")
                self.fi_get_rsf(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                # Concentration Results
                self.fi_get_concentration(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                self.fi_get_concentration_ratio(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                self.fi_get_lod(
                    var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                    var_file_long=var_file_long, var_focus=var_focus, mode="All")
                self.fi_get_mixed_concentration_ratio(
                    var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long, mode="All")
                self.fi_get_mixing_ratio(
                    var_datatype=var_datatype, var_file_short=var_file_short, var_file_long=var_file_long, mode="All")
                self.fi_get_concentration_mixed(var_datatype=var_datatype, var_file_short=var_file_short, mode="All")
        #
        if self.container_var["fi_datareduction_files"]["File Type"].get() == 0:
            var_filetype = "STD"
            #
            self.rb_04b.configure(state="disabled")
            self.rb_05d.configure(state="disabled")
            self.rb_05e.configure(state="disabled")
            self.rb_05f.configure(state="disabled")
            self.rb_05h.configure(state="disabled")
            #
        elif self.container_var["fi_datareduction_files"]["File Type"].get() == 1:
            var_filetype = "SMPL"
            #
            self.rb_04b.configure(state="normal")
            self.rb_05d.configure(state="normal")
            self.rb_05e.configure(state="normal")
            self.rb_05f.configure(state="normal")
            self.rb_05h.configure(state="normal")
        #
        if self.container_var["fi_datareduction_files"]["Data Type"].get() == 0:
            var_datatype = "RAW"
        elif self.container_var["fi_datareduction_files"]["Data Type"].get() == 1:
            var_datatype = "SMOOTHED"
        #
        if self.container_var["fi_datareduction_files"]["Focus"].get() == 0:
            var_focus = "MAT"
            #
            self.rb_01a.configure(state="normal")
            self.rb_05d.configure(state="disabled")
            self.rb_05e.configure(state="disabled")
            self.rb_05f.configure(state="disabled")
            self.rb_05h.configure(state="disabled")
            #
        elif self.container_var["fi_datareduction_files"]["Focus"].get() == 1:
            var_focus = "INCL"
            #
            self.rb_01a.configure(state="disabled")
            self.rb_05d.configure(state="normal")
            self.rb_05e.configure(state="normal")
            self.rb_05f.configure(state="normal")
            self.rb_05h.configure(state="normal")
        #
        if len(self.tv_results_files.get_children()) > 0:
            for item in self.tv_results_files.get_children():
                self.tv_results_files.delete(item)
        #
        var_id = self.container_var["ID"]["Results Files"].get()
        helper_values = {}
        helper_separator = ["-"]
        for isotope in self.container_lists["ISOTOPES"]:
            if isotope not in helper_values:
                helper_values[isotope] = []
                helper_separator.append("-")
        #
        if self.container_var["fi_datareduction_files"]["Result Category"].get() == 0:  # Concentration
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_concentration[var_filetype][var_datatype][var_file][var_focus][
                                isotope]
                            value_lod = self.container_lod[var_filetype][var_datatype][var_file][var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            if value >= value_lod:
                                entries_container.append(f"{value:.{n_digits}f}")
                                helper_values[isotope].append(value)
                            else:
                                entries_container.append("< LoD")
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 1:    # Concentration Ratio
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_concentration_ratio[var_filetype][var_datatype][var_focus][isotope]
                            #
                            entries_container.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 2:    # Limit of Detection
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_lod[var_filetype][var_datatype][var_file][var_focus][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 3:    # Mixing Ratio a
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_mixed_concentration_ratio[var_filetype][var_datatype][var_file][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 4:    # Mixing Ratio x
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_mixing_ratio[var_filetype][var_datatype][var_file][isotope]
                            #
                            entries_container.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 5:    # Mixed Concentration
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_mixed_concentration[var_filetype][var_datatype][var_file][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 6:    # Intensity
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_intensity_corrected[var_filetype][var_datatype][var_file][var_focus][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 7:    # Intensity Mix
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_intensity_mix[var_filetype][var_datatype][var_file][isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 8:    # Analytical Sensitivity
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_analytical_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 9:    # Normalized Sensitivity
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                                isotope]
                            n_digits = self.ma_determine_ndigits(var_value=value)
                            #
                            entries_container.append(f"{value:.{n_digits}f}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
            #
        elif self.container_var["fi_datareduction_files"]["Result Category"].get() == 10:   # RSF
            for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
                var_file_long = self.container_lists[var_filetype]["Long"][index]
                if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                    if var_filetype == "SMPL":
                        var_id_i = self.container_var[var_filetype][var_file_long]["ID"].get()
                    else:
                        var_id_i = None
                    if var_id_i == var_id or var_filetype == "STD":
                        entries_container = [var_file]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            value = self.container_rsf[var_filetype][var_datatype][var_file]["MAT"][isotope]
                            entries_container.append(f"{value:.{4}E}")
                            helper_values[isotope].append(value)
                        #
                        self.tv_results_files.insert("", tk.END, values=entries_container)
                    else:
                        for isotope in self.container_lists["ISOTOPES"]:
                            if isotope not in helper_values:
                                helper_values[isotope] = []
                                helper_separator.append("-")
            #
            self.tv_results_files.insert("", tk.END, values=helper_separator)
            self.ma_calculate_statistics_table(var_data=helper_values)
    #
    def fi_show_diagrams_intensity(self):
        pass
    #
    def fi_show_diagrams_sensitivity(self):
        ## Window Settings
        window_width = 900
        window_heigth = 800
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_graphical_sensitivity = tk.Toplevel(self.parent)
        self.subwindow_fi_graphical_sensitivity.title("FLUID INCLUSION ANALYSIS - Sensitivity Results")
        self.subwindow_fi_graphical_sensitivity.geometry(var_geometry)
        self.subwindow_fi_graphical_sensitivity.resizable(False, False)
        self.subwindow_fi_graphical_sensitivity["bg"] = self.bg_colors["Very Light"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_graphical_sensitivity, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_graphical_sensitivity, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_graphical_sensitivity.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_graphical_sensitivity.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row, column_id=start_column,
            n_rows=n_rows, n_columns=11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Super Dark"]).create_frame(relief=tk.FLAT)
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File Type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Data Type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Diagram Type", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 10, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Primary Isotope", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Secondary Isotope", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## RADIOBUTTONS
        self.var_opt_iso_04 = tk.StringVar()
        self.var_opt_iso_04.set(self.container_lists["ISOTOPES"][0])
        self.var_opt_iso_05 = tk.StringVar()
        self.var_opt_iso_05.set(self.container_lists["ISOTOPES"][1])
        #
        rb_01a = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_01, value_rb=0, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Standard Files", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        rb_01b = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_01, value_rb=1, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Sample Files", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        #
        rb_02a = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_02, value_rb=0, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="RAW Data", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        rb_02b = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_02, value_rb=1, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="SMOOTHED Data", sticky="nesw", relief=tk.FLAT, command=self.fi_change_sensitivity_drift_diagram)
        #
        rb_03a = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 7, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_03, value_rb=0, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Analytical Sensitivity Drift", sticky="nesw", relief=tk.FLAT)
        rb_03b = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_03, value_rb=1, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Histograms", sticky="nesw", relief=tk.FLAT)
        rb_03c = SE(
            parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.var_rb_03, value_rb=2, color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
            text="Box Plots", sticky="nesw", relief=tk.FLAT)
        rb_03b.configure(state="disabled")
        rb_03c.configure(state="disabled")
        #
        ## OPTION MENUS
        opt_04a = SE(
                parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 11, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.var_opt_iso_04, option_list=self.container_lists["ISOTOPES"],
            text_set=self.var_opt_iso_04.get(), fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=self.fi_change_sensitivity_drift_diagram)
        opt_04a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_04a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        opt_05a = SE(
                parent=self.subwindow_fi_graphical_sensitivity, row_id=start_row + 13, column_id=start_column, n_rows=1,
                n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.var_opt_iso_05, option_list=self.container_lists["ISOTOPES"],
            text_set=self.var_opt_iso_05.get(), fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=self.fi_change_normalized_sensitivity_scatter)
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## INITIALIZATION
        self.fi_show_sensitivity_drift_diagram()
        self.fi_show_normalized_sensitivity_scatter()
        #
    def fi_show_sensitivity_drift_diagram(self, mode=None):
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        #
        self.fig_sensitivity_03a = Figure(
            figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_sensitivity_03a = FigureCanvasTkAgg(
            self.fig_sensitivity_03a, master=self.subwindow_fi_graphical_sensitivity)
        self.canvas_sensitivity_03a.get_tk_widget().grid(row=0, column=11, rowspan=16, columnspan=34, sticky="nesw")
        self.ax_sensitivity_03a = self.fig_sensitivity_03a.add_subplot(label=np.random.uniform())
        #
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift"][
            "FIG"] = self.fig_sensitivity_03a
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift"][
            "CANVAS"] = self.canvas_sensitivity_03a
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift"][
            "AX"] = self.ax_sensitivity_03a
        #
        x_values = []
        y_values = []
        #
        for key, value in self.container_lists["Acquisition Times Delta"].items():
            var_file = key
            #
            if var_file in self.container_lists["STD"]["Short"]:
                var_filetype_2 = "STD"
            elif var_file in self.container_lists["SMPL"]["Short"]:
                var_filetype_2 = "SMPL"
            #
            var_index = self.container_lists[var_filetype_2]["Short"].index(var_file)
            var_file_long = self.container_lists[var_filetype_2]["Long"][var_index]
            #
            if self.container_var[var_filetype_2][var_file_long]["Checkbox"].get() == 1:
                if var_filetype == "STD" and var_file in self.container_lists[var_filetype]["Short"]:
                    x_value = value
                    y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][var_iso_01]
                    #
                    x_values.append(x_value)
                    y_values.append(y_value)
                    #
                    self.ax_sensitivity_03a.scatter(
                        x=x_value, y=y_value, color=self.bg_colors["Dark"], edgecolor="black", s=80, marker="o")
                    #
                elif var_filetype == "SMPL":
                    x_value = value
                    x_values.append(x_value)
                    #
                    try:
                        y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        dot_color = self.bg_colors["Dark"]
                        #
                        self.ax_sensitivity_03a.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80,
                                                        marker="o")
                        #
                    except:
                        y_value = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        dot_color = self.bg_colors["Light"]
                        #
                        self.ax_sensitivity_03a.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80,
                                                        marker="D")
                    #
                    y_value = self.container_lists["Analytical Sensitivity Regression"][var_iso_01]["a"]*x_value + \
                              self.container_lists["Analytical Sensitivity Regression"][var_iso_01]["b"]
                    y_values.append(y_value)
        #
        zipped_lists = zip(x_values, y_values)
        sorted_zipped_lists = sorted(zipped_lists)
        x_data = []
        y_data = []
        for element in sorted_zipped_lists:
            x_data.append(element[0])
            y_data.append(element[1])
        #
        self.ax_sensitivity_03a.plot(x_data, y_data, color=self.accent_color, linewidth=2, linestyle="dashed")
        #
        self.ax_sensitivity_03a.grid(True)
        self.ax_sensitivity_03a.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a.minorticks_on()
        self.ax_sensitivity_03a.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a.set_axisbelow(True)
        self.ax_sensitivity_03a.set_title("Analytical Sensitivity Drift", fontsize=9)
        self.ax_sensitivity_03a.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.set_ylabel(
            "Analytical Sensitivity $\\xi$ of "+str(var_iso_01)+" (1)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a.draw()
    #
    def fi_change_sensitivity_drift_diagram(self, mode=None):
        try:
            self.ax_sensitivity_03a.clear()
        except AttributeError:
            pass
        #
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        x_values = []
        y_values = []
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        #
        for key, value in self.container_lists["Acquisition Times Delta"].items():
            var_file = key
            #
            if var_file in self.container_lists["STD"]["Short"]:
                var_filetype_2 = "STD"
            elif var_file in self.container_lists["SMPL"]["Short"]:
                var_filetype_2 = "SMPL"
            #
            var_index = self.container_lists[var_filetype_2]["Short"].index(var_file)
            var_file_long = self.container_lists[var_filetype_2]["Long"][var_index]
            #
            if self.container_var[var_filetype_2][var_file_long]["Checkbox"].get() == 1:
                if var_filetype == "STD" and var_file in self.container_lists[var_filetype]["Short"]:
                    x_value_std = value
                    y_value_std = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                    #
                    self.ax_sensitivity_03a.scatter(
                        x=x_value_std, y=y_value_std, color=self.bg_colors["Dark"], edgecolor="black", s=80, marker="o")
                    #
                    x_value = value
                    y_value = self.container_lists["Analytical Sensitivity Regression"][var_iso_01]["a"]*x_value + \
                              self.container_lists["Analytical Sensitivity Regression"][var_iso_01]["b"]
                    x_values.append(x_value)
                    y_values.append(y_value)
                    #
                elif var_filetype == "SMPL":
                    x_value = value
                    #
                    try:
                        y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        dot_color = self.bg_colors["Dark"]
                        #
                        self.ax_sensitivity_03a.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80,
                                                        marker="o")
                        #
                    except:
                        y_value = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file]["MAT"][
                            var_iso_01]
                        dot_color = self.bg_colors["Light"]
                        #
                        self.ax_sensitivity_03a.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80,
                                                        marker="D")
                    #
                    y_value = self.container_lists["Analytical Sensitivity Regression"][var_iso_01]["a"]*x_value + \
                              self.container_lists["Analytical Sensitivity Regression"][var_iso_01]["b"]
                    #
                    x_values.append(x_value)
                    y_values.append(y_value)
        #
        zipped_lists = zip(x_values, y_values)
        sorted_zipped_lists = sorted(zipped_lists)
        x_data = []
        y_data = []
        for element in sorted_zipped_lists:
            x_data.append(element[0])
            y_data.append(element[1])
        #
        self.ax_sensitivity_03a.plot(x_data, y_data, color=self.accent_color, linewidth=2, linestyle="dashed")
        #
        self.ax_sensitivity_03a.grid(True)
        self.ax_sensitivity_03a.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a.minorticks_on()
        self.ax_sensitivity_03a.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a.set_axisbelow(True)
        self.ax_sensitivity_03a.set_title("Analytical Sensitivity Drift", fontsize=9)
        self.ax_sensitivity_03a.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.set_ylabel(
            "Analytical Sensitivity $\\xi$ of " + str(var_iso_01) + " (1)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a.draw()
        #
        self.fi_change_normalized_sensitivity_scatter()
    #
    def fi_show_normalized_sensitivity_scatter(self, mode=None):
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        try:
            var_iso_02 = self.var_opt_iso_05.get()
        except:
            var_iso_02 = self.var_opt_iso_05
        #
        self.fig_sensitivity_03a2 = Figure(
            figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_sensitivity_03a2 = FigureCanvasTkAgg(
            self.fig_sensitivity_03a2, master=self.subwindow_fi_graphical_sensitivity)
        self.canvas_sensitivity_03a2.get_tk_widget().grid(row=16, column=11, rowspan=16, columnspan=34, sticky="nesw")
        self.ax_sensitivity_03a2 = self.fig_sensitivity_03a2.add_subplot(label=np.random.uniform())
        #
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift Change"][
            "FIG"] = self.fig_sensitivity_03a2
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift Change"][
            "CANVAS"] = self.canvas_sensitivity_03a2
        self.container_var["fi_datareduction_isotopes"]["Sensitivity Plots"]["Sensitivity Drift Change"][
            "AX"] = self.ax_sensitivity_03a2
        #
        x_all = []
        y_all = []
        #
        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
            var_file_long = self.container_lists[var_filetype]["Long"][index]
            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                x_values_02 = [0]
                y_values_02 = [0]
                dot_color = self.bg_colors["Dark"]
                x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                    var_iso_01]
                y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                    var_iso_02]
                #
                x_values_02.append(x_value)
                y_values_02.append(y_value)
                x_all.append(x_value)
                y_all.append(y_value)
                #
                self.ax_sensitivity_03a2.scatter(
                    x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                self.ax_sensitivity_03a2.plot(
                    x_values_02, y_values_02, color=self.accent_color, linewidth=2, linestyle="--")
        #
        self.ax_sensitivity_03a2.grid(True)
        self.ax_sensitivity_03a2.set_xlim(left=0, right=1.1*max(x_all))
        self.ax_sensitivity_03a2.set_ylim(bottom=0, top=1.1*max(y_all))
        self.ax_sensitivity_03a2.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a2.minorticks_on()
        self.ax_sensitivity_03a2.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a2.set_axisbelow(True)
        self.ax_sensitivity_03a2.set_title("Analytical Sensitivity", fontsize=9)
        self.ax_sensitivity_03a2.set_xlabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_01) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.set_ylabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_02) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a2.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a2.draw()
    #
    def fi_change_normalized_sensitivity_scatter(self, mode=None):
        try:
            self.ax_sensitivity_03a2.clear()
        except AttributeError:
            pass
        #
        if self.var_rb_01.get() == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if self.var_rb_02.get() == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        x_all = []
        y_all = []
        #
        try:
            var_iso_01 = self.var_opt_iso_04.get()
        except:
            var_iso_01 = self.var_opt_iso_04
        try:
            var_iso_02 = self.var_opt_iso_05.get()
        except:
            var_iso_02 = self.var_opt_iso_05
        #
        for index, var_file in enumerate(self.container_lists[var_filetype]["Short"]):
            var_file_long = self.container_lists[var_filetype]["Long"][index]
            if self.container_var[var_filetype][var_file_long]["Checkbox"].get() == 1:
                x_values_02 = [0]
                y_values_02 = [0]
                dot_color = self.bg_colors["Dark"]
                x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                    var_iso_01]
                y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                    var_iso_02]
                #
                x_values_02.append(x_value)
                y_values_02.append(y_value)
                x_all.append(x_value)
                y_all.append(y_value)
                #
                self.ax_sensitivity_03a2.scatter(
                    x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                self.ax_sensitivity_03a2.plot(
                    x_values_02, y_values_02, color=self.accent_color, linewidth=2, linestyle="--")
        #
        self.ax_sensitivity_03a2.grid(True)
        self.ax_sensitivity_03a2.set_xlim(left=0, right=1.1*max(x_all))
        self.ax_sensitivity_03a2.set_ylim(bottom=0, top=1.1*max(y_all))
        self.ax_sensitivity_03a2.grid(which="major", linestyle="-", linewidth=1)
        self.ax_sensitivity_03a2.minorticks_on()
        self.ax_sensitivity_03a2.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_sensitivity_03a2.set_axisbelow(True)
        self.ax_sensitivity_03a2.set_title("Analytical Sensitivity", fontsize=9)
        self.ax_sensitivity_03a2.set_xlabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_01) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.set_ylabel(
            "Normalized Sensitivity $S$ of " + str(var_iso_02) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_sensitivity_03a2.xaxis.set_tick_params(labelsize=8)
        self.ax_sensitivity_03a2.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_sensitivity_03a2.draw()
    #
    def fi_show_diagrams_concentration(self):
        pass
    #
    def fi_datareduction_histograms(self, mode):
        if mode == "Isotopes":
            pass
            #
        elif mode == "Files":
            pass
    #
    def fi_datareduction_scatterplots(self, mode):
        if mode == "Isotopes":
            pass
            #
        elif mode == "Files":
            pass
    #
    def fi_datareduction_boxplots(self, mode):
        if mode == "Isotopes":
            pass
            #
        elif mode == "Files":
            pass
    #
    def fi_datareduction_files(self):   # FI - DATAREDUCTION FILES #####################################################
        ## Window Settings
        window_width = 1260
        window_heigth = 750
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_datareduction_files = tk.Toplevel(self.parent)
        self.subwindow_fi_datareduction_files.title("FLUID INCLUSION ANALYSIS - Data Reduction (Files)")
        self.subwindow_fi_datareduction_files.geometry(var_geometry)
        self.subwindow_fi_datareduction_files.resizable(False, False)
        self.subwindow_fi_datareduction_files["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_datareduction_files, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_datareduction_files, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_datareduction_files.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_datareduction_files.grid_columnconfigure(i, minsize=column_min)
        #
        ################################################################################################################
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Data Type Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 6, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Assemblage Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 8, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Focus Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 11, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Result Selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_06 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 21, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Export Results", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_07 = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 25, column_id=start_column,
            n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Display Options", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## RADIOBUTTONS
        self.rb_01a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["File Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Standard Files", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_01b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["File Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Sample Files", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        rb_02a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Data Type"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="RAW Data", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_02b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Data Type"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="SMOOTHED Data", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        rb_04a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 9, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Focus"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Matrix", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_04b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 10, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Focus"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Inclusion", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        self.rb_05a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 12, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=0,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 13, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=1,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Concentration Ratio",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05c = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 14, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=2,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Limit of Detection", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05d = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 15, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixing Ratio a",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05e = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 16, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=4,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixing Ratio x",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05f = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 17, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=5,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Mixed Concentration",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05g = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 18, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=6,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        self.rb_05h = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 19, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=7,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Intensity Mix", sticky="nesw",
            relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05f = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 20, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=8,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Analytical Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05g = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 21, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=9,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Normalized Sensitivity",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        rb_05h = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 22, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_datareduction_files"]["Result Category"], value_rb=10,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="Relative Sensitivity Factor",
            sticky="nesw", relief=tk.FLAT, command=self.fi_datareduction_tables)
        #
        ## OPTION MENUS
        if self.container_var["ID"]["Default SMPL"].get() != "Select ID":
            var_text = self.container_var["ID"]["Default SMPL"].get()
        else:
            var_text = "Select ID"
        #
        list_id_found = []
        for var_file_long in self.container_lists["SMPL"]["Long"]:
            var_id_i = self.container_var["SMPL"][var_file_long]["ID"].get()
            if var_id_i not in list_id_found:
                list_id_found.append(var_id_i)
        #
        opt_03a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 7, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Dark"]).create_option_isotope(
            var_iso=self.container_var["ID"]["Results Files"], option_list=list_id_found, text_set=var_text,
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["ID"]["Results Files"], mode="FI":
            self.change_id_results(var_opt, mode))
        opt_03a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_03a.config(
            bg=self.bg_colors["Dark"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## BUTTONS
        btn_06a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 23, column_id=start_column, n_rows=2,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Dark"]).create_simple_button(
            text="Export Results", bg_active=self.red_dark, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_export_calculation_report)
        #
        btn_07a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 26, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Concentration Diagrams", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_show_diagrams_concentration)
        btn_07a.configure(state="disabled")
        #
        btn_07b = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 27, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Intensity Diagrams", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_show_diagrams_intensity)
        btn_07b.configure(state="disabled")
        #
        self.var_rb_01 = tk.IntVar()
        self.var_rb_01.set(1)
        self.var_rb_02 = tk.IntVar()
        self.var_rb_02.set(0)
        self.var_rb_03 = tk.IntVar()
        self.var_rb_03.set(0)
        #
        btn_07c = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row + 28, column_id=start_column, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Medium"]).create_simple_button(
            text="Sensitivity Diagrams", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=self.fi_show_diagrams_sensitivity)
        #
        ## FRAMES
        frm_a = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=start_row, column_id=start_column + 11,
            n_rows=n_rows, n_columns=n_columns - 11, fg=self.bg_colors["Very Light"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        ## TREEVIEW
        list_categories = ["Files"]
        list_categories.extend(self.container_lists["ISOTOPES"])
        list_width = list(75*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 125
        #
        self.tv_results_files = SE(
            parent=self.subwindow_fi_datareduction_files, row_id=0, column_id=11, n_rows=16, n_columns=51,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(list_categories), text_n=list_categories,
            width_n=list_width, individual=True)
        #
        scb_v = ttk.Scrollbar(self.subwindow_fi_datareduction_files, orient="vertical")
        scb_h = ttk.Scrollbar(self.subwindow_fi_datareduction_files, orient="horizontal")
        self.tv_results_files.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_results_files.yview)
        scb_h.config(command=self.tv_results_files.xview)
        scb_v.grid(row=0, column=62, rowspan=16, columnspan=1, sticky="ns")
        scb_h.grid(row=16, column=11, rowspan=1, columnspan=51, sticky="ew")
        #
        ## INITIALIZATION
        self.fi_datareduction_tables(init=True)
    #
    def fi_datareduction_show_sensitivity_diagrams(self, var_mode="Isotopes", var_init=False):
        if var_mode == "Isotopes":
            var_text_07b = self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"].get()
            opt_07b = SE(
                parent=self.subwindow_fi_datareduction_isotopes, row_id=20, column_id=0, n_rows=1,
                n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_option_isotope(
                var_iso=self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"],
                option_list=self.container_lists["ISOTOPES"], text_set=var_text_07b,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt=self.container_var["fi_datareduction_isotopes"]["Isotope Left Plot"]:
                self.fi_change_sensitivity_drift_isotope(var_opt))
            opt_07b["menu"].config(
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_07b.config(
                bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            #
            var_text_07d = self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"].get()
            opt_07d = SE(
                parent=self.subwindow_fi_datareduction_isotopes, row_id=22, column_id=0, n_rows=1,
                n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_option_isotope(
                var_iso=self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"],
                option_list=self.container_lists["ISOTOPES"], text_set=var_text_07d,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt=self.container_var["fi_datareduction_isotopes"]["Isotope 1 Right Plot"],
                               var_mode="x": self.fi_change_sensitivity_isotope(var_opt, var_mode))
            opt_07d["menu"].config(
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_07d.config(
                bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            #
            var_text_07e = self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"].get()
            opt_07e = SE(
                parent=self.subwindow_fi_datareduction_isotopes, row_id=23, column_id=0, n_rows=1,
                n_columns=10, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_option_isotope(
                var_iso=self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"],
                option_list=self.container_lists["ISOTOPES"], text_set=var_text_07e,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt=self.container_var["fi_datareduction_isotopes"]["Isotope 2 Right Plot"],
                               var_mode="y": self.fi_change_sensitivity_isotope(var_opt, var_mode))
            opt_07e["menu"].config(
                fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"],
                activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            opt_07e.config(
                bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            #
            filetype_key = self.container_var["fi_datareduction_isotopes"]["File Type"].get()
            datatype_key = self.container_var["fi_datareduction_isotopes"]["Data Type"].get()
            #
            if filetype_key == 0:
                var_filetype = "STD"
            else:
                var_filetype = "SMPL"
            #
            if datatype_key == 0:
                var_datatype = "RAW"
            else:
                var_datatype = "SMOOTHED"
            #
            if var_init == True:
                self.fig_drift_01 = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
                self.canvas_drift_01 = FigureCanvasTkAgg(
                    self.fig_drift_01, master=self.subwindow_fi_datareduction_isotopes)
                self.canvas_drift_01.get_tk_widget().grid(row=12, column=11, rowspan=13, columnspan=25, sticky="nesw")
                self.ax_drift_01 = self.fig_drift_01.add_subplot(label=np.random.uniform())
                #
                self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"]["Left"][
                    "FIG"] = self.fig_drift_01
                self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"]["Left"][
                    "CANVAS"] = self.canvas_drift_01
                self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"]["Left"][
                    "AX"] = self.ax_drift_01
            #
            var_isotope = self.container_lists["ISOTOPES"][0]
            x_values = []
            y_values = []
            #
            for key, value in self.container_lists["Acquisition Times Delta"].items():
                var_file = key
                #
                if var_filetype == "STD" and var_file in self.container_lists[var_filetype]["Short"]:
                    x_value = value
                    y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][var_isotope]
                    #
                    x_values.append(x_value)
                    y_values.append(y_value)
                    #
                    self.ax_drift_01.scatter(
                        x=x_value, y=y_value, color=self.bg_colors["Dark"], edgecolor="black", s=80, marker="o")
                    #
                elif var_filetype == "SMPL":
                    x_value = value
                    x_values.append(x_value)
                    #
                    try:
                        y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][var_isotope]
                        dot_color = self.bg_colors["Dark"]
                        #
                        self.ax_drift_01.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                        #
                    except:
                        y_value = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file]["MAT"][var_isotope]
                        dot_color = self.bg_colors["Light"]
                        #
                        self.ax_drift_01.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="D")
                    #
                    y_value = self.container_lists["Analytical Sensitivity Regression"][var_isotope]["a"]*x_value \
                              + self.container_lists["Analytical Sensitivity Regression"][var_isotope]["b"]
                    y_values.append(y_value)
            #
            self.ax_drift_01.plot(x_values, y_values, color=self.accent_color, linewidth=2, linestyle="--")
            #
            self.ax_drift_01.grid(True)
            self.ax_drift_01.grid(which="major", linestyle="-", linewidth=1)
            self.ax_drift_01.minorticks_on()
            self.ax_drift_01.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            self.ax_drift_01.set_axisbelow(True)
            self.ax_drift_01.set_title("Analytical Sensitivity Drift", fontsize=9)
            self.ax_drift_01.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
            self.ax_drift_01.set_ylabel(
                "Analytical Sensitivity $\\xi$ of "+str(var_isotope)+" (1)", labelpad=0.5, fontsize=8)
            self.ax_drift_01.xaxis.set_tick_params(labelsize=8)
            self.ax_drift_01.yaxis.set_tick_params(labelsize=8)
            #
            self.canvas_drift_01.draw()
            #
            if var_init == True:
                self.fig_drift_02 = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
                self.canvas_drift_02 = FigureCanvasTkAgg(
                    self.fig_drift_02, master=self.subwindow_fi_datareduction_isotopes)
                self.canvas_drift_02.get_tk_widget().grid(row=12, column=37, rowspan=13, columnspan=25, sticky="nesw")
                self.ax_drift_02 = self.fig_drift_02.add_subplot(label=np.random.uniform())
                #
                self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"]["Right"][
                    "FIG"] = self.fig_drift_02
                self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"]["Right"][
                    "CANVAS"] = self.canvas_drift_02
                self.container_var["fi_datareduction_isotopes"]["Sensitivity Diagrams"]["Right"][
                    "AX"] = self.ax_drift_02
            #
            var_isotope_01 = self.container_lists["ISOTOPES"][0]
            var_isotope_02 = self.container_lists["ISOTOPES"][1]
            self.var_isotope_01_last = var_isotope_01
            self.var_isotope_02_last = var_isotope_02
            x_all = []
            y_all = []
            #
            for var_file in self.container_lists[var_filetype]["Short"]:
                x_values_02 = [0]
                y_values_02 = [0]
                dot_color = self.bg_colors["Dark"]
                x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                    var_isotope_01]
                y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                    var_isotope_02]
                #
                x_values_02.append(x_value)
                y_values_02.append(y_value)
                x_all.append(x_value)
                y_all.append(y_value)
                #
                self.ax_drift_02.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                self.ax_drift_02.plot(x_values_02, y_values_02, color=self.accent_color, linewidth=2, linestyle="--")
            #
            self.ax_drift_02.grid(True)
            self.ax_drift_02.set_xlim(left=0, right=1.1*max(x_all))
            self.ax_drift_02.set_ylim(bottom=0, top=1.1*max(y_all))
            self.ax_drift_02.grid(which="major", linestyle="-", linewidth=1)
            self.ax_drift_02.minorticks_on()
            self.ax_drift_02.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
            self.ax_drift_02.set_axisbelow(True)
            self.ax_drift_02.set_title("Analytical Sensitivity", fontsize=9)
            self.ax_drift_02.set_xlabel(
                "Normalized Sensitivity $S$ of "+str(var_isotope_01)+" (cps/ppm)", labelpad=0.5, fontsize=8)
            self.ax_drift_02.set_ylabel(
                "Normalized Sensitivity $S$ of "+str(var_isotope_02)+" (cps/ppm)", labelpad=0.5, fontsize=8)
            self.ax_drift_02.xaxis.set_tick_params(labelsize=8)
            self.ax_drift_02.yaxis.set_tick_params(labelsize=8)
            #
            self.canvas_drift_02.draw()
            #
        else:
            pass
    #
    def fi_change_sensitivity_drift_isotope(self, var_opt):
        try:
            self.ax_drift_01.clear()
        except AttributeError:
            pass
        #
        filetype_key = self.container_var["fi_datareduction_isotopes"]["File Type"].get()
        datatype_key = self.container_var["fi_datareduction_isotopes"]["Data Type"].get()
        #
        if filetype_key == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if datatype_key == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        var_isotope = var_opt
        x_values = []
        y_values = []
        #
        for key, value in self.container_lists["Acquisition Times Delta"].items():
            var_file = key
            #
            if var_filetype == "STD" and var_file in self.container_lists[var_filetype]["Short"]:
                x_value = value
                y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][var_isotope]
                #
                x_values.append(x_value)
                y_values.append(y_value)
                #
                self.ax_drift_01.scatter(
                    x=x_value, y=y_value, color=self.bg_colors["Dark"], edgecolor="black", s=80, marker="o")
                #
            elif var_filetype == "SMPL":
                x_value = value
                x_values.append(x_value)
                #
                try:
                    y_value = self.container_analytical_sensitivity["STD"][var_datatype][var_file]["MAT"][
                        var_isotope]
                    dot_color = self.bg_colors["Dark"]
                    #
                    self.ax_drift_01.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
                    #
                except:
                    y_value = self.container_analytical_sensitivity["SMPL"][var_datatype][var_file]["MAT"][
                        var_isotope]
                    dot_color = self.bg_colors["Light"]
                    #
                    self.ax_drift_01.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="D")
                #
                y_value = self.container_lists["Analytical Sensitivity Regression"][var_isotope]["a"]*x_value \
                              + self.container_lists["Analytical Sensitivity Regression"][var_isotope]["b"]
                y_values.append(y_value)
        #
        self.ax_drift_01.plot(x_values, y_values, color=self.accent_color, linewidth=2, linestyle="--")
        #
        self.ax_drift_01.grid(True)
        self.ax_drift_01.grid(which="major", linestyle="-", linewidth=1)
        self.ax_drift_01.minorticks_on()
        self.ax_drift_01.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_drift_01.set_axisbelow(True)
        self.ax_drift_01.set_title("Analytical Sensitivity Drift", fontsize=9)
        self.ax_drift_01.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_drift_01.set_ylabel(
            "Analytical Sensitivity $\\xi$ of " + str(var_isotope) + " (1)", labelpad=0.5, fontsize=8)
        self.ax_drift_01.xaxis.set_tick_params(labelsize=8)
        self.ax_drift_01.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_drift_01.draw()
    #
    def fi_change_sensitivity_isotope(self, var_opt, var_mode="x"):
        try:
            self.ax_drift_02.clear()
        except AttributeError:
            pass
        #
        filetype_key = self.container_var["fi_datareduction_isotopes"]["File Type"].get()
        datatype_key = self.container_var["fi_datareduction_isotopes"]["Data Type"].get()
        #
        if filetype_key == 0:
            var_filetype = "STD"
        else:
            var_filetype = "SMPL"
        #
        if datatype_key == 0:
            var_datatype = "RAW"
        else:
            var_datatype = "SMOOTHED"
        #
        if var_mode == "x":
            self.var_isotope_01_last = var_opt
        else:
            self.var_isotope_02_last = var_opt
        #
        x_all = []
        y_all = []
        #
        for var_file in self.container_lists[var_filetype]["Short"]:
            x_values_02 = [0]
            y_values_02 = [0]
            dot_color = self.bg_colors["Dark"]
            x_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                self.var_isotope_01_last]
            y_value = self.container_normalized_sensitivity[var_filetype][var_datatype][var_file]["MAT"][
                self.var_isotope_02_last]
            #
            x_values_02.append(x_value)
            y_values_02.append(y_value)
            x_all.append(x_value)
            y_all.append(y_value)
            #
            self.ax_drift_02.scatter(x=x_value, y=y_value, color=dot_color, edgecolor="black", s=80, marker="o")
            self.ax_drift_02.plot(x_values_02, y_values_02, color=self.accent_color, linewidth=2, linestyle="--")
        #
        self.ax_drift_02.grid(True)
        self.ax_drift_02.set_xlim(left=0, right=1.1*max(x_all))
        self.ax_drift_02.set_ylim(bottom=0, top=1.1*max(y_all))
        self.ax_drift_02.grid(which="major", linestyle="-", linewidth=1)
        self.ax_drift_02.minorticks_on()
        self.ax_drift_02.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_drift_02.set_axisbelow(True)
        self.ax_drift_02.set_title("Analytical Sensitivity", fontsize=9)
        self.ax_drift_02.set_xlabel(
            "Normalized Sensitivity $S$ of " + str(self.var_isotope_01_last) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_drift_02.set_ylabel(
            "Normalized Sensitivity $S$ of " + str(self.var_isotope_02_last) + " (cps/ppm)", labelpad=0.5, fontsize=8)
        self.ax_drift_02.xaxis.set_tick_params(labelsize=8)
        self.ax_drift_02.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_drift_02.draw()
    #
    def fi_datareduction_show_intensity_diagrams(self, var_mode="Isotopes"):
        if var_mode == "Isotopes":
            pass
            #
        else:
            pass
    #
    def fi_datareduction_show_concentration_diagrams(self, var_mode="Isotopes" ):
        if var_mode == "Isotopes":
            pass
            #
        else:
            pass
    #
    def fi_select_srm_initialization(self):
        for isotope in self.container_lists["ISOTOPES"]:
            var_srm_i = self.container_var["SRM"][isotope].get()
            #
            if var_srm_i not in self.srm_actual:
                self.srm_actual[var_srm_i] = {}
                ESRM().place_srm_values(srm_name=var_srm_i, srm_dict=self.srm_actual)
            #
            self.fill_srm_values(var_srm=var_srm_i)
    #
    def fi_select_srm_default(self, var_opt, mode="STD"):
        if mode == "STD":
            for file_std in self.list_std:
                parts = file_std.split("/")
                #
                self.container_var["SRM"][file_std].set(var_opt)
                self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            for isotope in self.container_lists["ISOTOPES"]:
                self.container_var["SRM"][isotope].set(var_opt)
                self.container_files["SRM"][isotope].set(var_opt)
        #
        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
        #
        self.fill_srm_values(var_srm=var_opt)
    #
    def fi_change_srm_individual(self, var_opt, var_indiv, mode="STD"):
        if mode == "STD":
            parts = var_indiv.split("/")
            #
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["STD"][parts[-1]]["SRM"].set(var_opt)
        elif mode == "ISOTOPES":
            self.container_var["SRM"][var_indiv].set(var_opt)
            self.container_files["SRM"][var_indiv].set(var_opt)
        #
        if var_opt not in self.srm_actual:
            self.srm_actual[var_opt] = {}
            ESRM().place_srm_values(srm_name=var_opt, srm_dict=self.srm_actual)
        #
        self.fill_srm_values(var_srm=var_opt)

    def ma_select_is_default(self, var_opt, mode="STD"):
        if mode == "STD":
            var_is = var_opt
            if var_is != "Select IS":
                var_srm_is = self.container_var["SRM"][var_is].get()
                key_element = re.search("(\D+)(\d+)", var_is)
                element = key_element.group(1)
                var_concentration_is = self.srm_actual[var_srm_is][element]
            for file_std in self.container_lists["STD"]["Long"]:
                self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)
                if var_is != "Select IS":
                    self.container_var["STD"][file_std]["IS Data"]["Concentration"].set(var_concentration_is)
        elif mode == "SMPL":
            var_is = var_opt
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is)

    def fi_select_is_default(self, var_opt, mode="STD"):
        if mode == "STD":
            var_is = var_opt
            for file_std in self.list_std:
                self.container_var["STD"][file_std]["IS Data"]["IS"].set(var_is)
    #
    def fi_select_id_default(self, var_opt):
        var_id = var_opt
        for file_smpl in self.list_smpl:
            self.container_var["SMPL"][file_smpl]["ID"].set(var_id)
    #
    ## GENERAL CALCULATIONS ############################################################################################
    #
    def calculate_regression(self, data, isotope, file_data):
        x_data = []
        y_data = []
        for file in file_data:
            if file in data:
                if isotope in data[file]:
                    x_data.append(data[file][isotope][0])
                    y_data.append(data[file][isotope][1])
        #
        A = np.vstack([x_data, np.ones(len(x_data))]).T
        m, c = np.linalg.lstsq(A, y_data, rcond=None)[0]  # m*x + c
        results = [m, c]
        #
        return results
    #
    def fi_setup_matrix_only_tracer(self):
        ## Window Settings
        window_width = 520
        window_heigth = 375
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_setup_matrixonlytracer = tk.Toplevel(self.parent)
        self.subwindow_fi_setup_matrixonlytracer.title("FI - Quantification Setup")
        self.subwindow_fi_setup_matrixonlytracer.geometry(var_geometry)
        self.subwindow_fi_setup_matrixonlytracer.resizable(False, False)
        self.subwindow_fi_setup_matrixonlytracer["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_setup_matrixonlytracer, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_setup_matrixonlytracer, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_setup_matrixonlytracer.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_setup_matrixonlytracer.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=25, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Settings - Matrix-Only Tracer", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 1, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix Amount", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 2, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01c = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 3, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Matrix-Only Tracer", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01d = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 4, column_id=start_column, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Concentration (ppm)", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 5, column_id=start_column, n_rows=1,
            n_columns=25, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## ENTRIES
        entr_01a = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 1, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Matrix Amount Default"],
            text_default=self.container_var["fi_setting"]["Matrix Amount Default"].get(),
            command=lambda var_entr=self.container_var["fi_setting"]["Matrix Amount Default"]:
            self.fi_change_default_matrix_amount(var_entr))
        entr_01d = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 4, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Matrix-Only Concentration Default"],
            text_default=self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get(),
            command=lambda var_entr=self.container_var["fi_setting"]["Matrix-Only Concentration Default"]:
            self.fi_change_default_matrixonly_is_concentration(var_entr))
        #
        ## OPTION MENUES
        var_text_01b = self.container_var["fi_setting"]["Oxide"].get()
        opt_01b = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 2, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Oxide"], option_list=self.container_lists["Oxides"],
            text_set=var_text_01b, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Oxide"], var_file=None, state_default=True,
                           matrix_only=True:
            self.fi_change_matrix_compound(var_opt, var_file, state_default, matrix_only))
        opt_01b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_01b.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        var_text_01c = self.container_var["fi_setting"]["Host Only"].get()
        self.opt_01c = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 3, column_id=start_column + 13,
            n_rows=1, n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Host Only"], option_list=self.container_lists["ISOTOPES"],
            text_set=var_text_01c, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Host Only"], var_file=None, state_default=True:
            self.change_matrix_only_tracer(var_opt, var_file, state_default))
        self.opt_01c["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        self.opt_01c.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## TREEVIEWS
        frm_smpl = SE(
            parent=self.subwindow_fi_setup_matrixonlytracer, row_id=start_row + 6, column_id=start_column,
            n_rows=n_rows - 7, n_columns=25, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=25, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            entr_1_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Amount"],
                width=5)
            entr_1_i.bind(
                "<Return>", lambda event, var_file=file_smpl_long: self.change_specific_matrix_amount(var_file, event))
            text_smpl.window_create("insert", window=entr_1_i)
            text_smpl.insert("end", "\t")
            #
            opt_1_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Matrix"],
                *np.sort(self.container_lists["Oxides"]))
            opt_1_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_1_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_1_i)
            text_smpl.insert("end", "\t")
            #
            opt_2_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Name"],
                *np.sort(self.container_lists["ISOTOPES"]))
            opt_2_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_2_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_2_i)
            text_smpl.insert("end", "\t")
            #
            entr_2_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Host Only Tracer"]["Value"],
                width=15)
            text_smpl.window_create("insert", window=entr_2_i)
            text_smpl.insert("end", "\n")
    #
    def fi_setup_second_internal_standard(self):
        ## Window Settings
        window_width = 420
        window_heigth = 375
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_setup_secondinternalstandard = tk.Toplevel(self.parent)
        self.subwindow_fi_setup_secondinternalstandard.title(
            "FI - Quantification Setup")
        self.subwindow_fi_setup_secondinternalstandard.geometry(var_geometry)
        self.subwindow_fi_setup_secondinternalstandard.resizable(False, False)
        self.subwindow_fi_setup_secondinternalstandard["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_setup_secondinternalstandard, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_setup_secondinternalstandard, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_setup_secondinternalstandard.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_setup_secondinternalstandard.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=20, fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Default Settings - Second Internal Standard", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01a = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 1, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Second Internal Standard", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 2, column_id=start_column,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Concentration (ppm)", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 3, column_id=start_column,
            n_rows=1, n_columns=20, fg=self.colors_fi["Light Font"],
            bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## OPTION MENUES
        var_text = self.container_var["fi_setting"]["2nd Internal"].get()
        opt_01a = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 1, column_id=start_column + 10,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["2nd Internal"], option_list=self.container_lists["ISOTOPES"],
            text_set=var_text, fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["2nd Internal"]:
            self.fi_change_default_2nd_is(var_opt))
        opt_01a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_01a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
            activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
        #
        ## ENTRIES
        entr_01b = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 2, column_id=start_column + 10,
            n_rows=1, n_columns=10, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["2nd Internal Concentration Default"],
            text_default=self.container_var["fi_setting"]["2nd Internal Concentration Default"].get(),
            command=lambda var_entr=self.container_var["fi_setting"]["2nd Internal Concentration Default"]:
            self.fi_change_default_2nd_is_concentration(var_entr))
        #
        ## TREEVIEWS
        frm_smpl = SE(
            parent=self.subwindow_fi_setup_secondinternalstandard, row_id=start_row + 4, column_id=start_column,
            n_rows=10, n_columns=20, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl_long = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            opt_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl_long]["Second Internal Standard"]["Name"],
                *np.sort(self.container_lists["ISOTOPES"]))
            opt_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)
            text_smpl.window_create("end", window=opt_i)
            text_smpl.insert("end", "\t")
            #
            entr_i = tk.Entry(
                frm_smpl, textvariable=self.container_var["SMPL"][file_smpl_long]["Second Internal Standard"]["Value"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
    #
    def fi_change_default_2nd_is(self, var_opt):
        var_opt_default = self.container_var["fi_setting"]["2nd Internal"].get()
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Name"].set(var_opt_default)
    #
    def fi_change_default_2nd_is_concentration(self, var_entr):
        var_entr_default = self.container_var["fi_setting"]["2nd Internal Concentration Default"].get()
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Second Internal Standard"]["Value"].set(var_entr_default)
    #
    def fi_change_default_matrixonly_is_concentration(self, var_entr):
        var_entr_default = float(self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get())
        var_entr_default_amount = (float(self.container_var["fi_setting"]["Matrix Amount Default"].get()))/100
        #
        if var_entr_default > 1000000:
            var_entr_default = 1000000
            self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set(1000000)
        elif var_entr_default < 0:
            var_entr_default = 0
            self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set(0)
        #
        if var_entr_default_amount > 1.0:
            var_entr_default_amount = 1.0
            self.container_var["fi_setting"]["Matrix Amount Default"].set(100)
        #
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set(
                var_entr_default_amount*var_entr_default)
    #
    def fi_change_default_matrix_amount(self, var_entr):
        var_entr_default = round(float(self.container_var["fi_setting"]["Matrix Amount Default"].get())/100, 1)
        #
        if var_entr_default > 1.0:
            var_entr_default = 1.0
            self.container_var["fi_setting"]["Matrix Amount Default"].set(100)
        elif var_entr_default < 0.0:
            var_entr_default = 0.0
            self.container_var["fi_setting"]["Matrix Amount Default"].set(0)
        #
        var_entr_conc_default = float(self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get())
        for file_smpl in self.container_lists["SMPL"]["Long"]:
            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Amount"].set(round(var_entr_default*100, 1))
            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set(
                var_entr_default*var_entr_conc_default)
    #
    ## FILE-SPECIFIC ANALYSIS ##########################################################################################
    #
    def fi_check_specific_file(self, var_file, var_type="STD", checkup_mode=False):
        if checkup_mode == True:
            if var_type == "STD":
                var_file = self.fi_current_file_std
            elif var_type == "SMPL":
                var_file = self.fi_current_file_smpl
        #
        ## INPUT
        parts = var_file.split("/")
        var_file_short = parts[-1]
        self.helper_intervals = {"BG": [], "MAT": [], "INCL": []}
        #
        ## Window Settings
        window_width = 1060
        window_heigth = 750
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        self.subwindow_fi_checkfile = tk.Toplevel(self.parent)
        self.subwindow_fi_checkfile.title("FLUID INCLUSION ANALYSIS - File Analysis of " + str(var_file_short))
        self.subwindow_fi_checkfile.geometry(var_geometry)
        self.subwindow_fi_checkfile.resizable(False, False)
        self.subwindow_fi_checkfile["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_fi_checkfile, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_fi_checkfile, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            self.subwindow_fi_checkfile.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_fi_checkfile.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## FRAMES
        frm_00 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row, column_id=start_column + 14, n_rows=n_rows - 8,
            n_columns=n_columns - 11, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(
            relief=tk.SOLID)
        #
        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Measured Isotopes", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 15, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Display Options", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 18, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Anaylsis Mode", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 22, column_id=start_column, n_rows=1, n_columns=14,
            fg=self.colors_fi["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Interval Setup", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="Start", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_label(
            text="End", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## BUTTONS
        btn_02a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 16, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Show All", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_type=var_type, var_file_short=var_file_short: self.fi_show_all_lines(
                var_type, var_file_short,))
        btn_02b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 17, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Hide All", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_type=var_type, var_file_short=var_file_short: self.fi_hide_all_lines(
                var_type, var_file_short))
        btn_04a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 25, column_id=0, n_rows=2, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Remove Interval", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"],
            command=lambda var_type=var_type, var_file_short=var_file_short: self.fi_remove_interval(var_type, var_file_short))
        btn_08 = SE(
            parent=self.subwindow_fi_checkfile, row_id=n_rows - 2, column_id=0, n_rows=2, n_columns=14,
            fg=self.colors_fi["Dark Font"], bg=self.colors_fi["Medium"]).create_simple_button(
            text="Confirm and Update \nData", bg_active=self.colors_fi["Dark"], fg_active=self.colors_fi["Light Font"])
        #
        ## RADIOBUTTONS
        rb_02a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 16, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="RAW", sticky="nesw",
            relief=tk.GROOVE)
        rb_02b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 17, column_id=0, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="SMOOTHED", sticky="nesw",
            relief=tk.GROOVE)
        #
        rb_03a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 19, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short], value_rb=0,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Signal Plot", sticky="nesw",
            relief=tk.GROOVE, command=lambda var_type=var_type, var_file=var_file, var_lb_state=False:
            self.fi_show_time_signal_diagram(var_type, var_file, var_lb_state))
        rb_03b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 20, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short], value_rb=1,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Time-Ratio Plot", sticky="nesw",
            relief=tk.GROOVE, command=lambda var_type=var_type, var_file=var_file:
            self.fi_show_time_ratio_diagram(var_type, var_file))
        rb_03c = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 21, column_id=0, n_rows=1, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short], value_rb=2,
            color_bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], text="Quick Analysis", sticky="nesw",
            relief=tk.GROOVE, command=lambda var_type=var_type, var_file=var_file:
            self.fi_show_quick_results(var_type, var_file))
        #
        rb_05 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 14, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["BG"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=0,
            color_bg=self.colors_intervals["BG"], fg=self.bg_colors["Light Font"], text="Background Interval",
            sticky="nesw", relief=tk.GROOVE)
        rb_06 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 27, n_rows=1,
            n_columns=13, fg=self.bg_colors["Light Font"], bg=self.colors_intervals["MAT"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=1,
            color_bg=self.colors_intervals["MAT"], fg=self.bg_colors["Light Font"], text="Matrix Interval", sticky="nesw",
            relief=tk.GROOVE)
        rb_07  = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 40, n_rows=1,
            n_columns=13, fg=self.bg_colors["Dark Font"], bg=self.colors_intervals["INCL"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=2,
            color_bg=self.colors_intervals["INCL"], fg=self.bg_colors["Dark Font"], text="Inclusion Interval",
            sticky="nesw", relief=tk.GROOVE)
        rb_08 = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 22, column_id=start_column + 14, n_rows=1,
            n_columns=39, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_radiobutton(
            var_rb=self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short], value_rb=3,
            color_bg=self.bg_colors["Dark"], fg=self.bg_colors["Light Font"], text="No Selection",
            sticky="nesw", relief=tk.GROOVE)
        #
        ## CHECKBOXES
        if "BG" not in self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]:
            self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short] = {
                "BG": tk.IntVar(), "MAT": tk.IntVar(), "INCL": tk.IntVar()}
            self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["BG"].set(1)
            self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["MAT"].set(1)
            self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["INCL"].set(1)
        #
        cb_bg = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 25,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2, bg=self.colors_intervals["BG"]).create_simple_checkbox(
            var_cb=self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["BG"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="BG", var_type=var_type, var_file_short=var_file_short:
            self.fi_change_interval_visibility(var_key, var_type, var_file_short))
        cb_mat = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 38,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2, bg=self.colors_intervals["MAT"]).create_simple_checkbox(
            var_cb=self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["MAT"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="MAT", var_type=var_type, var_file_short=var_file_short:
            self.fi_change_interval_visibility(var_key, var_type, var_file_short))
        cb_incl = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=start_column + 51,
            fg=self.colors_fi["Dark Font"], n_rows=1, n_columns=2,
            bg=self.colors_intervals["INCL"]).create_simple_checkbox(
            var_cb=self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short]["INCL"],
            text="", set_sticky="", own_color=True,
            command=lambda var_key="INCL", var_type=var_type, var_file_short=var_file_short:
            self.fi_change_interval_visibility(var_key, var_type, var_file_short))
        #
        if var_type == "STD":
            rb_07.configure(state=tk.DISABLED)
            cb_incl.deselect()
            cb_incl.configure(state=tk.DISABLED)
        #
        ## ENTRIES
        var_entr_start = tk.StringVar()
        var_entr_start.set("Set start value")
        var_entr_end = tk.StringVar()
        var_entr_end.set("Set end value")
        self.helper_time_entries = {"Start": var_entr_start, "End": var_entr_end}
        #
        entr_04a = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 23, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=var_entr_start, text_default=var_entr_start.get(),
            command=lambda event, var_entr=var_entr_start, var_key="Start", mode=var_file:
            self.fi_set_bg_interval(var_entr, var_key, mode, event))
        entr_04b = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=7, n_rows=1, n_columns=7,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_simple_entry(
            var=var_entr_end, text_default=var_entr_end.get(),
            command=lambda event, var_entr=var_entr_end, var_key="End", mode=var_file:
            self.fi_set_bg_interval(var_entr, var_key, mode, event))
        #
        ## MEASURED ISOTOPES
        frm_iso = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 1, column_id=start_column, n_rows=14, n_columns=14,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_iso = tk.Scrollbar(master=frm_iso, orient="vertical")
        text_iso = tk.Text(
            master=frm_iso, width=30, height=25, yscrollcommand=vsb_iso.set, bg=self.bg_colors["Very Light"])
        vsb_iso.config(command=text_iso.yview)
        vsb_iso.pack(side="right", fill="y")
        text_iso.pack(side="left", fill="both", expand=True)
        #
        for index, isotope in enumerate(self.container_lists["ISOTOPES"]):
            frm_i = tk.Frame(frm_iso, bg=self.isotope_colors[isotope], relief=tk.SOLID, height=15, width=15,
                             highlightbackground="black", bd=1)
            text_iso.window_create("end", window=frm_i)
            text_iso.insert("end", "")
            #
            lbl_i = tk.Label(frm_iso, text=isotope, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"])
            text_iso.window_create("end", window=lbl_i)
            text_iso.insert("end", "\t")
            #
            cb_raw_i = tk.Checkbutton(
                frm_iso, variable=self.container_var["fi_setting"]["Display RAW"][var_type][var_file_short][isotope],
                text="RAW", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"], fg=self.bg_colors["Dark Font"],
                command=lambda var_type=var_type, var_file_short=var_file_short, var_datatype="RAW",
                               var_isotope=isotope: self.fi_change_line_visibility(var_type, var_file_short,
                                                                                   var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_raw_i)
            text_iso.insert("end", "\t")
            #
            cb_smoothed_i = tk.Checkbutton(
                frm_iso, variable=self.container_var["fi_setting"]["Display SMOOTHED"][var_type][var_file_short][
                    isotope], text="SMOOTHED", onvalue=1, offvalue=0, bg=self.bg_colors["Very Light"],
                fg=self.bg_colors["Dark Font"],
                command=lambda var_type=var_type, var_file_short=var_file_short, var_datatype="SMOOTHED",
                               var_isotope=isotope: self.fi_change_line_visibility(var_type, var_file_short,
                                                                                   var_datatype, var_isotope))
            text_iso.window_create("end", window=cb_smoothed_i)
            text_iso.insert("end", "\n")
        #
        ## BACKGROUND INTERVAL
        lb_bg, scrollbar_bg_y = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column + 14, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"], bg=self.colors_intervals["BG LB"]).create_simple_listbox_grid(
            include_scrb_x=False)
        self.container_helper[var_type][var_file_short]["BG"]["Listbox"] = lb_bg
        #
        ## MATRIX INTERVAL
        lb_mat, scrollbar_mat_y = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column + 27, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["MAT LB"]).create_simple_listbox_grid(include_scrb_x=False)
        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"] = lb_mat
        #
        ## INCLUSION INTERVAL
        lb_incl, scrollbar_incl_y = SE(
            parent=self.subwindow_fi_checkfile, row_id=start_row + 24, column_id=start_column + 40, n_rows=6,
            n_columns=13, fg=self.colors_fi["Dark Font"],
            bg=self.colors_intervals["INCL LB"]).create_simple_listbox_grid(include_scrb_x=False)
        self.container_helper[var_type][var_file_short]["INCL"]["Listbox"] = lb_incl
        #
        ## INITIALIZATION
        #
        self.fi_show_time_signal_diagram(var_type=var_type, var_file=var_file)
        #
    def fi_show_time_signal_diagram(self, var_type, var_file, var_lb_state=True):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas_ratio = self.container_helper[var_type][var_file_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass
        #
        try:
            resultsframe = self.container_helper[var_type][var_file_short]["RESULTS FRAME"]
            #
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass
        #
        self.fig_specific = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.canvas_specific = FigureCanvasTkAgg(self.fig_specific, master=self.subwindow_fi_checkfile)
        self.canvas_specific.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame = tk.Frame(master=self.subwindow_fi_checkfile)
        self.toolbarFrame.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific = NavigationToolbar2Tk(self.canvas_specific, self.toolbarFrame)
        self.toolbar_specific.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific._message_label.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific.winfo_children()[-2].config(background=self.bg_colors["Very Light"])
        #
        self.container_helper[var_type][var_file_short]["FIGURE"] = self.fig_specific
        self.container_helper[var_type][var_file_short]["CANVAS"] = self.canvas_specific
        self.container_helper[var_type][var_file_short]["TOOLBARFRAME"] = self.toolbarFrame
        #
        df_data = self.load_and_assign_data(filename=var_file)
        self.dataset_time = list(df_data.iloc[:, 0])
        x_max = max(self.dataset_time)
        icp_measurements = np.array([[df_data[isotope] for isotope in self.container_lists["ISOTOPES"]]])
        y_max = np.amax(icp_measurements)
        #
        ## DIAGRAMS
        ax = self.fig_specific.add_subplot(label=np.random.uniform())
        self.container_helper[var_type][var_file_short]["AXES"] = {"Time-Signal": ax}
        #
        for isotope in self.container_lists["ISOTOPES"]:
            ln_raw = ax.plot(self.dataset_time, df_data[isotope], label=isotope, color=self.isotope_colors[isotope],
                             linewidth=1, visible=True)
            self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope]["RAW"] = ln_raw
            #
            if "Uncut" in self.container_measurements["EDITED"][var_file_short][isotope]:
                ln_smoothed = ax.plot(
                    self.dataset_time, self.container_measurements["EDITED"][var_file_short][isotope]["Uncut"],
                    label=isotope, color=self.isotope_colors[isotope], linewidth=1, visible=True)
                self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                    "SMOOTHED"] = ln_smoothed
                self.container_var["fi_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(1)
                #
        #
        if self.pysills_mode in ["FI", "MI"]:
            var_check_bg = self.container_helper[var_type][var_file_short]["BG"]["Content"]
        else:
            var_check_bg = self.container_helper[var_type][var_file_short]["BG"]
        #
        if len(var_check_bg) > 0:
            if self.pysills_mode in ["FI", "MI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short]["BG"]["Content"].items():
                    times_bg = var_content["Times"]
                    #
                    box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                    var_content["Object"] = box_bg
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["BG"]["Listbox"].insert(
                            tk.END, "BG" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            else:
                times_bg = self.container_helper[var_type][var_file_short]["BG"][1]["Times"]
                #
                box_bg = ax.axvspan(times_bg[0], times_bg[1], alpha=0.35, color=self.colors_intervals["BG"])
                self.container_helper[var_type][var_file_short]["BG"][1]["Object"] = box_bg
        #
        if self.pysills_mode == "MA":
            signal_key = "SIG"
            var_check_sig = self.container_helper[var_type][var_file_short][signal_key]
        else:
            signal_key = "MAT"
            var_check_sig = self.container_helper[var_type][var_file_short][signal_key]["Content"]
        #
        if len(var_check_sig) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][signal_key][
                    "Content"].items():
                    times_sig = var_content["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][signal_key][
                    "Content"].items():
                    times_sig = self.container_helper[var_type][var_file_short][signal_key]["Content"][1]["Times"]
                    var_color = self.colors_intervals["MAT"]
                    #
                    box_mat = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                    var_content["Object"] = box_mat
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["MAT"]["Listbox"].insert(
                            tk.END, "MAT" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            else:
                times_sig = times_sig = self.container_helper[var_type][var_file_short][signal_key][1]["Times"]
                var_color = self.colors_intervals["SIG"]
                #
                box_sig = ax.axvspan(times_sig[0], times_sig[1], alpha=0.35, color=var_color)
                var_content["Object"] = box_sig
        #
        if self.pysills_mode == "MA":
            inclusion_key = "INCL"
            var_check_incl = []
        else:
            inclusion_key = "INCL"
            var_check_incl = self.container_helper[var_type][var_file_short][inclusion_key]["Content"]
        #
        if len(var_check_incl) > 0:
            if self.pysills_mode in ["FI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][inclusion_key][
                    "Content"].items():
                    times_incl = var_content["Times"]
                    #
                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35, color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
                    #
            elif self.pysills_mode in ["MI"]:
                for var_id, var_content in self.container_helper[var_type][var_file_short][inclusion_key][
                    "Content"].items():
                    times_incl = self.container_helper[var_type][var_file_short][inclusion_key]["Content"][1][
                        "Times"]
                    #
                    box_incl = ax.axvspan(times_incl[0], times_incl[1], alpha=0.35, color=self.colors_intervals["INCL"])
                    var_content["Object"] = box_incl
                    #
                    if var_lb_state == True:
                        self.container_helper[var_type][var_file_short]["INCL"]["Listbox"].insert(
                            tk.END, "INCL" + str(var_id) + " [" + str(var_content["Times"][0]) + "-" +
                                    str(var_content["Times"][1]) + "]")
        #
        ax.grid(True)
        ax.set_yscale("log")
        ax.set_xlim(left=0, right=x_max)
        ax.set_xticks(np.arange(0, x_max, 20))
        ax.set_ylim(bottom=100, top=1.5*y_max)
        ax.grid(which="major", linestyle="-", linewidth=1)
        ax.minorticks_on()
        ax.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        ax.set_axisbelow(True)
        ax.set_title(var_file_short, fontsize=9)
        ax.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        ax.set_ylabel("Signal Intensity $I$ (cps)", labelpad=0.5, fontsize=8)
        ax.xaxis.set_tick_params(labelsize=8)
        ax.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_specific.draw()
        #
        self.canvas_specific.mpl_connect(
            "button_press_event", lambda event, var_type=var_type, var_file_short=var_file_short,
                                         var_file_long=var_file:
            self.fi_add_interval_to_diagram(var_type, var_file_short, var_file_long, event))
    #
    def fi_show_time_ratio_diagram(self, var_type, var_file):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass
        #
        try:
            resultsframe = self.container_helper[var_type][var_file_short]["RESULTS FRAME"]
            #
            if resultsframe != None:
                resultsframe.destroy()
        except AttributeError:
            pass
        #
        ##
        if var_type == "STD":
            var_key_isotope = self.container_var[var_type][var_file]["IS Data"]["IS"].get()
        else:
            if self.container_var["fi_setting"]["Quantification Method"].get() == 1:
                var_key_isotope = self.container_var["SMPL"][var_file]["Host Only Tracer"]["Name"].get()
            else:
                var_key_isotope = self.container_var["SMPL"][var_file]["Second Internal Standard"]["Name"].get()
        #
        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]
        #
        self.fig_specific_ratio = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        ax_ratio = self.fig_specific_ratio.add_subplot(label=np.random.uniform())
        self.container_helper[var_type][var_file_short]["AXES"] = {"Time-Ratio": ax_ratio}
        #
        self.canvas_specific_ratio = FigureCanvasTkAgg(self.fig_specific_ratio, master=self.subwindow_fi_checkfile)
        self.canvas_specific_ratio.get_tk_widget().grid(row=0, column=14, rowspan=20, columnspan=39, sticky="nesw")
        self.toolbarFrame_specific_ratio = tk.Frame(master=self.subwindow_fi_checkfile)
        self.toolbarFrame_specific_ratio.grid(row=20, column=14, rowspan=2, columnspan=39, sticky="w")
        self.toolbar_specific_ratio = NavigationToolbar2Tk(self.canvas_specific_ratio, self.toolbarFrame_specific_ratio)
        self.toolbar_specific_ratio.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific_ratio._message_label.config(background=self.bg_colors["Very Light"])
        self.toolbar_specific_ratio.winfo_children()[-2].config(background=self.bg_colors["Very Light"])
        #
        self.container_helper[var_type][var_file_short]["FIGURE RATIO"] = self.fig_specific_ratio
        self.container_helper[var_type][var_file_short]["CANVAS RATIO"] = self.canvas_specific_ratio
        self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"] = self.toolbarFrame_specific_ratio
        #
        df_data = self.load_and_assign_data(filename=var_file)
        self.dataset_time = list(df_data.iloc[:, 0])
        x_max = max(self.dataset_time)
        icp_measurements = np.array(
            [[df_data[isotope]/df_data[var_key_isotope] for isotope in self.container_lists["ISOTOPES"]]])
        y_max = np.amax(icp_measurements)
        #
        for isotope in self.container_lists["ISOTOPES"]:
            ln_raw = ax_ratio.plot(
                self.dataset_time, df_data[isotope]/df_data[var_key_isotope], label=isotope,
                color=self.isotope_colors[isotope], linewidth=1, visible=True)
            self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope]["RAW"] = ln_raw
        #
        ax_ratio.grid(True)
        ax_ratio.set_yscale("log")
        ax_ratio.set_xlim(left=0, right=x_max)
        ax_ratio.set_xticks(np.arange(0, x_max, 20))
        ax_ratio.set_ylim(bottom=10**(-5), top=1.5*y_max)
        ax_ratio.grid(which="major", linestyle="-", linewidth=1)
        ax_ratio.minorticks_on()
        ax_ratio.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        ax_ratio.set_axisbelow(True)
        ax_ratio.set_title(var_file_short, fontsize=9)
        ax_ratio.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        ax_ratio.set_ylabel("Signal Intensity Ratio $I$ (cps/cps)", labelpad=0.5, fontsize=8)
        ax_ratio.xaxis.set_tick_params(labelsize=8)
        ax_ratio.yaxis.set_tick_params(labelsize=8)
        #
        self.canvas_specific_ratio.draw()
    #
    def fi_show_quick_results(self, var_type, var_file):
        #
        parts = var_file.split("/")
        var_file_short = parts[-1]
        #
        ## Cleaning
        try:
            canvas = self.container_helper[var_type][var_file_short]["CANVAS"]
            toolbarframe = self.container_helper[var_type][var_file_short]["TOOLBARFRAME"]
            #
            if canvas == None:
                canvas.get_tk_widget().grid_remove()
                toolbarframe.grid_remove()
        except AttributeError:
            pass
        #
        try:
            canvas_ratio = self.container_helper[var_type][var_file_short]["CANVAS RATIO"]
            toolbarframe_ratio = self.container_helper[var_type][var_file_short]["TOOLBARFRAME RATIO"]
            #
            if canvas_ratio == None:
                canvas_ratio.get_tk_widget().grid_remove()
                toolbarframe_ratio.grid_remove()
        except AttributeError:
            pass
        #
        ##
        var_id = self.container_lists[var_type]["Long"].index(var_file)
        var_file_short = self.container_lists[var_type]["Short"][var_id]
        #
        ## FRAMES
        frm_quick = SE(
            parent=self.subwindow_fi_checkfile, row_id=0, column_id=14, n_rows=30, n_columns=39,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)
        #
        self.container_helper[var_type][var_file_short]["RESULTS FRAME"] = frm_quick
        #
        ## TREEVIEWS
        list_categories = ["Category"]
        list_categories.extend(self.container_lists["ISOTOPES"])
        list_width = list(85*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 200
        #
        self.tv_results_quick = SE(
            parent=self.subwindow_fi_checkfile, row_id=0, column_id=14, n_rows=14, n_columns=38,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=len(list_categories), text_n=list_categories,
            width_n=list_width, individual=True)
        #
        scb_v = ttk.Scrollbar(self.subwindow_fi_checkfile, orient="vertical")
        scb_h = ttk.Scrollbar(self.subwindow_fi_checkfile, orient="horizontal")
        self.tv_results_quick.configure(xscrollcommand=scb_h.set, yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_results_quick.yview)
        scb_h.config(command=self.tv_results_quick.xview)
        scb_v.grid(row=0, column=52, rowspan=14, columnspan=1, sticky="ns")
        scb_h.grid(row=14, column=14, rowspan=1, columnspan=38, sticky="ew")
        #
        ## INITIALIZATION
        if var_type == "STD":
            self.fi_get_intensity(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
            self.fi_get_intensity_corrected(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="MAT",
                mode="Specific")
        else:
            for file_std_short in self.container_lists["STD"]["Short"]:
                self.fi_get_intensity(
                    var_filetype="STD", var_datatype="RAW", var_file_short=file_std_short, mode="Specific")
            #
            self.fi_get_intensity_corrected(
                var_filetype="STD", var_datatype="RAW", var_file_short=None, var_focus="MAT", mode="only STD")
            #
            self.fi_get_intensity(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
            self.fi_get_intensity_corrected(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="MAT",
                mode="Specific")
            self.fi_get_intensity_corrected(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_focus="INCL",
                mode="Specific")
            self.fi_get_intensity_ratio(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                var_focus="INCL")
            self.fi_get_intensity_mix(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, mode="Specific")
            #
        self.fi_get_intensity_ratio(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
            var_focus="MAT")
        self.fi_get_analytical_sensitivity(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.fi_get_normalized_sensitivity(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.fi_get_rsf(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
            var_focus="MAT")
        self.fi_get_concentration(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
        self.fi_get_concentration_ratio(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
            var_focus="MAT")
        self.fi_get_lod(
            var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
            var_focus="MAT")
        #
        if var_type == "SMPL":
            self.fi_get_concentration(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                var_focus="INCL")
            self.fi_get_concentration_ratio(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                var_focus="INCL")
            self.fi_get_lod(
                var_filetype=var_type, var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file,
                var_focus="INCL")
            self.fi_get_mixed_concentration_ratio(
                var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
            self.fi_get_mixing_ratio(
                var_datatype="RAW", var_file_short=var_file_short, var_file_long=var_file)
            #self.fi_get_concentration_mixed(var_datatype="RAW", var_file_short=var_file_short)
        #
        entries_intensity_bg_i = ["Intensity BG"]
        entries_intensity_mat_i = ["Intensity MAT"]
        entries_intensity_incl_i = ["Intensity INCL"]
        entries_intensity_mix_i = ["Intensity MIX"]
        entries_intensity_ratio_i = ["Intensity Ratio MAT"]
        entries_analytical_sensitivity_i = ["Analytical Sensitivity MAT"]
        entries_normalized_sensitivity_i = ["Normalized Sensitivity MAT"]
        entries_rsf_i = ["Relative Sensitivity Factor MAT"]
        entries_concentration_i = ["Concentration MAT"]
        entries_concentration_ratio_i = ["Concentration Ratio MAT"]
        entries_lod_i = ["Limit of Detection MAT"]
        #
        if var_type == "SMPL":
            entries_intensity_incl_i = ["Intensity INCL"]
            entries_intensity_ratio_incl_i = ["Intensity Ratio INCL"]
            entries_concentration_incl_i = ["Concentration INCL"]
            entries_a_i = ["Mixed Concentration Ratio"]
            entries_x_i = ["Mixing Ratio"]
            entries_lod_incl_i = ["Limit of Detection INCL"]
        #
        for isotope in self.container_lists["ISOTOPES"]:
            # Intensity Results
            intensity_bg_i = self.container_intensity[var_type]["RAW"][var_file_short]["BG"][isotope]
            intensity_mat_i = self.container_intensity_corrected[var_type]["RAW"][var_file_short]["MAT"][isotope]
            intensity_ratio_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short]["MAT"][isotope]
            #
            if var_type == "SMPL":
                intensity_incl_i = self.container_intensity_corrected[var_type]["RAW"][var_file_short]["INCL"][isotope]
                intensity_mix_i = self.container_intensity_mix[var_type]["RAW"][var_file_short][isotope]
                intensity_ratio_incl_i = self.container_intensity_ratio[var_type]["RAW"][var_file_short]["INCL"][
                    isotope]
            #
            # Sensitivity Results
            analytical_sensitivity_i = self.container_analytical_sensitivity[var_type]["RAW"][var_file_short]["MAT"][
                isotope]
            normalized_sensitivity_i = self.container_normalized_sensitivity[var_type]["RAW"][var_file_short]["MAT"][
                isotope]
            rsf_i = self.container_rsf[var_type]["RAW"][var_file_short]["MAT"][isotope]
            # Concentration Results
            concentration_i = self.container_concentration[var_type]["RAW"][var_file_short]["MAT"][isotope]
            concentration_ratio_i = self.container_concentration_ratio[var_type]["RAW"][var_file_short]["MAT"][
                isotope]
            lod_i = self.container_lod[var_type]["RAW"][var_file_short]["MAT"][isotope]
            #
            if var_type == "SMPL":
                concentration_incl_i = self.container_concentration[var_type]["RAW"][var_file_short]["INCL"][isotope]
                lod_incl_i = self.container_lod[var_type]["RAW"][var_file_short]["INCL"][isotope]
                a_i = self.container_mixed_concentration_ratio[var_type]["RAW"][var_file_short][isotope]
                x_i = self.container_mixing_ratio[var_type]["RAW"][var_file_short][isotope]
            #
            entries_intensity_bg_i.append(f"{intensity_bg_i:.{1}f}")
            entries_intensity_mat_i.append(f"{intensity_mat_i:.{1}f}")
            entries_intensity_ratio_i.append(f"{intensity_ratio_i:.{2}E}")
            #
            entries_analytical_sensitivity_i.append(f"{analytical_sensitivity_i:.{3}f}")
            entries_normalized_sensitivity_i.append(f"{normalized_sensitivity_i:.{3}f}")
            entries_rsf_i.append(f"{rsf_i:.{2}E}")
            #
            entries_concentration_i.append(f"{concentration_i:.{1}f}")
            entries_concentration_ratio_i.append(f"{concentration_ratio_i:.{2}E}")
            entries_lod_i.append(f"{lod_i:.{3}f}")
            #
            if var_type == "SMPL":
                entries_intensity_incl_i.append(f"{intensity_incl_i:.{1}f}")
                entries_intensity_mix_i.append(f"{intensity_mix_i:.{1}f}")
                entries_intensity_ratio_incl_i.append(f"{intensity_ratio_incl_i:.{2}E}")
                #
                entries_concentration_incl_i.append(f"{concentration_incl_i:.{1}f}")
                entries_a_i.append(f"{a_i:.{3}f}")
                entries_x_i.append(f"{x_i:.{2}E}")
                entries_lod_incl_i.append(f"{lod_incl_i:.{3}f}")
            #
        # Intensity Results
        self.tv_results_quick.insert("", tk.END, values=entries_intensity_bg_i)
        self.tv_results_quick.insert("", tk.END, values=entries_intensity_mat_i)
        self.tv_results_quick.insert("", tk.END, values=entries_intensity_ratio_i)
        #
        if var_type == "SMPL":
            self.tv_results_quick.insert("", tk.END, values=entries_intensity_incl_i)
            self.tv_results_quick.insert("", tk.END, values=entries_intensity_ratio_incl_i)
            self.tv_results_quick.insert("", tk.END, values=entries_intensity_mix_i)
        #
        # Sensitivity Results
        self.tv_results_quick.insert("", tk.END, values=entries_analytical_sensitivity_i)
        self.tv_results_quick.insert("", tk.END, values=entries_normalized_sensitivity_i)
        self.tv_results_quick.insert("", tk.END, values=entries_rsf_i)
        #
        # Concentration Results
        self.tv_results_quick.insert("", tk.END, values=entries_concentration_i)
        self.tv_results_quick.insert("", tk.END, values=entries_concentration_ratio_i)
        self.tv_results_quick.insert("", tk.END, values=entries_lod_i)
        #
        if var_type == "SMPL":
            self.tv_results_quick.insert("", tk.END, values=entries_concentration_incl_i)
            self.tv_results_quick.insert("", tk.END, values=entries_lod_incl_i)
            self.tv_results_quick.insert("", tk.END, values=entries_a_i)
            self.tv_results_quick.insert("", tk.END, values=entries_x_i)
    #
    def fi_show_all_lines(self, var_type, var_file_short):
        if self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "RAW"][0].set_visible(True)
                    #
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "RAW"][0].set_visible(True)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display RAW"][var_type][var_file_short][isotope].set(1)
        elif self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "SMOOTHED"][0].set_visible(True)
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "SMOOTHED"][0].set_visible(True)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(1)
        #
        if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
            self.canvas_specific.draw()
        elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
            self.canvas_specific_ratio.draw()

    #
    def fi_hide_all_lines(self, var_type, var_file_short):
        if self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 0:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "RAW"][0].set_visible(False)
                    #
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "RAW"][0].set_visible(False)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display RAW"][var_type][var_file_short][isotope].set(0)
        elif self.container_var["fi_setting"]["Data Type Plot"][var_type][var_file_short].get() == 1:
            for isotope in self.container_lists["ISOTOPES"]:
                if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                    self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][isotope][
                        "SMOOTHED"][0].set_visible(False)
                    #
                elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
                    try:
                        self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][isotope][
                            "SMOOTHED"][0].set_visible(False)
                    except AttributeError:
                        pass
                #
                self.container_var["fi_setting"]["Display SMOOTHED"][var_type][var_file_short][isotope].set(0)
        #
        if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
            self.canvas_specific.draw()
        elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
            self.canvas_specific_ratio.draw()
    #
    def fi_change_line_visibility(self, var_type, var_file_short, var_datatype, var_isotope):
        var_key = "Display "+str(var_datatype)
        if self.container_var["fi_setting"][var_key][var_type][var_file_short][var_isotope].get() == 1:
            if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(True)
            else:
                self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(True)
        elif self.container_var["fi_setting"][var_key][var_type][var_file_short][var_isotope].get() == 0:
            if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
                self.container_var["fi_setting"]["Time-Signal Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(False)
            else:
                self.container_var["fi_setting"]["Time-Ratio Lines"][var_type][var_file_short][var_isotope][
                    var_datatype][0].set_visible(False)
        #
        if self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 0:
            self.canvas_specific.draw()
        elif self.container_var["fi_setting"]["Analyse Mode Plot"][var_type][var_file_short].get() == 1:
            self.canvas_specific_ratio.draw()
    #
    def fi_add_interval_to_diagram(self, var_type, var_file_short, var_file_long, event):
        if self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:   # BG
            var_key = "BG"
            var_color = self.colors_intervals[var_key]
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1: # MAT
            var_key = "MAT"
            var_color = self.colors_intervals[var_key]
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 2: # INCL
            var_key = "INCL"
            var_color = self.colors_intervals[var_key]
        #
        if self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() in [0, 1, 2]:
            x_nearest = min(self.dataset_time, key=lambda x: abs(x - event.xdata))
            #
            if len(self.helper_intervals[var_key]) < 1:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
            else:
                x_id = self.dataset_time.index(x_nearest)
                self.helper_intervals[var_key].append([x_nearest, x_id])
                #
                key_id = self.container_helper[var_type][var_file_short][var_key]["ID"] + 1
                #key_id = len(self.container_helper[var_type][var_file_short][var_key]["Content"]) + 1
                time_0 = self.helper_intervals[var_key][0][0]
                time_1 = self.helper_intervals[var_key][1][0]
                index_0 = self.helper_intervals[var_key][0][1]
                index_1 = self.helper_intervals[var_key][1][1]
                #
                box_key = self.container_helper[var_type][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.35, color=var_color)
                self.canvas_specific.draw()
                #
                self.container_helper[var_type][var_file_short][var_key]["Content"][key_id] = {
                    "Times": [time_0, time_1], "Indices": [index_0, index_1], "Object": box_key}
                #
                self.container_helper[var_type][var_file_short][var_key]["Listbox"].insert(
                    tk.END, var_key + str(key_id) + " [" + str(self.helper_intervals[var_key][0][0]) + "-" +
                            str(self.helper_intervals[var_key][1][0]) + "]")
                #
                self.helper_intervals[var_key].clear()
                self.container_helper[var_type][var_file_short][var_key]["ID"] = key_id
                self.container_helper[var_type][var_file_short][var_key]["Indices"].append(key_id)
                #
                self.canvas_specific.draw()
        #
        if var_type == "STD":
            if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) + \
                    len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) < 2:
                self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
            else:
                if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) > 0 and \
                        len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) > 0:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_green, bd=1)
                else:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
            #
        else:
            if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) + \
                    len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) + \
                    len(self.container_helper[var_type][var_file_short]["INCL"]["Content"]) < 3:
                self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
            else:
                if len(self.container_helper[var_type][var_file_short]["BG"]["Content"]) > 0 and \
                        len(self.container_helper[var_type][var_file_short]["MAT"]["Content"]) > 0 and \
                        len(self.container_helper[var_type][var_file_short]["INCL"]["Content"]) > 0:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_green, bd=1)
                else:
                    self.container_var[var_type][var_file_long]["Frame"].config(background=self.sign_yellow, bd=1)
    #
    def fi_change_interval_visibility(self, var_key, var_type, var_file_short):
        if self.container_var["fi_setting"]["Calculation Interval Visibility"][var_type][var_file_short][
            var_key].get() == 0:
            var_state = False
        else:
            var_state = True
        #
        for var_id, var_content in self.container_helper[var_type][var_file_short][var_key]["Content"].items():
            var_content["Object"].set_visible(var_state)
        #
        self.canvas_specific.draw()
    #
    def fi_remove_interval(self, var_type, var_file_short):
        if self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 0:
            var_key = "BG"
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 1:
            var_key = "MAT"
        elif self.container_var["fi_setting"]["Calculation Interval"][var_type][var_file_short].get() == 2:
            var_key = "INCL"
        #
        var_lb = self.container_helper[var_type][var_file_short][var_key]["Listbox"]
        #
        item = self.container_helper[var_type][var_file_short][var_key]["Listbox"].curselection()[0]
        value = var_lb.get(item)
        value_parts = value.split(" ")
        key_id = re.search("(\D+)(\d+)", value_parts[0])
        var_id = int(key_id.group(2))
        #
        self.container_helper[var_type][var_file_short][var_key]["Indices"].remove(var_id)
        var_lb.delete(tk.ANCHOR)
        self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]["Object"].set_visible(False)
        del self.container_helper[var_type][var_file_short][var_key]["Content"][var_id]
        #
        self.canvas_specific.draw()
    #
    def fi_set_bg_interval(self, var_entr, var_key, mode, event):
        if mode == "default":
            time = var_entr.get()
            time = time.replace(",", ".")
            #
            for var_type in ["STD", "SMPL"]:
                for var_file in self.container_lists[var_type]["Long"]:
                    df_data = self.load_and_assign_data(filename=var_file)
                    dataset_time = list(df_data.iloc[:, 0])
                    var_file_short = var_file.split("/")[-1]
                    #
                    if 1 not in self.container_helper[var_type][var_file_short]["BG"]["Content"]:
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1] = {
                            "Times": [None, None], "Indices": [None, None], "Object": None}
                        self.container_helper[var_type][var_file_short]["BG"]["ID"] += 1
                        self.container_helper[var_type][var_file_short]["BG"]["Indices"].append(1)
                    #
                    x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
                    if var_key == "Start":
                        var_entr.set("Start value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Times"][0] = var_time
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Indices"][0] = var_index
                    elif var_key == "End":
                        var_entr.set("End value set!")
                        var_time = x_nearest
                        var_index = dataset_time.index(var_time)
                        #
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Times"][1] = var_time
                        self.container_helper[var_type][var_file_short]["BG"]["Content"][1]["Indices"][1] = var_index
                    #
        elif mode in self.container_lists["STD"]["Long"]:
            var_file = mode
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["fi_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["fi_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 1:
                var_category = "MAT"
            elif self.container_var["fi_setting"]["Calculation Interval"]["STD"][var_file_short].get() == 2:
                var_category = "INCL"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["STD"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["STD"][var_file_short][var_category]["Content"]:
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["STD"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["STD"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][0] = var_index
            elif var_key == "End":
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1] = var_time
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Indices"][1] = var_index
                #
                time_0 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["STD"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["STD"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["STD"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
            #
        elif mode in self.container_lists["SMPL"]["Long"]:
            var_file = mode
            df_data = self.load_and_assign_data(filename=var_file)
            dataset_time = list(df_data.iloc[:, 0])
            var_file_short = var_file.split("/")[-1]
            #
            if self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 0:
                var_category = "BG"
            elif self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 1:
                var_category = "MAT"
            elif self.container_var["fi_setting"]["Calculation Interval"]["SMPL"][var_file_short].get() == 2:
                var_category = "INCL"
            #
            time = var_entr.get()
            time = time.replace(",", ".")
            x_nearest = round(min(dataset_time, key=lambda x: abs(x - float(time))), 8)
            #
            current_id = self.container_helper["SMPL"][var_file_short][var_category]["ID"]
            if var_key == "Start":
                var_id = current_id + 1
            elif var_key == "End":
                var_id = current_id
            var_entr.set(x_nearest)
            var_time = x_nearest
            var_index = dataset_time.index(var_time)
            #
            if var_id not in self.container_helper["SMPL"][var_file_short][var_category]["Content"]:
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id] = {
                    "Times": [None, None], "Indices": [None, None], "Object": None}
                self.container_helper["SMPL"][var_file_short][var_category]["ID"] = var_id
                self.container_helper["SMPL"][var_file_short][var_category]["Indices"].append(var_id)
            #
            if var_key == "Start":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][0] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][0] = var_index
            elif var_key == "End":
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][1] = var_time
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Indices"][1] = var_index
                #
                time_0 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][0]
                time_1 = self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Times"][1]
                #
                box_key = self.container_helper["SMPL"][var_file_short]["AXES"]["Time-Signal"].axvspan(
                    time_0, time_1, alpha=0.5, color=self.colors_intervals[var_category])
                self.container_helper["SMPL"][var_file_short][var_category]["Content"][var_id]["Object"] = box_key
                #
                self.container_helper["SMPL"][var_file_short][var_category]["Listbox"].insert(
                    tk.END, var_category + str(var_id) + " [" + str(time_0) + "-" + str(time_1) + "]")
                #
                self.canvas_specific.draw()
                #
                for key, item in self.helper_time_entries.items():
                    if key == "Start":
                        item.set("Set start value")
                    elif key == "End":
                        item.set("Set end value")
    #
    ## MATRIX SETTINGS
    #
    def fi_matrix_concentration_setup(self):
        ## Window Settings
        window_width = 700
        window_heigth = 450
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_matrix_concentration = tk.Toplevel(self.parent)
        subwindow_fi_matrix_concentration.title("FLUID INCLUSION ANALYSIS - Matrix Concentration Setup")
        subwindow_fi_matrix_concentration.geometry(var_geometry)
        subwindow_fi_matrix_concentration.resizable(False, False)
        subwindow_fi_matrix_concentration["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_matrix_concentration, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_matrix_concentration, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_matrix_concentration.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_matrix_concentration.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## LABELS
        lbl_01 = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row, column_id=start_column, n_rows=1, n_columns=24,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Default Settings", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## OPTION MENUS
        if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:
            list_elements = []
            var_list_comp = []
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for oxide in self.container_lists["Oxides"]:
                key = re.search("(\D+)(\d*)(\D+)(\d*)", oxide)
                element_oxide = key.group(1)
                if element_oxide in list_elements:
                    if oxide not in var_list_comp:
                        var_list_comp.append(oxide)
            #var_list_comp = self.container_lists["Oxides"]
            var_list_is = self.container_lists["ISOTOPES"]
            var_opt_default_comp = self.container_var["fi_setting"]["Oxide"]
            var_opt_default_is = self.container_var["fi_setting"]["IS MAT Default"]
            var_entr_default = self.container_var["fi_setting"]["Oxide Concentration"]
            var_entr_default_is = self.container_var["fi_setting"]["IS MAT Default Concentration"]
            #
            if self.container_var["fi_setting"]["Oxide"].get() != "Select Oxide":
                var_opt_default_text = self.container_var["fi_setting"]["Oxide"].get()
            else:
                var_opt_default_text = "Select Oxide"
            #
            if self.container_var["fi_setting"]["Oxide Concentration"].get() != "0.0":
                var_entr_default_text = self.container_var["fi_setting"]["Oxide Concentration"].get()
            else:
                var_entr_default_text = "0.0"
            #
            if self.container_var["fi_setting"]["IS MAT Default"].get() != "Select IS":
                var_opt_default_is_text = self.container_var["fi_setting"]["IS MAT Default"].get()
            else:
                var_opt_default_is_text = "Select IS"
            #
            if self.container_var["fi_setting"]["IS MAT Default Concentration"].get() != "1000000":
                var_entr_default_is_text = self.container_var["fi_setting"]["IS MAT Default Concentration"].get()
            else:
                var_entr_default_is_text = "1000000"
            #
        elif self.container_var["fi_setting"]["Host Setup Selection"].get() == 2:
            list_elements = []
            var_list_comp = []
            for isotope in self.container_lists["ISOTOPES"]:
                key = re.search("(\D+)(\d*)", isotope)
                element_isotope = key.group(1)
                if element_isotope not in list_elements:
                    list_elements.append(element_isotope)
            for element in self.container_lists["Elements"]:
                if element in list_elements:
                    if element not in var_list_comp:
                        var_list_comp.append(element)
            #var_list_comp = self.container_lists["Elements"]
            var_list_is = self.container_lists["ISOTOPES"]
            var_opt_default_comp = self.container_var["fi_setting"]["Element"]
            var_opt_default_is = self.container_var["fi_setting"]["IS MAT Default"]
            var_entr_default = self.container_var["fi_setting"]["Element Concentration"]
            var_entr_default_is = self.container_var["fi_setting"]["IS MAT Default Concentration"]
            #
            if self.container_var["fi_setting"]["Element"].get() != "Select Element":
                var_opt_default_text = self.container_var["fi_setting"]["Element"].get()
            else:
                var_opt_default_text = "Select Element"
            #
            if self.container_var["fi_setting"]["Element Concentration"].get() != "1000000":
                var_entr_default_text = self.container_var["fi_setting"]["Element Concentration"].get()
            else:
                var_entr_default_text = "1000000"
            #
            if self.container_var["fi_setting"]["IS MAT Default"].get() != "Select IS":
                var_opt_default_is_text = self.container_var["fi_setting"]["IS MAT Default"].get()
            else:
                var_opt_default_is_text = "Select IS"
            #
            if self.container_var["fi_setting"]["IS MAT Default Concentration"].get() != "1000000":
                var_entr_default_is_text = self.container_var["fi_setting"]["IS MAT Default Concentration"].get()
            else:
                var_entr_default_is_text = "1000000"
        #
        opt_02a = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 1, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=var_opt_default_comp, option_list=var_list_comp, text_set=var_opt_default_text,
            fg_active=self.colors_fi["Light Font"], bg_active=self.colors_fi["Dark"],
            command=lambda var_opt=var_opt_default_comp, var_file=None, state_default=True:
            self.fi_change_matrix_compound(var_opt, var_file, state_default))
        opt_02a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_02a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_02b = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 2, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=var_opt_default_is, option_list=var_list_is, text_set=var_opt_default_is_text,
            fg_active=self.colors_fi["Light Font"], bg_active=self.colors_fi["Dark"],
            command=lambda var_opt=var_opt_default_is, var_file=None, state_default=True:
            self.fi_change_matrix_compound(var_opt, var_file, state_default))
        self.opt_02b["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        self.opt_02b.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        ## ENTRIES
        entr_02b = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 3, column_id=start_column + 25, n_rows=1,
            n_columns=9, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=var_entr_default_is, text_default=var_entr_default_is_text,
            command=lambda event, var_entr=var_entr_default_is, var_file=None, state_default=True:
            self.fi_change_matrix_concentration(var_entr, var_file, state_default, event))
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_matrix_concentration, row_id=start_row + 1, column_id=start_column, n_rows=16,
            n_columns=24, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:     # Oxide Selection
                var_list_is = self.container_lists["ISOTOPES"]
                var_opt_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get() != "Select IS":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get()
                else:
                    var_opt_i_default = "Select IS"
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].get() != "1000000":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "1000000"
            elif self.container_var["fi_setting"]["Host Setup Selection"].get() == 2:   # Element Selection
                var_list_is = self.container_lists["ISOTOPES"]
                var_opt_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"]
                var_entr_i = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"]
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get() != "Select IS":
                    var_opt_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].get()
                else:
                    var_opt_i_default = "Select IS"
                if self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].get() != "1000000":
                    var_entr_i_default = self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"][
                        "Concentration"].get()
                else:
                    var_entr_i_default = "1000000"
            #
            var_opt_i.set(var_opt_i_default)
            #
            opt_is_i = tk.OptionMenu(
                frm_smpl, var_opt_i, *var_list_is,
                command=lambda var_opt=var_opt_i, var_file=file_smpl, state_default=False:
                self.fi_change_matrix_is(var_opt, var_file, state_default))
            opt_is_i["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color)
            opt_is_i.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color, highlightthickness=0)
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            var_entr_i.set(var_entr_i_default)
            #
            entr_i = tk.Entry(frm_smpl, textvariable=var_entr_i)
            entr_i.bind(
                "<Return>", lambda event, var_entr=var_entr_i, var_file=file_smpl, state_default=False:
                self.fi_change_matrix_concentration(var_entr, var_file, state_default, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
    def fi_change_matrix_compound(self, var_opt, var_file=None, state_default=False, matrix_only=False):
        if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].set(var_opt)
                #
                if matrix_only == True:
                    self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Matrix"].set(var_opt)
            #
            self.container_var["fi_setting"]["IS MAT Default Concentration"].set(1000000)
            if var_key == "Oxide":
                key = re.search("(\D+)(\d*)(\D+)(\d*)", var_opt)
                var_opt_element = key.group(1)
            else:
                var_opt_element = var_opt
            possible_is = []
            #
            for isotope in self.container_lists["ISOTOPES"]:
                key_02 = re.search("(\D+)(\d+)", isotope)
                element = key_02.group(1)
                if element == var_opt_element:
                    possible_is.append(isotope)
            #
            self.container_var["fi_setting"]["IS MAT Default"].set("Select IS")
            for index, isotope in enumerate(possible_is):
                if matrix_only == True:
                    if index == 0:
                        self.opt_01c["menu"].delete(0, "end")
                    #
                    self.opt_01c["menu"].add_command(
                        label=isotope, command=lambda var_opt=isotope, var_file=None, state_default=True:
                        self.change_matrix_only_tracer(var_opt, var_file, state_default))
                else:
                    if index == 0:
                        self.opt_02b["menu"].delete(0, "end")
                    #
                    self.opt_02b["menu"].add_command(
                        label=isotope, command=lambda var_opt=isotope, var_file=None, state_default=True:
                        self.fi_change_matrix_is(var_opt, var_file, state_default))
            #
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"][var_key]["Name"].set(var_opt)
    #
    def change_matrix_only_tracer(self, var_opt, var_file, state_default):
        if state_default == True:
            self.container_var["fi_setting"]["Host Only"].set(var_opt)
            #
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Name"].set(var_opt)
                #
                var_oxide = self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Matrix"].get()
                key = re.search("(\D+)(\d*)(\D+)(\d*)", var_oxide)
                list_elements = []
                list_amounts = []
                list_fraction = {}
                #
                for index, item in enumerate(key.groups()):
                    if index in [0, 2]:
                        list_elements.append(item)
                    else:
                        if item == "":
                            list_amounts.append(1)
                        else:
                            list_amounts.append(int(item))
                #
                mass_total = 0
                for index, element in enumerate(list_elements):
                    if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                        mass_total += list_amounts[index]*self.chemistry_data[element]
                    else:
                        mass_total += list_amounts[index]*self.chemistry_data_sills[element]
                #
                for index, element in enumerate(list_elements):
                    if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                        list_fraction[element] = (list_amounts[index]*self.chemistry_data[element])/mass_total
                    else:
                        list_fraction[element] = (list_amounts[index]*self.chemistry_data_sills[element])/mass_total
                    #
                    if index == 0:
                        oxide_weight = float(
                            self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Amount"].get())/100
                        is_concentration = round(list_fraction[element]*10**6, 4)
                        self.container_var["SMPL"][file_smpl]["Host Only Tracer"]["Value"].set(round(
                            oxide_weight*is_concentration, 4))
            #
            oxide_weight = float(self.container_var["fi_setting"]["Matrix Amount Default"].get())/100
            self.container_var["fi_setting"]["Matrix-Only Concentration Default"].set(round(
                            oxide_weight*is_concentration, 4))
            #
        else:
            self.container_var["SMPL"][var_file]["Host Only Tracer"]["Name"].set(var_opt)
    #
    def change_specific_matrix_amount(self, var_file, event):
        var_amount = float(self.container_var["SMPL"][var_file]["Host Only Tracer"]["Amount"].get())/100
        var_concentration_before = float(self.container_var["fi_setting"]["Matrix-Only Concentration Default"].get())
        #
        var_concentration = var_amount*var_concentration_before
        #
        self.container_var["SMPL"][var_file]["Host Only Tracer"]["Value"].set(round(var_concentration, 4))
    #
    def fi_change_matrix_is(self, var_opt, var_file, state_default):
        if self.container_var["fi_setting"]["Host Setup Selection"].get() == 1:
            var_key = "Oxide"
        else:
            var_key = "Element"
        #
        self.container_var["fi_setting"]["IS MAT Default"].set(var_opt)
        #
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Name"].set(var_opt)
                #
                if var_key == "Oxide":
                    var_oxide = self.container_var["SMPL"][file_smpl]["Matrix Setup"][var_key]["Name"].get()
                    key = re.search("(\D+)(\d*)(\D+)(\d*)", var_oxide)
                    list_elements = []
                    list_amounts = []
                    list_fraction = {}
                    #
                    for index, item in enumerate(key.groups()):
                        if index in [0, 2]:
                            list_elements.append(item)
                        else:
                            if item == "":
                                list_amounts.append(1)
                            else:
                                list_amounts.append(int(item))
                    #
                    mass_total = 0
                    for index, element in enumerate(list_elements):
                        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                            mass_total += list_amounts[index]*self.chemistry_data[element]
                        else:
                            mass_total += list_amounts[index]*self.chemistry_data_sills[element]
                    #
                    for index, element in enumerate(list_elements):
                        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
                            list_fraction[element] = (list_amounts[index]*self.chemistry_data[element])/mass_total
                        else:
                            list_fraction[element] = (list_amounts[index]*self.chemistry_data_sills[element])/mass_total
                        #
                        if index == 0:
                            oxide_weight = 1
                            is_concentration = round(list_fraction[element]*10**6, 4)
                            self.container_var["fi_setting"]["IS MAT Default Concentration"].set(is_concentration)
                            self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set(round(
                                oxide_weight*is_concentration, 4))
                else:
                    oxide_weight = 1
                    is_concentration = round(1*10**6, 4)
                    self.container_var["fi_setting"]["IS MAT Default Concentration"].set(is_concentration)
                    self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set(round(
                        oxide_weight*is_concentration, 4))
                #
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Name"].set(var_opt)
    #
    def fi_change_matrix_concentration(self, var_entr, var_file, state_default, event):
        if state_default == True:
            for file_smpl in self.container_lists["SMPL"]["Long"]:
                self.container_var["SMPL"][file_smpl]["Matrix Setup"]["IS"]["Concentration"].set(var_entr.get())
        else:
            self.container_var["SMPL"][var_file]["Matrix Setup"]["IS"]["Concentration"].set(var_entr.get())
    #
    ## INCLUSION SETUP #################################################################################################
    #
    def fi_inclusion_salt_correction(self):
        if "IS" not in self.container_optionmenu["SMPL"]:
            self.container_optionmenu["SMPL"]["IS"] = {}
        #
        ## Window Settings
        window_width = 1020
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_salt = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_salt.title("FLUID INCLUSION ANALYSIS - Salt Correction")
        subwindow_fi_inclusion_salt.geometry(var_geometry)
        subwindow_fi_inclusion_salt.resizable(False, False)
        subwindow_fi_inclusion_salt["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_salt, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_salt, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_salt.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_salt.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        start_chlorides = 1
        start_carbonates = start_chlorides + len(
            list(self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].keys())) + 1
        start_sulfates = start_carbonates + len(
            list(self.container_var["fi_setting"]["Salt Correction"]["Carbonates"].keys())) + 1
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row, column_id=start_column,
            n_rows=start_sulfates + 2, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_frame(relief=tk.SOLID)
        #
        ## LABELS
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.colors_fi["Light Font"], bg=self.colors_fi["Very Dark"]).create_simple_label(
            text="Composition: H2O + ...", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_chlorides, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.colors_fi["Light Font"], bg=self.colors_fi["Dark"]).create_simple_label(
            text="Chlorides", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_carbonates, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.colors_fi["Light Font"], bg=self.colors_fi["Dark"]).create_simple_label(
            text="Carbonates", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_sulfates, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.colors_fi["Light Font"], bg=self.colors_fi["Dark"]).create_simple_label(
            text="Sulfates", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row, column_id=start_column + 13, n_rows=1, n_columns=12,
            fg=self.colors_fi["Light Font"], bg=self.colors_fi["Very Dark"]).create_simple_label(
            text="NaCl Equivalents Calculation", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + 1, column_id=start_column + 13, n_rows=1,
            n_columns=7, fg=self.colors_fi["Light Font"], bg=self.colors_fi["Dark"]).create_simple_label(
            text="Salinity (in wt.%)", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row, column_id=start_column + 26, n_rows=1,
            n_columns=24,
            fg=self.colors_fi["Light Font"], bg=self.colors_fi["Dark"]).create_simple_label(
            text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + start_sulfates + 2, column_id=start_column + 26,
            n_rows=1, n_columns=6, fg=self.colors_fi["Light Font"], bg=self.colors_fi["Dark"]).create_simple_label(
            text="Default Setup", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## CHECKBOXES
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].items(), start=1):
            cb_01_i = SE(
                parent=subwindow_fi_inclusion_salt, row_id=start_chlorides + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            # if salt == "NaCl":
            #     cb_01_i.select()
            #     default_entr = "1.0"
            entr_01_i = SE(
                parent=subwindow_fi_inclusion_salt, row_id=start_chlorides + index, column_id=start_column + 7, n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Carbonates"].items(), start=1):
            cb_02_i = SE(
                parent=subwindow_fi_inclusion_salt, row_id=start_carbonates + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            entr_02_i = SE(
                parent=subwindow_fi_inclusion_salt, row_id=start_carbonates + index, column_id=start_column + 7,
                n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Sulfates"].items(), start=1):
            cb_03_i = SE(
                parent=subwindow_fi_inclusion_salt, row_id=start_sulfates + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            entr_03_i = SE(
                parent=subwindow_fi_inclusion_salt, row_id=start_sulfates + index, column_id=start_column + 7,
                n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        ## ENTRIES
        entr_04a = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + 1, column_id=start_column + 20, n_rows=1,
            n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
                           mode="demonstration", var_file=None:
            self.fi_calculate_halite_equivalents(var_entr, mode, var_file, event))
        entr_05a = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + start_sulfates + 2, column_id=start_column + 38,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
                           mode="default", var_file=None:
            self.fi_calculate_halite_equivalents(var_entr, mode, var_file, event))
        entr_05b = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + start_sulfates + 2, column_id=start_column + 44,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())
        #
        ## OPTION MENUS
        opt_05a = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + start_sulfates + 2, column_id=start_column + 32,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
            option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_var["fi_setting"]["Salt Correction"]["Default IS"].get(),
            fg_active=self.colors_fi["Light Font"], bg_active=self.colors_fi["Dark"],
            command=lambda var_opt=self.container_var["fi_setting"]["Salt Correction"]["Default IS"], var_key="SMPL":
            self.fi_change_is_default(var_opt, var_key))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.colors_fi["Light Font"],
            activebackground=self.colors_fi["Dark"])
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"], activeforeground=self.colors_fi["Light Font"],
            activebackground=self.colors_fi["Dark"], highlightthickness=0)
        #
        self.opt_is_smpl_def = opt_05a
        #
        ## TREEVIEW
        n_rows_tv = start_sulfates
        self.tv_salt = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + 2, column_id=start_column + 13, n_rows=n_rows_tv,
            n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["90", "150"], individual=True)
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_inclusion_salt, row_id=start_row + 1, column_id=start_column + 26,
            n_rows=start_sulfates + 1, n_columns=24, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            #
            opt_is_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl]["IS"],
                *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.colors_fi["Light Font"],
                                    activebackground=self.colors_fi["Dark"])
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.colors_fi["Light Font"], activebackground=self.colors_fi["Dark"],
                            highlightthickness=0)
            self.container_optionmenu["SMPL"]["IS"][file_smpl] = opt_is_i
            #
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            entr_i = tk.Entry(frm_smpl, textvariable=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short])
            entr_i.bind(
                "<Return>", lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][
                    file_smpl_short], mode="specific", var_file=file_smpl:
                self.fi_calculate_halite_equivalents(var_entr, mode, var_file, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\t")
            #
            entr_i = tk.Entry(frm_smpl, textvariable=self.container_files["SMPL"][file_smpl_short]["IS Concentration"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
        ## INITIALIZATION
        self.fi_check_elements_checkbutton()
    #
    def fi_change_is_default(self, var_isotope, var_key):
        for file_long in self.container_lists[var_key]["Long"]:
            self.container_var[var_key][file_long]["IS"].set(var_isotope)
        #
        self.container_var["fi_setting"]["Salt Correction"]["Default IS"].set(var_isotope)
    #
    def fi_change_is_specific(self, var_isotope, var_file, var_key):
        self.container_var[var_key][var_file]["IS"].set(var_isotope)
    #
    def fi_check_elements_checkbutton(self):
        self.container_lists["Possible IS SMPL"].clear()
        self.container_lists["Selected Salts"].clear()
        for category in ["Chlorides", "Carbonates", "Sulfates"]:
            for salt, values in self.container_var["fi_setting"]["Salt Correction"][category].items():
                if category == "Chlorides":
                    parts_salt = re.search("([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)", salt)
                elif category == "Carbonates":
                    parts_salt = re.search("([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)"
                                           "([A-Z]{,1}[a-z]{,1})(\d*)", salt)
                else:
                    parts_salt = re.search(
                        "([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)([A-Z]{,1}[a-z]{,1})(\d*)", salt)
                if values["State"].get() == 1:
                    self.container_lists["Salt Chemistry"][salt] = {}
                    self.container_lists["Selected Salts"].append(salt)
                    for isotope in self.container_lists["ISOTOPES"]:
                        key = re.search("(\D+)(\d+)", isotope)
                        for item in parts_salt.groups():
                            if item == "":
                                item = str(1)
                            #
                            if item.isalpha():
                                last_letter = item
                                if item == key.group(1):
                                    if isotope not in self.container_lists["Possible IS SMPL"]:
                                        self.container_lists["Possible IS SMPL"].append(isotope)
                            if item.isnumeric():
                                last_number = item
                                self.container_lists["Salt Chemistry"][salt][last_letter] = last_number
        #
        self.opt_is_smpl_def["menu"].delete(0, "end")
        #
        for file_smpl, gui_opt in self.container_optionmenu["SMPL"]["IS"].items():
            gui_opt["menu"].delete(0, "end")
        #
        for isotope in self.container_lists["Possible IS SMPL"]:
            self.opt_is_smpl_def["menu"].add_command(
                label=isotope, command=lambda var_isotope=isotope, var_key="SMPL":
                self.fi_change_is_default(var_isotope, var_key))
            #
            for file_smpl, gui_opt in self.container_optionmenu["SMPL"]["IS"].items():
                gui_opt["menu"].add_command(
                    label=isotope, command=lambda var_isotope=isotope, var_file=file_smpl, var_key="SMPL":
                    self.fi_change_is_specific(var_isotope, var_file, var_key))
    #
    def fi_calculate_chargebalance(self, var_entr, mode, var_file, event):
        amount_fluid = (100 - float(var_entr.get()))/100
        amount_nacl_equiv = float(var_entr.get())/100
        total_ppm = 10**6
        #
        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
            elements_masses = {
                "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06, "Cl": 35.45,
                "K": 39.098, "Ca": 40.078, "Fe": 55.845}
        else:
            elements_masses = {
                "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070, "Cl": 35.45,
                "K": 39.100, "Ca": 40.080, "Fe": 55.850}
        #
        self.helper_nacl_equivalents = {}
        #
        for element in list(elements_masses.keys()):
            self.helper_nacl_equivalents[element] = 0
        #
        for fluid in ["H2O"]:
            if fluid not in self.molar_masses_compounds:
                self.molar_masses_compounds[fluid] = {}
                if fluid == "H2O":
                    total = 2*elements_masses["H"] + elements_masses["O"]
                    self.molar_masses_compounds[fluid]["H"] = (2*elements_masses["H"])/total
                    self.molar_masses_compounds[fluid]["O"] = (elements_masses["O"])/total
                    self.molar_masses_compounds[fluid]["Total"] = total
                    self.molar_masses_compounds[fluid]["Cation"] = "H"
        #
        for salt in list(self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].keys()):
            if salt not in self.molar_masses_compounds:
                self.molar_masses_compounds[salt] = {}
                if salt == "NaCl":
                    total = elements_masses["Na"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Na"] = (elements_masses["Na"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Na"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 1
                elif salt == "KCl":
                    total = elements_masses["K"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["K"] = (elements_masses["K"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "K"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 1
                elif salt == "LiCl":
                    total = elements_masses["Li"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Li"] = (elements_masses["Li"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Li"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 1
                elif salt == "MgCl2":
                    total = elements_masses["Mg"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Mg"] = (elements_masses["Mg"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Mg"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 2
                elif salt == "CaCl2":
                    total = elements_masses["Ca"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Ca"] = (elements_masses["Ca"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Ca"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 2
                elif salt == "FeCl2":
                    total = elements_masses["Fe"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Fe"] = (elements_masses["Fe"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Fe"
                    self.molar_masses_compounds[salt]["Cation Charge"] = 2
        #
        for salt in self.molar_masses_compounds:
            if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                var_class = "Chlorides"
            else:
                continue
            #
            for element in list(elements_masses.keys()):
                if self.container_var["fi_setting"]["Salt Correction"][var_class][salt]["State"].get() != 0:
                    if element in self.molar_masses_compounds[salt]:
                        salt_weight = float(
                            self.container_var["fi_setting"]["Salt Correction"][var_class][salt][
                                "Weight"].get())
                        self.helper_nacl_equivalents[element] += int(
                            round(amount_nacl_equiv*salt_weight*self.molar_masses_compounds[salt][element]*
                                  total_ppm, 0))
        #
        for fluid in self.molar_masses_compounds:
            if fluid in ["H2O"]:
                for element in list(elements_masses.keys()):
                    if element in self.molar_masses_compounds[fluid]:
                        self.helper_nacl_equivalents[element] += int(
                            round(amount_fluid*self.molar_masses_compounds[fluid][element]*total_ppm, 0))
        #
        if self.init_fi_chargebalance == False:
            for var_filetype in ["STD", "SMPL"]:
                for var_datatype in ["RAW", "SMOOTHED"]:
                    for index, var_file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                        var_file_long = self.container_lists[var_filetype]["Long"][index]
                        # Intensity Results
                        self.fi_get_intensity(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            mode="All")
                        self.fi_get_intensity_corrected(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_focus=None,
                            mode="All")
                        # Sensitivity Results
                        self.fi_get_analytical_sensitivity(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_file_long=var_file_long, mode="All")
            #
            self.init_fi_chargebalance = True
        #
        if mode == "demonstration":
            helper = []
            for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                file_smpl = self.container_lists["SMPL"]["Long"][index]
                var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                var_nacl_equiv = amount_nacl_equiv*total_ppm
                var_na_true_base = var_nacl_equiv*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"])
                #
                salt_factor = 1
                #
                for salt in self.container_lists["Selected Salts"]:
                    if salt != "NaCl":
                        molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                        element = self.molar_masses_compounds[salt]["Cation"]
                        charge_i = self.molar_masses_compounds[salt]["Cation Charge"]
                        molar_mass_na = elements_masses["Na"]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            key_isotope = re.search("(\D+)(\d+)", isotope)
                            isotope_atom = key_isotope.group(1)
                            #
                            if element == isotope_atom:
                                molar_mass_element = elements_masses[element]
                                try:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["MAT"][isotope]
                                except:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                        file_smpl_short]["MAT"][isotope]
                                #
                                salt_factor += (charge_i/var_sensitivity_i)*(var_intensity_i/var_intensity_na)* \
                                               (molar_mass_na/molar_mass_element)
                        #
                    else:
                        salt_factor += 0
                #
                var_na_true_final = var_na_true_base/salt_factor
                #
                var_concentration_is = round(var_na_true_final, 4)
                helper.append(var_concentration_is)
            #
            try:
                for row in self.tv_salt_cb.get_children():
                    self.tv_salt_cb.delete(row)
            except:
                pass
            #
            self.tv_salt_cb.insert("", tk.END, values=[str("Na"), round(np.mean(helper), 4)])
            #
        elif mode == "default":
            helper = []
            for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                file_smpl = self.container_lists["SMPL"]["Long"][index]
                var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                var_nacl_equiv = amount_nacl_equiv*total_ppm
                var_na_true_base = var_nacl_equiv*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"])
                #
                salt_factor = 1
                #
                for salt in self.container_lists["Selected Salts"]:
                    if salt != "NaCl":
                        molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                        element = self.molar_masses_compounds[salt]["Cation"]
                        charge_i = self.molar_masses_compounds[salt]["Cation Charge"]
                        molar_mass_na = elements_masses["Na"]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            key_isotope = re.search("(\D+)(\d+)", isotope)
                            isotope_atom = key_isotope.group(1)
                            #
                            if element == isotope_atom:
                                molar_mass_element = elements_masses[element]
                                try:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["MAT"][isotope]
                                except:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                        file_smpl_short]["MAT"][isotope]
                                #
                                salt_factor += (charge_i/var_sensitivity_i)*(var_intensity_i/var_intensity_na)*\
                                               (molar_mass_na/molar_mass_element)
                        #
                    else:
                        salt_factor += 0
                #
                var_na_true_final = var_na_true_base/salt_factor
                #
                var_concentration_is = round(var_na_true_final, 4)
                helper.append(var_concentration_is)
                #
                self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
                    var_entr.get())
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)
                #self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is_i)
                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
            #
            self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(
                round(np.mean(helper), 4))
            #
        elif mode == "specific":
            file_smpl = var_file
            file_smpl_short = file_smpl.split("/")[-1]
            var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
            var_nacl_equiv = amount_nacl_equiv*total_ppm
            var_na_true_base = var_nacl_equiv*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"])
            #
            salt_factor = 1
            #
            for salt in self.container_lists["Selected Salts"]:
                if salt != "NaCl":
                    molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                    element = self.molar_masses_compounds[salt]["Cation"]
                    charge_i = self.molar_masses_compounds[salt]["Cation Charge"]
                    molar_mass_na = elements_masses["Na"]
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        key_isotope = re.search("(\D+)(\d+)", isotope)
                        isotope_atom = key_isotope.group(1)
                        #
                        if element == isotope_atom:
                            molar_mass_element = elements_masses[element]
                            try:
                                var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                    file_smpl_short]["INCL"][isotope]
                                var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                    file_smpl_short]["INCL"][var_is_i]
                                var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                    file_smpl_short]["MAT"][isotope]
                            except:
                                var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                    file_smpl_short]["INCL"][isotope]
                                var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                    file_smpl_short]["INCL"][var_is_i]
                                var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                    file_smpl_short]["MAT"][isotope]
                            #
                            salt_factor += (charge_i/var_sensitivity_i)*(var_intensity_i/var_intensity_na)*\
                                           (molar_mass_na/molar_mass_element)
                    #
                else:
                    salt_factor += 0
            #
            var_na_true_final = var_na_true_base/salt_factor
            #
            var_concentration_is = round(var_na_true_final, 4)
            #
            self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)
            #self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is_i)
            self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
    #
    def fi_calculate_massbalance(self, var_entr, mode, var_file, event):
        amount_fluid = (100 - float(var_entr.get()))/100
        amount_nacl_equiv = float(var_entr.get())/100
        total_ppm = 10**6
        #
        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
            elements_masses = {
                "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06, "Cl": 35.45,
                "K": 39.098, "Ca": 40.078, "Fe": 55.845}
        else:
            elements_masses = {
                "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070, "Cl": 35.45,
                "K": 39.100, "Ca": 40.080, "Fe": 55.850}
        #
        self.helper_nacl_equivalents = {}
        #
        for element in list(elements_masses.keys()):
            self.helper_nacl_equivalents[element] = 0
        #
        for fluid in ["H2O"]:
            if fluid not in self.molar_masses_compounds:
                self.molar_masses_compounds[fluid] = {}
                if fluid == "H2O":
                    total = 2*elements_masses["H"] + elements_masses["O"]
                    self.molar_masses_compounds[fluid]["H"] = (2*elements_masses["H"])/total
                    self.molar_masses_compounds[fluid]["O"] = (elements_masses["O"])/total
                    self.molar_masses_compounds[fluid]["Total"] = total
                    self.molar_masses_compounds[fluid]["Cation"] = "H"
        #
        for salt in list(self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].keys()):
            if salt not in self.molar_masses_compounds:
                self.molar_masses_compounds[salt] = {}
                if salt == "NaCl":
                    total = elements_masses["Na"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Na"] = (elements_masses["Na"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Na"
                elif salt == "KCl":
                    total = elements_masses["K"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["K"] = (elements_masses["K"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "K"
                elif salt == "LiCl":
                    total = elements_masses["Li"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Li"] = (elements_masses["Li"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Li"
                elif salt == "MgCl2":
                    total = elements_masses["Mg"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Mg"] = (elements_masses["Mg"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Mg"
                elif salt == "CaCl2":
                    total = elements_masses["Ca"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Ca"] = (elements_masses["Ca"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Ca"
                elif salt == "FeCl2":
                    total = elements_masses["Fe"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Fe"] = (elements_masses["Fe"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                    self.molar_masses_compounds[salt]["Total"] = total
                    self.molar_masses_compounds[salt]["Cation"] = "Fe"
        #
        for salt in self.molar_masses_compounds:
            if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                var_class = "Chlorides"
            else:
                continue
            #
            for element in list(elements_masses.keys()):
                if self.container_var["fi_setting"]["Salt Correction"][var_class][salt]["State"].get() != 0:
                    if element in self.molar_masses_compounds[salt]:
                        salt_weight = float(
                            self.container_var["fi_setting"]["Salt Correction"][var_class][salt][
                                "Weight"].get())
                        self.helper_nacl_equivalents[element] += amount_nacl_equiv*salt_weight*\
                                                                 self.molar_masses_compounds[salt][element]*total_ppm
        #
        for fluid in self.molar_masses_compounds:
            if fluid in ["H2O"]:
                for element in list(elements_masses.keys()):
                    if element in self.molar_masses_compounds[fluid]:
                        self.helper_nacl_equivalents[element] += amount_fluid*\
                                                                 self.molar_masses_compounds[fluid][element]*total_ppm
        #
        if self.init_fi_massbalance == False:
            for var_filetype in ["STD", "SMPL"]:
                for var_datatype in ["RAW", "SMOOTHED"]:
                    for index, var_file_short in enumerate(self.container_lists[var_filetype]["Short"]):
                        var_file_long = self.container_lists[var_filetype]["Long"][index]
                        # Intensity Results
                        self.fi_get_intensity(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            mode="All")
                        self.fi_get_intensity_corrected(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_focus=None,
                            mode="All")
                        # Sensitivity Results
                        self.fi_get_analytical_sensitivity(
                            var_filetype=var_filetype, var_datatype=var_datatype, var_file_short=var_file_short,
                            var_file_long=var_file_long, mode="All")
            #
            self.init_fi_massbalance = True
        #
        if mode == "demonstration":
            helper = []
            for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                file_smpl = self.container_lists["SMPL"]["Long"][index]
                var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                var_na_equiv = self.molar_masses_compounds["NaCl"]["Na"]*amount_nacl_equiv*total_ppm
                var_na_true_base = var_na_equiv
                var_salt_contribution = 0
                #
                for salt in self.container_lists["Selected Salts"]:
                    if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                        var_weigth = float(
                            self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].get())
                        var_weight_sum = var_weigth*elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"]
                    #
                    if salt != "NaCl":
                        molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                        element = self.molar_masses_compounds[salt]["Cation"]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            key_isotope = re.search("(\D+)(\d+)", isotope)
                            isotope_atom = key_isotope.group(1)
                            #
                            if element == isotope_atom:
                                molar_mass_element = elements_masses[element]
                                try:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["MAT"][isotope]
                                except:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                        file_smpl_short]["MAT"][isotope]
                                #
                                var_salt_contribution += var_weight_sum*(var_intensity_i/var_intensity_na)* \
                                                         (1/var_sensitivity_i)*(molar_mass_salt/molar_mass_element)
                        #
                    else:
                        var_na_true_base *= 1
                #
                var_salt_contribution_final = var_salt_contribution + 1
                var_concentration_is = var_na_true_base/var_salt_contribution_final
                helper.append(var_concentration_is)
            #
            try:
                for row in self.tv_salt.get_children():
                    self.tv_salt.delete(row)
            except:
                pass
            #
            self.tv_salt.insert("", tk.END, values=[str("Na"), round(np.mean(helper), 4)])
            #
        elif mode == "default":
            helper = []
            for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                file_smpl = self.container_lists["SMPL"]["Long"][index]
                var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
                var_na_equiv = self.molar_masses_compounds["NaCl"]["Na"]*amount_nacl_equiv*total_ppm
                var_na_true_base = var_na_equiv
                var_salt_contribution = 0
                #
                for salt in self.container_lists["Selected Salts"]:
                    if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                        var_weigth = float(
                            self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].get())
                        var_weight_sum = var_weigth*elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"]
                    #
                    if salt != "NaCl":
                        molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                        element = self.molar_masses_compounds[salt]["Cation"]
                        #
                        for isotope in self.container_lists["ISOTOPES"]:
                            key_isotope = re.search("(\D+)(\d+)", isotope)
                            isotope_atom = key_isotope.group(1)
                            #
                            if element == isotope_atom:
                                molar_mass_element = elements_masses[element]
                                try:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                        file_smpl_short]["MAT"][isotope] # SMOOTHED
                                except:
                                    var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][isotope]
                                    var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                        file_smpl_short]["INCL"][var_is_i]
                                    var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                        file_smpl_short]["MAT"][isotope]
                                #
                                var_salt_contribution += var_weight_sum*(var_intensity_i/var_intensity_na)* \
                                                         (1/var_sensitivity_i)*(molar_mass_salt/molar_mass_element)
                        #
                    else:
                        var_na_true_base *= 1
                #
                var_salt_contribution_final = var_salt_contribution + 1
                var_concentration_is = round(var_na_true_base/var_salt_contribution_final, 4)
                #var_concentration_is = var_na_true_base
                helper.append(var_concentration_is)
                #
                self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
                    var_entr.get())
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)
                self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is_i)
                self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
            #
            self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(round(np.mean(helper), 4))
            #
        elif mode == "specific":
            file_smpl = var_file
            file_smpl_short = file_smpl.split("/")[-1]
            var_is_i = self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].get()
            var_na_equiv = self.molar_masses_compounds["NaCl"]["Na"]*amount_nacl_equiv*total_ppm
            var_na_true_base = var_na_equiv
            var_salt_contribution = 0
            #
            for salt in self.container_lists["Selected Salts"]:
                if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                    var_weigth = float(
                        self.container_var["fi_setting"]["Salt Correction"]["Chlorides"][salt]["Weight"].get())
                    var_weight_sum = var_weigth*(elements_masses["Na"]/self.molar_masses_compounds["NaCl"]["Total"])
                #
                if salt != "NaCl":
                    molar_mass_salt = self.molar_masses_compounds[salt]["Total"]
                    element = self.molar_masses_compounds[salt]["Cation"]
                    #
                    for isotope in self.container_lists["ISOTOPES"]:
                        key_isotope = re.search("(\D+)(\d+)", isotope)
                        isotope_atom = key_isotope.group(1)
                        #
                        if element == isotope_atom:
                            molar_mass_element = elements_masses[element]
                            try:
                                var_intensity_i = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                    file_smpl_short]["INCL"][isotope]
                                var_intensity_na = self.container_intensity_corrected["SMPL"]["SMOOTHED"][
                                    file_smpl_short]["INCL"][var_is_i]
                                var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["SMOOTHED"][
                                    file_smpl_short]["MAT"][isotope]
                            except:
                                var_intensity_i = self.container_intensity_corrected["SMPL"]["RAW"][
                                    file_smpl_short]["INCL"][isotope]
                                var_intensity_na = self.container_intensity_corrected["SMPL"]["RAW"][
                                    file_smpl_short]["INCL"][var_is_i]
                                var_sensitivity_i = self.container_analytical_sensitivity["SMPL"]["RAW"][
                                    file_smpl_short]["MAT"][isotope]
                            #
                            var_salt_contribution += var_weight_sum*(var_intensity_i/var_intensity_na)*\
                                                     (1/var_sensitivity_i)*(molar_mass_salt/molar_mass_element)
                    #
                else:
                    var_na_true_base *= 1
            #
            var_salt_contribution_final = var_salt_contribution + 1
            #
            var_concentration_is = round(var_na_true_base/var_salt_contribution_final, 4)
            #
            self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)
            self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)
    #
    def fi_set_concentration_is_massbalance(self, event):
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set("unknown")
            self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(
                self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())
    #
    def fi_set_concentration_is_chargebalance(self, event):
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set("unknown")
            self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(
                self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get())
    #
    def fi_calculate_halite_equivalents(self, var_entr, mode, var_file, event):
        if self.container_var["General Settings"]["Calculation Accuracy"].get() == 1:
            elements_masses = {
                "H": 1.008, "Li": 6.94, "C": 12.011, "O": 15.999, "Na": 22.99, "Mg": 24.305, "S": 32.06, "Cl": 35.45,
                "K": 39.098, "Ca": 40.078, "Fe": 55.845}
        else:
            elements_masses = {
                "H": 1.008, "Li": 6.941, "C": 12.010, "O": 16.000, "Na": 22.990, "Mg": 24.300, "S": 32.070, "Cl": 35.45,
                "K": 39.100, "Ca": 40.080, "Fe": 55.850}
        #
        total_ppm = 10**6
        amount_fluid = (100 - float(var_entr.get()))/100
        amount_nacl_equiv = float(var_entr.get())
        self.helper_nacl_equivalents = {}
        for element in list(elements_masses.keys()):
            self.helper_nacl_equivalents[element] = 0
        #
        for fluid in ["H2O"]:
            if fluid not in self.molar_masses_compounds:
                self.molar_masses_compounds[fluid] = {}
                if fluid == "H2O":
                    total = 2*elements_masses["H"] + elements_masses["O"]
                    self.molar_masses_compounds[fluid]["H"] = (2*elements_masses["H"])/total
                    self.molar_masses_compounds[fluid]["O"] = (elements_masses["O"])/total
        #
        for salt in list(self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].keys()):
            if salt not in self.molar_masses_compounds:
                self.molar_masses_compounds[salt] = {}
                if salt == "NaCl":
                    total = elements_masses["Na"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Na"] = (elements_masses["Na"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                elif salt == "KCl":
                    total = elements_masses["K"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["K"] = (elements_masses["K"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                elif salt == "LiCl":
                    total = elements_masses["Li"] + elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Li"] = (elements_masses["Li"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (elements_masses["Cl"])/total
                elif salt == "MgCl2":
                    total = elements_masses["Mg"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Mg"] = (elements_masses["Mg"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                elif salt == "CaCl2":
                    total = elements_masses["Ca"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Ca"] = (elements_masses["Ca"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
                elif salt == "FeCl2":
                    total = elements_masses["Fe"] + 2*elements_masses["Cl"]
                    self.molar_masses_compounds[salt]["Fe"] = (elements_masses["Fe"])/total
                    self.molar_masses_compounds[salt]["Cl"] = (2*elements_masses["Cl"])/total
        #
        for salt in self.molar_masses_compounds:
            if salt in self.container_var["fi_setting"]["Salt Correction"]["Chlorides"]:
                var_class = "Chlorides"
            else:
                continue
            #
            for element in list(elements_masses.keys()):
                if self.container_var["fi_setting"]["Salt Correction"][var_class][salt]["State"].get() != 0:
                    if element in self.molar_masses_compounds[salt]:
                        salt_weight = float(
                            self.container_var["fi_setting"]["Salt Correction"][var_class][salt]["Weight"].get())
                        self.helper_nacl_equivalents[element] += int(
                            round(0.01*amount_nacl_equiv*salt_weight*self.molar_masses_compounds[salt][element]*
                                  total_ppm, 0))
        #
        for fluid in self.molar_masses_compounds:
            if fluid in ["H2O"]:
                for element in list(elements_masses.keys()):
                    if element in self.molar_masses_compounds[fluid]:
                        self.helper_nacl_equivalents[element] += int(
                            round(amount_fluid*self.molar_masses_compounds[fluid][element]*total_ppm, 0))
        #
        if mode == "demonstration":
            try:
                for row in self.tv_salt.get_children():
                    self.tv_salt.delete(row)
            except:
                pass
            #
            for key, value in self.helper_nacl_equivalents.items():
                if value > 0:
                    self.tv_salt.insert("", tk.END, values=[str(key), int(value)])
            #
        elif mode == "default":
            for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
                file_smpl = self.container_lists["SMPL"]["Long"][index]
                #
                self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(
                    var_entr.get())
                var_is = self.container_var["SMPL"][file_smpl]["IS"].get()
                #
                if var_is != "Select IS":
                    key_element = re.search("(\D+)(\d+)", var_is)
                    element = key_element.group(1)
                    #
                    var_concentration_is = self.helper_nacl_equivalents[element]
                    #
                    self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].set(
                        var_concentration_is)
                    self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)
                    self.container_var["SMPL"][file_smpl]["IS Data"]["IS"].set(var_is)
                    self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"].set(var_concentration_is)

            #
        elif mode == "specific":
            file_parts = var_file.split("/")
            file_smpl_short = file_parts[-1]
            #
            self.container_var["fi_setting"]["Salt Correction"]["Salinity SMPL"][file_smpl_short].set(var_entr.get())
            var_is = self.container_var["SMPL"][var_file]["IS"].get()
            #
            if var_is != "Select IS":
                key_element = re.search("(\D+)(\d+)", var_is)
                element = key_element.group(1)
                #
                var_concentration_is = self.helper_nacl_equivalents[element]
                #
                self.container_files["SMPL"][file_smpl_short]["IS Concentration"].set(var_concentration_is)
                self.container_var["SMPL"][var_file]["IS Data"]["IS"].set(var_is)
                self.container_var["SMPL"][var_file]["IS Data"]["Concentration"].set(var_concentration_is)
    #
    def fi_charge_balance(self):
        if "IS" not in self.container_optionmenu["SMPL"]:
            self.container_optionmenu["SMPL"]["IS"] = {}
        #
        ## Window Settings
        window_width = 1020
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_chargebalance = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_chargebalance.title("FLUID INCLUSION ANALYSIS - Charge Balance")
        subwindow_fi_inclusion_chargebalance.geometry(var_geometry)
        subwindow_fi_inclusion_chargebalance.resizable(False, False)
        subwindow_fi_inclusion_chargebalance["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_chargebalance, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_chargebalance, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_chargebalance.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_chargebalance.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        start_chlorides = 1
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column,
            n_rows=n_rows - 1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_frame(relief=tk.SOLID)
        #
        ## LABELS
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Composition: H2O + ...", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_chlorides, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Chlorides", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column + 13, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="NaCl Equivalents Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 1, column_id=start_column + 13, n_rows=1,
            n_columns=7, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Salinity (in wt.%)", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row, column_id=start_column + 26, n_rows=1,
            n_columns=24,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 26,
            n_rows=1, n_columns=6, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Default Setup", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## CHECKBOXES
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].items(), start=1):
            cb_01_i = SE(
                parent=subwindow_fi_inclusion_chargebalance, row_id=start_chlorides + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            entr_01_i = SE(
                parent=subwindow_fi_inclusion_chargebalance, row_id=start_chlorides + index, column_id=start_column + 7,
                n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        ## ENTRIES
        entr_04a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 1, column_id=start_column + 20, n_rows=1,
            n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
                           mode="demonstration", var_file=None:
            self.fi_calculate_chargebalance(var_entr, mode, var_file, event))
        entr_05a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 38,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
                           mode="default", var_file=None:
            self.fi_calculate_chargebalance(var_entr, mode, var_file, event))
        entr_05b = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 44,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get(),
            command=self.fi_set_concentration_is_chargebalance)
        #
        ## OPTION MENUS
        opt_05a = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=n_rows - 2,
            column_id=start_column + 32,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
            option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_var["fi_setting"]["Salt Correction"]["Default IS"].get(),
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
                           var_key="SMPL":
            self.fi_change_is_default(var_opt, var_key))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_is_smpl_def = opt_05a
        #
        ## TREEVIEW
        n_rows_tv = n_rows - 3
        self.tv_salt_cb = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 2, column_id=start_column + 13,
            n_rows=n_rows_tv,
            n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["90", "150"], individual=True)
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_inclusion_chargebalance, row_id=start_row + 1, column_id=start_column + 26,
            n_rows=n_rows - 3, n_columns=24, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            # before: self.container_var["SMPL"][file_smpl]["IS"]
            opt_is_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"],
                *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.bg_colors["Dark Font"],
                                    activebackground=self.accent_color)
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            self.container_optionmenu["SMPL"]["IS"][file_smpl] = opt_is_i
            #
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            entr_i = tk.Entry(frm_smpl, textvariable=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short])
            entr_i.bind("<Return>", lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short], mode="specific", var_file=file_smpl:
            self.fi_calculate_chargebalance(var_entr, mode, var_file, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\t")
            # before: self.container_files["SMPL"][file_smpl_short]["IS Concentration"]
            entr_i = tk.Entry(frm_smpl,
                              textvariable=self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
        ## INITIALIZATION
        self.fi_check_elements_checkbutton()
    #
    def fi_mass_balance(self):
        # self.fi_get_intensities(var_key="STD")
        # self.fi_get_intensities(var_key="SMPL")
        # self.fi_calculate_intensity_ratios(var_key="STD")
        # self.fi_calculate_intensity_ratios(var_key="SMPL")
        # self.fi_calculate_analytical_sensitivities(var_key="STD")
        # self.fi_calculate_analytical_sensitivities(var_key="SMPL")
        #
        if "IS" not in self.container_optionmenu["SMPL"]:
            self.container_optionmenu["SMPL"]["IS"] = {}
        #
        ## Window Settings
        window_width = 1020
        window_heigth = 400
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_massbalance = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_massbalance.title("FLUID INCLUSION ANALYSIS - Mass Balance")
        subwindow_fi_inclusion_massbalance.geometry(var_geometry)
        subwindow_fi_inclusion_massbalance.resizable(False, False)
        subwindow_fi_inclusion_massbalance["bg"] = self.bg_colors["Very Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_massbalance, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_massbalance, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_massbalance.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_massbalance.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        start_chlorides = 1
        #
        ## FRAMES
        frm_00 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column,
            n_rows=n_rows - 1, n_columns=12, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_frame(relief=tk.SOLID)
        #
        ## LABELS
        lbl_00a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Composition: H2O + ...", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_chlorides, column_id=start_column, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Chlorides", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_00b = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column + 13, n_rows=1,
            n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="NaCl Equivalents Calculation", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 1, column_id=start_column + 13, n_rows=1,
            n_columns=7, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Salinity (in wt.%)", relief=tk.GROOVE, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row, column_id=start_column + 26, n_rows=1,
            n_columns=24,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Very Dark"]).create_simple_label(
            text="Sample Files", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 26,
            n_rows=1, n_columns=6, fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Default Setup", relief=tk.GROOVE, fontsize="sans 10 bold")
        #
        ## CHECKBOXES
        for index, (salt, var_cb) in enumerate(
                self.container_var["fi_setting"]["Salt Correction"]["Chlorides"].items(), start=1):
            cb_01_i = SE(
                parent=subwindow_fi_inclusion_massbalance, row_id=start_chlorides + index, column_id=start_column + 1,
                fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=6,
                bg=self.bg_colors["Light"]).create_simple_checkbox(
                var_cb=var_cb["State"], text=salt, set_sticky="nesw", own_color=True,
                command=self.fi_check_elements_checkbutton)
            default_entr = var_cb["Weight"].get()
            entr_01_i = SE(
                parent=subwindow_fi_inclusion_massbalance, row_id=start_chlorides + index, column_id=start_column + 7,
                n_rows=1,
                n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
                var=var_cb["Weight"], text_default=default_entr)
        #
        ## ENTRIES
        entr_04a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 1, column_id=start_column + 20, n_rows=1,
            n_columns=5, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Salinity"],
                           mode="demonstration", var_file=None:
            self.fi_calculate_massbalance(var_entr, mode, var_file, event))
        entr_05a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 38,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"].get(),
            command=lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"]["Default Salinity"],
                           mode="default", var_file=None:
            self.fi_calculate_massbalance(var_entr, mode, var_file, event))
        entr_05b = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 44,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_entry(
            var=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"],
            text_default=self.container_var["fi_setting"]["Salt Correction"]["Default Concentration"].get(),
            command=self.fi_set_concentration_is_massbalance)
        #
        ## OPTION MENUS
        opt_05a = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=n_rows - 2, column_id=start_column + 32,
            n_rows=1, n_columns=6, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Light"]).create_option_isotope(
            var_iso=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
            option_list=self.container_lists["ISOTOPES"],
            text_set=self.container_var["fi_setting"]["Salt Correction"]["Default IS"].get(),
            fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
            command=lambda var_opt=self.container_var["fi_setting"]["Salt Correction"]["Default IS"],
                           var_key="SMPL":
            self.fi_change_is_default(var_opt, var_key))
        opt_05a["menu"].config(
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color)
        opt_05a.config(
            bg=self.bg_colors["Light"], fg=self.bg_colors["Very Dark"],
            activeforeground=self.bg_colors["Dark Font"],
            activebackground=self.accent_color, highlightthickness=0)
        #
        self.opt_is_smpl_def = opt_05a
        #
        ## TREEVIEW
        n_rows_tv = n_rows - 3
        self.tv_salt = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 2, column_id=start_column + 13,
            n_rows=n_rows_tv, n_columns=12, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["White"]).create_treeview(
            n_categories=2, text_n=["Element", "Concentration (ppm)"], width_n=["90", "150"], individual=True)
        #
        ## SAMPLE FILES
        frm_smpl = SE(
            parent=subwindow_fi_inclusion_massbalance, row_id=start_row + 1, column_id=start_column + 26,
            n_rows=n_rows - 3, n_columns=24, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame()
        vsb_smpl = tk.Scrollbar(master=frm_smpl, orient="vertical")
        text_smpl = tk.Text(
            master=frm_smpl, width=30, height=25, yscrollcommand=vsb_smpl.set, bg=self.bg_colors["Very Light"])
        vsb_smpl.config(command=text_smpl.yview)
        vsb_smpl.pack(side="right", fill="y")
        text_smpl.pack(side="left", fill="both", expand=True)
        #
        for index, file_smpl_short in enumerate(self.container_lists["SMPL"]["Short"]):
            file_smpl = self.container_lists["SMPL"]["Long"][index]
            lbl_i = tk.Label(frm_smpl, text=file_smpl_short, bg=self.bg_colors["Very Light"],
                             fg=self.bg_colors["Dark Font"])
            text_smpl.window_create("end", window=lbl_i)
            text_smpl.insert("end", "\t")
            # before: self.container_var["SMPL"][file_smpl]["IS"]
            opt_is_i = tk.OptionMenu(
                frm_smpl, self.container_var["SMPL"][file_smpl]["IS Data"]["IS"],
                *self.container_lists["ISOTOPES"])
            opt_is_i["menu"].config(fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"],
                                    activeforeground=self.bg_colors["Dark Font"],
                                    activebackground=self.accent_color)
            opt_is_i.config(bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"],
                            activeforeground=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                            highlightthickness=0)
            self.container_optionmenu["SMPL"]["IS"][file_smpl] = opt_is_i
            #
            text_smpl.window_create("end", window=opt_is_i)
            text_smpl.insert("end", " \t")
            #
            entr_i = tk.Entry(frm_smpl, textvariable=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short])
            entr_i.bind("<Return>", lambda event, var_entr=self.container_var["fi_setting"]["Salt Correction"][
                "Salinity SMPL"][file_smpl_short], mode="specific", var_file=file_smpl:
            self.fi_calculate_massbalance(var_entr, mode, var_file, event))
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\t")
            # before: self.container_files["SMPL"][file_smpl_short]["IS Concentration"]
            entr_i = tk.Entry(frm_smpl,
                              textvariable=self.container_var["SMPL"][file_smpl]["IS Data"]["Concentration"])
            text_smpl.window_create("insert", window=entr_i)
            text_smpl.insert("end", "\n")
        #
        ## INITIALIZATION
        self.fi_check_elements_checkbutton()
    #
    def fi_inclusion_setup_plugin(self):
        ## Window Settings
        window_width = 680
        window_heigth = 280
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth/row_min)
        column_min = 20
        n_columns = int(window_width/column_min)
        #
        subwindow_fi_inclusion_plugin = tk.Toplevel(self.parent)
        subwindow_fi_inclusion_plugin.title("FLUID INCLUSION ANALYSIS -  Plugin-based Inclusion Setup")
        subwindow_fi_inclusion_plugin.geometry(var_geometry)
        subwindow_fi_inclusion_plugin.resizable(False, False)
        subwindow_fi_inclusion_plugin["bg"] = self.bg_colors["Super Dark"]
        #
        for x in range(n_columns):
            tk.Grid.columnconfigure(subwindow_fi_inclusion_plugin, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(subwindow_fi_inclusion_plugin, y, weight=1)
        #
        # Rows
        for i in range(0, n_rows):
            subwindow_fi_inclusion_plugin.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            subwindow_fi_inclusion_plugin.grid_columnconfigure(i, minsize=column_min)
        #
        start_row = 0
        start_column = 0
        #
        ## FRAMES
        #
        ## LABELS
        lbl_01 = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row, column_id=start_column, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="LA-ICP-MS Data Export", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row, column_id=start_column + 11, n_rows=1, n_columns=10,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Import Plugin Data", relief=tk.FLAT, fontsize="sans 10 bold")
        #
        ## CHECKBOXES
        var_cb_01a = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity BG"]
        var_cb_01b = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity MAT"]
        var_cb_01c = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity MIX"]
        var_cb_01d = self.container_var["fi_setting"]["Inclusion Plugin"]["Intensity INCL"]
        var_cb_01e = self.container_var["fi_setting"]["Inclusion Plugin"]["Analytical Sensitivity"]
        var_cb_01f = self.container_var["fi_setting"]["Inclusion Plugin"]["Concentration SRM"]
        #
        cb_01a = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 1, column_id=start_column,
            fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
            var_cb=var_cb_01a, text="Intensity (Background)", set_sticky="nesw", own_color=True)
        cb_01b = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 2, column_id=start_column,
            fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
            var_cb=var_cb_01b, text="Intensity (Matrix)", set_sticky="nesw", own_color=True)
        cb_01c = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 3, column_id=start_column,
            fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
            var_cb=var_cb_01c, text="Intensity (Mix)", set_sticky="nesw", own_color=True)
        cb_01d = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 4, column_id=start_column,
            fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
            var_cb=var_cb_01d, text="Intensity (Inclusion)", set_sticky="nesw", own_color=True)
        cb_01e = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 5, column_id=start_column,
            fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
            var_cb=var_cb_01e, text="Analytical Sensitivity", set_sticky="nesw", own_color=True)
        cb_01f = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 6, column_id=start_column,
            fg=self.bg_colors["Dark Font"], n_rows=1, n_columns=10, bg=self.bg_colors["Light"]).create_simple_checkbox(
            var_cb=var_cb_01f, text="Concentration (SRM)", set_sticky="nesw", own_color=True)
        #
        cb_01a.configure(font="sans 10")
        cb_01b.configure(font="sans 10")
        cb_01c.configure(font="sans 10")
        cb_01d.configure(font="sans 10")
        cb_01e.configure(font="sans 10")
        cb_01f.configure(font="sans 10")
        #
        ## BUTTONS
        btn_01h = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 7, column_id=start_column, n_rows=1, n_columns=10,
            fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Export Data", bg_active=self.accent_color, fg_active=self.colors_fi["Dark Font"])
        btn_02a = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 1, column_id=start_column + 11, n_rows=1,
            n_columns=10, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Import Data", bg_active=self.accent_color, fg_active=self.colors_fi["Dark Font"])
        #
        ## TREEVIEWS
        list_categories = ["Filename", "Internal Standard", "Concentration (ppm)"]
        list_width = list(120*np.ones(len(list_categories)))
        list_width = [int(item) for item in list_width]
        list_width[0] = 150
        list_width[-1] = 150
        #
        self.tv_inclusion_plugin_import = SE(
            parent=subwindow_fi_inclusion_plugin, row_id=start_row + 2, column_id=start_column + 11, n_rows=8,
            n_columns=21, fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Very Light"]).create_treeview(
            n_categories=len(list_categories), text_n=list_categories, width_n=list_width, individual=True)
        #
        scb_v = ttk.Scrollbar(subwindow_fi_inclusion_plugin, orient="vertical")
        self.tv_inclusion_plugin_import.configure(yscrollcommand=scb_v.set)
        scb_v.config(command=self.tv_inclusion_plugin_import.yview)
        scb_v.grid(row=start_row + 2, column=start_column + 11 + 21, rowspan=8, columnspan=1, sticky="ns")
    #
    ## SPIKE ELIMINATION
    #
    def select_spike_elimination(self, var_opt, start_row, mode="FI"):
        ## COLORS
        bg_light = self.bg_colors["Very Light"]
        bg_medium = self.bg_colors["Light"]
        #
        if self.pysills_mode == "MA":
            var_parent = self.subwindow_ma_settings
            var_row_correction = -1
            var_alpha = self.container_var["ma_setting"]["SE Alpha"]
            var_threshold = self.container_var["ma_setting"]["SE Threshold"]
        elif self.pysills_mode == "FI":
            var_parent = self.subwindow_fi_settings
            var_row_correction = 0
            var_alpha = self.container_var["fi_setting"]["SE Alpha"]
            var_threshold = self.container_var["fi_setting"]["SE Threshold"]
        elif self.pysills_mode == "MI":
            var_parent = self.subwindow_mi_settings
            var_row_correction = 0
            var_alpha = self.container_var["mi_setting"]["SE Alpha"]
            var_threshold = self.container_var["mi_setting"]["SE Threshold"]
        #
        start_row = start_row + 1 + var_row_correction
        #
        if var_opt in ["Grubbs-Test (SILLS)", "Grubbs-Test"]:
            ## GUI
            # Labels
            lbl_09c = SE(
                parent=var_parent, row_id=start_row + 3, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
                text="Significance Level", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_09d = SE(
                parent=var_parent, row_id=start_row + 4, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
                text="Threshold", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_09e = SE(
                parent=var_parent, row_id=start_row + 5, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
                text="Standard Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            lbl_09f = SE(
                parent=var_parent, row_id=start_row + 6, column_id=0, n_rows=1, n_columns=7,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_label(
                text="Sample Files", relief=tk.GROOVE, fontsize="sans 10 bold")
            #
            # Entries
            var_entr_09c_default = "0.05"
            entr_09c = SE(
                parent=var_parent, row_id=start_row + 3, column_id=7, n_rows=1, n_columns=11,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
                var=var_alpha, text_default=var_entr_09c_default)
            var_entr_09d_default = "1000"
            entr_09d = SE(
                parent=var_parent, row_id=start_row + 4, column_id=7, n_rows=1, n_columns=11,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_entry(
                var=var_threshold, text_default=var_entr_09d_default)
            #
            # Buttons
            btn_09e1 = SE(
                parent=var_parent, row_id=start_row + 5, column_id=7, n_rows=1, n_columns=5,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
                text="Apply to all", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda filetype="STD", algorithm="Grubbs": self.spike_elimination_all(filetype, algorithm))
            btn_09e2 = SE(
                parent=var_parent, row_id=start_row + 5, column_id=12, n_rows=1, n_columns=5,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
                text="Check", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="STD": self.custom_spike_check(mode))
            btn_09f1 = SE(
                parent=var_parent, row_id=start_row + 6, column_id=7, n_rows=1, n_columns=5,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
                text="Apply to all", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda filetype="SMPL", algorithm="Grubbs": self.spike_elimination_all(filetype, algorithm))
            btn_09f2 = SE(
                parent=var_parent, row_id=start_row + 6, column_id=12, n_rows=1, n_columns=5,
                fg=self.bg_colors["Very Dark"], bg=bg_medium).create_simple_button(
                text="Check", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="SMPL": self.custom_spike_check(mode))
            btn_09g = SE(
                parent=var_parent, row_id=start_row + 7, column_id=7, n_rows=1, n_columns=11,
                fg=self.colors_fi["Dark Font"], bg=self.colors_fi["Medium"]).create_simple_button(
                text="Confirm all spikes", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"])
            #
            # Frames
            self.frm_09e = SE(
                parent=var_parent, row_id=start_row + 5, column_id=17, n_rows=1, n_columns=1,
                fg=self.bg_colors["Very Dark"], bg=self.sign_red).create_frame(relief=tk.SOLID)
            self.frm_09e.config(highlightbackground="black", bd=1)
            self.frm_09f = SE(
                parent=var_parent, row_id=start_row + 6, column_id=17, n_rows=1, n_columns=1,
                fg=self.bg_colors["Very Dark"], bg=self.sign_red).create_frame(relief=tk.SOLID)
            self.frm_09f.config(highlightbackground="black", bd=1)

    def custom_spike_check(self, mode="SMPL"):
        ## Window Settings
        window_width = 900
        window_heigth = 600
        var_geometry = str(window_width) + "x" + str(window_heigth) + "+" + str(0) + "+" + str(0)
        #
        row_min = 25
        n_rows = int(window_heigth / row_min)
        column_min = 20
        n_columns = int(window_width / column_min)

        self.subwindow_spike_check = tk.Toplevel(self.parent)
        if self.pysills_mode == "MA":
            self.subwindow_spike_check.title("MINERAL ANALYSIS -  Spike Check")
        elif self.pysills_mode == "FI":
            self.subwindow_spike_check.title("FLUID INCLUSION ANALYSIS -  Spike Check")
        elif self.pysills_mode == "MI":
            self.subwindow_spike_check.title("MELT INCLUSION ANALYSIS -  Spike Check")
        self.subwindow_spike_check.geometry(var_geometry)
        self.subwindow_spike_check.resizable(False, False)
        self.subwindow_spike_check["bg"] = self.bg_colors["Super Dark"]

        for x in range(n_columns):
            tk.Grid.columnconfigure(self.subwindow_spike_check, x, weight=1)
        for y in range(n_rows):
            tk.Grid.rowconfigure(self.subwindow_spike_check, y, weight=1)

        # Rows
        for i in range(0, n_rows):
            self.subwindow_spike_check.grid_rowconfigure(i, minsize=row_min)
        # Columns
        for i in range(0, n_columns):
            self.subwindow_spike_check.grid_columnconfigure(i, minsize=column_min)

        start_row = 0
        start_column = 0

        var_list_files = self.container_lists[mode]["Short"]
        self.current_file_id = 0
        self.currest_file_spk = var_list_files[self.current_file_id]
        self.current_original_value = 0
        self.current_suggested_value = 0
        self.current_current_value = 0
        self.current_nspikes = 0
        list_spk_isotopes = self.check_spikes_isotope()

        ## FRAMES
        frm_smpl = SE(
            parent=self.subwindow_spike_check, row_id=start_row, column_id=start_column + 13, n_rows=n_rows,
            n_columns=n_columns - 13, fg=self.bg_colors["Dark Font"],
            bg=self.bg_colors["Very Light"]).create_frame(relief=tk.FLAT)

        ## LABELS
        lbl_01 = SE(
            parent=self.subwindow_spike_check, row_id=start_row, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="File selection", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_01a = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 1, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text=self.currest_file_spk, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_02 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 3, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Isotope selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 9, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike correction", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03a1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 10, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Original value", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_03a = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 10, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_original_value, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03b1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 11, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Smoothed value", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_03b = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 11, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_suggested_value, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_03c1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 12, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Current value", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_03c = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 12, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_current_value, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 5, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Spike selection", relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_04a1 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 6, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Dark"]).create_simple_label(
            text="Number of spikes", relief=tk.FLAT, fontsize="sans 10 bold")
        self.lbl_04a2 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 6, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Light Font"], bg=self.accent_color).create_simple_label(
            text=self.current_nspikes, relief=tk.FLAT, fontsize="sans 10 bold")
        lbl_05 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 13, column_id=start_column, n_rows=1, n_columns=12,
            fg=self.bg_colors["Light Font"], bg=self.bg_colors["Super Dark"]).create_simple_label(
            text="Value selection", relief=tk.FLAT, fontsize="sans 10 bold")

        ## BUTTONS
        btn_01 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 2, column_id=start_column, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Before", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="Before": self.change_file_spk(mode))
        btn_02 = SE(
            parent=self.subwindow_spike_check, row_id=start_row + 2, column_id=start_column + 6, n_rows=1, n_columns=6,
            fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
            text="Next", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
            command=lambda mode="Next": self.change_file_spk(mode))
        if len(list_spk_isotopes) > 0:
            btn_05a1 = SE(
                parent=self.subwindow_spike_check, row_id=start_row + 14, column_id=start_column, n_rows=1, n_columns=6,
                fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Original value", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="RAW": self.replace_spike_value(mode))
            btn_05a2 = SE(
                parent=self.subwindow_spike_check, row_id=start_row + 14, column_id=start_column + 6, n_rows=1,
                n_columns=6, fg=self.bg_colors["Very Dark"], bg=self.bg_colors["Light"]).create_simple_button(
                text="Smoothed value", bg_active=self.accent_color, fg_active=self.bg_colors["Dark Font"],
                command=lambda mode="SMOOTHED": self.replace_spike_value(mode))

        ## SCALES
        if len(list_spk_isotopes) > 0:
            self.scl_01 = tk.Scale(
                self.subwindow_spike_check, from_=1, to=10, tickinterval=1, orient=tk.HORIZONTAL,
                background=self.bg_colors["Light"], foreground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color, troughcolor=self.bg_colors["Dark"], highlightthickness=0,
                command=self.change_spk_id)
            self.scl_01.grid(row=start_row + 7, column=start_column, rowspan=2, columnspan=12, sticky="nesw")

        ## OPTION MENUS
        self.var_opt_spk_iso = tk.StringVar()
        self.var_opt_spk_iso.set("Select isotope")
        if len(list_spk_isotopes) > 0:
            self.current_isotope = list_spk_isotopes[0]
        else:
            self.current_isotope = "No isotope"
        var_opt_is_default = self.current_isotope

        if len(list_spk_isotopes) > 0:
            self.opt_02a = SE(
                parent=self.subwindow_spike_check, row_id=start_row + 4, column_id=start_column, n_rows=1, n_columns=12,
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"]).create_option_isotope(
                var_iso=self.var_opt_spk_iso, option_list=list_spk_isotopes, text_set=var_opt_is_default,
                fg_active=self.bg_colors["Dark Font"], bg_active=self.accent_color,
                command=lambda var_opt_iso=self.var_opt_spk_iso: self.change_spk_isotope(var_opt_iso))
            self.opt_02a["menu"].config(
                fg=self.bg_colors["Dark Font"], bg=self.bg_colors["Light"], activeforeground=self.bg_colors["Dark Font"],
                activebackground=self.accent_color)
            self.opt_02a.config(
                bg=self.bg_colors["Light"], fg=self.bg_colors["Dark Font"], activebackground=self.accent_color,
                activeforeground=self.bg_colors["Dark Font"], highlightthickness=0)

        ## INITIALIZATION
        if len(list_spk_isotopes) > 0:
            self.show_spike_data(mode=mode)

    def check_spikes_isotope(self, var_file=None):
        if var_file == None:
            var_file = self.currest_file_spk
        else:
            var_file = var_file

        helper_list = []

        for var_isotope in self.container_lists["ISOTOPES"]:
            list_indices = self.container_spikes[var_file][var_isotope]["Indices"]
            if len(list_indices) > 0:
                helper_list.append(var_isotope)

        return helper_list

    def show_spike_data(self, mode=None):
        var_isotope = self.var_opt_spk_iso.get()
        var_file = self.currest_file_spk
        self.list_indices = self.container_spikes[var_file][var_isotope]["Indices"]
        if len(self.list_indices) < 16:
            n_ticks = 1
        else:
            if len(self.list_indices) < 31:
                n_ticks = 2
            elif len(self.list_indices) < 51:
                n_ticks = 5
            else:
                n_ticks = 8
        self.scl_01.configure(to=len(self.list_indices), tickinterval=n_ticks)
        self.current_nspikes = len(self.list_indices)
        self.lbl_04a2.configure(text=self.current_nspikes)

        value_0 = self.list_indices[0]
        self.current_original_value = self.container_spikes[var_file][var_isotope]["Data RAW"][value_0]
        self.current_suggested_value = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][value_0]
        self.current_current_value = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][value_0]
        self.lbl_03a.configure(text=self.current_original_value)
        self.lbl_03b.configure(text=self.current_suggested_value)
        self.lbl_03c.configure(text=self.current_current_value)

        if var_file not in self.container_spike_values:
            self.container_spike_values[var_file] = {}
        if var_isotope not in self.container_spike_values[var_file]:
            self.container_spike_values[var_file][var_isotope] = {"RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
        if self.current_original_value not in self.container_spike_values[var_file][var_isotope]["RAW"]:
            self.container_spike_values[var_file][var_isotope]["RAW"].append(self.current_original_value)
        if self.current_suggested_value not in self.container_spike_values[var_file][var_isotope]["SMOOTHED"]:
            self.container_spike_values[var_file][var_isotope]["SMOOTHED"].append(self.current_suggested_value)
        if self.current_suggested_value not in self.container_spike_values[var_file][var_isotope]["Current"]:
            self.container_spike_values[var_file][var_isotope]["Current"].append(self.current_current_value)

        if mode != None:
            for var_file in self.container_lists[mode]["Short"]:
                if var_file not in self.container_spike_values:
                    self.container_spike_values[var_file] = {}
                list_spk_isotopes = self.check_spikes_isotope(var_file=var_file)
                for var_isotope in list_spk_isotopes:
                    if var_isotope not in self.container_spike_values[var_file]:
                        self.container_spike_values[var_file][var_isotope] = {
                            "RAW": [], "SMOOTHED": [], "Current": [], "Save": {}}
                    for var_id in self.container_spikes[var_file][var_isotope]["Indices"]:
                        val_id = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][var_id]
                        self.container_spike_values[var_file][var_isotope]["Save"][var_id] = val_id

        self.show_spike_diagram()

    def change_spk_isotope(self, var_opt_iso):
        var_isotope = var_opt_iso
        self.var_opt_spk_iso.set(var_isotope)
        self.current_isotope = var_isotope
        self.scl_01.set(1)

        self.show_spike_data()

    def change_spk_id(self, mode=None):
        current_id = self.scl_01.get()
        var_id_real = self.list_indices[current_id - 1]
        var_file = self.currest_file_spk
        var_isotope = self.var_opt_spk_iso.get()
        val_original = self.container_spikes[var_file][var_isotope]["Data RAW"][var_id_real]
        val_corrected = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][var_id_real]

        if len(self.container_spike_values[var_file][var_isotope]["Current"]) < current_id:
            val_current = val_corrected
        else:
            val_current = self.container_spike_values[var_file][var_isotope]["Current"][current_id - 1]

        if var_file not in self.container_spike_values:
            self.container_spike_values[var_file] = {}
        if var_isotope not in self.container_spike_values[var_file]:
            self.container_spike_values[var_file][var_isotope] = {"RAW": [], "SMOOTHED": [], "Current": []}
        if val_original not in self.container_spike_values[var_file][var_isotope]["RAW"]:
            self.container_spike_values[var_file][var_isotope]["RAW"].append(val_original)
        if val_corrected not in self.container_spike_values[var_file][var_isotope]["SMOOTHED"]:
            self.container_spike_values[var_file][var_isotope]["SMOOTHED"].append(val_corrected)
        if val_corrected not in self.container_spike_values[var_file][var_isotope]["Current"]:
            self.container_spike_values[var_file][var_isotope]["Current"].append(val_current)

        self.lbl_03a.config(text=val_original)
        self.lbl_03b.config(text=val_corrected)
        self.lbl_03c.configure(text=val_current)

        self.show_spike_diagram()

    def change_file_spk(self, mode):
        if mode == "Next":
            if self.currest_file_spk in self.container_lists["STD"]["Short"]:
                var_filetype = "STD"
            else:
                var_filetype = "SMPL"

            if self.current_file_id < len(self.container_lists[var_filetype]["Short"]) - 1:
                self.current_file_id += 1
            elif self.current_file_id == len(self.container_lists[var_filetype]["Short"]) - 1:
                self.current_file_id = 0

            self.currest_file_spk = self.container_lists[var_filetype]["Short"][self.current_file_id]
            self.lbl_01a.configure(text=self.currest_file_spk)
        elif mode == "Before":
            if self.currest_file_spk in self.container_lists["STD"]["Short"]:
                var_filetype = "STD"
            else:
                var_filetype = "SMPL"

            if self.current_file_id > 0:
                self.current_file_id -= 1
            elif self.current_file_id == 0:
                self.current_file_id = len(self.container_lists[var_filetype]["Short"]) - 1

            self.currest_file_spk = self.container_lists[var_filetype]["Short"][self.current_file_id]
            self.lbl_01a.configure(text=self.currest_file_spk)

        possible_spk_isotopes = self.check_spikes_isotope()
        if len(possible_spk_isotopes) > 0:
            self.var_opt_spk_iso.set(possible_spk_isotopes[0])
            self.current_isotope = possible_spk_isotopes[0]
        else:
            self.var_opt_spk_iso.set("No isotope")
            self.current_isotope = "No isotope"
        if len(possible_spk_isotopes) > 0:
            self.scl_01.set(1)

            for index, isotope in enumerate(possible_spk_isotopes):
                if index == 0:
                    self.opt_02a["menu"].delete(0, "end")
                #
                self.opt_02a["menu"].add_command(
                    label=isotope, command=lambda var_opt_iso=isotope: self.change_spk_isotope(var_opt_iso))

            self.show_spike_data()

    def replace_spike_value(self, mode):
        current_id = self.scl_01.get()
        var_id_real = self.list_indices[current_id - 1]
        var_file = self.currest_file_spk
        var_isotope = self.current_isotope
        val_original = self.container_spike_values[var_file][var_isotope]["RAW"][current_id - 1]
        val_corrected = self.container_spike_values[var_file][var_isotope]["SMOOTHED"][current_id - 1]

        if mode == "RAW":
            val_updated = val_original
        else:
            val_updated = val_corrected

        self.container_spikes[var_file][var_isotope]["Data SMOOTHED"][var_id_real] = val_updated
        self.container_spike_values[var_file][var_isotope]["Current"][current_id - 1] = val_updated
        self.lbl_03c.configure(text=val_updated)
        self.container_spike_values[var_file][var_isotope]["Save"][var_id_real] = val_updated

        self.show_spike_diagram()

    def show_spike_diagram(self):
        try:
            if self.canvas_spikes == None:
                self.canvas_spikes.get_tk_widget().grid_remove()
                self.toolbarFrame_spikes.grid_remove()
        except AttributeError:
            pass

        var_file = self.currest_file_spk
        var_isotope = self.current_isotope
        current_id = self.scl_01.get()
        var_id_real = self.list_indices[current_id - 1]

        ## Diagram
        self.fig_spikes = Figure(figsize=(10, 5), tight_layout=True, facecolor=self.bg_colors["Very Light"])
        self.ax_spikes = self.fig_spikes.add_subplot(label=np.random.uniform())

        self.canvas_spikes = FigureCanvasTkAgg(self.fig_spikes, master=self.subwindow_spike_check)
        self.canvas_spikes.get_tk_widget().grid(row=0, column=12, rowspan=22, columnspan=33, sticky="nesw")
        self.toolbarFrame_spikes = tk.Frame(master=self.subwindow_spike_check)
        self.toolbarFrame_spikes.grid(row=22, column=12, rowspan=2, columnspan=33, sticky="w")
        self.toolbar_spikes = NavigationToolbar2Tk(self.canvas_spikes, self.toolbarFrame_spikes)
        self.toolbar_spikes.config(background=self.bg_colors["Very Light"])
        self.toolbar_spikes._message_label.config(background=self.bg_colors["Very Light"])
        self.toolbar_spikes.winfo_children()[-2].config(background=self.bg_colors["Very Light"])

        data_x = self.container_spikes[var_file][var_isotope]["Times"]
        x_max = max(data_x)
        data_y_raw = self.container_spikes[var_file][var_isotope]["Data RAW"]
        data_y_smoothed = self.container_spikes[var_file][var_isotope]["Data SMOOTHED"]
        y_min = min(data_y_raw)
        y_max = max(data_y_raw)

        self.ax_spikes.plot(data_x, data_y_raw, color=self.bg_colors["Super Dark"], label="Original data", linewidth=2)
        self.ax_spikes.plot(data_x, data_y_smoothed, color=self.accent_color, label="Smoothed data", linewidth=2)
        self.ax_spikes.axvline(x=data_x[var_id_real], color=self.bg_colors["Medium"], label="Current spike",
                               linewidth=2, linestyle="dotted")

        self.ax_spikes.grid(True)
        self.ax_spikes.set_yscale("log")
        self.ax_spikes.set_xlim(left=0, right=x_max)
        self.ax_spikes.set_xticks(np.arange(0, x_max, 20))
        if abs(0.1*y_min) > 0:
            y_min_log = abs(0.1*y_min)
        else:
            y_min_log = 1*10**(1)
        self.ax_spikes.set_ylim(bottom=y_min_log, top=1.5*y_max)
        self.ax_spikes.grid(which="major", linestyle="-", linewidth=1)
        self.ax_spikes.minorticks_on()
        self.ax_spikes.grid(which="minor", linestyle=":", linewidth=0.5, alpha=0.75)
        self.ax_spikes.set_axisbelow(True)
        self.ax_spikes.set_title(var_file, fontsize=9)
        self.ax_spikes.set_xlabel("Experiment Time $t$ (s)", labelpad=0.5, fontsize=8)
        self.ax_spikes.set_ylabel("Signal Intensity Ratio $I$ (cps/cps)", labelpad=0.5, fontsize=8)
        self.ax_spikes.xaxis.set_tick_params(labelsize=8)
        self.ax_spikes.yaxis.set_tick_params(labelsize=8)

        self.leg_spikes = self.fig_spikes.legend(loc="upper left", fontsize="x-small", bbox_to_anchor=(0.075, 0.925))
        self.leg_spikes.set_in_layout(False)
        self.fig_spikes.tight_layout()

        self.canvas_spikes.draw()

########################################################################################################################
# MELT INCLUSION ANALYSIS ##############################################################################################
########################################################################################################################
    #
    #
########################################################################################################################
    #
    def create_container_results(self, var_filetype, var_file_short, mode="MA"):
        ## Intensity
        if mode == "MA":
            self.container_intensity[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}}
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {}}
        else:
            self.container_intensity[var_filetype]["RAW"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}}
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}}
        ## Intensity Ratio
        if mode == "MA":
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}}
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {}}
        else:
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}}
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short] = {
                "BG": {}, "MAT": {}, "INCL": {}}
        ## Intensity Corrected
        if mode == "MA":
            self.container_intensity_corrected[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}}
            self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {}}
        else:
            self.container_intensity_corrected[var_filetype]["RAW"][var_file_short] = {"BG": {}, "MAT": {}, "INCL": {}}
            self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short] = {"BG": {}, "MAT": {},
                                                                                            "INCL": {}}
        ## Intensity MIX
        if mode != "MA":
            self.container_intensity_mix[var_filetype]["RAW"][var_file_short] = {}
            self.container_intensity_mix[var_filetype]["SMOOTHED"][var_file_short] = {}
        ## Normalized Sensitivity
        if mode == "MA":
            self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
        ## Analytical Sensitivity
        if mode == "MA":
            self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
        ## Relative Sensitivity Factor
        if mode == "MA":
            self.container_rsf[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_rsf[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_rsf[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}, "MIX": {}}
            self.container_rsf[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}, "MIX": {}}
        ## Concentration
        if mode == "MA":
            self.container_concentration[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_concentration[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_concentration[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}, "MIX": {},
                                                                                 "Matrix-Only": {}, "Second-Internal": {}}
            self.container_concentration[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}, "MIX": {},
                                                                                      "Matrix-Only": {}, "Second-Internal": {}}
            #
            if var_filetype == "SMPL":
                self.container_mixed_concentration[var_filetype]["RAW"][var_file_short] = {}
                self.container_mixed_concentration[var_filetype]["SMOOTHED"][var_file_short] = {}
        ## Concentration Ratio
        if mode == "MA":
            self.container_concentration_ratio[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_concentration_ratio[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
            #
            if var_filetype == "SMPL":
                self.container_mixed_concentration_ratio[var_filetype]["RAW"][var_file_short] = {}
                self.container_mixed_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short] = {}
                self.container_mixing_ratio[var_filetype]["RAW"][var_file_short] = {}
                self.container_mixing_ratio[var_filetype]["SMOOTHED"][var_file_short] = {}
        ## Limit of Detection
        if mode == "MA":
            self.container_lod[var_filetype]["RAW"][var_file_short] = {"MAT": {}}
            self.container_lod[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}}
        else:
            self.container_lod[var_filetype]["RAW"][var_file_short] = {"MAT": {}, "INCL": {}}
            self.container_lod[var_filetype]["SMOOTHED"][var_file_short] = {"MAT": {}, "INCL": {}}
        #
        for isotope in self.container_lists["ISOTOPES"]:
            self.container_measurements["EDITED"][var_file_short][isotope] = {}
            self.container_measurements["EDITED"][var_file_short][isotope]["BG"] = []
            self.container_measurements["EDITED"][var_file_short][isotope]["MAT"] = []
            #
            ## Intensity
            self.container_intensity[var_filetype]["RAW"][var_file_short]["BG"][isotope] = None
            self.container_intensity[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["BG"][isotope] = None
            self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_intensity[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_intensity[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Intensity Corrected
            self.container_intensity_corrected[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_intensity_corrected[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_intensity_corrected[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Intensity Ratio
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short]["BG"][isotope] = None
            self.container_intensity_ratio[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short]["BG"][isotope] = None
            self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_intensity_ratio[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_intensity_ratio[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Intensity MIX
            if mode != "MA":
                self.container_intensity_mix[var_filetype]["RAW"][var_file_short][isotope] = None
                self.container_intensity_mix[var_filetype]["SMOOTHED"][var_file_short][isotope] = None
            ## Normalized Sensitivity
            self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_normalized_sensitivity[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_normalized_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Analytical Sensitivity
            self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_analytical_sensitivity[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_analytical_sensitivity[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Relative Sensitivity Factor
            self.container_rsf[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_rsf[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_rsf[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_rsf[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Concentration
            self.container_concentration[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_concentration[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
                self.container_concentration[var_filetype]["RAW"][var_file_short]["Matrix-Only"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["Matrix-Only"][isotope] = None
                self.container_concentration[var_filetype]["RAW"][var_file_short]["Second-Internal"][isotope] = None
                self.container_concentration[var_filetype]["SMOOTHED"][var_file_short]["Second-Internal"][isotope] = None
            ## Concentration Ratio
            self.container_concentration_ratio[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_concentration_ratio[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_concentration_ratio[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
            ## Limit of Detection
            self.container_lod[var_filetype]["RAW"][var_file_short]["MAT"][isotope] = None
            self.container_lod[var_filetype]["SMOOTHED"][var_file_short]["MAT"][isotope] = None
            #
            if mode != "MA":
                self.container_lod[var_filetype]["RAW"][var_file_short]["INCL"][isotope] = None
                self.container_lod[var_filetype]["SMOOTHED"][var_file_short]["INCL"][isotope] = None
    #
if __name__ == "__main__":
    root = tk.Tk()
    #
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    #
    PySILLS(parent=root, var_screen_width=screen_width, var_screen_height=screen_height)
    #
    root.mainloop()